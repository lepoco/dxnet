// <auto-generated/>

namespace DXNET.DXGI
{
    [System.Runtime.InteropServices.GuidAttribute("2411e7e1-12ac-4ccf-bd14-9798e8534dc0")]
    public partial class Adapter : DXNET.DXGI.DXGIObject
    {
        public Adapter(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Adapter(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Adapter(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public DXNET.DXGI.AdapterDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "output">No documentation.</param>
        /// <param name = "outputOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIAdapter::EnumOutputs([In] unsigned int Output,[Out] IDXGIOutput** ppOutput)</unmanaged>
        /// <unmanaged-short>IDXGIAdapter::EnumOutputs</unmanaged-short>
        internal unsafe DXNET.Result GetOutput(System.Int32 output, out DXNET.DXGI.Output outputOut)
        {
            System.IntPtr outputOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, output, &outputOut_, (*(void ***)this._nativePointer)[7]);
            if (outputOut_ != System.IntPtr.Zero)
                outputOut = new DXNET.DXGI.Output(outputOut_);
            else
                outputOut = null;
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIAdapter::GetDesc([Out] DXGI_ADAPTER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>IDXGIAdapter::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out DXNET.DXGI.AdapterDescription descRef)
        {
            DXNET.DXGI.AdapterDescription.__Native descRef_ = default (DXNET.DXGI.AdapterDescription.__Native);
            descRef = default (DXNET.DXGI.AdapterDescription);
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[8]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "interfaceName">No documentation.</param>
        /// <param name = "uMDVersionRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] const GUID&amp; InterfaceName,[Out] LARGE_INTEGER* pUMDVersion)</unmanaged>
        /// <unmanaged-short>IDXGIAdapter::CheckInterfaceSupport</unmanaged-short>
        internal unsafe DXNET.Result CheckInterfaceSupport(System.Guid interfaceName, out System.Int64 uMDVersionRef)
        {
            DXNET.Result __result__;
            fixed (void *uMDVersionRef_ = &uMDVersionRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &interfaceName, uMDVersionRef_, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("29038f61-3839-4626-91fd-086879011a05")]
    public partial class Adapter1 : DXNET.DXGI.Adapter
    {
        public Adapter1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Adapter1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Adapter1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDesc1</unmanaged>
        /// <unmanaged-short>GetDesc1</unmanaged-short>
        public DXNET.DXGI.AdapterDescription1 Description1
        {
            get
            {
                GetDescription1(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIAdapter1::GetDesc1([Out] DXGI_ADAPTER_DESC1* pDesc)</unmanaged>
        /// <unmanaged-short>IDXGIAdapter1::GetDesc1</unmanaged-short>
        internal unsafe void GetDescription1(out DXNET.DXGI.AdapterDescription1 descRef)
        {
            DXNET.DXGI.AdapterDescription1.__Native descRef_ = default (DXNET.DXGI.AdapterDescription1.__Native);
            descRef = default (DXNET.DXGI.AdapterDescription1);
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[10]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("0AA1AE0A-FA0E-4B84-8644-E05FF8E5ACB5")]
    public partial class Adapter2 : DXNET.DXGI.Adapter1
    {
        public Adapter2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Adapter2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Adapter2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDesc2</unmanaged>
        /// <unmanaged-short>GetDesc2</unmanaged-short>
        public DXNET.DXGI.AdapterDescription2 Description2
        {
            get
            {
                GetDescription2(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIAdapter2::GetDesc2([Out] DXGI_ADAPTER_DESC2* pDesc)</unmanaged>
        /// <unmanaged-short>IDXGIAdapter2::GetDesc2</unmanaged-short>
        internal unsafe void GetDescription2(out DXNET.DXGI.AdapterDescription2 descRef)
        {
            DXNET.DXGI.AdapterDescription2.__Native descRef_ = default (DXNET.DXGI.AdapterDescription2.__Native);
            descRef = default (DXNET.DXGI.AdapterDescription2);
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[11]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("645967A4-1392-4310-A798-8053CE3E93FD")]
    public partial class Adapter3 : DXNET.DXGI.Adapter2
    {
        public Adapter3(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Adapter3(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Adapter3(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hEvent">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIAdapter3::RegisterHardwareContentProtectionTeardownStatusEvent([In] void* hEvent,[Out] DWORD* pdwCookie)</unmanaged>
        /// <unmanaged-short>IDXGIAdapter3::RegisterHardwareContentProtectionTeardownStatusEvent</unmanaged-short>
        public unsafe System.Int32 RegisterHardwareContentProtectionTeardownStatusEvent(System.IntPtr hEvent)
        {
            System.Int32 dwCookieRef;
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hEvent, &dwCookieRef, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
            return dwCookieRef;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwCookie">No documentation.</param>
        /// <unmanaged>void IDXGIAdapter3::UnregisterHardwareContentProtectionTeardownStatus([In] DWORD dwCookie)</unmanaged>
        /// <unmanaged-short>IDXGIAdapter3::UnregisterHardwareContentProtectionTeardownStatus</unmanaged-short>
        public unsafe void UnregisterHardwareContentProtectionTeardownStatus(System.Int32 dwCookie)
        {
            DXNET.DXGI.LocalInterop.CalliStdCallvoid(this._nativePointer, dwCookie, (*(void ***)this._nativePointer)[13]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "nodeIndex">No documentation.</param>
        /// <param name = "memorySegmentGroup">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIAdapter3::QueryVideoMemoryInfo([In] unsigned int NodeIndex,[In] DXGI_MEMORY_SEGMENT_GROUP MemorySegmentGroup,[Out] DXGI_QUERY_VIDEO_MEMORY_INFO* pVideoMemoryInfo)</unmanaged>
        /// <unmanaged-short>IDXGIAdapter3::QueryVideoMemoryInfo</unmanaged-short>
        public unsafe DXNET.DXGI.QueryVideoMemoryInformation QueryVideoMemoryInfo(System.Int32 nodeIndex, DXNET.DXGI.MemorySegmentGroup memorySegmentGroup)
        {
            DXNET.DXGI.QueryVideoMemoryInformation videoMemoryInfoRef;
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, nodeIndex, unchecked ((System.Int32)memorySegmentGroup), &videoMemoryInfoRef, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
            return videoMemoryInfoRef;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "nodeIndex">No documentation.</param>
        /// <param name = "memorySegmentGroup">No documentation.</param>
        /// <param name = "reservation">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIAdapter3::SetVideoMemoryReservation([In] unsigned int NodeIndex,[In] DXGI_MEMORY_SEGMENT_GROUP MemorySegmentGroup,[In] unsigned longlong Reservation)</unmanaged>
        /// <unmanaged-short>IDXGIAdapter3::SetVideoMemoryReservation</unmanaged-short>
        public unsafe void SetVideoMemoryReservation(System.Int32 nodeIndex, DXNET.DXGI.MemorySegmentGroup memorySegmentGroup, System.Int64 reservation)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, nodeIndex, unchecked ((System.Int32)memorySegmentGroup), reservation, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hEvent">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIAdapter3::RegisterVideoMemoryBudgetChangeNotificationEvent([In] void* hEvent,[Out] DWORD* pdwCookie)</unmanaged>
        /// <unmanaged-short>IDXGIAdapter3::RegisterVideoMemoryBudgetChangeNotificationEvent</unmanaged-short>
        public unsafe System.Int32 RegisterVideoMemoryBudgetChangeNotificationEvent(System.IntPtr hEvent)
        {
            System.Int32 dwCookieRef;
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hEvent, &dwCookieRef, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
            return dwCookieRef;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwCookie">No documentation.</param>
        /// <unmanaged>void IDXGIAdapter3::UnregisterVideoMemoryBudgetChangeNotification([In] DWORD dwCookie)</unmanaged>
        /// <unmanaged-short>IDXGIAdapter3::UnregisterVideoMemoryBudgetChangeNotification</unmanaged-short>
        public unsafe void UnregisterVideoMemoryBudgetChangeNotification(System.Int32 dwCookie)
        {
            DXNET.DXGI.LocalInterop.CalliStdCallvoid(this._nativePointer, dwCookie, (*(void ***)this._nativePointer)[17]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3c8d99d1-4fbf-4181-a82c-af66bf7bd24e")]
    public partial class Adapter4 : DXNET.DXGI.Adapter3
    {
        public Adapter4(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Adapter4(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Adapter4(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDesc3</unmanaged>
        /// <unmanaged-short>GetDesc3</unmanaged-short>
        public DXNET.DXGI.AdapterDescription3 Desc3
        {
            get
            {
                GetDesc3(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIAdapter4::GetDesc3([Out] DXGI_ADAPTER_DESC3* pDesc)</unmanaged>
        /// <unmanaged-short>IDXGIAdapter4::GetDesc3</unmanaged-short>
        internal unsafe void GetDesc3(out DXNET.DXGI.AdapterDescription3 descRef)
        {
            DXNET.DXGI.AdapterDescription3.__Native descRef_ = default (DXNET.DXGI.AdapterDescription3.__Native);
            descRef = default (DXNET.DXGI.AdapterDescription3);
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[18]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2633066b-4514-4c7a-8fd8-12ea98059d18")]
    public partial class DecodeSwapChain : DXNET.ComObject
    {
        public DecodeSwapChain(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DecodeSwapChain(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DecodeSwapChain(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSourceRect / SetSourceRect</unmanaged>
        /// <unmanaged-short>GetSourceRect</unmanaged-short>
        public DXNET.Mathematics.Interop.RawRectangle SourceRect
        {
            get
            {
                GetSourceRect(out var __output__);
                return __output__;
            }

            set => SetSourceRect(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetTargetRect / SetTargetRect</unmanaged>
        /// <unmanaged-short>GetTargetRect</unmanaged-short>
        public DXNET.Mathematics.Interop.RawRectangle TargetRect
        {
            get
            {
                GetTargetRect(out var __output__);
                return __output__;
            }

            set => SetTargetRect(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetColorSpace / SetColorSpace</unmanaged>
        /// <unmanaged-short>GetColorSpace</unmanaged-short>
        public DXNET.DXGI.MultiplaneOverlayYCbCrFlags ColorSpace
        {
            get => GetColorSpace();
            set => SetColorSpace(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bufferToPresent">No documentation.</param>
        /// <param name = "syncInterval">No documentation.</param>
        /// <param name = "flags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::PresentBuffer([In] unsigned int BufferToPresent,[In] unsigned int SyncInterval,[In] unsigned int Flags)</unmanaged>
        /// <unmanaged-short>IDXGIDecodeSwapChain::PresentBuffer</unmanaged-short>
        public unsafe void PresentBuffer(System.Int32 bufferToPresent, System.Int32 syncInterval, System.Int32 flags)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, bufferToPresent, syncInterval, flags, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rectRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::SetSourceRect([In] const RECT* pRect)</unmanaged>
        /// <unmanaged-short>IDXGIDecodeSwapChain::SetSourceRect</unmanaged-short>
        internal unsafe void SetSourceRect(DXNET.Mathematics.Interop.RawRectangle rectRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &rectRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rectRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::SetTargetRect([In] const RECT* pRect)</unmanaged>
        /// <unmanaged-short>IDXGIDecodeSwapChain::SetTargetRect</unmanaged-short>
        internal unsafe void SetTargetRect(DXNET.Mathematics.Interop.RawRectangle rectRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &rectRef, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "width">No documentation.</param>
        /// <param name = "height">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::SetDestSize([In] unsigned int Width,[In] unsigned int Height)</unmanaged>
        /// <unmanaged-short>IDXGIDecodeSwapChain::SetDestSize</unmanaged-short>
        public unsafe void SetDestSize(System.Int32 width, System.Int32 height)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, width, height, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rectRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::GetSourceRect([Out] RECT* pRect)</unmanaged>
        /// <unmanaged-short>IDXGIDecodeSwapChain::GetSourceRect</unmanaged-short>
        internal unsafe void GetSourceRect(out DXNET.Mathematics.Interop.RawRectangle rectRef)
        {
            rectRef = default (DXNET.Mathematics.Interop.RawRectangle);
            DXNET.Result __result__;
            fixed (void *rectRef_ = &rectRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, rectRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rectRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::GetTargetRect([Out] RECT* pRect)</unmanaged>
        /// <unmanaged-short>IDXGIDecodeSwapChain::GetTargetRect</unmanaged-short>
        internal unsafe void GetTargetRect(out DXNET.Mathematics.Interop.RawRectangle rectRef)
        {
            rectRef = default (DXNET.Mathematics.Interop.RawRectangle);
            DXNET.Result __result__;
            fixed (void *rectRef_ = &rectRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, rectRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "widthRef">No documentation.</param>
        /// <param name = "heightRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::GetDestSize([Out] unsigned int* pWidth,[Out] unsigned int* pHeight)</unmanaged>
        /// <unmanaged-short>IDXGIDecodeSwapChain::GetDestSize</unmanaged-short>
        public unsafe void GetDestSize(out System.Int32 widthRef, out System.Int32 heightRef)
        {
            DXNET.Result __result__;
            fixed (void *heightRef_ = &heightRef)
                fixed (void *widthRef_ = &widthRef)
                    __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, widthRef_, heightRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "colorSpace">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::SetColorSpace([In] DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS ColorSpace)</unmanaged>
        /// <unmanaged-short>IDXGIDecodeSwapChain::SetColorSpace</unmanaged-short>
        internal unsafe void SetColorSpace(DXNET.DXGI.MultiplaneOverlayYCbCrFlags colorSpace)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)colorSpace), (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS IDXGIDecodeSwapChain::GetColorSpace()</unmanaged>
        /// <unmanaged-short>IDXGIDecodeSwapChain::GetColorSpace</unmanaged-short>
        internal unsafe DXNET.DXGI.MultiplaneOverlayYCbCrFlags GetColorSpace()
        {
            DXNET.DXGI.MultiplaneOverlayYCbCrFlags __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallSharpDXDXGIMultiplaneOverlayYCbCrFlags(this._nativePointer, (*(void ***)this._nativePointer)[11]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("54ec77fa-1377-44e6-8c32-88fd5f44c84c")]
    public partial class Device : DXNET.DXGI.DXGIObject
    {
        public Device(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Device(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Device(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetAdapter</unmanaged>
        /// <unmanaged-short>GetAdapter</unmanaged-short>
        public DXNET.DXGI.Adapter Adapter
        {
            get
            {
                GetAdapter(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetGPUThreadPriority / SetGPUThreadPriority</unmanaged>
        /// <unmanaged-short>GetGPUThreadPriority</unmanaged-short>
        public System.Int32 GPUThreadPriority
        {
            get
            {
                GetGPUThreadPriority(out var __output__);
                return __output__;
            }

            set => SetGPUThreadPriority(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "adapterRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice::GetAdapter([Out] IDXGIAdapter** pAdapter)</unmanaged>
        /// <unmanaged-short>IDXGIDevice::GetAdapter</unmanaged-short>
        internal unsafe void GetAdapter(out DXNET.DXGI.Adapter adapterRef)
        {
            System.IntPtr adapterRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &adapterRef_, (*(void ***)this._nativePointer)[7]);
            if (adapterRef_ != System.IntPtr.Zero)
                adapterRef = new DXNET.DXGI.Adapter(adapterRef_);
            else
                adapterRef = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "descRef">No documentation.</param>
        /// <param name = "numSurfaces">No documentation.</param>
        /// <param name = "usage">No documentation.</param>
        /// <param name = "sharedResourceRef">No documentation.</param>
        /// <param name = "surfaceOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice::CreateSurface([In] const DXGI_SURFACE_DESC* pDesc,[In] unsigned int NumSurfaces,[In] unsigned int Usage,[In, Optional] const DXGI_SHARED_RESOURCE* pSharedResource,[Out] IDXGISurface** ppSurface)</unmanaged>
        /// <unmanaged-short>IDXGIDevice::CreateSurface</unmanaged-short>
        internal unsafe void CreateSurface(ref DXNET.DXGI.SurfaceDescription descRef, System.Int32 numSurfaces, System.Int32 usage, DXNET.DXGI.SharedResource? sharedResourceRef, out DXNET.DXGI.Surface surfaceOut)
        {
            DXNET.DXGI.SharedResource sharedResourceRef_;
            System.IntPtr surfaceOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (sharedResourceRef != null)
                sharedResourceRef_ = sharedResourceRef.Value;
            fixed (void *descRef_ = &descRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, descRef_, numSurfaces, usage, sharedResourceRef == null ? (void *)0 : &sharedResourceRef_, &surfaceOut_, (*(void ***)this._nativePointer)[8]);
            if (surfaceOut_ != System.IntPtr.Zero)
                surfaceOut = new DXNET.DXGI.Surface(surfaceOut_);
            else
                surfaceOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "resourcesOut">No documentation.</param>
        /// <param name = "residencyStatusRef">No documentation.</param>
        /// <param name = "numResources">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[In] unsigned int NumResources)</unmanaged>
        /// <unmanaged-short>IDXGIDevice::QueryResourceResidency</unmanaged-short>
        internal unsafe void QueryResourceResidency(DXNET.IUnknown[] resourcesOut, DXNET.DXGI.Residency[] residencyStatusRef, System.Int32 numResources)
        {
            System.IntPtr*resourcesOut_;
            resourcesOut_ = (System.IntPtr*)0;
            if (resourcesOut != null)
            {
                System.IntPtr*_resourcesOut = stackalloc System.IntPtr[resourcesOut.Length];
                resourcesOut_ = _resourcesOut;
            }

            DXNET.Result __result__;
            if (resourcesOut != null)
                for (int i = 0; i < resourcesOut.Length; ++i)
                    (resourcesOut_)[i] = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(resourcesOut[i]);
            fixed (void *residencyStatusRef_ = residencyStatusRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourcesOut_, residencyStatusRef_, numResources, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "priority">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice::SetGPUThreadPriority([In] int Priority)</unmanaged>
        /// <unmanaged-short>IDXGIDevice::SetGPUThreadPriority</unmanaged-short>
        internal unsafe void SetGPUThreadPriority(System.Int32 priority)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, priority, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "priorityRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice::GetGPUThreadPriority([Out] int* pPriority)</unmanaged>
        /// <unmanaged-short>IDXGIDevice::GetGPUThreadPriority</unmanaged-short>
        internal unsafe void GetGPUThreadPriority(out System.Int32 priorityRef)
        {
            DXNET.Result __result__;
            fixed (void *priorityRef_ = &priorityRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, priorityRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("77db970f-6276-48ba-ba28-070143b4392c")]
    public partial class Device1 : DXNET.DXGI.Device
    {
        public Device1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Device1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Device1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMaximumFrameLatency / SetMaximumFrameLatency</unmanaged>
        /// <unmanaged-short>GetMaximumFrameLatency</unmanaged-short>
        public System.Int32 MaximumFrameLatency
        {
            get
            {
                GetMaximumFrameLatency(out var __output__);
                return __output__;
            }

            set => SetMaximumFrameLatency(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "maxLatency">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice1::SetMaximumFrameLatency([In] unsigned int MaxLatency)</unmanaged>
        /// <unmanaged-short>IDXGIDevice1::SetMaximumFrameLatency</unmanaged-short>
        internal unsafe void SetMaximumFrameLatency(System.Int32 maxLatency)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, maxLatency, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "maxLatencyRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice1::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>
        /// <unmanaged-short>IDXGIDevice1::GetMaximumFrameLatency</unmanaged-short>
        internal unsafe void GetMaximumFrameLatency(out System.Int32 maxLatencyRef)
        {
            DXNET.Result __result__;
            fixed (void *maxLatencyRef_ = &maxLatencyRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, maxLatencyRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("05008617-fbfd-4051-a790-144884b4f6a9")]
    public partial class Device2 : DXNET.DXGI.Device1
    {
        public Device2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Device2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Device2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "numResources">No documentation.</param>
        /// <param name = "resourcesOut">No documentation.</param>
        /// <param name = "priority">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice2::OfferResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority)</unmanaged>
        /// <unmanaged-short>IDXGIDevice2::OfferResources</unmanaged-short>
        public unsafe void OfferResources(System.Int32 numResources, DXNET.DXGI.Resource[] resourcesOut, DXNET.DXGI.OfferResourcePriority priority)
        {
            System.IntPtr*resourcesOut_;
            resourcesOut_ = (System.IntPtr*)0;
            if (resourcesOut != null)
            {
                System.IntPtr*_resourcesOut = stackalloc System.IntPtr[resourcesOut.Length];
                resourcesOut_ = _resourcesOut;
            }

            DXNET.Result __result__;
            if (resourcesOut != null)
                for (int i = 0; i < resourcesOut.Length; ++i)
                    (resourcesOut_)[i] = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Resource>(resourcesOut[i]);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, numResources, (void *)resourcesOut_, unchecked ((System.Int32)priority), (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "numResources">No documentation.</param>
        /// <param name = "resourcesOut">No documentation.</param>
        /// <param name = "discardedRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice2::ReclaimResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer, Optional] BOOL* pDiscarded)</unmanaged>
        /// <unmanaged-short>IDXGIDevice2::ReclaimResources</unmanaged-short>
        public unsafe void ReclaimResources(System.Int32 numResources, DXNET.DXGI.Resource[] resourcesOut, DXNET.Mathematics.Interop.RawBool[] discardedRef)
        {
            System.IntPtr*resourcesOut_;
            resourcesOut_ = (System.IntPtr*)0;
            if (resourcesOut != null)
            {
                System.IntPtr*_resourcesOut = stackalloc System.IntPtr[resourcesOut.Length];
                resourcesOut_ = _resourcesOut;
            }

            DXNET.Result __result__;
            if (resourcesOut != null)
                for (int i = 0; i < resourcesOut.Length; ++i)
                    (resourcesOut_)[i] = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Resource>(resourcesOut[i]);
            fixed (void *discardedRef_ = discardedRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, numResources, (void *)resourcesOut_, discardedRef_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hEvent">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice2::EnqueueSetEvent([In] void* hEvent)</unmanaged>
        /// <unmanaged-short>IDXGIDevice2::EnqueueSetEvent</unmanaged-short>
        public unsafe void EnqueueSetEvent(System.IntPtr hEvent)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hEvent, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "numResources">No documentation.</param>
        /// <param name = "resourcesOut">No documentation.</param>
        /// <param name = "priority">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice2::OfferResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority)</unmanaged>
        /// <unmanaged-short>IDXGIDevice2::OfferResources</unmanaged-short>
        public unsafe void OfferResources(System.Int32 numResources, DXNET.ComArray<DXNET.DXGI.Resource> resourcesOut, DXNET.DXGI.OfferResourcePriority priority)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, numResources, (void *)(resourcesOut?.NativePointer ?? System.IntPtr.Zero), unchecked ((System.Int32)priority), (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "numResources">No documentation.</param>
        /// <param name = "resourcesOut">No documentation.</param>
        /// <param name = "priority">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice2::OfferResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority)</unmanaged>
        /// <unmanaged-short>IDXGIDevice2::OfferResources</unmanaged-short>
        private unsafe void OfferResources(System.Int32 numResources, System.IntPtr resourcesOut, DXNET.DXGI.OfferResourcePriority priority)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, numResources, (void *)resourcesOut, unchecked ((System.Int32)priority), (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "numResources">No documentation.</param>
        /// <param name = "resourcesOut">No documentation.</param>
        /// <param name = "discardedRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice2::ReclaimResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer, Optional] BOOL* pDiscarded)</unmanaged>
        /// <unmanaged-short>IDXGIDevice2::ReclaimResources</unmanaged-short>
        public unsafe void ReclaimResources(System.Int32 numResources, DXNET.ComArray<DXNET.DXGI.Resource> resourcesOut, DXNET.Mathematics.Interop.RawBool[] discardedRef)
        {
            DXNET.Result __result__;
            fixed (void *discardedRef_ = discardedRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, numResources, (void *)(resourcesOut?.NativePointer ?? System.IntPtr.Zero), discardedRef_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "numResources">No documentation.</param>
        /// <param name = "resourcesOut">No documentation.</param>
        /// <param name = "discardedRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice2::ReclaimResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer, Optional] BOOL* pDiscarded)</unmanaged>
        /// <unmanaged-short>IDXGIDevice2::ReclaimResources</unmanaged-short>
        private unsafe void ReclaimResources(System.Int32 numResources, System.IntPtr resourcesOut, System.IntPtr discardedRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, numResources, (void *)resourcesOut, (void *)discardedRef, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("6007896c-3244-4afd-bf18-a6d3beda5023")]
    public partial class Device3 : DXNET.DXGI.Device2
    {
        public Device3(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Device3(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Device3(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>void IDXGIDevice3::Trim()</unmanaged>
        /// <unmanaged-short>IDXGIDevice3::Trim</unmanaged-short>
        public unsafe void Trim()
        {
            DXNET.DXGI.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[17]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("95B4F95F-D8DA-4CA4-9EE6-3B76D5968A10")]
    public partial class Device4 : DXNET.DXGI.Device3
    {
        public Device4(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Device4(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Device4(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "numResources">No documentation.</param>
        /// <param name = "resourcesOut">No documentation.</param>
        /// <param name = "priority">No documentation.</param>
        /// <param name = "flags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice4::OfferResources1([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority,[In] unsigned int Flags)</unmanaged>
        /// <unmanaged-short>IDXGIDevice4::OfferResources1</unmanaged-short>
        public unsafe void OfferResources1(System.Int32 numResources, DXNET.DXGI.Resource[] resourcesOut, DXNET.DXGI.OfferResourcePriority priority, System.Int32 flags)
        {
            System.IntPtr*resourcesOut_;
            resourcesOut_ = (System.IntPtr*)0;
            if (resourcesOut != null)
            {
                System.IntPtr*_resourcesOut = stackalloc System.IntPtr[resourcesOut.Length];
                resourcesOut_ = _resourcesOut;
            }

            DXNET.Result __result__;
            if (resourcesOut != null)
                for (int i = 0; i < resourcesOut.Length; ++i)
                    (resourcesOut_)[i] = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Resource>(resourcesOut[i]);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, numResources, (void *)resourcesOut_, unchecked ((System.Int32)priority), flags, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "numResources">No documentation.</param>
        /// <param name = "resourcesOut">No documentation.</param>
        /// <param name = "resultsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice4::ReclaimResources1([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer] DXGI_RECLAIM_RESOURCE_RESULTS* pResults)</unmanaged>
        /// <unmanaged-short>IDXGIDevice4::ReclaimResources1</unmanaged-short>
        public unsafe void ReclaimResources1(System.Int32 numResources, DXNET.DXGI.Resource[] resourcesOut, DXNET.DXGI.ReclaimResourceResults[] resultsRef)
        {
            System.IntPtr*resourcesOut_;
            resourcesOut_ = (System.IntPtr*)0;
            if (resourcesOut != null)
            {
                System.IntPtr*_resourcesOut = stackalloc System.IntPtr[resourcesOut.Length];
                resourcesOut_ = _resourcesOut;
            }

            DXNET.Result __result__;
            if (resourcesOut != null)
                for (int i = 0; i < resourcesOut.Length; ++i)
                    (resourcesOut_)[i] = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Resource>(resourcesOut[i]);
            fixed (void *resultsRef_ = resultsRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, numResources, (void *)resourcesOut_, resultsRef_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "numResources">No documentation.</param>
        /// <param name = "resourcesOut">No documentation.</param>
        /// <param name = "priority">No documentation.</param>
        /// <param name = "flags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice4::OfferResources1([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority,[In] unsigned int Flags)</unmanaged>
        /// <unmanaged-short>IDXGIDevice4::OfferResources1</unmanaged-short>
        public unsafe void OfferResources1(System.Int32 numResources, DXNET.ComArray<DXNET.DXGI.Resource> resourcesOut, DXNET.DXGI.OfferResourcePriority priority, System.Int32 flags)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, numResources, (void *)(resourcesOut?.NativePointer ?? System.IntPtr.Zero), unchecked ((System.Int32)priority), flags, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "numResources">No documentation.</param>
        /// <param name = "resourcesOut">No documentation.</param>
        /// <param name = "priority">No documentation.</param>
        /// <param name = "flags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice4::OfferResources1([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority,[In] unsigned int Flags)</unmanaged>
        /// <unmanaged-short>IDXGIDevice4::OfferResources1</unmanaged-short>
        private unsafe void OfferResources1(System.Int32 numResources, System.IntPtr resourcesOut, DXNET.DXGI.OfferResourcePriority priority, System.Int32 flags)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, numResources, (void *)resourcesOut, unchecked ((System.Int32)priority), flags, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "numResources">No documentation.</param>
        /// <param name = "resourcesOut">No documentation.</param>
        /// <param name = "resultsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice4::ReclaimResources1([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer] DXGI_RECLAIM_RESOURCE_RESULTS* pResults)</unmanaged>
        /// <unmanaged-short>IDXGIDevice4::ReclaimResources1</unmanaged-short>
        public unsafe void ReclaimResources1(System.Int32 numResources, DXNET.ComArray<DXNET.DXGI.Resource> resourcesOut, DXNET.DXGI.ReclaimResourceResults[] resultsRef)
        {
            DXNET.Result __result__;
            fixed (void *resultsRef_ = resultsRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, numResources, (void *)(resourcesOut?.NativePointer ?? System.IntPtr.Zero), resultsRef_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "numResources">No documentation.</param>
        /// <param name = "resourcesOut">No documentation.</param>
        /// <param name = "resultsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice4::ReclaimResources1([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer] DXGI_RECLAIM_RESOURCE_RESULTS* pResults)</unmanaged>
        /// <unmanaged-short>IDXGIDevice4::ReclaimResources1</unmanaged-short>
        private unsafe void ReclaimResources1(System.Int32 numResources, System.IntPtr resourcesOut, System.IntPtr resultsRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, numResources, (void *)resourcesOut, (void *)resultsRef, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3d3e0379-f9de-4d58-bb6c-18d62992f1a6")]
    public partial class DeviceChild : DXNET.DXGI.DXGIObject
    {
        public DeviceChild(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DeviceChild(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DeviceChild(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "riid">No documentation.</param>
        /// <param name = "deviceOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDeviceSubObject::GetDevice([In] const GUID&amp; riid,[Out] void** ppDevice)</unmanaged>
        /// <unmanaged-short>IDXGIDeviceSubObject::GetDevice</unmanaged-short>
        public unsafe void GetDevice(System.Guid riid, out System.IntPtr deviceOut)
        {
            DXNET.Result __result__;
            fixed (void *deviceOut_ = &deviceOut)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &riid, deviceOut_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ea9dbf1a-c88e-4486-854a-98aa0138f30c")]
    public partial class DisplayControl : DXNET.ComObject
    {
        public DisplayControl(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DisplayControl(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DisplayControl(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>IsStereoEnabled</unmanaged>
        /// <unmanaged-short>IsStereoEnabled</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsStereoEnabled
        {
            get => IsStereoEnabled_();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetStereoEnabled</unmanaged>
        /// <unmanaged-short>SetStereoEnabled</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool StereoEnabled
        {
            set => SetStereoEnabled(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDXGIDisplayControl::IsStereoEnabled()</unmanaged>
        /// <unmanaged-short>IDXGIDisplayControl::IsStereoEnabled</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool IsStereoEnabled_()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "enabled">No documentation.</param>
        /// <unmanaged>void IDXGIDisplayControl::SetStereoEnabled([In] BOOL enabled)</unmanaged>
        /// <unmanaged-short>IDXGIDisplayControl::SetStereoEnabled</unmanaged-short>
        internal unsafe void SetStereoEnabled(DXNET.Mathematics.Interop.RawBool enabled)
        {
            DXNET.DXGI.LocalInterop.CalliStdCallvoid0(this._nativePointer, enabled, (*(void ***)this._nativePointer)[4]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("119E7452-DE9E-40fe-8806-88F90C12B441")]
    public partial class DXGIDebug : DXNET.ComObject
    {
        public DXGIDebug(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DXGIDebug(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DXGIDebug(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "apiid">No documentation.</param>
        /// <param name = "flags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDebug::ReportLiveObjects([In] GUID apiid,[In] DXGI_DEBUG_RLO_FLAGS flags)</unmanaged>
        /// <unmanaged-short>IDXGIDebug::ReportLiveObjects</unmanaged-short>
        public unsafe void ReportLiveObjects(System.Guid apiid, DXNET.DXGI.DebugRloFlags flags)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, apiid, unchecked ((System.Int32)flags), (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("c5a05f0c-16f2-4adf-9f4d-a8c4d58ac550")]
    public partial class DXGIDebug1 : DXNET.DXGI.DXGIDebug
    {
        public DXGIDebug1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DXGIDebug1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DXGIDebug1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>IsLeakTrackingEnabledForThread</unmanaged>
        /// <unmanaged-short>IsLeakTrackingEnabledForThread</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsLeakTrackingEnabledForThread
        {
            get => IsLeakTrackingEnabledForThread_();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>void IDXGIDebug1::EnableLeakTrackingForThread()</unmanaged>
        /// <unmanaged-short>IDXGIDebug1::EnableLeakTrackingForThread</unmanaged-short>
        public unsafe void EnableLeakTrackingForThread()
        {
            DXNET.DXGI.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>void IDXGIDebug1::DisableLeakTrackingForThread()</unmanaged>
        /// <unmanaged-short>IDXGIDebug1::DisableLeakTrackingForThread</unmanaged-short>
        public unsafe void DisableLeakTrackingForThread()
        {
            DXNET.DXGI.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[5]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDXGIDebug1::IsLeakTrackingEnabledForThread()</unmanaged>
        /// <unmanaged-short>IDXGIDebug1::IsLeakTrackingEnabledForThread</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool IsLeakTrackingEnabledForThread_()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("aec22fb8-76f3-4639-9be0-28eb43a67a2e")]
    public partial class DXGIObject : DXNET.ComObject
    {
        public DXGIObject(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DXGIObject(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DXGIObject(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "dataSize">No documentation.</param>
        /// <param name = "dataRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIObject::SetPrivateData([In] const GUID&amp; Name,[In] unsigned int DataSize,[In, Buffer] const void* pData)</unmanaged>
        /// <unmanaged-short>IDXGIObject::SetPrivateData</unmanaged-short>
        public unsafe void SetPrivateData(System.Guid name, System.Int32 dataSize, System.IntPtr dataRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &name, dataSize, (void *)dataRef, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "unknownRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIObject::SetPrivateDataInterface([In] const GUID&amp; Name,[In, Optional] const IUnknown* pUnknown)</unmanaged>
        /// <unmanaged-short>IDXGIObject::SetPrivateDataInterface</unmanaged-short>
        public unsafe void SetPrivateDataInterface(System.Guid name, DXNET.IUnknown unknownRef)
        {
            System.IntPtr unknownRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            unknownRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(unknownRef);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &name, (void *)unknownRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "dataSizeRef">No documentation.</param>
        /// <param name = "dataRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIObject::GetPrivateData([In] const GUID&amp; Name,[InOut] unsigned int* pDataSize,[Out, Buffer] void* pData)</unmanaged>
        /// <unmanaged-short>IDXGIObject::GetPrivateData</unmanaged-short>
        public unsafe DXNET.Result GetPrivateData(System.Guid name, ref System.Int32 dataSizeRef, System.IntPtr dataRef)
        {
            DXNET.Result __result__;
            fixed (void *dataSizeRef_ = &dataSizeRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &name, dataSizeRef_, (void *)dataRef, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "riid">No documentation.</param>
        /// <param name = "parentOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIObject::GetParent([In] const GUID&amp; riid,[Out] void** ppParent)</unmanaged>
        /// <unmanaged-short>IDXGIObject::GetParent</unmanaged-short>
        public unsafe void GetParent(System.Guid riid, out System.IntPtr parentOut)
        {
            DXNET.Result __result__;
            fixed (void *parentOut_ = &parentOut)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &riid, parentOut_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7b7166ec-21c7-44ae-b21a-c9ae321ae369")]
    public partial class Factory : DXNET.DXGI.DXGIObject
    {
        public Factory(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "adapter">No documentation.</param>
        /// <param name = "adapterOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory::EnumAdapters([In] unsigned int Adapter,[Out] IDXGIAdapter** ppAdapter)</unmanaged>
        /// <unmanaged-short>IDXGIFactory::EnumAdapters</unmanaged-short>
        internal unsafe DXNET.Result GetAdapter(System.Int32 adapter, out DXNET.DXGI.Adapter adapterOut)
        {
            System.IntPtr adapterOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, adapter, &adapterOut_, (*(void ***)this._nativePointer)[7]);
            if (adapterOut_ != System.IntPtr.Zero)
                adapterOut = new DXNET.DXGI.Adapter(adapterOut_);
            else
                adapterOut = null;
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "windowHandle">No documentation.</param>
        /// <param name = "flags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory::MakeWindowAssociation([In] HWND WindowHandle,[In] unsigned int Flags)</unmanaged>
        /// <unmanaged-short>IDXGIFactory::MakeWindowAssociation</unmanaged-short>
        public unsafe void MakeWindowAssociation(System.IntPtr windowHandle, DXNET.DXGI.WindowAssociationFlags flags)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)windowHandle, unchecked ((System.Int32)flags), (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory::GetWindowAssociation([Out] HWND* pWindowHandle)</unmanaged>
        /// <unmanaged-short>IDXGIFactory::GetWindowAssociation</unmanaged-short>
        public unsafe System.IntPtr GetWindowAssociation()
        {
            System.IntPtr windowHandleRef;
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &windowHandleRef, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
            return windowHandleRef;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "deviceRef">No documentation.</param>
        /// <param name = "descRef">No documentation.</param>
        /// <param name = "swapChainOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory::CreateSwapChain([In] IUnknown* pDevice,[In] DXGI_SWAP_CHAIN_DESC* pDesc,[Out, Fast] IDXGISwapChain** ppSwapChain)</unmanaged>
        /// <unmanaged-short>IDXGIFactory::CreateSwapChain</unmanaged-short>
        internal unsafe void CreateSwapChain(DXNET.IUnknown deviceRef, ref DXNET.DXGI.SwapChainDescription descRef, DXNET.DXGI.SwapChain swapChainOut)
        {
            System.IntPtr deviceRef_ = System.IntPtr.Zero;
            System.IntPtr swapChainOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            deviceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(deviceRef);
            fixed (void *descRef_ = &descRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)deviceRef_, descRef_, &swapChainOut_, (*(void ***)this._nativePointer)[10]);
            (swapChainOut).NativePointer = swapChainOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "module">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory::CreateSoftwareAdapter([In] HINSTANCE Module,[Out] IDXGIAdapter** ppAdapter)</unmanaged>
        /// <unmanaged-short>IDXGIFactory::CreateSoftwareAdapter</unmanaged-short>
        public unsafe DXNET.DXGI.Adapter CreateSoftwareAdapter(System.IntPtr module)
        {
            DXNET.DXGI.Adapter adapterOut;
            System.IntPtr adapterOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)module, &adapterOut_, (*(void ***)this._nativePointer)[11]);
            if (adapterOut_ != System.IntPtr.Zero)
                adapterOut = new DXNET.DXGI.Adapter(adapterOut_);
            else
                adapterOut = null;
            __result__.CheckError();
            return adapterOut;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("770aae78-f26f-4dba-a829-253c83d1b387")]
    public partial class Factory1 : DXNET.DXGI.Factory
    {
        public Factory1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>IsCurrent</unmanaged>
        /// <unmanaged-short>IsCurrent</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsCurrent
        {
            get => IsCurrent_();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "adapter">No documentation.</param>
        /// <param name = "adapterOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory1::EnumAdapters1([In] unsigned int Adapter,[Out] IDXGIAdapter1** ppAdapter)</unmanaged>
        /// <unmanaged-short>IDXGIFactory1::EnumAdapters1</unmanaged-short>
        internal unsafe DXNET.Result GetAdapter1(System.Int32 adapter, out DXNET.DXGI.Adapter1 adapterOut)
        {
            System.IntPtr adapterOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, adapter, &adapterOut_, (*(void ***)this._nativePointer)[12]);
            if (adapterOut_ != System.IntPtr.Zero)
                adapterOut = new DXNET.DXGI.Adapter1(adapterOut_);
            else
                adapterOut = null;
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDXGIFactory1::IsCurrent()</unmanaged>
        /// <unmanaged-short>IDXGIFactory1::IsCurrent</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool IsCurrent_()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[13]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("50c83a1c-e072-4c48-87b0-3630fa36a6d0")]
    public partial class Factory2 : DXNET.DXGI.Factory1
    {
        public Factory2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>IsWindowedStereoEnabled</unmanaged>
        /// <unmanaged-short>IsWindowedStereoEnabled</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsWindowedStereoEnabled
        {
            get => IsWindowedStereoEnabled_();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDXGIFactory2::IsWindowedStereoEnabled()</unmanaged>
        /// <unmanaged-short>IDXGIFactory2::IsWindowedStereoEnabled</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool IsWindowedStereoEnabled_()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[14]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "deviceRef">No documentation.</param>
        /// <param name = "hWnd">No documentation.</param>
        /// <param name = "descRef">No documentation.</param>
        /// <param name = "fullscreenDescRef">No documentation.</param>
        /// <param name = "restrictToOutputRef">No documentation.</param>
        /// <param name = "swapChainOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory2::CreateSwapChainForHwnd([In] IUnknown* pDevice,[In] HWND hWnd,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] const DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pFullscreenDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out, Fast] IDXGISwapChain1** ppSwapChain)</unmanaged>
        /// <unmanaged-short>IDXGIFactory2::CreateSwapChainForHwnd</unmanaged-short>
        internal unsafe void CreateSwapChainForHwnd(DXNET.IUnknown deviceRef, System.IntPtr hWnd, ref DXNET.DXGI.SwapChainDescription1 descRef, DXNET.DXGI.SwapChainFullScreenDescription? fullscreenDescRef, DXNET.DXGI.Output restrictToOutputRef, DXNET.DXGI.SwapChain1 swapChainOut)
        {
            System.IntPtr deviceRef_ = System.IntPtr.Zero;
            DXNET.DXGI.SwapChainFullScreenDescription fullscreenDescRef_;
            System.IntPtr restrictToOutputRef_ = System.IntPtr.Zero;
            System.IntPtr swapChainOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            deviceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(deviceRef);
            if (fullscreenDescRef != null)
                fullscreenDescRef_ = fullscreenDescRef.Value;
            restrictToOutputRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Output>(restrictToOutputRef);
            fixed (void *descRef_ = &descRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)deviceRef_, (void *)hWnd, descRef_, fullscreenDescRef == null ? (void *)0 : &fullscreenDescRef_, (void *)restrictToOutputRef_, &swapChainOut_, (*(void ***)this._nativePointer)[15]);
            (swapChainOut).NativePointer = swapChainOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "deviceRef">No documentation.</param>
        /// <param name = "windowRef">No documentation.</param>
        /// <param name = "descRef">No documentation.</param>
        /// <param name = "restrictToOutputRef">No documentation.</param>
        /// <param name = "swapChainOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory2::CreateSwapChainForCoreWindow([In] IUnknown* pDevice,[In] IUnknown* pWindow,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out, Fast] IDXGISwapChain1** ppSwapChain)</unmanaged>
        /// <unmanaged-short>IDXGIFactory2::CreateSwapChainForCoreWindow</unmanaged-short>
        internal unsafe void CreateSwapChainForCoreWindow(DXNET.IUnknown deviceRef, DXNET.IUnknown windowRef, ref DXNET.DXGI.SwapChainDescription1 descRef, DXNET.DXGI.Output restrictToOutputRef, DXNET.DXGI.SwapChain1 swapChainOut)
        {
            System.IntPtr deviceRef_ = System.IntPtr.Zero;
            System.IntPtr windowRef_ = System.IntPtr.Zero;
            System.IntPtr restrictToOutputRef_ = System.IntPtr.Zero;
            System.IntPtr swapChainOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            deviceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(deviceRef);
            windowRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(windowRef);
            restrictToOutputRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Output>(restrictToOutputRef);
            fixed (void *descRef_ = &descRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)deviceRef_, (void *)windowRef_, descRef_, (void *)restrictToOutputRef_, &swapChainOut_, (*(void ***)this._nativePointer)[16]);
            (swapChainOut).NativePointer = swapChainOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hResource">No documentation.</param>
        /// <param name = "luidRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory2::GetSharedResourceAdapterLuid([In] void* hResource,[Out] LUID* pLuid)</unmanaged>
        /// <unmanaged-short>IDXGIFactory2::GetSharedResourceAdapterLuid</unmanaged-short>
        public unsafe void GetSharedResourceAdapterLuid(System.IntPtr hResource, out System.Int64 luidRef)
        {
            DXNET.Result __result__;
            fixed (void *luidRef_ = &luidRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hResource, luidRef_, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "windowHandle">No documentation.</param>
        /// <param name = "wMsg">No documentation.</param>
        /// <param name = "dwCookieRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory2::RegisterStereoStatusWindow([In] HWND WindowHandle,[In] unsigned int wMsg,[Out] DWORD* pdwCookie)</unmanaged>
        /// <unmanaged-short>IDXGIFactory2::RegisterStereoStatusWindow</unmanaged-short>
        public unsafe void RegisterStereoStatusWindow(System.IntPtr windowHandle, System.Int32 wMsg, out System.Int32 dwCookieRef)
        {
            DXNET.Result __result__;
            fixed (void *dwCookieRef_ = &dwCookieRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)windowHandle, wMsg, dwCookieRef_, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hEvent">No documentation.</param>
        /// <param name = "dwCookieRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory2::RegisterStereoStatusEvent([In] void* hEvent,[Out] DWORD* pdwCookie)</unmanaged>
        /// <unmanaged-short>IDXGIFactory2::RegisterStereoStatusEvent</unmanaged-short>
        public unsafe void RegisterStereoStatusEvent(System.IntPtr hEvent, out System.Int32 dwCookieRef)
        {
            DXNET.Result __result__;
            fixed (void *dwCookieRef_ = &dwCookieRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hEvent, dwCookieRef_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwCookie">No documentation.</param>
        /// <unmanaged>void IDXGIFactory2::UnregisterStereoStatus([In] DWORD dwCookie)</unmanaged>
        /// <unmanaged-short>IDXGIFactory2::UnregisterStereoStatus</unmanaged-short>
        public unsafe void UnregisterStereoStatus(System.Int32 dwCookie)
        {
            DXNET.DXGI.LocalInterop.CalliStdCallvoid(this._nativePointer, dwCookie, (*(void ***)this._nativePointer)[20]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "windowHandle">No documentation.</param>
        /// <param name = "wMsg">No documentation.</param>
        /// <param name = "dwCookieRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory2::RegisterOcclusionStatusWindow([In] HWND WindowHandle,[In] unsigned int wMsg,[Out] DWORD* pdwCookie)</unmanaged>
        /// <unmanaged-short>IDXGIFactory2::RegisterOcclusionStatusWindow</unmanaged-short>
        public unsafe void RegisterOcclusionStatusWindow(System.IntPtr windowHandle, System.Int32 wMsg, out System.Int32 dwCookieRef)
        {
            DXNET.Result __result__;
            fixed (void *dwCookieRef_ = &dwCookieRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)windowHandle, wMsg, dwCookieRef_, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hEvent">No documentation.</param>
        /// <param name = "dwCookieRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory2::RegisterOcclusionStatusEvent([In] void* hEvent,[Out] DWORD* pdwCookie)</unmanaged>
        /// <unmanaged-short>IDXGIFactory2::RegisterOcclusionStatusEvent</unmanaged-short>
        public unsafe void RegisterOcclusionStatusEvent(System.IntPtr hEvent, out System.Int32 dwCookieRef)
        {
            DXNET.Result __result__;
            fixed (void *dwCookieRef_ = &dwCookieRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hEvent, dwCookieRef_, (*(void ***)this._nativePointer)[22]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwCookie">No documentation.</param>
        /// <unmanaged>void IDXGIFactory2::UnregisterOcclusionStatus([In] DWORD dwCookie)</unmanaged>
        /// <unmanaged-short>IDXGIFactory2::UnregisterOcclusionStatus</unmanaged-short>
        public unsafe void UnregisterOcclusionStatus(System.Int32 dwCookie)
        {
            DXNET.DXGI.LocalInterop.CalliStdCallvoid(this._nativePointer, dwCookie, (*(void ***)this._nativePointer)[23]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "deviceRef">No documentation.</param>
        /// <param name = "descRef">No documentation.</param>
        /// <param name = "restrictToOutputRef">No documentation.</param>
        /// <param name = "swapChainOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory2::CreateSwapChainForComposition([In] IUnknown* pDevice,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out, Fast] IDXGISwapChain1** ppSwapChain)</unmanaged>
        /// <unmanaged-short>IDXGIFactory2::CreateSwapChainForComposition</unmanaged-short>
        internal unsafe void CreateSwapChainForComposition(DXNET.IUnknown deviceRef, ref DXNET.DXGI.SwapChainDescription1 descRef, DXNET.DXGI.Output restrictToOutputRef, DXNET.DXGI.SwapChain1 swapChainOut)
        {
            System.IntPtr deviceRef_ = System.IntPtr.Zero;
            System.IntPtr restrictToOutputRef_ = System.IntPtr.Zero;
            System.IntPtr swapChainOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            deviceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(deviceRef);
            restrictToOutputRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Output>(restrictToOutputRef);
            fixed (void *descRef_ = &descRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)deviceRef_, descRef_, (void *)restrictToOutputRef_, &swapChainOut_, (*(void ***)this._nativePointer)[24]);
            (swapChainOut).NativePointer = swapChainOut_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("25483823-cd46-4c7d-86ca-47aa95b837bd")]
    public partial class Factory3 : DXNET.DXGI.Factory2
    {
        public Factory3(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory3(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory3(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetCreationFlags</unmanaged>
        /// <unmanaged-short>GetCreationFlags</unmanaged-short>
        public System.Int32 CreationFlags
        {
            get => GetCreationFlags();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDXGIFactory3::GetCreationFlags()</unmanaged>
        /// <unmanaged-short>IDXGIFactory3::GetCreationFlags</unmanaged-short>
        internal unsafe System.Int32 GetCreationFlags()
        {
            System.Int32 __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[25]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("1bc6ea02-ef36-464f-bf0c-21ca39e5168a")]
    public partial class Factory4 : DXNET.DXGI.Factory3
    {
        public Factory4(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory4(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory4(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "adapterLuid">No documentation.</param>
        /// <param name = "riid">No documentation.</param>
        /// <param name = "vAdapterOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory4::EnumAdapterByLuid([In] LUID AdapterLuid,[In] const GUID&amp; riid,[Out] void** ppvAdapter)</unmanaged>
        /// <unmanaged-short>IDXGIFactory4::EnumAdapterByLuid</unmanaged-short>
        private unsafe void EnumAdapterByLuid(System.Int64 adapterLuid, System.Guid riid, out System.IntPtr vAdapterOut)
        {
            DXNET.Result __result__;
            fixed (void *vAdapterOut_ = &vAdapterOut)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, adapterLuid, &riid, vAdapterOut_, (*(void ***)this._nativePointer)[26]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "riid">No documentation.</param>
        /// <param name = "vAdapterOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory4::EnumWarpAdapter([In] const GUID&amp; riid,[Out] void** ppvAdapter)</unmanaged>
        /// <unmanaged-short>IDXGIFactory4::EnumWarpAdapter</unmanaged-short>
        private unsafe void EnumWarpAdapter(System.Guid riid, out System.IntPtr vAdapterOut)
        {
            DXNET.Result __result__;
            fixed (void *vAdapterOut_ = &vAdapterOut)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &riid, vAdapterOut_, (*(void ***)this._nativePointer)[27]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7632e1f5-ee65-4dca-87fd-84cd75f8838d")]
    public partial class Factory5 : DXNET.DXGI.Factory4
    {
        public Factory5(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory5(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory5(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "feature">No documentation.</param>
        /// <param name = "featureSupportDataRef">No documentation.</param>
        /// <param name = "featureSupportDataSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory5::CheckFeatureSupport([In] DXGI_FEATURE Feature,[Out, Buffer] void* pFeatureSupportData,[In] unsigned int FeatureSupportDataSize)</unmanaged>
        /// <unmanaged-short>IDXGIFactory5::CheckFeatureSupport</unmanaged-short>
        public unsafe void CheckFeatureSupport(DXNET.DXGI.Feature feature, System.IntPtr featureSupportDataRef, System.Int32 featureSupportDataSize)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)feature), (void *)featureSupportDataRef, featureSupportDataSize, (*(void ***)this._nativePointer)[28]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("c1b6694f-ff09-44a9-b03c-77900a0a1d17")]
    public partial class Factory6 : DXNET.DXGI.Factory5
    {
        public Factory6(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory6(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory6(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "adapter">No documentation.</param>
        /// <param name = "gpuPreference">No documentation.</param>
        /// <param name = "riid">No documentation.</param>
        /// <param name = "vAdapterOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory6::EnumAdapterByGpuPreference([In] unsigned int Adapter,[In] DXGI_GPU_PREFERENCE GpuPreference,[In] const GUID&amp; riid,[Out] void** ppvAdapter)</unmanaged>
        /// <unmanaged-short>IDXGIFactory6::EnumAdapterByGpuPreference</unmanaged-short>
        public unsafe void EnumAdapterByGpuPreference(System.Int32 adapter, DXNET.DXGI.GpuPreferEnce gpuPreference, System.Guid riid, out System.IntPtr vAdapterOut)
        {
            DXNET.Result __result__;
            fixed (void *vAdapterOut_ = &vAdapterOut)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, adapter, unchecked ((System.Int32)gpuPreference), &riid, vAdapterOut_, (*(void ***)this._nativePointer)[29]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a4966eed-76db-44da-84c1-ee9a7afb20a8")]
    public partial class Factory7 : DXNET.DXGI.Factory6
    {
        public Factory7(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory7(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory7(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hEvent">No documentation.</param>
        /// <param name = "dwCookieRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory7::RegisterAdaptersChangedEvent([In] void* hEvent,[Out] DWORD* pdwCookie)</unmanaged>
        /// <unmanaged-short>IDXGIFactory7::RegisterAdaptersChangedEvent</unmanaged-short>
        public unsafe void RegisterAdaptersChangedEvent(System.IntPtr hEvent, out System.Int32 dwCookieRef)
        {
            DXNET.Result __result__;
            fixed (void *dwCookieRef_ = &dwCookieRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hEvent, dwCookieRef_, (*(void ***)this._nativePointer)[30]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dwCookie">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory7::UnregisterAdaptersChangedEvent([In] DWORD dwCookie)</unmanaged>
        /// <unmanaged-short>IDXGIFactory7::UnregisterAdaptersChangedEvent</unmanaged-short>
        public unsafe void UnregisterAdaptersChangedEvent(System.Int32 dwCookie)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, dwCookie, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("41e7d1f2-a591-4f7b-a2e5-fa9c843e1c12")]
    public partial class FactoryMedia : DXNET.ComObject
    {
        public FactoryMedia(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FactoryMedia(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FactoryMedia(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "deviceRef">No documentation.</param>
        /// <param name = "hSurface">No documentation.</param>
        /// <param name = "descRef">No documentation.</param>
        /// <param name = "restrictToOutputRef">No documentation.</param>
        /// <param name = "swapChainOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactoryMedia::CreateSwapChainForCompositionSurfaceHandle([In] IUnknown* pDevice,[In, Optional] void* hSurface,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out] IDXGISwapChain1** ppSwapChain)</unmanaged>
        /// <unmanaged-short>IDXGIFactoryMedia::CreateSwapChainForCompositionSurfaceHandle</unmanaged-short>
        public unsafe void CreateSwapChainForCompositionSurfaceHandle(DXNET.IUnknown deviceRef, System.IntPtr hSurface, ref DXNET.DXGI.SwapChainDescription1 descRef, DXNET.DXGI.Output restrictToOutputRef, out DXNET.DXGI.SwapChain1 swapChainOut)
        {
            System.IntPtr deviceRef_ = System.IntPtr.Zero;
            System.IntPtr restrictToOutputRef_ = System.IntPtr.Zero;
            System.IntPtr swapChainOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            deviceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(deviceRef);
            restrictToOutputRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Output>(restrictToOutputRef);
            fixed (void *descRef_ = &descRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)deviceRef_, (void *)hSurface, descRef_, (void *)restrictToOutputRef_, &swapChainOut_, (*(void ***)this._nativePointer)[3]);
            if (swapChainOut_ != System.IntPtr.Zero)
                swapChainOut = new DXNET.DXGI.SwapChain1(swapChainOut_);
            else
                swapChainOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "deviceRef">No documentation.</param>
        /// <param name = "hSurface">No documentation.</param>
        /// <param name = "descRef">No documentation.</param>
        /// <param name = "yuvDecodeBuffersRef">No documentation.</param>
        /// <param name = "restrictToOutputRef">No documentation.</param>
        /// <param name = "swapChainOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactoryMedia::CreateDecodeSwapChainForCompositionSurfaceHandle([In] IUnknown* pDevice,[In, Optional] void* hSurface,[In] DXGI_DECODE_SWAP_CHAIN_DESC* pDesc,[In] IDXGIResource* pYuvDecodeBuffers,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out] IDXGIDecodeSwapChain** ppSwapChain)</unmanaged>
        /// <unmanaged-short>IDXGIFactoryMedia::CreateDecodeSwapChainForCompositionSurfaceHandle</unmanaged-short>
        public unsafe void CreateDecodeSwapChainForCompositionSurfaceHandle(DXNET.IUnknown deviceRef, System.IntPtr hSurface, DXNET.DXGI.DecodeSwapChainDescription descRef, DXNET.DXGI.Resource yuvDecodeBuffersRef, DXNET.DXGI.Output restrictToOutputRef, out DXNET.DXGI.DecodeSwapChain swapChainOut)
        {
            System.IntPtr deviceRef_ = System.IntPtr.Zero;
            System.IntPtr yuvDecodeBuffersRef_ = System.IntPtr.Zero;
            System.IntPtr restrictToOutputRef_ = System.IntPtr.Zero;
            System.IntPtr swapChainOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            deviceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(deviceRef);
            yuvDecodeBuffersRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Resource>(yuvDecodeBuffersRef);
            restrictToOutputRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Output>(restrictToOutputRef);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)deviceRef_, (void *)hSurface, &descRef, (void *)yuvDecodeBuffersRef_, (void *)restrictToOutputRef_, &swapChainOut_, (*(void ***)this._nativePointer)[4]);
            if (swapChainOut_ != System.IntPtr.Zero)
                swapChainOut = new DXNET.DXGI.DecodeSwapChain(swapChainOut_);
            else
                swapChainOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("D67441C7-672A-476f-9E82-CD55B44949CE")]
    public partial class InfoQueue : DXNET.ComObject
    {
        public InfoQueue(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator InfoQueue(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new InfoQueue(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "messageCountLimit">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::SetMessageCountLimit([In] GUID Producer,[In] unsigned longlong MessageCountLimit)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::SetMessageCountLimit</unmanaged-short>
        public unsafe void SetMessageCountLimit(System.Guid producer, System.Int64 messageCountLimit)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, messageCountLimit, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <unmanaged>void IDXGIInfoQueue::ClearStoredMessages([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::ClearStoredMessages</unmanaged-short>
        public unsafe void ClearStoredMessages(System.Guid producer)
        {
            DXNET.DXGI.LocalInterop.CalliStdCallvoid(this._nativePointer, producer, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "messageIndex">No documentation.</param>
        /// <param name = "messageRef">No documentation.</param>
        /// <param name = "messageByteLengthRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::GetMessageW([In] GUID Producer,[In] unsigned longlong MessageIndex,[Out, Buffer, Optional] DXGI_INFO_QUEUE_MESSAGE* pMessage,[InOut] SIZE_T* pMessageByteLength)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::GetMessageW</unmanaged-short>
        public unsafe void GetMessage(System.Guid producer, System.Int64 messageIndex, DXNET.DXGI.InformationQueueMessage[] messageRef, ref DXNET.PointerSize messageByteLengthRef)
        {
            DXNET.DXGI.InformationQueueMessage.__Native[] messageRef_ = messageRef == null ? null : new DXNET.DXGI.InformationQueueMessage.__Native[messageRef.Length];
            DXNET.Result __result__;
            fixed (void *messageByteLengthRef_ = &messageByteLengthRef)
                fixed (void *_messageRef = messageRef_)
                    __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, messageIndex, _messageRef, messageByteLengthRef_, (*(void ***)this._nativePointer)[5]);
            if (messageRef != null)
                for (int i = 0; i < messageRef.Length; ++i)
                    if (messageRef != null)
                        messageRef[i].__MarshalFrom(ref (messageRef_)[i]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned longlong IDXGIInfoQueue::GetNumStoredMessagesAllowedByRetrievalFilters([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::GetNumStoredMessagesAllowedByRetrievalFilters</unmanaged-short>
        public unsafe System.Int64 GetNumStoredMessagesAllowedByRetrievalFilters(System.Guid producer)
        {
            System.Int64 __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCalllong(this._nativePointer, producer, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned longlong IDXGIInfoQueue::GetNumStoredMessages([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::GetNumStoredMessages</unmanaged-short>
        public unsafe System.Int64 GetNumStoredMessages(System.Guid producer)
        {
            System.Int64 __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCalllong(this._nativePointer, producer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned longlong IDXGIInfoQueue::GetNumMessagesDiscardedByMessageCountLimit([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::GetNumMessagesDiscardedByMessageCountLimit</unmanaged-short>
        public unsafe System.Int64 GetNumMessagesDiscardedByMessageCountLimit(System.Guid producer)
        {
            System.Int64 __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCalllong(this._nativePointer, producer, (*(void ***)this._nativePointer)[8]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned longlong IDXGIInfoQueue::GetMessageCountLimit([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::GetMessageCountLimit</unmanaged-short>
        public unsafe System.Int64 GetMessageCountLimit(System.Guid producer)
        {
            System.Int64 __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCalllong(this._nativePointer, producer, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned longlong IDXGIInfoQueue::GetNumMessagesAllowedByStorageFilter([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::GetNumMessagesAllowedByStorageFilter</unmanaged-short>
        public unsafe System.Int64 GetNumMessagesAllowedByStorageFilter(System.Guid producer)
        {
            System.Int64 __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCalllong(this._nativePointer, producer, (*(void ***)this._nativePointer)[10]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned longlong IDXGIInfoQueue::GetNumMessagesDeniedByStorageFilter([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::GetNumMessagesDeniedByStorageFilter</unmanaged-short>
        public unsafe System.Int64 GetNumMessagesDeniedByStorageFilter(System.Guid producer)
        {
            System.Int64 __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCalllong(this._nativePointer, producer, (*(void ***)this._nativePointer)[11]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "filterRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::AddStorageFilterEntries([In] GUID Producer,[In] DXGI_INFO_QUEUE_FILTER* pFilter)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::AddStorageFilterEntries</unmanaged-short>
        public unsafe void AddStorageFilterEntries(System.Guid producer, ref DXNET.DXGI.InfoQueueFilter filterRef)
        {
            DXNET.Result __result__;
            fixed (void *filterRef_ = &filterRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, filterRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "filterRef">No documentation.</param>
        /// <param name = "filterByteLengthRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::GetStorageFilter([In] GUID Producer,[Out, Buffer, Optional] DXGI_INFO_QUEUE_FILTER* pFilter,[InOut] SIZE_T* pFilterByteLength)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::GetStorageFilter</unmanaged-short>
        public unsafe void GetStorageFilter(System.Guid producer, DXNET.DXGI.InfoQueueFilter[] filterRef, ref DXNET.PointerSize filterByteLengthRef)
        {
            DXNET.Result __result__;
            fixed (void *filterByteLengthRef_ = &filterByteLengthRef)
                fixed (void *filterRef_ = filterRef)
                    __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, filterRef_, filterByteLengthRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <unmanaged>void IDXGIInfoQueue::ClearStorageFilter([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::ClearStorageFilter</unmanaged-short>
        public unsafe void ClearStorageFilter(System.Guid producer)
        {
            DXNET.DXGI.LocalInterop.CalliStdCallvoid(this._nativePointer, producer, (*(void ***)this._nativePointer)[14]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::PushEmptyStorageFilter([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::PushEmptyStorageFilter</unmanaged-short>
        public unsafe void PushEmptyStorageFilter(System.Guid producer)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::PushDenyAllStorageFilter([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::PushDenyAllStorageFilter</unmanaged-short>
        public unsafe void PushDenyAllStorageFilter(System.Guid producer)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::PushCopyOfStorageFilter([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::PushCopyOfStorageFilter</unmanaged-short>
        public unsafe void PushCopyOfStorageFilter(System.Guid producer)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "filterRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::PushStorageFilter([In] GUID Producer,[In] DXGI_INFO_QUEUE_FILTER* pFilter)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::PushStorageFilter</unmanaged-short>
        public unsafe void PushStorageFilter(System.Guid producer, ref DXNET.DXGI.InfoQueueFilter filterRef)
        {
            DXNET.Result __result__;
            fixed (void *filterRef_ = &filterRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, filterRef_, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <unmanaged>void IDXGIInfoQueue::PopStorageFilter([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::PopStorageFilter</unmanaged-short>
        public unsafe void PopStorageFilter(System.Guid producer)
        {
            DXNET.DXGI.LocalInterop.CalliStdCallvoid(this._nativePointer, producer, (*(void ***)this._nativePointer)[19]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDXGIInfoQueue::GetStorageFilterStackSize([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::GetStorageFilterStackSize</unmanaged-short>
        public unsafe System.Int32 GetStorageFilterStackSize(System.Guid producer)
        {
            System.Int32 __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, (*(void ***)this._nativePointer)[20]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "filterRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::AddRetrievalFilterEntries([In] GUID Producer,[In] DXGI_INFO_QUEUE_FILTER* pFilter)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::AddRetrievalFilterEntries</unmanaged-short>
        public unsafe void AddRetrievalFilterEntries(System.Guid producer, ref DXNET.DXGI.InfoQueueFilter filterRef)
        {
            DXNET.Result __result__;
            fixed (void *filterRef_ = &filterRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, filterRef_, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "filterRef">No documentation.</param>
        /// <param name = "filterByteLengthRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::GetRetrievalFilter([In] GUID Producer,[Out, Buffer, Optional] DXGI_INFO_QUEUE_FILTER* pFilter,[InOut] SIZE_T* pFilterByteLength)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::GetRetrievalFilter</unmanaged-short>
        public unsafe void GetRetrievalFilter(System.Guid producer, DXNET.DXGI.InfoQueueFilter[] filterRef, ref DXNET.PointerSize filterByteLengthRef)
        {
            DXNET.Result __result__;
            fixed (void *filterByteLengthRef_ = &filterByteLengthRef)
                fixed (void *filterRef_ = filterRef)
                    __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, filterRef_, filterByteLengthRef_, (*(void ***)this._nativePointer)[22]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <unmanaged>void IDXGIInfoQueue::ClearRetrievalFilter([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::ClearRetrievalFilter</unmanaged-short>
        public unsafe void ClearRetrievalFilter(System.Guid producer)
        {
            DXNET.DXGI.LocalInterop.CalliStdCallvoid(this._nativePointer, producer, (*(void ***)this._nativePointer)[23]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::PushEmptyRetrievalFilter([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::PushEmptyRetrievalFilter</unmanaged-short>
        public unsafe void PushEmptyRetrievalFilter(System.Guid producer)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, (*(void ***)this._nativePointer)[24]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::PushDenyAllRetrievalFilter([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::PushDenyAllRetrievalFilter</unmanaged-short>
        public unsafe void PushDenyAllRetrievalFilter(System.Guid producer)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, (*(void ***)this._nativePointer)[25]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::PushCopyOfRetrievalFilter([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::PushCopyOfRetrievalFilter</unmanaged-short>
        public unsafe void PushCopyOfRetrievalFilter(System.Guid producer)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, (*(void ***)this._nativePointer)[26]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "filterRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::PushRetrievalFilter([In] GUID Producer,[In] DXGI_INFO_QUEUE_FILTER* pFilter)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::PushRetrievalFilter</unmanaged-short>
        public unsafe void PushRetrievalFilter(System.Guid producer, ref DXNET.DXGI.InfoQueueFilter filterRef)
        {
            DXNET.Result __result__;
            fixed (void *filterRef_ = &filterRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, filterRef_, (*(void ***)this._nativePointer)[27]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <unmanaged>void IDXGIInfoQueue::PopRetrievalFilter([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::PopRetrievalFilter</unmanaged-short>
        public unsafe void PopRetrievalFilter(System.Guid producer)
        {
            DXNET.DXGI.LocalInterop.CalliStdCallvoid(this._nativePointer, producer, (*(void ***)this._nativePointer)[28]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDXGIInfoQueue::GetRetrievalFilterStackSize([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::GetRetrievalFilterStackSize</unmanaged-short>
        public unsafe System.Int32 GetRetrievalFilterStackSize(System.Guid producer)
        {
            System.Int32 __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, (*(void ***)this._nativePointer)[29]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "category">No documentation.</param>
        /// <param name = "severity">No documentation.</param>
        /// <param name = "id">No documentation.</param>
        /// <param name = "descriptionRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::AddMessage([In] GUID Producer,[In] DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category,[In] DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity,[In] int ID,[In] const char* pDescription)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::AddMessage</unmanaged-short>
        public unsafe void AddMessage(System.Guid producer, DXNET.DXGI.InformationQueueMessageCategory category, DXNET.DXGI.InformationQueueMessageSeverity severity, System.Int32 id, System.String descriptionRef)
        {
            System.IntPtr descriptionRef_;
            DXNET.Result __result__;
            descriptionRef_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(descriptionRef);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, producer, unchecked ((System.Int32)category), unchecked ((System.Int32)severity), id, (void *)descriptionRef_, (*(void ***)this._nativePointer)[30]);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(descriptionRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "severity">No documentation.</param>
        /// <param name = "descriptionRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::AddApplicationMessage([In] DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity,[In] const char* pDescription)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::AddApplicationMessage</unmanaged-short>
        public unsafe void AddApplicationMessage(DXNET.DXGI.InformationQueueMessageSeverity severity, System.String descriptionRef)
        {
            System.IntPtr descriptionRef_;
            DXNET.Result __result__;
            descriptionRef_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(descriptionRef);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)severity), (void *)descriptionRef_, (*(void ***)this._nativePointer)[31]);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(descriptionRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "category">No documentation.</param>
        /// <param name = "bEnable">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::SetBreakOnCategory([In] GUID Producer,[In] DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category,[In] BOOL bEnable)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::SetBreakOnCategory</unmanaged-short>
        public unsafe void SetBreakOnCategory(System.Guid producer, DXNET.DXGI.InformationQueueMessageCategory category, DXNET.Mathematics.Interop.RawBool bEnable)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint0(this._nativePointer, producer, unchecked ((System.Int32)category), bEnable, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "severity">No documentation.</param>
        /// <param name = "bEnable">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::SetBreakOnSeverity([In] GUID Producer,[In] DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity,[In] BOOL bEnable)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::SetBreakOnSeverity</unmanaged-short>
        public unsafe void SetBreakOnSeverity(System.Guid producer, DXNET.DXGI.InformationQueueMessageSeverity severity, DXNET.Mathematics.Interop.RawBool bEnable)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint0(this._nativePointer, producer, unchecked ((System.Int32)severity), bEnable, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "id">No documentation.</param>
        /// <param name = "bEnable">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIInfoQueue::SetBreakOnID([In] GUID Producer,[In] int ID,[In] BOOL bEnable)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::SetBreakOnID</unmanaged-short>
        public unsafe void SetBreakOnID(System.Guid producer, System.Int32 id, DXNET.Mathematics.Interop.RawBool bEnable)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint0(this._nativePointer, producer, id, bEnable, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "category">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDXGIInfoQueue::GetBreakOnCategory([In] GUID Producer,[In] DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::GetBreakOnCategory</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool GetBreakOnCategory(System.Guid producer, DXNET.DXGI.InformationQueueMessageCategory category)
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, producer, unchecked ((System.Int32)category), (*(void ***)this._nativePointer)[35]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "severity">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDXGIInfoQueue::GetBreakOnSeverity([In] GUID Producer,[In] DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::GetBreakOnSeverity</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool GetBreakOnSeverity(System.Guid producer, DXNET.DXGI.InformationQueueMessageSeverity severity)
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, producer, unchecked ((System.Int32)severity), (*(void ***)this._nativePointer)[36]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "id">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDXGIInfoQueue::GetBreakOnID([In] GUID Producer,[In] int ID)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::GetBreakOnID</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool GetBreakOnID(System.Guid producer, System.Int32 id)
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, producer, id, (*(void ***)this._nativePointer)[37]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <param name = "bMute">No documentation.</param>
        /// <unmanaged>void IDXGIInfoQueue::SetMuteDebugOutput([In] GUID Producer,[In] BOOL bMute)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::SetMuteDebugOutput</unmanaged-short>
        public unsafe void SetMuteDebugOutput(System.Guid producer, DXNET.Mathematics.Interop.RawBool bMute)
        {
            DXNET.DXGI.LocalInterop.CalliStdCallvoid0(this._nativePointer, producer, bMute, (*(void ***)this._nativePointer)[38]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "producer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDXGIInfoQueue::GetMuteDebugOutput([In] GUID Producer)</unmanaged>
        /// <unmanaged-short>IDXGIInfoQueue::GetMuteDebugOutput</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool GetMuteDebugOutput(System.Guid producer)
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, producer, (*(void ***)this._nativePointer)[39]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("4C8798B7-1D88-4A0F-B59B-B93F600DE8C8")]
    public partial class ISurfaceImageSourceManagerNative : DXNET.ComObject
    {
        public ISurfaceImageSourceManagerNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ISurfaceImageSourceManagerNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ISurfaceImageSourceManagerNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "device">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ISurfaceImageSourceManagerNative::FlushAllSurfacesWithDevice([In] IUnknown* device)</unmanaged>
        /// <unmanaged-short>ISurfaceImageSourceManagerNative::FlushAllSurfacesWithDevice</unmanaged-short>
        public unsafe void FlushAllSurfacesWithDevice(DXNET.IUnknown device)
        {
            System.IntPtr device_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            device_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(device);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)device_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("f2e9edc1-d307-4525-9886-0fafaa44163c")]
    public partial class ISurfaceImageSourceNative : DXNET.ComObject
    {
        public ISurfaceImageSourceNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ISurfaceImageSourceNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ISurfaceImageSourceNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetDevice</unmanaged>
        /// <unmanaged-short>SetDevice</unmanaged-short>
        public DXNET.DXGI.Device Device
        {
            set => SetDevice(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "device">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ISurfaceImageSourceNative::SetDevice([In] IDXGIDevice* device)</unmanaged>
        /// <unmanaged-short>ISurfaceImageSourceNative::SetDevice</unmanaged-short>
        internal unsafe void SetDevice(DXNET.DXGI.Device device)
        {
            System.IntPtr device_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            device_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Device>(device);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)device_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "updateRect">No documentation.</param>
        /// <param name = "offset">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ISurfaceImageSourceNative::BeginDraw([In] RECT updateRect,[Out] IDXGISurface** surface,[Out] POINT* offset)</unmanaged>
        /// <unmanaged-short>ISurfaceImageSourceNative::BeginDraw</unmanaged-short>
        public unsafe DXNET.DXGI.Surface BeginDraw(DXNET.Mathematics.Interop.RawRectangle updateRect, out DXNET.Mathematics.Interop.RawPoint offset)
        {
            DXNET.DXGI.Surface surface;
            System.IntPtr surface_ = System.IntPtr.Zero;
            offset = default (DXNET.Mathematics.Interop.RawPoint);
            DXNET.Result __result__;
            fixed (void *offset_ = &offset)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint0(this._nativePointer, updateRect, &surface_, offset_, (*(void ***)this._nativePointer)[4]);
            if (surface_ != System.IntPtr.Zero)
                surface = new DXNET.DXGI.Surface(surface_);
            else
                surface = null;
            __result__.CheckError();
            return surface;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ISurfaceImageSourceNative::EndDraw()</unmanaged>
        /// <unmanaged-short>ISurfaceImageSourceNative::EndDraw</unmanaged-short>
        public unsafe void EndDraw()
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("54298223-41e1-4a41-9c08-02e8256864a1")]
    public partial class ISurfaceImageSourceNativeWithD2D : DXNET.ComObject
    {
        public ISurfaceImageSourceNativeWithD2D(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ISurfaceImageSourceNativeWithD2D(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ISurfaceImageSourceNativeWithD2D(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetDevice</unmanaged>
        /// <unmanaged-short>SetDevice</unmanaged-short>
        public DXNET.IUnknown Device
        {
            set => SetDevice(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "device">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::SetDevice([In] IUnknown* device)</unmanaged>
        /// <unmanaged-short>ISurfaceImageSourceNativeWithD2D::SetDevice</unmanaged-short>
        internal unsafe void SetDevice(DXNET.IUnknown device)
        {
            System.IntPtr device_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            device_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(device);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)device_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "updateRect">No documentation.</param>
        /// <param name = "iid">No documentation.</param>
        /// <param name = "updateObject">No documentation.</param>
        /// <param name = "offset">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::BeginDraw([In] const RECT&amp; updateRect,[In] const GUID&amp; iid,[Out] void** updateObject,[Out] POINT* offset)</unmanaged>
        /// <unmanaged-short>ISurfaceImageSourceNativeWithD2D::BeginDraw</unmanaged-short>
        public unsafe void BeginDraw(DXNET.Mathematics.Interop.RawRectangle updateRect, System.Guid iid, out System.IntPtr updateObject, out DXNET.Mathematics.Interop.RawPoint offset)
        {
            offset = default (DXNET.Mathematics.Interop.RawPoint);
            DXNET.Result __result__;
            fixed (void *offset_ = &offset)
                fixed (void *updateObject_ = &updateObject)
                    __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &updateRect, &iid, updateObject_, offset_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::EndDraw()</unmanaged>
        /// <unmanaged-short>ISurfaceImageSourceNativeWithD2D::EndDraw</unmanaged-short>
        public unsafe void EndDraw()
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::SuspendDraw()</unmanaged>
        /// <unmanaged-short>ISurfaceImageSourceNativeWithD2D::SuspendDraw</unmanaged-short>
        public unsafe void SuspendDraw()
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::ResumeDraw()</unmanaged>
        /// <unmanaged-short>ISurfaceImageSourceNativeWithD2D::ResumeDraw</unmanaged-short>
        public unsafe void ResumeDraw()
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("43bebd4e-add5-4035-8f85-5608d08e9dc9")]
    public partial class ISwapChainBackgroundPanelNative : DXNET.ComObject
    {
        public ISwapChainBackgroundPanelNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ISwapChainBackgroundPanelNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ISwapChainBackgroundPanelNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetSwapChain</unmanaged>
        /// <unmanaged-short>SetSwapChain</unmanaged-short>
        public DXNET.DXGI.SwapChain SwapChain
        {
            set => SetSwapChain(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "swapChain">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ISwapChainBackgroundPanelNative::SetSwapChain([In] IDXGISwapChain* swapChain)</unmanaged>
        /// <unmanaged-short>ISwapChainBackgroundPanelNative::SetSwapChain</unmanaged-short>
        internal unsafe void SetSwapChain(DXNET.DXGI.SwapChain swapChain)
        {
            System.IntPtr swapChain_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            swapChain_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.SwapChain>(swapChain);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)swapChain_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("F92F19D2-3ADE-45A6-A20C-F6F1EA90554B")]
    public partial class ISwapChainPanelNative : DXNET.ComObject
    {
        public ISwapChainPanelNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ISwapChainPanelNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ISwapChainPanelNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetSwapChain</unmanaged>
        /// <unmanaged-short>SetSwapChain</unmanaged-short>
        public DXNET.DXGI.SwapChain SwapChain
        {
            set => SetSwapChain(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "swapChain">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ISwapChainPanelNative::SetSwapChain([In] IDXGISwapChain* swapChain)</unmanaged>
        /// <unmanaged-short>ISwapChainPanelNative::SetSwapChain</unmanaged-short>
        internal unsafe void SetSwapChain(DXNET.DXGI.SwapChain swapChain)
        {
            System.IntPtr swapChain_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            swapChain_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.SwapChain>(swapChain);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)swapChain_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("D5A2F60C-37B2-44A2-937B-8D8EB9726821")]
    public partial class ISwapChainPanelNative2 : DXNET.DXGI.ISwapChainPanelNative
    {
        public ISwapChainPanelNative2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ISwapChainPanelNative2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ISwapChainPanelNative2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetSwapChainHandle</unmanaged>
        /// <unmanaged-short>SetSwapChainHandle</unmanaged-short>
        public System.IntPtr SwapChainHandle
        {
            set => SetSwapChainHandle(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "swapChainHandle">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ISwapChainPanelNative2::SetSwapChainHandle([In] void* swapChainHandle)</unmanaged>
        /// <unmanaged-short>ISwapChainPanelNative2::SetSwapChainHandle</unmanaged-short>
        internal unsafe void SetSwapChainHandle(System.IntPtr swapChainHandle)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)swapChainHandle, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("e9550983-360b-4f53-b391-afd695078691")]
    public partial class IVirtualSurfaceImageSourceNative : DXNET.DXGI.ISurfaceImageSourceNative
    {
        public IVirtualSurfaceImageSourceNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator IVirtualSurfaceImageSourceNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new IVirtualSurfaceImageSourceNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetVisibleBounds</unmanaged>
        /// <unmanaged-short>GetVisibleBounds</unmanaged-short>
        public DXNET.Mathematics.Interop.RawRectangle VisibleBounds
        {
            get
            {
                GetVisibleBounds(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "updateRect">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::Invalidate([In] RECT updateRect)</unmanaged>
        /// <unmanaged-short>IVirtualSurfaceImageSourceNative::Invalidate</unmanaged-short>
        public unsafe void Invalidate(DXNET.Mathematics.Interop.RawRectangle updateRect)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint0(this._nativePointer, updateRect, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::GetUpdateRectCount([Out] DWORD* count)</unmanaged>
        /// <unmanaged-short>IVirtualSurfaceImageSourceNative::GetUpdateRectCount</unmanaged-short>
        internal unsafe System.Int32 GetUpdateRectCount()
        {
            System.Int32 count;
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &count, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
            return count;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "updates">No documentation.</param>
        /// <param name = "count">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::GetUpdateRects([Out, Buffer] RECT* updates,[In] DWORD count)</unmanaged>
        /// <unmanaged-short>IVirtualSurfaceImageSourceNative::GetUpdateRects</unmanaged-short>
        internal unsafe void GetUpdateRects(DXNET.Mathematics.Interop.RawRectangle[] updates, System.Int32 count)
        {
            DXNET.Result __result__;
            fixed (void *updates_ = updates)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, updates_, count, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bounds">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::GetVisibleBounds([Out] RECT* bounds)</unmanaged>
        /// <unmanaged-short>IVirtualSurfaceImageSourceNative::GetVisibleBounds</unmanaged-short>
        internal unsafe void GetVisibleBounds(out DXNET.Mathematics.Interop.RawRectangle bounds)
        {
            bounds = default (DXNET.Mathematics.Interop.RawRectangle);
            DXNET.Result __result__;
            fixed (void *bounds_ = &bounds)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, bounds_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "callback">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::RegisterForUpdatesNeeded([In, Optional] IVirtualSurfaceUpdatesCallbackNative* callback)</unmanaged>
        /// <unmanaged-short>IVirtualSurfaceImageSourceNative::RegisterForUpdatesNeeded</unmanaged-short>
        internal unsafe void RegisterForUpdatesNeeded(DXNET.DXGI.IVirtualSurfaceUpdatesCallbackNative callback)
        {
            System.IntPtr callback_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            callback_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.IVirtualSurfaceUpdatesCallbackNative>(callback);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)callback_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "newWidth">No documentation.</param>
        /// <param name = "newHeight">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::Resize([In] int newWidth,[In] int newHeight)</unmanaged>
        /// <unmanaged-short>IVirtualSurfaceImageSourceNative::Resize</unmanaged-short>
        public unsafe void Resize(System.Int32 newWidth, System.Int32 newHeight)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, newWidth, newHeight, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("dbf2e947-8e6c-4254-9eee-7738f71386c9")]
    public partial interface IVirtualSurfaceUpdatesCallbackNative : DXNET.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("dbf2e947-8e6c-4254-9eee-7738f71386c9")]
    internal partial class IVirtualSurfaceUpdatesCallbackNativeNative : DXNET.ComObject, DXNET.DXGI.IVirtualSurfaceUpdatesCallbackNative
    {
        public IVirtualSurfaceUpdatesCallbackNativeNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator IVirtualSurfaceUpdatesCallbackNativeNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new IVirtualSurfaceUpdatesCallbackNativeNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded()</unmanaged>
        /// <unmanaged-short>IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded</unmanaged-short>
        internal unsafe void UpdatesNeeded_()
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("9d8e1289-d7b3-465f-8126-250e349af85d")]
    public partial class KeyedMutex : DXNET.DXGI.DeviceChild
    {
        public KeyedMutex(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator KeyedMutex(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new KeyedMutex(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "key">No documentation.</param>
        /// <param name = "dwMilliseconds">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIKeyedMutex::AcquireSync([In] unsigned longlong Key,[In] DWORD dwMilliseconds)</unmanaged>
        /// <unmanaged-short>IDXGIKeyedMutex::AcquireSync</unmanaged-short>
        public unsafe DXNET.Result Acquire(System.Int64 key, System.Int32 dwMilliseconds)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, key, dwMilliseconds, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "key">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIKeyedMutex::ReleaseSync([In] unsigned longlong Key)</unmanaged>
        /// <unmanaged-short>IDXGIKeyedMutex::ReleaseSync</unmanaged-short>
        public unsafe void Release(System.Int64 key)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, key, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ae02eedb-c735-4690-8d52-5a8dc20213aa")]
    public partial class Output : DXNET.DXGI.DXGIObject
    {
        public Output(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Output(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Output(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public DXNET.DXGI.OutputDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetGammaControlCapabilities</unmanaged>
        /// <unmanaged-short>GetGammaControlCapabilities</unmanaged-short>
        public DXNET.DXGI.GammaControlCapabilities GammaControlCapabilities
        {
            get
            {
                GetGammaControlCapabilities(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetGammaControl / SetGammaControl</unmanaged>
        /// <unmanaged-short>GetGammaControl</unmanaged-short>
        public DXNET.DXGI.GammaControl GammaControl
        {
            get
            {
                GetGammaControl(out var __output__);
                return __output__;
            }

            set => SetGammaControl(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFrameStatistics</unmanaged>
        /// <unmanaged-short>GetFrameStatistics</unmanaged-short>
        public DXNET.DXGI.FrameStatistics FrameStatistics
        {
            get
            {
                GetFrameStatistics(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::GetDesc([Out] DXGI_OUTPUT_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>IDXGIOutput::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out DXNET.DXGI.OutputDescription descRef)
        {
            DXNET.DXGI.OutputDescription.__Native descRef_ = default (DXNET.DXGI.OutputDescription.__Native);
            descRef = default (DXNET.DXGI.OutputDescription);
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[7]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "enumFormat">No documentation.</param>
        /// <param name = "flags">No documentation.</param>
        /// <param name = "numModesRef">No documentation.</param>
        /// <param name = "descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::GetDisplayModeList([In] DXGI_FORMAT EnumFormat,[In] unsigned int Flags,[InOut] unsigned int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>IDXGIOutput::GetDisplayModeList</unmanaged-short>
        internal unsafe void GetDisplayModeList(DXNET.DXGI.Format enumFormat, System.Int32 flags, ref System.Int32 numModesRef, DXNET.DXGI.ModeDescription[] descRef)
        {
            DXNET.Result __result__;
            fixed (void *descRef_ = descRef)
                fixed (void *numModesRef_ = &numModesRef)
                    __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)enumFormat), flags, numModesRef_, descRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "modeToMatchRef">No documentation.</param>
        /// <param name = "closestMatchRef">No documentation.</param>
        /// <param name = "concernedDeviceRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::FindClosestMatchingMode([In] const DXGI_MODE_DESC* pModeToMatch,[Out] DXGI_MODE_DESC* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)</unmanaged>
        /// <unmanaged-short>IDXGIOutput::FindClosestMatchingMode</unmanaged-short>
        internal unsafe void FindClosestMatchingMode(ref DXNET.DXGI.ModeDescription modeToMatchRef, out DXNET.DXGI.ModeDescription closestMatchRef, DXNET.IUnknown concernedDeviceRef)
        {
            closestMatchRef = default (DXNET.DXGI.ModeDescription);
            System.IntPtr concernedDeviceRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            concernedDeviceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(concernedDeviceRef);
            fixed (void *closestMatchRef_ = &closestMatchRef)
                fixed (void *modeToMatchRef_ = &modeToMatchRef)
                    __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, modeToMatchRef_, closestMatchRef_, (void *)concernedDeviceRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::WaitForVBlank()</unmanaged>
        /// <unmanaged-short>IDXGIOutput::WaitForVBlank</unmanaged-short>
        public unsafe void WaitForVerticalBlank()
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "deviceRef">No documentation.</param>
        /// <param name = "exclusive">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::TakeOwnership([In] IUnknown* pDevice,[In] BOOL Exclusive)</unmanaged>
        /// <unmanaged-short>IDXGIOutput::TakeOwnership</unmanaged-short>
        public unsafe void TakeOwnership(DXNET.IUnknown deviceRef, DXNET.Mathematics.Interop.RawBool exclusive)
        {
            System.IntPtr deviceRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            deviceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(deviceRef);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)deviceRef_, exclusive, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>void IDXGIOutput::ReleaseOwnership()</unmanaged>
        /// <unmanaged-short>IDXGIOutput::ReleaseOwnership</unmanaged-short>
        public unsafe void ReleaseOwnership()
        {
            DXNET.DXGI.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[12]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gammaCapsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::GetGammaControlCapabilities([Out] DXGI_GAMMA_CONTROL_CAPABILITIES* pGammaCaps)</unmanaged>
        /// <unmanaged-short>IDXGIOutput::GetGammaControlCapabilities</unmanaged-short>
        internal unsafe void GetGammaControlCapabilities(out DXNET.DXGI.GammaControlCapabilities gammaCapsRef)
        {
            DXNET.DXGI.GammaControlCapabilities.__Native gammaCapsRef_ = default (DXNET.DXGI.GammaControlCapabilities.__Native);
            gammaCapsRef = default (DXNET.DXGI.GammaControlCapabilities);
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &gammaCapsRef_, (*(void ***)this._nativePointer)[13]);
            gammaCapsRef.__MarshalFrom(ref gammaCapsRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "arrayRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::SetGammaControl([In] const DXGI_GAMMA_CONTROL* pArray)</unmanaged>
        /// <unmanaged-short>IDXGIOutput::SetGammaControl</unmanaged-short>
        internal unsafe void SetGammaControl(ref DXNET.DXGI.GammaControl arrayRef)
        {
            DXNET.DXGI.GammaControl.__Native arrayRef_ = default (DXNET.DXGI.GammaControl.__Native);
            DXNET.Result __result__;
            arrayRef.__MarshalTo(ref arrayRef_);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &arrayRef_, (*(void ***)this._nativePointer)[14]);
            arrayRef.__MarshalFree(ref arrayRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "arrayRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::GetGammaControl([Out] DXGI_GAMMA_CONTROL* pArray)</unmanaged>
        /// <unmanaged-short>IDXGIOutput::GetGammaControl</unmanaged-short>
        internal unsafe void GetGammaControl(out DXNET.DXGI.GammaControl arrayRef)
        {
            DXNET.DXGI.GammaControl.__Native arrayRef_ = default (DXNET.DXGI.GammaControl.__Native);
            arrayRef = default (DXNET.DXGI.GammaControl);
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &arrayRef_, (*(void ***)this._nativePointer)[15]);
            arrayRef.__MarshalFrom(ref arrayRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "scanoutSurfaceRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::SetDisplaySurface([In] IDXGISurface* pScanoutSurface)</unmanaged>
        /// <unmanaged-short>IDXGIOutput::SetDisplaySurface</unmanaged-short>
        public unsafe void SetDisplaySurface(DXNET.DXGI.Surface scanoutSurfaceRef)
        {
            System.IntPtr scanoutSurfaceRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            scanoutSurfaceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Surface>(scanoutSurfaceRef);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)scanoutSurfaceRef_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "destinationRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::GetDisplaySurfaceData([In] IDXGISurface* pDestination)</unmanaged>
        /// <unmanaged-short>IDXGIOutput::GetDisplaySurfaceData</unmanaged-short>
        public unsafe void CopyDisplaySurfaceTo(DXNET.DXGI.Surface destinationRef)
        {
            System.IntPtr destinationRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            destinationRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Surface>(destinationRef);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)destinationRef_, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "statsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
        /// <unmanaged-short>IDXGIOutput::GetFrameStatistics</unmanaged-short>
        internal unsafe void GetFrameStatistics(out DXNET.DXGI.FrameStatistics statsRef)
        {
            statsRef = default (DXNET.DXGI.FrameStatistics);
            DXNET.Result __result__;
            fixed (void *statsRef_ = &statsRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, statsRef_, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("00cddea8-939b-4b83-a340-a685226666cc")]
    public partial class Output1 : DXNET.DXGI.Output
    {
        public Output1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Output1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Output1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "enumFormat">No documentation.</param>
        /// <param name = "flags">No documentation.</param>
        /// <param name = "numModesRef">No documentation.</param>
        /// <param name = "descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput1::GetDisplayModeList1([In] DXGI_FORMAT EnumFormat,[In] unsigned int Flags,[InOut] unsigned int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC1* pDesc)</unmanaged>
        /// <unmanaged-short>IDXGIOutput1::GetDisplayModeList1</unmanaged-short>
        internal unsafe void GetDisplayModeList1(DXNET.DXGI.Format enumFormat, System.Int32 flags, ref System.Int32 numModesRef, DXNET.DXGI.ModeDescription1[] descRef)
        {
            DXNET.Result __result__;
            fixed (void *descRef_ = descRef)
                fixed (void *numModesRef_ = &numModesRef)
                    __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)enumFormat), flags, numModesRef_, descRef_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "modeToMatchRef">No documentation.</param>
        /// <param name = "closestMatchRef">No documentation.</param>
        /// <param name = "concernedDeviceRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput1::FindClosestMatchingMode1([In] const DXGI_MODE_DESC1* pModeToMatch,[Out] DXGI_MODE_DESC1* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)</unmanaged>
        /// <unmanaged-short>IDXGIOutput1::FindClosestMatchingMode1</unmanaged-short>
        public unsafe void FindClosestMatchingMode1(ref DXNET.DXGI.ModeDescription1 modeToMatchRef, out DXNET.DXGI.ModeDescription1 closestMatchRef, DXNET.IUnknown concernedDeviceRef)
        {
            closestMatchRef = default (DXNET.DXGI.ModeDescription1);
            System.IntPtr concernedDeviceRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            concernedDeviceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(concernedDeviceRef);
            fixed (void *closestMatchRef_ = &closestMatchRef)
                fixed (void *modeToMatchRef_ = &modeToMatchRef)
                    __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, modeToMatchRef_, closestMatchRef_, (void *)concernedDeviceRef_, (*(void ***)this._nativePointer)[20]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "destinationRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput1::GetDisplaySurfaceData1([In] IDXGIResource* pDestination)</unmanaged>
        /// <unmanaged-short>IDXGIOutput1::GetDisplaySurfaceData1</unmanaged-short>
        public unsafe void GetDisplaySurfaceData1(DXNET.DXGI.Resource destinationRef)
        {
            System.IntPtr destinationRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            destinationRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Resource>(destinationRef);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)destinationRef_, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "deviceRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput1::DuplicateOutput([In] IUnknown* pDevice,[Out] IDXGIOutputDuplication** ppOutputDuplication)</unmanaged>
        /// <unmanaged-short>IDXGIOutput1::DuplicateOutput</unmanaged-short>
        public unsafe DXNET.DXGI.OutputDuplication DuplicateOutput(DXNET.IUnknown deviceRef)
        {
            System.IntPtr deviceRef_ = System.IntPtr.Zero;
            DXNET.DXGI.OutputDuplication outputDuplicationOut;
            System.IntPtr outputDuplicationOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            deviceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(deviceRef);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)deviceRef_, &outputDuplicationOut_, (*(void ***)this._nativePointer)[22]);
            if (outputDuplicationOut_ != System.IntPtr.Zero)
                outputDuplicationOut = new DXNET.DXGI.OutputDuplication(outputDuplicationOut_);
            else
                outputDuplicationOut = null;
            __result__.CheckError();
            return outputDuplicationOut;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("595e39d1-2724-4663-99b1-da969de28364")]
    public partial class Output2 : DXNET.DXGI.Output1
    {
        public Output2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Output2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Output2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDXGIOutput2::SupportsOverlays()</unmanaged>
        /// <unmanaged-short>IDXGIOutput2::SupportsOverlays</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool SupportsOverlays_()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[23]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("8a6bb301-7e7e-41F4-a8e0-5b32f7f99b18")]
    public partial class Output3 : DXNET.DXGI.Output2
    {
        public Output3(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Output3(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Output3(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "enumFormat">No documentation.</param>
        /// <param name = "concernedDeviceRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput3::CheckOverlaySupport([In] DXGI_FORMAT EnumFormat,[In] IUnknown* pConcernedDevice,[Out] unsigned int* pFlags)</unmanaged>
        /// <unmanaged-short>IDXGIOutput3::CheckOverlaySupport</unmanaged-short>
        public unsafe DXNET.DXGI.OverlaySupportFlags CheckOverlaySupport(DXNET.DXGI.Format enumFormat, DXNET.IUnknown concernedDeviceRef)
        {
            System.IntPtr concernedDeviceRef_ = System.IntPtr.Zero;
            DXNET.DXGI.OverlaySupportFlags flagsRef;
            DXNET.Result __result__;
            concernedDeviceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(concernedDeviceRef);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)enumFormat), (void *)concernedDeviceRef_, &flagsRef, (*(void ***)this._nativePointer)[24]);
            __result__.CheckError();
            return flagsRef;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("dc7dca35-2196-414d-9F53-617884032a60")]
    public partial class Output4 : DXNET.DXGI.Output3
    {
        public Output4(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Output4(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Output4(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "format">No documentation.</param>
        /// <param name = "colorSpace">No documentation.</param>
        /// <param name = "concernedDeviceRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput4::CheckOverlayColorSpaceSupport([In] DXGI_FORMAT Format,[In] DXGI_COLOR_SPACE_TYPE ColorSpace,[In] IUnknown* pConcernedDevice,[Out] unsigned int* pFlags)</unmanaged>
        /// <unmanaged-short>IDXGIOutput4::CheckOverlayColorSpaceSupport</unmanaged-short>
        public unsafe DXNET.DXGI.OverlayColorSpaceSupportFlags CheckOverlayColorSpaceSupport(DXNET.DXGI.Format format, DXNET.DXGI.ColorSpaceType colorSpace, DXNET.IUnknown concernedDeviceRef)
        {
            System.IntPtr concernedDeviceRef_ = System.IntPtr.Zero;
            DXNET.DXGI.OverlayColorSpaceSupportFlags flagsRef;
            DXNET.Result __result__;
            concernedDeviceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(concernedDeviceRef);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)format), unchecked ((System.Int32)colorSpace), (void *)concernedDeviceRef_, &flagsRef, (*(void ***)this._nativePointer)[25]);
            __result__.CheckError();
            return flagsRef;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("80A07424-AB52-42EB-833C-0C42FD282D98")]
    public partial class Output5 : DXNET.DXGI.Output4
    {
        public Output5(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Output5(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Output5(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "deviceRef">No documentation.</param>
        /// <param name = "flags">No documentation.</param>
        /// <param name = "supportedFormatsCount">No documentation.</param>
        /// <param name = "supportedFormatsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput5::DuplicateOutput1([In] IUnknown* pDevice,[In] unsigned int Flags,[In] unsigned int SupportedFormatsCount,[In, Buffer] const DXGI_FORMAT* pSupportedFormats,[Out] IDXGIOutputDuplication** ppOutputDuplication)</unmanaged>
        /// <unmanaged-short>IDXGIOutput5::DuplicateOutput1</unmanaged-short>
        public unsafe DXNET.DXGI.OutputDuplication DuplicateOutput1(DXNET.IUnknown deviceRef, System.Int32 flags, System.Int32 supportedFormatsCount, DXNET.DXGI.Format[] supportedFormatsRef)
        {
            System.IntPtr deviceRef_ = System.IntPtr.Zero;
            DXNET.DXGI.OutputDuplication outputDuplicationOut;
            System.IntPtr outputDuplicationOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            deviceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(deviceRef);
            fixed (void *supportedFormatsRef_ = supportedFormatsRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (void *)deviceRef_, flags, supportedFormatsCount, supportedFormatsRef_, &outputDuplicationOut_, (*(void ***)this._nativePointer)[26]);
            if (outputDuplicationOut_ != System.IntPtr.Zero)
                outputDuplicationOut = new DXNET.DXGI.OutputDuplication(outputDuplicationOut_);
            else
                outputDuplicationOut = null;
            __result__.CheckError();
            return outputDuplicationOut;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("068346e8-aaec-4b84-add7-137f513f77a1")]
    public partial class Output6 : DXNET.DXGI.Output5
    {
        public Output6(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Output6(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Output6(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDesc1</unmanaged>
        /// <unmanaged-short>GetDesc1</unmanaged-short>
        public DXNET.DXGI.OutputDescription1 Description1
        {
            get
            {
                GetDescription1(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput6::GetDesc1([Out] DXGI_OUTPUT_DESC1* pDesc)</unmanaged>
        /// <unmanaged-short>IDXGIOutput6::GetDesc1</unmanaged-short>
        internal unsafe void GetDescription1(out DXNET.DXGI.OutputDescription1 descRef)
        {
            DXNET.DXGI.OutputDescription1.__Native descRef_ = default (DXNET.DXGI.OutputDescription1.__Native);
            descRef = default (DXNET.DXGI.OutputDescription1);
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[27]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "flagsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput6::CheckHardwareCompositionSupport([Out] unsigned int* pFlags)</unmanaged>
        /// <unmanaged-short>IDXGIOutput6::CheckHardwareCompositionSupport</unmanaged-short>
        public unsafe void CheckHardwareCompositionSupport(out System.Int32 flagsRef)
        {
            DXNET.Result __result__;
            fixed (void *flagsRef_ = &flagsRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, flagsRef_, (*(void ***)this._nativePointer)[28]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("191cfac3-a341-470d-b26e-a864f428319c")]
    public partial class OutputDuplication : DXNET.DXGI.DXGIObject
    {
        public OutputDuplication(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator OutputDuplication(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new OutputDuplication(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public DXNET.DXGI.OutputDuplicateDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "descRef">No documentation.</param>
        /// <unmanaged>void IDXGIOutputDuplication::GetDesc([Out] DXGI_OUTDUPL_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>IDXGIOutputDuplication::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out DXNET.DXGI.OutputDuplicateDescription descRef)
        {
            descRef = default (DXNET.DXGI.OutputDuplicateDescription);
            fixed (void *descRef_ = &descRef)
                DXNET.DXGI.LocalInterop.CalliStdCallvoid(this._nativePointer, descRef_, (*(void ***)this._nativePointer)[7]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "timeoutInMilliseconds">No documentation.</param>
        /// <param name = "frameInfoRef">No documentation.</param>
        /// <param name = "desktopResourceOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutputDuplication::AcquireNextFrame([In] unsigned int TimeoutInMilliseconds,[Out] DXGI_OUTDUPL_FRAME_INFO* pFrameInfo,[Out] IDXGIResource** ppDesktopResource)</unmanaged>
        /// <unmanaged-short>IDXGIOutputDuplication::AcquireNextFrame</unmanaged-short>
        public unsafe DXNET.Result TryAcquireNextFrame(System.Int32 timeoutInMilliseconds, out DXNET.DXGI.OutputDuplicateFrameInformation frameInfoRef, out DXNET.DXGI.Resource desktopResourceOut)
        {
            frameInfoRef = default (DXNET.DXGI.OutputDuplicateFrameInformation);
            System.IntPtr desktopResourceOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *frameInfoRef_ = &frameInfoRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, timeoutInMilliseconds, frameInfoRef_, &desktopResourceOut_, (*(void ***)this._nativePointer)[8]);
            if (desktopResourceOut_ != System.IntPtr.Zero)
                desktopResourceOut = new DXNET.DXGI.Resource(desktopResourceOut_);
            else
                desktopResourceOut = null;
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dirtyRectsBufferSize">No documentation.</param>
        /// <param name = "dirtyRectsBufferRef">No documentation.</param>
        /// <param name = "dirtyRectsBufferSizeRequiredRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutputDuplication::GetFrameDirtyRects([In] unsigned int DirtyRectsBufferSize,[Out, Buffer] RECT* pDirtyRectsBuffer,[Out] unsigned int* pDirtyRectsBufferSizeRequired)</unmanaged>
        /// <unmanaged-short>IDXGIOutputDuplication::GetFrameDirtyRects</unmanaged-short>
        public unsafe void GetFrameDirtyRects(System.Int32 dirtyRectsBufferSize, DXNET.Mathematics.Interop.RawRectangle[] dirtyRectsBufferRef, out System.Int32 dirtyRectsBufferSizeRequiredRef)
        {
            DXNET.Result __result__;
            fixed (void *dirtyRectsBufferSizeRequiredRef_ = &dirtyRectsBufferSizeRequiredRef)
                fixed (void *dirtyRectsBufferRef_ = dirtyRectsBufferRef)
                    __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, dirtyRectsBufferSize, dirtyRectsBufferRef_, dirtyRectsBufferSizeRequiredRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "moveRectsBufferSize">No documentation.</param>
        /// <param name = "moveRectBufferRef">No documentation.</param>
        /// <param name = "moveRectsBufferSizeRequiredRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutputDuplication::GetFrameMoveRects([In] unsigned int MoveRectsBufferSize,[Out, Buffer] DXGI_OUTDUPL_MOVE_RECT* pMoveRectBuffer,[Out] unsigned int* pMoveRectsBufferSizeRequired)</unmanaged>
        /// <unmanaged-short>IDXGIOutputDuplication::GetFrameMoveRects</unmanaged-short>
        public unsafe void GetFrameMoveRects(System.Int32 moveRectsBufferSize, DXNET.DXGI.OutputDuplicateMoveRectangle[] moveRectBufferRef, out System.Int32 moveRectsBufferSizeRequiredRef)
        {
            DXNET.Result __result__;
            fixed (void *moveRectsBufferSizeRequiredRef_ = &moveRectsBufferSizeRequiredRef)
                fixed (void *moveRectBufferRef_ = moveRectBufferRef)
                    __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, moveRectsBufferSize, moveRectBufferRef_, moveRectsBufferSizeRequiredRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "pointerShapeBufferSize">No documentation.</param>
        /// <param name = "pointerShapeBufferRef">No documentation.</param>
        /// <param name = "pointerShapeBufferSizeRequiredRef">No documentation.</param>
        /// <param name = "pointerShapeInfoRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutputDuplication::GetFramePointerShape([In] unsigned int PointerShapeBufferSize,[Out, Buffer] void* pPointerShapeBuffer,[Out] unsigned int* pPointerShapeBufferSizeRequired,[Out] DXGI_OUTDUPL_POINTER_SHAPE_INFO* pPointerShapeInfo)</unmanaged>
        /// <unmanaged-short>IDXGIOutputDuplication::GetFramePointerShape</unmanaged-short>
        public unsafe void GetFramePointerShape(System.Int32 pointerShapeBufferSize, System.IntPtr pointerShapeBufferRef, out System.Int32 pointerShapeBufferSizeRequiredRef, out DXNET.DXGI.OutputDuplicatePointerShapeInformation pointerShapeInfoRef)
        {
            pointerShapeInfoRef = default (DXNET.DXGI.OutputDuplicatePointerShapeInformation);
            DXNET.Result __result__;
            fixed (void *pointerShapeInfoRef_ = &pointerShapeInfoRef)
                fixed (void *pointerShapeBufferSizeRequiredRef_ = &pointerShapeBufferSizeRequiredRef)
                    __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, pointerShapeBufferSize, (void *)pointerShapeBufferRef, pointerShapeBufferSizeRequiredRef_, pointerShapeInfoRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lockedRectRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutputDuplication::MapDesktopSurface([Out] DXGI_MAPPED_RECT* pLockedRect)</unmanaged>
        /// <unmanaged-short>IDXGIOutputDuplication::MapDesktopSurface</unmanaged-short>
        internal unsafe void MapDesktopSurface(out DXNET.DXGI.MappedRectangle lockedRectRef)
        {
            lockedRectRef = default (DXNET.DXGI.MappedRectangle);
            DXNET.Result __result__;
            fixed (void *lockedRectRef_ = &lockedRectRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, lockedRectRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutputDuplication::UnMapDesktopSurface()</unmanaged>
        /// <unmanaged-short>IDXGIOutputDuplication::UnMapDesktopSurface</unmanaged-short>
        public unsafe void UnMapDesktopSurface()
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutputDuplication::ReleaseFrame()</unmanaged>
        /// <unmanaged-short>IDXGIOutputDuplication::ReleaseFrame</unmanaged-short>
        public unsafe void ReleaseFrame()
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("035f3ab4-482e-4e50-b41f-8a7f8bd8960b")]
    public partial class Resource : DXNET.DXGI.DeviceChild
    {
        public Resource(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Resource(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Resource(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSharedHandle</unmanaged>
        /// <unmanaged-short>GetSharedHandle</unmanaged-short>
        public System.IntPtr SharedHandle
        {
            get
            {
                GetSharedHandle(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetEvictionPriority / SetEvictionPriority</unmanaged>
        /// <unmanaged-short>GetEvictionPriority</unmanaged-short>
        public System.Int32 EvictionPriority
        {
            get
            {
                GetEvictionPriority(out var __output__);
                return __output__;
            }

            set => SetEvictionPriority(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sharedHandleRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIResource::GetSharedHandle([Out] void** pSharedHandle)</unmanaged>
        /// <unmanaged-short>IDXGIResource::GetSharedHandle</unmanaged-short>
        internal unsafe void GetSharedHandle(out System.IntPtr sharedHandleRef)
        {
            DXNET.Result __result__;
            fixed (void *sharedHandleRef_ = &sharedHandleRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, sharedHandleRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "usageRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIResource::GetUsage([In] unsigned int* pUsage)</unmanaged>
        /// <unmanaged-short>IDXGIResource::GetUsage</unmanaged-short>
        public unsafe void GetUsage(System.Int32 usageRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &usageRef, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "evictionPriority">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIResource::SetEvictionPriority([In] unsigned int EvictionPriority)</unmanaged>
        /// <unmanaged-short>IDXGIResource::SetEvictionPriority</unmanaged-short>
        internal unsafe void SetEvictionPriority(System.Int32 evictionPriority)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, evictionPriority, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "evictionPriorityRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIResource::GetEvictionPriority([Out] unsigned int* pEvictionPriority)</unmanaged>
        /// <unmanaged-short>IDXGIResource::GetEvictionPriority</unmanaged-short>
        internal unsafe void GetEvictionPriority(out System.Int32 evictionPriorityRef)
        {
            DXNET.Result __result__;
            fixed (void *evictionPriorityRef_ = &evictionPriorityRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, evictionPriorityRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("30961379-4609-4a41-998e-54fe567ee0c1")]
    public partial class Resource1 : DXNET.DXGI.Resource
    {
        public Resource1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Resource1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Resource1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "surfaceOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIResource1::CreateSubresourceSurface([In] unsigned int index,[Out, Fast] IDXGISurface2** ppSurface)</unmanaged>
        /// <unmanaged-short>IDXGIResource1::CreateSubresourceSurface</unmanaged-short>
        internal unsafe void CreateSubresourceSurface(System.Int32 index, DXNET.DXGI.Surface2 surfaceOut)
        {
            System.IntPtr surfaceOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, index, &surfaceOut_, (*(void ***)this._nativePointer)[12]);
            (surfaceOut).NativePointer = surfaceOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "attributesRef">No documentation.</param>
        /// <param name = "dwAccess">No documentation.</param>
        /// <param name = "lpName">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIResource1::CreateSharedHandle([In, Optional] const SECURITY_ATTRIBUTES* pAttributes,[In] DWORD dwAccess,[In, Optional] const wchar_t* lpName,[Out] void** pHandle)</unmanaged>
        /// <unmanaged-short>IDXGIResource1::CreateSharedHandle</unmanaged-short>
        internal unsafe System.IntPtr CreateSharedHandle(DXNET.Win32.SecurityAttributes? attributesRef, DXNET.DXGI.SharedResourceFlags dwAccess, System.String lpName)
        {
            DXNET.Win32.SecurityAttributes attributesRef_;
            System.IntPtr handleRef;
            DXNET.Result __result__;
            if (attributesRef != null)
                attributesRef_ = attributesRef.Value;
            fixed (char *lpName_ = lpName)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, attributesRef == null ? (void *)0 : &attributesRef_, unchecked ((System.Int32)dwAccess), (void *)lpName_, &handleRef, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
            return handleRef;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("cafcb56c-6ac3-4889-bf47-9e23bbd260ec")]
    public partial class Surface : DXNET.DXGI.DeviceChild
    {
        public Surface(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Surface(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Surface(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public DXNET.DXGI.SurfaceDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISurface::GetDesc([Out] DXGI_SURFACE_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>IDXGISurface::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out DXNET.DXGI.SurfaceDescription descRef)
        {
            descRef = default (DXNET.DXGI.SurfaceDescription);
            DXNET.Result __result__;
            fixed (void *descRef_ = &descRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, descRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lockedRectRef">No documentation.</param>
        /// <param name = "mapFlags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISurface::Map([Out] DXGI_MAPPED_RECT* pLockedRect,[In] unsigned int MapFlags)</unmanaged>
        /// <unmanaged-short>IDXGISurface::Map</unmanaged-short>
        internal unsafe void Map(out DXNET.DXGI.MappedRectangle lockedRectRef, System.Int32 mapFlags)
        {
            lockedRectRef = default (DXNET.DXGI.MappedRectangle);
            DXNET.Result __result__;
            fixed (void *lockedRectRef_ = &lockedRectRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, lockedRectRef_, mapFlags, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISurface::Unmap()</unmanaged>
        /// <unmanaged-short>IDXGISurface::Unmap</unmanaged-short>
        public unsafe void Unmap()
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("4AE63092-6327-4c1b-80AE-BFE12EA32B86")]
    public partial class Surface1 : DXNET.DXGI.Surface
    {
        public Surface1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Surface1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Surface1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "discard">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISurface1::GetDC([In] BOOL Discard,[Out] HDC* phdc)</unmanaged>
        /// <unmanaged-short>IDXGISurface1::GetDC</unmanaged-short>
        public unsafe System.IntPtr GetDC(DXNET.Mathematics.Interop.RawBool discard)
        {
            System.IntPtr hdcRef;
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint0(this._nativePointer, discard, &hdcRef, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
            return hdcRef;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dirtyRectRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISurface1::ReleaseDC([In, Optional] RECT* pDirtyRect)</unmanaged>
        /// <unmanaged-short>IDXGISurface1::ReleaseDC</unmanaged-short>
        internal unsafe void ReleaseDC_(DXNET.Mathematics.Interop.RawRectangle? dirtyRectRef)
        {
            DXNET.Mathematics.Interop.RawRectangle dirtyRectRef_;
            DXNET.Result __result__;
            if (dirtyRectRef != null)
                dirtyRectRef_ = dirtyRectRef.Value;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, dirtyRectRef == null ? (void *)0 : &dirtyRectRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("aba496dd-b617-4cb8-a866-bc44d7eb1fa2")]
    public partial class Surface2 : DXNET.DXGI.Surface1
    {
        public Surface2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Surface2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Surface2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "riid">No documentation.</param>
        /// <param name = "parentResourceOut">No documentation.</param>
        /// <param name = "subresourceIndexRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISurface2::GetResource([In] const GUID&amp; riid,[Out] void** ppParentResource,[Out] unsigned int* pSubresourceIndex)</unmanaged>
        /// <unmanaged-short>IDXGISurface2::GetResource</unmanaged-short>
        public unsafe void GetResource(System.Guid riid, out System.IntPtr parentResourceOut, out System.Int32 subresourceIndexRef)
        {
            DXNET.Result __result__;
            fixed (void *subresourceIndexRef_ = &subresourceIndexRef)
                fixed (void *parentResourceOut_ = &parentResourceOut)
                    __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &riid, parentResourceOut_, subresourceIndexRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("310d36a0-d2e7-4c0a-aa04-6a9d23b8886a")]
    public partial class SwapChain : DXNET.DXGI.DeviceChild
    {
        public SwapChain(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SwapChain(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SwapChain(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public DXNET.DXGI.SwapChainDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetContainingOutput</unmanaged>
        /// <unmanaged-short>GetContainingOutput</unmanaged-short>
        public DXNET.DXGI.Output ContainingOutput
        {
            get
            {
                GetContainingOutput(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetLastPresentCount</unmanaged>
        /// <unmanaged-short>GetLastPresentCount</unmanaged-short>
        public System.Int32 LastPresentCount
        {
            get
            {
                GetLastPresentCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "syncInterval">No documentation.</param>
        /// <param name = "flags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::Present([In] unsigned int SyncInterval,[In] unsigned int Flags)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain::Present</unmanaged-short>
        public unsafe DXNET.Result TryPresent(System.Int32 syncInterval, DXNET.DXGI.PresentFlags flags)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, syncInterval, unchecked ((System.Int32)flags), (*(void ***)this._nativePointer)[8]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "buffer">No documentation.</param>
        /// <param name = "riid">No documentation.</param>
        /// <param name = "surfaceOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::GetBuffer([In] unsigned int Buffer,[In] const GUID&amp; riid,[Out] void** ppSurface)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain::GetBuffer</unmanaged-short>
        internal unsafe void GetBuffer(System.Int32 buffer, System.Guid riid, out System.IntPtr surfaceOut)
        {
            DXNET.Result __result__;
            fixed (void *surfaceOut_ = &surfaceOut)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, buffer, &riid, surfaceOut_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fullscreen">No documentation.</param>
        /// <param name = "targetRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::SetFullscreenState([In] BOOL Fullscreen,[In, Optional] IDXGIOutput* pTarget)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain::SetFullscreenState</unmanaged-short>
        public unsafe void SetFullscreenState(DXNET.Mathematics.Interop.RawBool fullscreen, DXNET.DXGI.Output targetRef)
        {
            System.IntPtr targetRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            targetRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Output>(targetRef);
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint0(this._nativePointer, fullscreen, (void *)targetRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fullscreenRef">No documentation.</param>
        /// <param name = "targetOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::GetFullscreenState([Out, Optional] BOOL* pFullscreen,[Out, Optional] IDXGIOutput** ppTarget)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain::GetFullscreenState</unmanaged-short>
        public unsafe void GetFullscreenState(out DXNET.Mathematics.Interop.RawBool fullscreenRef, out DXNET.DXGI.Output targetOut)
        {
            fullscreenRef = default (DXNET.Mathematics.Interop.RawBool);
            System.IntPtr targetOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *fullscreenRef_ = &fullscreenRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, fullscreenRef_, &targetOut_, (*(void ***)this._nativePointer)[11]);
            if (targetOut_ != System.IntPtr.Zero)
                targetOut = new DXNET.DXGI.Output(targetOut_);
            else
                targetOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::GetDesc([Out] DXGI_SWAP_CHAIN_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out DXNET.DXGI.SwapChainDescription descRef)
        {
            descRef = default (DXNET.DXGI.SwapChainDescription);
            DXNET.Result __result__;
            fixed (void *descRef_ = &descRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, descRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bufferCount">No documentation.</param>
        /// <param name = "width">No documentation.</param>
        /// <param name = "height">No documentation.</param>
        /// <param name = "newFormat">No documentation.</param>
        /// <param name = "swapChainFlags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::ResizeBuffers([In] unsigned int BufferCount,[In] unsigned int Width,[In] unsigned int Height,[In] DXGI_FORMAT NewFormat,[In] unsigned int SwapChainFlags)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain::ResizeBuffers</unmanaged-short>
        public unsafe void ResizeBuffers(System.Int32 bufferCount, System.Int32 width, System.Int32 height, DXNET.DXGI.Format newFormat, DXNET.DXGI.SwapChainFlags swapChainFlags)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, bufferCount, width, height, unchecked ((System.Int32)newFormat), unchecked ((System.Int32)swapChainFlags), (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "newTargetParametersRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::ResizeTarget([In] const DXGI_MODE_DESC* pNewTargetParameters)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain::ResizeTarget</unmanaged-short>
        public unsafe void ResizeTarget(ref DXNET.DXGI.ModeDescription newTargetParametersRef)
        {
            DXNET.Result __result__;
            fixed (void *newTargetParametersRef_ = &newTargetParametersRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, newTargetParametersRef_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "outputOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::GetContainingOutput([Out] IDXGIOutput** ppOutput)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain::GetContainingOutput</unmanaged-short>
        internal unsafe void GetContainingOutput(out DXNET.DXGI.Output outputOut)
        {
            System.IntPtr outputOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &outputOut_, (*(void ***)this._nativePointer)[15]);
            if (outputOut_ != System.IntPtr.Zero)
                outputOut = new DXNET.DXGI.Output(outputOut_);
            else
                outputOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "statsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain::GetFrameStatistics</unmanaged-short>
        public unsafe DXNET.Result TryGetFrameStatistics(out DXNET.DXGI.FrameStatistics statsRef)
        {
            statsRef = default (DXNET.DXGI.FrameStatistics);
            DXNET.Result __result__;
            fixed (void *statsRef_ = &statsRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, statsRef_, (*(void ***)this._nativePointer)[16]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lastPresentCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::GetLastPresentCount([Out] unsigned int* pLastPresentCount)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain::GetLastPresentCount</unmanaged-short>
        internal unsafe void GetLastPresentCount(out System.Int32 lastPresentCountRef)
        {
            DXNET.Result __result__;
            fixed (void *lastPresentCountRef_ = &lastPresentCountRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, lastPresentCountRef_, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("790a45f7-0d42-4876-983a-0a55cfe6f4aa")]
    public partial class SwapChain1 : DXNET.DXGI.SwapChain
    {
        public SwapChain1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SwapChain1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SwapChain1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDesc1</unmanaged>
        /// <unmanaged-short>GetDesc1</unmanaged-short>
        public DXNET.DXGI.SwapChainDescription1 Description1
        {
            get
            {
                GetDescription1(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFullscreenDesc</unmanaged>
        /// <unmanaged-short>GetFullscreenDesc</unmanaged-short>
        public DXNET.DXGI.SwapChainFullScreenDescription FullscreenDescription
        {
            get
            {
                GetFullscreenDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetHwnd</unmanaged>
        /// <unmanaged-short>GetHwnd</unmanaged-short>
        public System.IntPtr Hwnd
        {
            get
            {
                GetHwnd(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>IsTemporaryMonoSupported</unmanaged>
        /// <unmanaged-short>IsTemporaryMonoSupported</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsTemporaryMonoSupported
        {
            get => IsTemporaryMonoSupported_();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetRestrictToOutput</unmanaged>
        /// <unmanaged-short>GetRestrictToOutput</unmanaged-short>
        public DXNET.DXGI.Output RestrictToOutput
        {
            get
            {
                GetRestrictToOutput(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetBackgroundColor / SetBackgroundColor</unmanaged>
        /// <unmanaged-short>GetBackgroundColor</unmanaged-short>
        public DXNET.Mathematics.Interop.RawColor4 BackgroundColor
        {
            get
            {
                GetBackgroundColor(out var __output__);
                return __output__;
            }

            set => SetBackgroundColor(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetRotation / SetRotation</unmanaged>
        /// <unmanaged-short>GetRotation</unmanaged-short>
        public DXNET.DXGI.DisplayModeRotation Rotation
        {
            get
            {
                GetRotation(out var __output__);
                return __output__;
            }

            set => SetRotation(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain1::GetDesc1([Out] DXGI_SWAP_CHAIN_DESC1* pDesc)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain1::GetDesc1</unmanaged-short>
        internal unsafe void GetDescription1(out DXNET.DXGI.SwapChainDescription1 descRef)
        {
            descRef = default (DXNET.DXGI.SwapChainDescription1);
            DXNET.Result __result__;
            fixed (void *descRef_ = &descRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, descRef_, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain1::GetFullscreenDesc([Out] DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain1::GetFullscreenDesc</unmanaged-short>
        internal unsafe void GetFullscreenDescription(out DXNET.DXGI.SwapChainFullScreenDescription descRef)
        {
            descRef = default (DXNET.DXGI.SwapChainFullScreenDescription);
            DXNET.Result __result__;
            fixed (void *descRef_ = &descRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, descRef_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hwndRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain1::GetHwnd([Out] HWND* pHwnd)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain1::GetHwnd</unmanaged-short>
        internal unsafe void GetHwnd(out System.IntPtr hwndRef)
        {
            DXNET.Result __result__;
            fixed (void *hwndRef_ = &hwndRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, hwndRef_, (*(void ***)this._nativePointer)[20]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "refiid">No documentation.</param>
        /// <param name = "unkOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain1::GetCoreWindow([In] const GUID&amp; refiid,[Out] void** ppUnk)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain1::GetCoreWindow</unmanaged-short>
        public unsafe void GetCoreWindow(System.Guid refiid, out System.IntPtr unkOut)
        {
            DXNET.Result __result__;
            fixed (void *unkOut_ = &unkOut)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &refiid, unkOut_, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "syncInterval">No documentation.</param>
        /// <param name = "presentFlags">No documentation.</param>
        /// <param name = "presentParametersRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain1::Present1([In] unsigned int SyncInterval,[In] unsigned int PresentFlags,[In] const DXGI_PRESENT_PARAMETERS* pPresentParameters)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain1::Present1</unmanaged-short>
        internal unsafe DXNET.Result Present1(System.Int32 syncInterval, DXNET.DXGI.PresentFlags presentFlags, System.IntPtr presentParametersRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, syncInterval, unchecked ((System.Int32)presentFlags), (void *)presentParametersRef, (*(void ***)this._nativePointer)[22]);
            __result__.CheckError();
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDXGISwapChain1::IsTemporaryMonoSupported()</unmanaged>
        /// <unmanaged-short>IDXGISwapChain1::IsTemporaryMonoSupported</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool IsTemporaryMonoSupported_()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[23]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "restrictToOutputOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain1::GetRestrictToOutput([Out] IDXGIOutput** ppRestrictToOutput)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain1::GetRestrictToOutput</unmanaged-short>
        internal unsafe void GetRestrictToOutput(out DXNET.DXGI.Output restrictToOutputOut)
        {
            System.IntPtr restrictToOutputOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &restrictToOutputOut_, (*(void ***)this._nativePointer)[24]);
            if (restrictToOutputOut_ != System.IntPtr.Zero)
                restrictToOutputOut = new DXNET.DXGI.Output(restrictToOutputOut_);
            else
                restrictToOutputOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "colorRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain1::SetBackgroundColor([In] const D3DCOLORVALUE* pColor)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain1::SetBackgroundColor</unmanaged-short>
        internal unsafe void SetBackgroundColor(DXNET.Mathematics.Interop.RawColor4 colorRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, &colorRef, (*(void ***)this._nativePointer)[25]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "colorRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain1::GetBackgroundColor([Out] D3DCOLORVALUE* pColor)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain1::GetBackgroundColor</unmanaged-short>
        internal unsafe void GetBackgroundColor(out DXNET.Mathematics.Interop.RawColor4 colorRef)
        {
            colorRef = default (DXNET.Mathematics.Interop.RawColor4);
            DXNET.Result __result__;
            fixed (void *colorRef_ = &colorRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, colorRef_, (*(void ***)this._nativePointer)[26]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rotation">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain1::SetRotation([In] DXGI_MODE_ROTATION Rotation)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain1::SetRotation</unmanaged-short>
        internal unsafe void SetRotation(DXNET.DXGI.DisplayModeRotation rotation)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)rotation), (*(void ***)this._nativePointer)[27]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rotationRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain1::GetRotation([Out] DXGI_MODE_ROTATION* pRotation)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain1::GetRotation</unmanaged-short>
        internal unsafe void GetRotation(out DXNET.DXGI.DisplayModeRotation rotationRef)
        {
            DXNET.Result __result__;
            fixed (void *rotationRef_ = &rotationRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, rotationRef_, (*(void ***)this._nativePointer)[28]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a8be2ac4-199f-4946-b331-79599fb98de7")]
    public partial class SwapChain2 : DXNET.DXGI.SwapChain1
    {
        public SwapChain2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SwapChain2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SwapChain2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMaximumFrameLatency / SetMaximumFrameLatency</unmanaged>
        /// <unmanaged-short>GetMaximumFrameLatency</unmanaged-short>
        public System.Int32 MaximumFrameLatency
        {
            get
            {
                GetMaximumFrameLatency(out var __output__);
                return __output__;
            }

            set => SetMaximumFrameLatency(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFrameLatencyWaitableObject</unmanaged>
        /// <unmanaged-short>GetFrameLatencyWaitableObject</unmanaged-short>
        public System.IntPtr FrameLatencyWaitableObject
        {
            get => GetFrameLatencyWaitableObject();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMatrixTransform / SetMatrixTransform</unmanaged>
        /// <unmanaged-short>GetMatrixTransform</unmanaged-short>
        public DXNET.Mathematics.Interop.RawMatrix3x2 MatrixTransform
        {
            get
            {
                GetMatrixTransform(out var __output__);
                return __output__;
            }

            set => SetMatrixTransform(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "width">No documentation.</param>
        /// <param name = "height">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain2::SetSourceSize([In] unsigned int Width,[In] unsigned int Height)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain2::SetSourceSize</unmanaged-short>
        internal unsafe void SetSourceSize(System.Int32 width, System.Int32 height)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, width, height, (*(void ***)this._nativePointer)[29]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "widthRef">No documentation.</param>
        /// <param name = "heightRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain2::GetSourceSize([Out] unsigned int* pWidth,[Out] unsigned int* pHeight)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain2::GetSourceSize</unmanaged-short>
        internal unsafe void GetSourceSize(out System.Int32 widthRef, out System.Int32 heightRef)
        {
            DXNET.Result __result__;
            fixed (void *heightRef_ = &heightRef)
                fixed (void *widthRef_ = &widthRef)
                    __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, widthRef_, heightRef_, (*(void ***)this._nativePointer)[30]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "maxLatency">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain2::SetMaximumFrameLatency([In] unsigned int MaxLatency)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain2::SetMaximumFrameLatency</unmanaged-short>
        internal unsafe void SetMaximumFrameLatency(System.Int32 maxLatency)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, maxLatency, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "maxLatencyRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain2::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain2::GetMaximumFrameLatency</unmanaged-short>
        internal unsafe void GetMaximumFrameLatency(out System.Int32 maxLatencyRef)
        {
            DXNET.Result __result__;
            fixed (void *maxLatencyRef_ = &maxLatencyRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, maxLatencyRef_, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>void* IDXGISwapChain2::GetFrameLatencyWaitableObject()</unmanaged>
        /// <unmanaged-short>IDXGISwapChain2::GetFrameLatencyWaitableObject</unmanaged-short>
        internal unsafe System.IntPtr GetFrameLatencyWaitableObject()
        {
            System.IntPtr __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[33]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "matrixRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain2::SetMatrixTransform([In] const DXGI_MATRIX_3X2_F* pMatrix)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain2::SetMatrixTransform</unmanaged-short>
        internal unsafe void SetMatrixTransform(ref DXNET.Mathematics.Interop.RawMatrix3x2 matrixRef)
        {
            DXNET.Result __result__;
            fixed (void *matrixRef_ = &matrixRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, matrixRef_, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "matrixRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain2::GetMatrixTransform([Out] DXGI_MATRIX_3X2_F* pMatrix)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain2::GetMatrixTransform</unmanaged-short>
        internal unsafe void GetMatrixTransform(out DXNET.Mathematics.Interop.RawMatrix3x2 matrixRef)
        {
            matrixRef = default (DXNET.Mathematics.Interop.RawMatrix3x2);
            DXNET.Result __result__;
            fixed (void *matrixRef_ = &matrixRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, matrixRef_, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("94d99bdb-f1f8-4ab0-b236-7da0170edab1")]
    public partial class SwapChain3 : DXNET.DXGI.SwapChain2
    {
        public SwapChain3(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SwapChain3(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SwapChain3(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetCurrentBackBufferIndex</unmanaged>
        /// <unmanaged-short>GetCurrentBackBufferIndex</unmanaged-short>
        public System.Int32 CurrentBackBufferIndex
        {
            get => GetCurrentBackBufferIndex();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetColorSpace1</unmanaged>
        /// <unmanaged-short>SetColorSpace1</unmanaged-short>
        public DXNET.DXGI.ColorSpaceType ColorSpace1
        {
            set => SetColorSpace1(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDXGISwapChain3::GetCurrentBackBufferIndex()</unmanaged>
        /// <unmanaged-short>IDXGISwapChain3::GetCurrentBackBufferIndex</unmanaged-short>
        internal unsafe System.Int32 GetCurrentBackBufferIndex()
        {
            System.Int32 __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[36]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "colorSpace">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain3::CheckColorSpaceSupport([In] DXGI_COLOR_SPACE_TYPE ColorSpace,[Out] unsigned int* pColorSpaceSupport)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain3::CheckColorSpaceSupport</unmanaged-short>
        public unsafe DXNET.DXGI.SwapChainColorSpaceSupportFlags CheckColorSpaceSupport(DXNET.DXGI.ColorSpaceType colorSpace)
        {
            DXNET.DXGI.SwapChainColorSpaceSupportFlags colorSpaceSupportRef;
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)colorSpace), &colorSpaceSupportRef, (*(void ***)this._nativePointer)[37]);
            __result__.CheckError();
            return colorSpaceSupportRef;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "colorSpace">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain3::SetColorSpace1([In] DXGI_COLOR_SPACE_TYPE ColorSpace)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain3::SetColorSpace1</unmanaged-short>
        internal unsafe void SetColorSpace1(DXNET.DXGI.ColorSpaceType colorSpace)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)colorSpace), (*(void ***)this._nativePointer)[38]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bufferCount">No documentation.</param>
        /// <param name = "width">No documentation.</param>
        /// <param name = "height">No documentation.</param>
        /// <param name = "format">No documentation.</param>
        /// <param name = "swapChainFlags">No documentation.</param>
        /// <param name = "creationNodeMaskRef">No documentation.</param>
        /// <param name = "presentQueueOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain3::ResizeBuffers1([In] unsigned int BufferCount,[In] unsigned int Width,[In] unsigned int Height,[In] DXGI_FORMAT Format,[In] unsigned int SwapChainFlags,[In, Buffer] const unsigned int* pCreationNodeMask,[In, Buffer] const IUnknown** ppPresentQueue)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain3::ResizeBuffers1</unmanaged-short>
        public unsafe void ResizeBuffers1(System.Int32 bufferCount, System.Int32 width, System.Int32 height, DXNET.DXGI.Format format, DXNET.DXGI.SwapChainFlags swapChainFlags, System.Int32[] creationNodeMaskRef, DXNET.IUnknown[] presentQueueOut)
        {
            System.IntPtr*presentQueueOut_;
            presentQueueOut_ = (System.IntPtr*)0;
            if (presentQueueOut != null)
            {
                System.IntPtr*_presentQueueOut = stackalloc System.IntPtr[presentQueueOut.Length];
                presentQueueOut_ = _presentQueueOut;
            }

            DXNET.Result __result__;
            if (presentQueueOut != null)
                for (int i = 0; i < presentQueueOut.Length; ++i)
                    (presentQueueOut_)[i] = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(presentQueueOut[i]);
            fixed (void *creationNodeMaskRef_ = creationNodeMaskRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, bufferCount, width, height, unchecked ((System.Int32)format), unchecked ((System.Int32)swapChainFlags), creationNodeMaskRef_, (void *)presentQueueOut_, (*(void ***)this._nativePointer)[39]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3D585D5A-BD4A-489E-B1F4-3DBCB6452FFB")]
    public partial class SwapChain4 : DXNET.DXGI.SwapChain3
    {
        public SwapChain4(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SwapChain4(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SwapChain4(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "type">No documentation.</param>
        /// <param name = "size">No documentation.</param>
        /// <param name = "metaDataRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain4::SetHDRMetaData([In] DXGI_HDR_METADATA_TYPE Type,[In] unsigned int Size,[In, Buffer, Optional] void* pMetaData)</unmanaged>
        /// <unmanaged-short>IDXGISwapChain4::SetHDRMetaData</unmanaged-short>
        public unsafe void SetHDRMetaData(DXNET.DXGI.HdrMetadataType type, System.Int32 size, System.IntPtr metaDataRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)type), size, (void *)metaDataRef, (*(void ***)this._nativePointer)[40]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("dd95b90b-f05f-4f6a-bd65-25bfb264bd84")]
    public partial class SwapChainMedia : DXNET.ComObject
    {
        public SwapChainMedia(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SwapChainMedia(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SwapChainMedia(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFrameStatisticsMedia</unmanaged>
        /// <unmanaged-short>GetFrameStatisticsMedia</unmanaged-short>
        public DXNET.DXGI.FrameStatisticsMedia FrameStatisticsMedia
        {
            get
            {
                GetFrameStatisticsMedia(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetPresentDuration</unmanaged>
        /// <unmanaged-short>SetPresentDuration</unmanaged-short>
        public System.Int32 PresentDuration
        {
            set => SetPresentDuration(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "statsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChainMedia::GetFrameStatisticsMedia([Out] DXGI_FRAME_STATISTICS_MEDIA* pStats)</unmanaged>
        /// <unmanaged-short>IDXGISwapChainMedia::GetFrameStatisticsMedia</unmanaged-short>
        internal unsafe void GetFrameStatisticsMedia(out DXNET.DXGI.FrameStatisticsMedia statsRef)
        {
            statsRef = default (DXNET.DXGI.FrameStatisticsMedia);
            DXNET.Result __result__;
            fixed (void *statsRef_ = &statsRef)
                __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, statsRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "duration">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChainMedia::SetPresentDuration([In] unsigned int Duration)</unmanaged>
        /// <unmanaged-short>IDXGISwapChainMedia::SetPresentDuration</unmanaged-short>
        internal unsafe void SetPresentDuration(System.Int32 duration)
        {
            DXNET.Result __result__;
            __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, duration, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "desiredPresentDuration">No documentation.</param>
        /// <param name = "closestSmallerPresentDurationRef">No documentation.</param>
        /// <param name = "closestLargerPresentDurationRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChainMedia::CheckPresentDurationSupport([In] unsigned int DesiredPresentDuration,[Out] unsigned int* pClosestSmallerPresentDuration,[Out] unsigned int* pClosestLargerPresentDuration)</unmanaged>
        /// <unmanaged-short>IDXGISwapChainMedia::CheckPresentDurationSupport</unmanaged-short>
        public unsafe void CheckPresentDurationSupport(System.Int32 desiredPresentDuration, out System.Int32 closestSmallerPresentDurationRef, out System.Int32 closestLargerPresentDurationRef)
        {
            DXNET.Result __result__;
            fixed (void *closestLargerPresentDurationRef_ = &closestLargerPresentDurationRef)
                fixed (void *closestSmallerPresentDurationRef_ = &closestSmallerPresentDurationRef)
                    __result__ = DXNET.DXGI.LocalInterop.CalliStdCallint(this._nativePointer, desiredPresentDuration, closestSmallerPresentDurationRef_, closestLargerPresentDurationRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }
}
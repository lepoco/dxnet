// <auto-generated/>

namespace DXNET.Direct2D1
{
    [System.Runtime.InteropServices.GuidAttribute("0359dc30-95e6-4568-9055-27720d130e93")]
    public partial class AnalysisTransform : DXNET.ComObject
    {
        public AnalysisTransform(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator AnalysisTransform(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new AnalysisTransform(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "analysisData">No documentation.</param>
        /// <param name = "analysisDataCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1AnalysisTransform::ProcessAnalysisResults([In, Buffer] const unsigned char* analysisData,[In] unsigned int analysisDataCount)</unmanaged>
        /// <unmanaged-short>ID2D1AnalysisTransform::ProcessAnalysisResults</unmanaged-short>
        internal unsafe void ProcessAnalysisResults(System.IntPtr analysisData, System.Int32 analysisDataCount)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)analysisData, analysisDataCount, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a2296057-ea42-4099-983b-539fb6505426")]
    public partial class Bitmap : DXNET.Direct2D1.Image
    {
        public Bitmap(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Bitmap(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Bitmap(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSize</unmanaged>
        /// <unmanaged-short>GetSize</unmanaged-short>
        public DXNET.Size2F Size
        {
            get => GetSize();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPixelSize</unmanaged>
        /// <unmanaged-short>GetPixelSize</unmanaged-short>
        public DXNET.Size2 PixelSize
        {
            get => GetPixelSize();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPixelFormat</unmanaged>
        /// <unmanaged-short>GetPixelFormat</unmanaged-short>
        public DXNET.Direct2D1.PixelFormat PixelFormat
        {
            get => GetPixelFormat();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D_SIZE_F ID2D1Bitmap::GetSize()</unmanaged>
        /// <unmanaged-short>ID2D1Bitmap::GetSize</unmanaged-short>
        internal unsafe DXNET.Size2F GetSize()
        {
            DXNET.Size2F __result__;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D_SIZE_U ID2D1Bitmap::GetPixelSize()</unmanaged>
        /// <unmanaged-short>ID2D1Bitmap::GetPixelSize</unmanaged-short>
        internal unsafe DXNET.Size2 GetPixelSize()
        {
            DXNET.Size2 __result__;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_PIXEL_FORMAT ID2D1Bitmap::GetPixelFormat()</unmanaged>
        /// <unmanaged-short>ID2D1Bitmap::GetPixelFormat</unmanaged-short>
        internal unsafe DXNET.Direct2D1.PixelFormat GetPixelFormat()
        {
            DXNET.Direct2D1.PixelFormat __result__;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dpiX">No documentation.</param>
        /// <param name = "dpiY">No documentation.</param>
        /// <unmanaged>void ID2D1Bitmap::GetDpi([Out] float* dpiX,[Out] float* dpiY)</unmanaged>
        /// <unmanaged-short>ID2D1Bitmap::GetDpi</unmanaged-short>
        internal unsafe void GetDpi(out System.Single dpiX, out System.Single dpiY)
        {
            fixed (void *dpiY_ = &dpiY)
                fixed (void *dpiX_ = &dpiX)
                    DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, dpiX_, dpiY_, (*(void ***)this._nativePointer)[7]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "destPoint">No documentation.</param>
        /// <param name = "bitmap">No documentation.</param>
        /// <param name = "srcRect">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Bitmap::CopyFromBitmap([In, Optional] const D2D_POINT_2U* destPoint,[In] ID2D1Bitmap* bitmap,[In, Optional] const D2D_RECT_U* srcRect)</unmanaged>
        /// <unmanaged-short>ID2D1Bitmap::CopyFromBitmap</unmanaged-short>
        internal unsafe void CopyFromBitmap(DXNET.Mathematics.Interop.RawPoint? destPoint, DXNET.Direct2D1.Bitmap bitmap, DXNET.Mathematics.Interop.RawRectangle? srcRect)
        {
            DXNET.Mathematics.Interop.RawPoint destPoint_;
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawRectangle srcRect_;
            DXNET.Result __result__;
            if (destPoint != null)
                destPoint_ = destPoint.Value;
            bitmap_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Bitmap>(bitmap);
            if (srcRect != null)
                srcRect_ = srcRect.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, destPoint == null ? (void *)0 : &destPoint_, (void *)bitmap_, srcRect == null ? (void *)0 : &srcRect_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "destPoint">No documentation.</param>
        /// <param name = "renderTarget">No documentation.</param>
        /// <param name = "srcRect">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Bitmap::CopyFromRenderTarget([In, Optional] const D2D_POINT_2U* destPoint,[In] ID2D1RenderTarget* renderTarget,[In, Optional] const D2D_RECT_U* srcRect)</unmanaged>
        /// <unmanaged-short>ID2D1Bitmap::CopyFromRenderTarget</unmanaged-short>
        internal unsafe void CopyFromRenderTarget(DXNET.Mathematics.Interop.RawPoint? destPoint, DXNET.Direct2D1.RenderTarget renderTarget, DXNET.Mathematics.Interop.RawRectangle? srcRect)
        {
            DXNET.Mathematics.Interop.RawPoint destPoint_;
            System.IntPtr renderTarget_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawRectangle srcRect_;
            DXNET.Result __result__;
            if (destPoint != null)
                destPoint_ = destPoint.Value;
            renderTarget_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.RenderTarget>(renderTarget);
            if (srcRect != null)
                srcRect_ = srcRect.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, destPoint == null ? (void *)0 : &destPoint_, (void *)renderTarget_, srcRect == null ? (void *)0 : &srcRect_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dstRect">No documentation.</param>
        /// <param name = "srcData">No documentation.</param>
        /// <param name = "pitch">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Bitmap::CopyFromMemory([In, Optional] const D2D_RECT_U* dstRect,[In] const void* srcData,[In] unsigned int pitch)</unmanaged>
        /// <unmanaged-short>ID2D1Bitmap::CopyFromMemory</unmanaged-short>
        internal unsafe void CopyFromMemory(DXNET.Mathematics.Interop.RawRectangle? dstRect, System.IntPtr srcData, System.Int32 pitch)
        {
            DXNET.Mathematics.Interop.RawRectangle dstRect_;
            DXNET.Result __result__;
            if (dstRect != null)
                dstRect_ = dstRect.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, dstRect == null ? (void *)0 : &dstRect_, (void *)srcData, pitch, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a898a84c-3873-4588-b08b-ebbf978df041")]
    public partial class Bitmap1 : DXNET.Direct2D1.Bitmap
    {
        public Bitmap1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Bitmap1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Bitmap1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetColorContext</unmanaged>
        /// <unmanaged-short>GetColorContext</unmanaged-short>
        public DXNET.Direct2D1.ColorContext ColorContext
        {
            get
            {
                GetColorContext(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetOptions</unmanaged>
        /// <unmanaged-short>GetOptions</unmanaged-short>
        public DXNET.Direct2D1.BitmapOptions Options
        {
            get => GetOptions();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSurface</unmanaged>
        /// <unmanaged-short>GetSurface</unmanaged-short>
        public DXNET.DXGI.Surface Surface
        {
            get
            {
                GetSurface(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "colorContext">No documentation.</param>
        /// <unmanaged>void ID2D1Bitmap1::GetColorContext([Out, Optional] ID2D1ColorContext** colorContext)</unmanaged>
        /// <unmanaged-short>ID2D1Bitmap1::GetColorContext</unmanaged-short>
        internal unsafe void GetColorContext(out DXNET.Direct2D1.ColorContext colorContext)
        {
            System.IntPtr colorContext_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &colorContext_, (*(void ***)this._nativePointer)[11]);
            if (colorContext_ != System.IntPtr.Zero)
                colorContext = new DXNET.Direct2D1.ColorContext(colorContext_);
            else
                colorContext = null;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_BITMAP_OPTIONS ID2D1Bitmap1::GetOptions()</unmanaged>
        /// <unmanaged-short>ID2D1Bitmap1::GetOptions</unmanaged-short>
        internal unsafe DXNET.Direct2D1.BitmapOptions GetOptions()
        {
            DXNET.Direct2D1.BitmapOptions __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1BitmapOptions(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dxgiSurface">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Bitmap1::GetSurface([Out, Optional] IDXGISurface** dxgiSurface)</unmanaged>
        /// <unmanaged-short>ID2D1Bitmap1::GetSurface</unmanaged-short>
        internal unsafe void GetSurface(out DXNET.DXGI.Surface dxgiSurface)
        {
            System.IntPtr dxgiSurface_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &dxgiSurface_, (*(void ***)this._nativePointer)[13]);
            if (dxgiSurface_ != System.IntPtr.Zero)
                dxgiSurface = new DXNET.DXGI.Surface(dxgiSurface_);
            else
                dxgiSurface = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "options">No documentation.</param>
        /// <param name = "mappedRect">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Bitmap1::Map([In] D2D1_MAP_OPTIONS options,[Out] D2D1_MAPPED_RECT* mappedRect)</unmanaged>
        /// <unmanaged-short>ID2D1Bitmap1::Map</unmanaged-short>
        internal unsafe void Map(DXNET.Direct2D1.MapOptions options, out DXNET.Direct2D1.MappedRectangle mappedRect)
        {
            mappedRect = default (DXNET.Direct2D1.MappedRectangle);
            DXNET.Result __result__;
            fixed (void *mappedRect_ = &mappedRect)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)options), mappedRect_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Bitmap1::Unmap()</unmanaged>
        /// <unmanaged-short>ID2D1Bitmap1::Unmap</unmanaged-short>
        public unsafe void Unmap()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906aa-12e2-11dc-9fed-001143a055f9")]
    public partial class BitmapBrush : DXNET.Direct2D1.Brush
    {
        public BitmapBrush(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapBrush(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapBrush(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetExtendModeX / SetExtendModeX</unmanaged>
        /// <unmanaged-short>GetExtendModeX</unmanaged-short>
        public DXNET.Direct2D1.ExtendMode ExtendModeX
        {
            get => GetExtendModeX();
            set => SetExtendModeX(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetExtendModeY / SetExtendModeY</unmanaged>
        /// <unmanaged-short>GetExtendModeY</unmanaged-short>
        public DXNET.Direct2D1.ExtendMode ExtendModeY
        {
            get => GetExtendModeY();
            set => SetExtendModeY(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetInterpolationMode / SetInterpolationMode</unmanaged>
        /// <unmanaged-short>GetInterpolationMode</unmanaged-short>
        public DXNET.Direct2D1.BitmapInterpolationMode InterpolationMode
        {
            get => GetInterpolationMode();
            set => SetInterpolationMode(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetBitmap / SetBitmap</unmanaged>
        /// <unmanaged-short>GetBitmap</unmanaged-short>
        public DXNET.Direct2D1.Bitmap Bitmap
        {
            get
            {
                GetBitmap(out var __output__);
                return __output__;
            }

            set => SetBitmap(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "extendModeX">No documentation.</param>
        /// <unmanaged>void ID2D1BitmapBrush::SetExtendModeX([In] D2D1_EXTEND_MODE extendModeX)</unmanaged>
        /// <unmanaged-short>ID2D1BitmapBrush::SetExtendModeX</unmanaged-short>
        internal unsafe void SetExtendModeX(DXNET.Direct2D1.ExtendMode extendModeX)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)extendModeX), (*(void ***)this._nativePointer)[8]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "extendModeY">No documentation.</param>
        /// <unmanaged>void ID2D1BitmapBrush::SetExtendModeY([In] D2D1_EXTEND_MODE extendModeY)</unmanaged>
        /// <unmanaged-short>ID2D1BitmapBrush::SetExtendModeY</unmanaged-short>
        internal unsafe void SetExtendModeY(DXNET.Direct2D1.ExtendMode extendModeY)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)extendModeY), (*(void ***)this._nativePointer)[9]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "interpolationMode">No documentation.</param>
        /// <unmanaged>void ID2D1BitmapBrush::SetInterpolationMode([In] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode)</unmanaged>
        /// <unmanaged-short>ID2D1BitmapBrush::SetInterpolationMode</unmanaged-short>
        internal unsafe void SetInterpolationMode(DXNET.Direct2D1.BitmapInterpolationMode interpolationMode)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)interpolationMode), (*(void ***)this._nativePointer)[10]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmap">No documentation.</param>
        /// <unmanaged>void ID2D1BitmapBrush::SetBitmap([In, Optional] ID2D1Bitmap* bitmap)</unmanaged>
        /// <unmanaged-short>ID2D1BitmapBrush::SetBitmap</unmanaged-short>
        internal unsafe void SetBitmap(DXNET.Direct2D1.Bitmap bitmap)
        {
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            bitmap_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Bitmap>(bitmap);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)bitmap_, (*(void ***)this._nativePointer)[11]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_EXTEND_MODE ID2D1BitmapBrush::GetExtendModeX()</unmanaged>
        /// <unmanaged-short>ID2D1BitmapBrush::GetExtendModeX</unmanaged-short>
        internal unsafe DXNET.Direct2D1.ExtendMode GetExtendModeX()
        {
            DXNET.Direct2D1.ExtendMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1ExtendMode(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_EXTEND_MODE ID2D1BitmapBrush::GetExtendModeY()</unmanaged>
        /// <unmanaged-short>ID2D1BitmapBrush::GetExtendModeY</unmanaged-short>
        internal unsafe DXNET.Direct2D1.ExtendMode GetExtendModeY()
        {
            DXNET.Direct2D1.ExtendMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1ExtendMode(this._nativePointer, (*(void ***)this._nativePointer)[13]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE ID2D1BitmapBrush::GetInterpolationMode()</unmanaged>
        /// <unmanaged-short>ID2D1BitmapBrush::GetInterpolationMode</unmanaged-short>
        internal unsafe DXNET.Direct2D1.BitmapInterpolationMode GetInterpolationMode()
        {
            DXNET.Direct2D1.BitmapInterpolationMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1BitmapInterpolationMode(this._nativePointer, (*(void ***)this._nativePointer)[14]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmap">No documentation.</param>
        /// <unmanaged>void ID2D1BitmapBrush::GetBitmap([Out, Optional] ID2D1Bitmap** bitmap)</unmanaged>
        /// <unmanaged-short>ID2D1BitmapBrush::GetBitmap</unmanaged-short>
        internal unsafe void GetBitmap(out DXNET.Direct2D1.Bitmap bitmap)
        {
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &bitmap_, (*(void ***)this._nativePointer)[15]);
            if (bitmap_ != System.IntPtr.Zero)
                bitmap = new DXNET.Direct2D1.Bitmap(bitmap_);
            else
                bitmap = null;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("41343a53-e41a-49a2-91cd-21793bbb62e5")]
    public partial class BitmapBrush1 : DXNET.Direct2D1.BitmapBrush
    {
        public BitmapBrush1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapBrush1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapBrush1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetInterpolationMode1 / SetInterpolationMode1</unmanaged>
        /// <unmanaged-short>GetInterpolationMode1</unmanaged-short>
        public DXNET.Direct2D1.InterpolationMode InterpolationMode1
        {
            get => GetInterpolationMode1();
            set => SetInterpolationMode1(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "interpolationMode">No documentation.</param>
        /// <unmanaged>void ID2D1BitmapBrush1::SetInterpolationMode1([In] D2D1_INTERPOLATION_MODE interpolationMode)</unmanaged>
        /// <unmanaged-short>ID2D1BitmapBrush1::SetInterpolationMode1</unmanaged-short>
        internal unsafe void SetInterpolationMode1(DXNET.Direct2D1.InterpolationMode interpolationMode)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)interpolationMode), (*(void ***)this._nativePointer)[16]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_INTERPOLATION_MODE ID2D1BitmapBrush1::GetInterpolationMode1()</unmanaged>
        /// <unmanaged-short>ID2D1BitmapBrush1::GetInterpolationMode1</unmanaged-short>
        internal unsafe DXNET.Direct2D1.InterpolationMode GetInterpolationMode1()
        {
            DXNET.Direct2D1.InterpolationMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1InterpolationMode(this._nativePointer, (*(void ***)this._nativePointer)[17]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd90695-12e2-11dc-9fed-001143a055f9")]
    public partial class BitmapRenderTarget : DXNET.Direct2D1.RenderTarget
    {
        public BitmapRenderTarget(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapRenderTarget(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapRenderTarget(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetBitmap</unmanaged>
        /// <unmanaged-short>GetBitmap</unmanaged-short>
        public DXNET.Direct2D1.Bitmap Bitmap
        {
            get
            {
                GetBitmap(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmap">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1BitmapRenderTarget::GetBitmap([Out] ID2D1Bitmap** bitmap)</unmanaged>
        /// <unmanaged-short>ID2D1BitmapRenderTarget::GetBitmap</unmanaged-short>
        internal unsafe void GetBitmap(out DXNET.Direct2D1.Bitmap bitmap)
        {
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &bitmap_, (*(void ***)this._nativePointer)[57]);
            if (bitmap_ != System.IntPtr.Zero)
                bitmap = new DXNET.Direct2D1.Bitmap(bitmap_);
            else
                bitmap = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("63ac0b32-ba44-450f-8806-7f4ca1ff2f1b")]
    public partial class BlendTransform : DXNET.Direct2D1.ConcreteTransform
    {
        public BlendTransform(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BlendTransform(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BlendTransform(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDescription / SetDescription</unmanaged>
        /// <unmanaged-short>GetDescription</unmanaged-short>
        public DXNET.Direct2D1.BlendDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }

            set => SetDescription(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "description">No documentation.</param>
        /// <unmanaged>void ID2D1BlendTransform::SetDescription([In] const D2D1_BLEND_DESCRIPTION* description)</unmanaged>
        /// <unmanaged-short>ID2D1BlendTransform::SetDescription</unmanaged-short>
        internal unsafe void SetDescription(ref DXNET.Direct2D1.BlendDescription description)
        {
            fixed (void *description_ = &description)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, description_, (*(void ***)this._nativePointer)[6]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "description">No documentation.</param>
        /// <unmanaged>void ID2D1BlendTransform::GetDescription([Out] D2D1_BLEND_DESCRIPTION* description)</unmanaged>
        /// <unmanaged-short>ID2D1BlendTransform::GetDescription</unmanaged-short>
        internal unsafe void GetDescription(out DXNET.Direct2D1.BlendDescription description)
        {
            description = default (DXNET.Direct2D1.BlendDescription);
            fixed (void *description_ = &description)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, description_, (*(void ***)this._nativePointer)[7]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("4998735c-3a19-473c-9781-656847e3a347")]
    public partial class BorderTransform : DXNET.Direct2D1.ConcreteTransform
    {
        public BorderTransform(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BorderTransform(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BorderTransform(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetExtendModeX / SetExtendModeX</unmanaged>
        /// <unmanaged-short>GetExtendModeX</unmanaged-short>
        public DXNET.Direct2D1.ExtendMode ExtendModeX
        {
            get => GetExtendModeX();
            set => SetExtendModeX(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetExtendModeY / SetExtendModeY</unmanaged>
        /// <unmanaged-short>GetExtendModeY</unmanaged-short>
        public DXNET.Direct2D1.ExtendMode ExtendModeY
        {
            get => GetExtendModeY();
            set => SetExtendModeY(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "extendMode">No documentation.</param>
        /// <unmanaged>void ID2D1BorderTransform::SetExtendModeX([In] D2D1_EXTEND_MODE extendMode)</unmanaged>
        /// <unmanaged-short>ID2D1BorderTransform::SetExtendModeX</unmanaged-short>
        internal unsafe void SetExtendModeX(DXNET.Direct2D1.ExtendMode extendMode)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)extendMode), (*(void ***)this._nativePointer)[6]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "extendMode">No documentation.</param>
        /// <unmanaged>void ID2D1BorderTransform::SetExtendModeY([In] D2D1_EXTEND_MODE extendMode)</unmanaged>
        /// <unmanaged-short>ID2D1BorderTransform::SetExtendModeY</unmanaged-short>
        internal unsafe void SetExtendModeY(DXNET.Direct2D1.ExtendMode extendMode)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)extendMode), (*(void ***)this._nativePointer)[7]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_EXTEND_MODE ID2D1BorderTransform::GetExtendModeX()</unmanaged>
        /// <unmanaged-short>ID2D1BorderTransform::GetExtendModeX</unmanaged-short>
        internal unsafe DXNET.Direct2D1.ExtendMode GetExtendModeX()
        {
            DXNET.Direct2D1.ExtendMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1ExtendMode(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_EXTEND_MODE ID2D1BorderTransform::GetExtendModeY()</unmanaged>
        /// <unmanaged-short>ID2D1BorderTransform::GetExtendModeY</unmanaged-short>
        internal unsafe DXNET.Direct2D1.ExtendMode GetExtendModeY()
        {
            DXNET.Direct2D1.ExtendMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1ExtendMode(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("90f732e2-5092-4606-a819-8651970baccd")]
    public partial class BoundsAdjustmentTransform : DXNET.Direct2D1.TransformNodeNative
    {
        public BoundsAdjustmentTransform(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BoundsAdjustmentTransform(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BoundsAdjustmentTransform(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetOutputBounds / SetOutputBounds</unmanaged>
        /// <unmanaged-short>GetOutputBounds</unmanaged-short>
        public DXNET.Mathematics.Interop.RawRectangle OutputBounds
        {
            get
            {
                GetOutputBounds(out var __output__);
                return __output__;
            }

            set => SetOutputBounds(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "outputBounds">No documentation.</param>
        /// <unmanaged>void ID2D1BoundsAdjustmentTransform::SetOutputBounds([In] const RECT* outputBounds)</unmanaged>
        /// <unmanaged-short>ID2D1BoundsAdjustmentTransform::SetOutputBounds</unmanaged-short>
        internal unsafe void SetOutputBounds(DXNET.Mathematics.Interop.RawRectangle outputBounds)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &outputBounds, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "outputBounds">No documentation.</param>
        /// <unmanaged>void ID2D1BoundsAdjustmentTransform::GetOutputBounds([Out] RECT* outputBounds)</unmanaged>
        /// <unmanaged-short>ID2D1BoundsAdjustmentTransform::GetOutputBounds</unmanaged-short>
        internal unsafe void GetOutputBounds(out DXNET.Mathematics.Interop.RawRectangle outputBounds)
        {
            outputBounds = default (DXNET.Mathematics.Interop.RawRectangle);
            fixed (void *outputBounds_ = &outputBounds)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, outputBounds_, (*(void ***)this._nativePointer)[5]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906a8-12e2-11dc-9fed-001143a055f9")]
    public partial class Brush : DXNET.Direct2D1.Resource
    {
        public Brush(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Brush(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Brush(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetOpacity / SetOpacity</unmanaged>
        /// <unmanaged-short>GetOpacity</unmanaged-short>
        public System.Single Opacity
        {
            get => GetOpacity();
            set => SetOpacity(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetTransform / SetTransform</unmanaged>
        /// <unmanaged-short>GetTransform</unmanaged-short>
        public DXNET.Mathematics.Interop.RawMatrix3x2 Transform
        {
            get
            {
                GetTransform(out var __output__);
                return __output__;
            }

            set => SetTransform(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "opacity">No documentation.</param>
        /// <unmanaged>void ID2D1Brush::SetOpacity([In] float opacity)</unmanaged>
        /// <unmanaged-short>ID2D1Brush::SetOpacity</unmanaged-short>
        internal unsafe void SetOpacity(System.Single opacity)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, opacity, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "transform">No documentation.</param>
        /// <unmanaged>void ID2D1Brush::SetTransform([In] const D2D_MATRIX_3X2_F* transform)</unmanaged>
        /// <unmanaged-short>ID2D1Brush::SetTransform</unmanaged-short>
        internal unsafe void SetTransform(ref DXNET.Mathematics.Interop.RawMatrix3x2 transform)
        {
            fixed (void *transform_ = &transform)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, transform_, (*(void ***)this._nativePointer)[5]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float ID2D1Brush::GetOpacity()</unmanaged>
        /// <unmanaged-short>ID2D1Brush::GetOpacity</unmanaged-short>
        internal unsafe System.Single GetOpacity()
        {
            System.Single __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallfloat(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "transform">No documentation.</param>
        /// <unmanaged>void ID2D1Brush::GetTransform([Out] D2D_MATRIX_3X2_F* transform)</unmanaged>
        /// <unmanaged-short>ID2D1Brush::GetTransform</unmanaged-short>
        internal unsafe void GetTransform(out DXNET.Mathematics.Interop.RawMatrix3x2 transform)
        {
            transform = default (DXNET.Mathematics.Interop.RawMatrix3x2);
            fixed (void *transform_ = &transform)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, transform_, (*(void ***)this._nativePointer)[7]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("1c4820bb-5771-4518-a581-2fe4dd0ec657")]
    public partial class ColorContext : DXNET.Direct2D1.Resource
    {
        public ColorContext(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ColorContext(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ColorContext(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetColorSpace</unmanaged>
        /// <unmanaged-short>GetColorSpace</unmanaged-short>
        public DXNET.Direct2D1.ColorSpace ColorSpace
        {
            get => GetColorSpace();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetProfileSize</unmanaged>
        /// <unmanaged-short>GetProfileSize</unmanaged-short>
        internal System.Int32 ProfileSize
        {
            get => GetProfileSize();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_COLOR_SPACE ID2D1ColorContext::GetColorSpace()</unmanaged>
        /// <unmanaged-short>ID2D1ColorContext::GetColorSpace</unmanaged-short>
        internal unsafe DXNET.Direct2D1.ColorSpace GetColorSpace()
        {
            DXNET.Direct2D1.ColorSpace __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1ColorSpace(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1ColorContext::GetProfileSize()</unmanaged>
        /// <unmanaged-short>ID2D1ColorContext::GetProfileSize</unmanaged-short>
        internal unsafe System.Int32 GetProfileSize()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rofileRef">No documentation.</param>
        /// <param name = "profileSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1ColorContext::GetProfile([Out, Buffer] unsigned char* profile,[In] unsigned int profileSize)</unmanaged>
        /// <unmanaged-short>ID2D1ColorContext::GetProfile</unmanaged-short>
        internal unsafe void GetProfile(System.Byte[] rofileRef, System.Int32 profileSize)
        {
            DXNET.Result __result__;
            fixed (void *rofileRef_ = rofileRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, rofileRef_, profileSize, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("1ab42875-c57f-4be9-bd85-9cd78d6f55ee")]
    public partial class ColorContext1 : DXNET.Direct2D1.ColorContext
    {
        public ColorContext1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ColorContext1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ColorContext1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetColorContextType</unmanaged>
        /// <unmanaged-short>GetColorContextType</unmanaged-short>
        public DXNET.Direct2D1.ColorContextType ColorContextType
        {
            get => GetColorContextType();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDXGIColorSpace</unmanaged>
        /// <unmanaged-short>GetDXGIColorSpace</unmanaged-short>
        public DXNET.DXGI.ColorSpaceType DXGIColorSpace
        {
            get => GetDXGIColorSpace();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSimpleColorProfile</unmanaged>
        /// <unmanaged-short>GetSimpleColorProfile</unmanaged-short>
        public DXNET.Direct2D1.SimpleColorProfile SimpleColorProfile
        {
            get
            {
                GetSimpleColorProfile(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_COLOR_CONTEXT_TYPE ID2D1ColorContext1::GetColorContextType()</unmanaged>
        /// <unmanaged-short>ID2D1ColorContext1::GetColorContextType</unmanaged-short>
        internal unsafe DXNET.Direct2D1.ColorContextType GetColorContextType()
        {
            DXNET.Direct2D1.ColorContextType __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1ColorContextType(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DXGI_COLOR_SPACE_TYPE ID2D1ColorContext1::GetDXGIColorSpace()</unmanaged>
        /// <unmanaged-short>ID2D1ColorContext1::GetDXGIColorSpace</unmanaged-short>
        internal unsafe DXNET.DXGI.ColorSpaceType GetDXGIColorSpace()
        {
            DXNET.DXGI.ColorSpaceType __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDXGIColorSpaceType(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "simpleProfile">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1ColorContext1::GetSimpleColorProfile([Out] D2D1_SIMPLE_COLOR_PROFILE* simpleProfile)</unmanaged>
        /// <unmanaged-short>ID2D1ColorContext1::GetSimpleColorProfile</unmanaged-short>
        internal unsafe void GetSimpleColorProfile(out DXNET.Direct2D1.SimpleColorProfile simpleProfile)
        {
            simpleProfile = default (DXNET.Direct2D1.SimpleColorProfile);
            DXNET.Result __result__;
            fixed (void *simpleProfile_ = &simpleProfile)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, simpleProfile_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("b4f34a19-2383-4d76-94f6-ec343657c3dc")]
    public partial class CommandList : DXNET.Direct2D1.Image
    {
        public CommandList(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CommandList(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CommandList(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandList::Stream([In] ID2D1CommandSink* sink)</unmanaged>
        /// <unmanaged-short>ID2D1CommandList::Stream</unmanaged-short>
        public unsafe void Stream(DXNET.Direct2D1.CommandSink sink)
        {
            System.IntPtr sink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            sink_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.CommandSink>(sink);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)sink_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandList::Close()</unmanaged>
        /// <unmanaged-short>ID2D1CommandList::Close</unmanaged-short>
        public unsafe void Close()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("54d7898a-a061-40a7-bec7-e465bcba2c4f")]
    public partial interface CommandSink : DXNET.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("9eb767fd-4269-4467-b8c2-eb30cb305743")]
    public partial interface CommandSink1 : DXNET.Direct2D1.CommandSink
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("9eb767fd-4269-4467-b8c2-eb30cb305743")]
    internal partial class CommandSink1Native : DXNET.Direct2D1.CommandSinkNative, DXNET.Direct2D1.CommandSink1
    {
        public CommandSink1Native(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CommandSink1Native(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CommandSink1Native(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetPrimitiveBlend1</unmanaged>
        /// <unmanaged-short>SetPrimitiveBlend1</unmanaged-short>
        public DXNET.Direct2D1.PrimitiveBlend PrimitiveBlend1_
        {
            set => SetPrimitiveBlend1_(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "primitiveBlend">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink1::SetPrimitiveBlend1([In] D2D1_PRIMITIVE_BLEND primitiveBlend)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink1::SetPrimitiveBlend1</unmanaged-short>
        internal unsafe void SetPrimitiveBlend1_(DXNET.Direct2D1.PrimitiveBlend primitiveBlend)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)primitiveBlend), (*(void ***)this._nativePointer)[28]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3bab440e-417e-47df-a2e2-bc0be6a00916")]
    public partial interface CommandSink2 : DXNET.Direct2D1.CommandSink1
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("3bab440e-417e-47df-a2e2-bc0be6a00916")]
    internal partial class CommandSink2Native : DXNET.Direct2D1.CommandSink1Native, DXNET.Direct2D1.CommandSink2
    {
        public CommandSink2Native(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CommandSink2Native(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CommandSink2Native(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ink">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "inkStyle">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink2::DrawInk([In] ID2D1Ink* ink,[In] ID2D1Brush* brush,[In, Optional] ID2D1InkStyle* inkStyle)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink2::DrawInk</unmanaged-short>
        internal unsafe void DrawInk_(DXNET.Direct2D1.Ink ink, DXNET.Direct2D1.Brush brush, DXNET.Direct2D1.InkStyle inkStyle)
        {
            System.IntPtr ink_ = System.IntPtr.Zero;
            System.IntPtr brush_ = System.IntPtr.Zero;
            System.IntPtr inkStyle_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            ink_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Ink>(ink);
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            inkStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.InkStyle>(inkStyle);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)ink_, (void *)brush_, (void *)inkStyle_, (*(void ***)this._nativePointer)[29]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gradientMesh">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink2::DrawGradientMesh([In] ID2D1GradientMesh* gradientMesh)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink2::DrawGradientMesh</unmanaged-short>
        internal unsafe void DrawGradientMesh_(DXNET.Direct2D1.GradientMesh gradientMesh)
        {
            System.IntPtr gradientMesh_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            gradientMesh_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.GradientMesh>(gradientMesh);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)gradientMesh_, (*(void ***)this._nativePointer)[30]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gdiMetafile">No documentation.</param>
        /// <param name = "destinationRectangle">No documentation.</param>
        /// <param name = "sourceRectangle">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink2::DrawGdiMetafile([In] ID2D1GdiMetafile* gdiMetafile,[In, Optional] const D2D_RECT_F* destinationRectangle,[In, Optional] const D2D_RECT_F* sourceRectangle)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink2::DrawGdiMetafile</unmanaged-short>
        internal unsafe void DrawGdiMetafile_(DXNET.Direct2D1.GdiMetafile gdiMetafile, DXNET.Mathematics.Interop.RawRectangleF? destinationRectangle, DXNET.Mathematics.Interop.RawRectangleF? sourceRectangle)
        {
            System.IntPtr gdiMetafile_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawRectangleF destinationRectangle_;
            DXNET.Mathematics.Interop.RawRectangleF sourceRectangle_;
            DXNET.Result __result__;
            gdiMetafile_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.GdiMetafile>(gdiMetafile);
            if (destinationRectangle != null)
                destinationRectangle_ = destinationRectangle.Value;
            if (sourceRectangle != null)
                sourceRectangle_ = sourceRectangle.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)gdiMetafile_, destinationRectangle == null ? (void *)0 : &destinationRectangle_, sourceRectangle == null ? (void *)0 : &sourceRectangle_, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("18079135-4cf3-4868-bc8e-06067e6d242d")]
    public partial interface CommandSink3 : DXNET.Direct2D1.CommandSink2
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("18079135-4cf3-4868-bc8e-06067e6d242d")]
    internal partial class CommandSink3Native : DXNET.Direct2D1.CommandSink2Native, DXNET.Direct2D1.CommandSink3
    {
        public CommandSink3Native(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CommandSink3Native(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CommandSink3Native(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "spriteBatch">No documentation.</param>
        /// <param name = "startIndex">No documentation.</param>
        /// <param name = "spriteCount">No documentation.</param>
        /// <param name = "bitmap">No documentation.</param>
        /// <param name = "interpolationMode">No documentation.</param>
        /// <param name = "spriteOptions">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink3::DrawSpriteBatch([In] ID2D1SpriteBatch* spriteBatch,[In] unsigned int startIndex,[In] unsigned int spriteCount,[In] ID2D1Bitmap* bitmap,[In] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode,[In] D2D1_SPRITE_OPTIONS spriteOptions)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink3::DrawSpriteBatch</unmanaged-short>
        internal unsafe void DrawSpriteBatch_(DXNET.Direct2D1.SpriteBatch spriteBatch, System.Int32 startIndex, System.Int32 spriteCount, DXNET.Direct2D1.Bitmap bitmap, DXNET.Direct2D1.BitmapInterpolationMode interpolationMode, DXNET.Direct2D1.SpriteOptions spriteOptions)
        {
            System.IntPtr spriteBatch_ = System.IntPtr.Zero;
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            spriteBatch_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SpriteBatch>(spriteBatch);
            bitmap_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Bitmap>(bitmap);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)spriteBatch_, startIndex, spriteCount, (void *)bitmap_, unchecked ((System.Int32)interpolationMode), unchecked ((System.Int32)spriteOptions), (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("c78a6519-40d6-4218-b2de-beeeb744bb3e")]
    public partial interface CommandSink4 : DXNET.Direct2D1.CommandSink3
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("c78a6519-40d6-4218-b2de-beeeb744bb3e")]
    internal partial class CommandSink4Native : DXNET.Direct2D1.CommandSink3Native, DXNET.Direct2D1.CommandSink4
    {
        public CommandSink4Native(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CommandSink4Native(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CommandSink4Native(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetPrimitiveBlend2</unmanaged>
        /// <unmanaged-short>SetPrimitiveBlend2</unmanaged-short>
        public DXNET.Direct2D1.PrimitiveBlend PrimitiveBlend2_
        {
            set => SetPrimitiveBlend2_(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "primitiveBlend">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink4::SetPrimitiveBlend2([In] D2D1_PRIMITIVE_BLEND primitiveBlend)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink4::SetPrimitiveBlend2</unmanaged-short>
        internal unsafe void SetPrimitiveBlend2_(DXNET.Direct2D1.PrimitiveBlend primitiveBlend)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)primitiveBlend), (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("54d7898a-a061-40a7-bec7-e465bcba2c4f")]
    internal partial class CommandSinkNative : DXNET.ComObject, DXNET.Direct2D1.CommandSink
    {
        public CommandSinkNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CommandSinkNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CommandSinkNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetAntialiasMode</unmanaged>
        /// <unmanaged-short>SetAntialiasMode</unmanaged-short>
        public DXNET.Direct2D1.AntialiasMode AntialiasMode_
        {
            set => SetAntialiasMode_(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetTextAntialiasMode</unmanaged>
        /// <unmanaged-short>SetTextAntialiasMode</unmanaged-short>
        public DXNET.Direct2D1.TextAntialiasMode TextAntialiasMode_
        {
            set => SetTextAntialiasMode_(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetTextRenderingParams</unmanaged>
        /// <unmanaged-short>SetTextRenderingParams</unmanaged-short>
        public DXNET.DirectWrite.RenderingParams TextRenderingParams_
        {
            set => SetTextRenderingParams_(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetTransform</unmanaged>
        /// <unmanaged-short>SetTransform</unmanaged-short>
        public DXNET.Mathematics.Interop.RawMatrix3x2 Transform_
        {
            set => SetTransform_(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetPrimitiveBlend</unmanaged>
        /// <unmanaged-short>SetPrimitiveBlend</unmanaged-short>
        public DXNET.Direct2D1.PrimitiveBlend PrimitiveBlend_
        {
            set => SetPrimitiveBlend_(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetUnitMode</unmanaged>
        /// <unmanaged-short>SetUnitMode</unmanaged-short>
        public DXNET.Direct2D1.UnitMode UnitMode_
        {
            set => SetUnitMode_(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::BeginDraw()</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::BeginDraw</unmanaged-short>
        internal unsafe void BeginDraw_()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::EndDraw()</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::EndDraw</unmanaged-short>
        internal unsafe void EndDraw_()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "antialiasMode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::SetAntialiasMode([In] D2D1_ANTIALIAS_MODE antialiasMode)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::SetAntialiasMode</unmanaged-short>
        internal unsafe void SetAntialiasMode_(DXNET.Direct2D1.AntialiasMode antialiasMode)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)antialiasMode), (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "tag1">No documentation.</param>
        /// <param name = "tag2">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::SetTags([In] unsigned longlong tag1,[In] unsigned longlong tag2)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::SetTags</unmanaged-short>
        internal unsafe void SetTags_(System.Int64 tag1, System.Int64 tag2)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, tag1, tag2, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textAntialiasMode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::SetTextAntialiasMode([In] D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::SetTextAntialiasMode</unmanaged-short>
        internal unsafe void SetTextAntialiasMode_(DXNET.Direct2D1.TextAntialiasMode textAntialiasMode)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)textAntialiasMode), (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textRenderingParams">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::SetTextRenderingParams([In, Optional] IDWriteRenderingParams* textRenderingParams)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::SetTextRenderingParams</unmanaged-short>
        internal unsafe void SetTextRenderingParams_(DXNET.DirectWrite.RenderingParams textRenderingParams)
        {
            System.IntPtr textRenderingParams_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            textRenderingParams_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.RenderingParams>(textRenderingParams);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)textRenderingParams_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "transform">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::SetTransform([In] const D2D_MATRIX_3X2_F* transform)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::SetTransform</unmanaged-short>
        internal unsafe void SetTransform_(ref DXNET.Mathematics.Interop.RawMatrix3x2 transform)
        {
            DXNET.Result __result__;
            fixed (void *transform_ = &transform)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, transform_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "primitiveBlend">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::SetPrimitiveBlend([In] D2D1_PRIMITIVE_BLEND primitiveBlend)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::SetPrimitiveBlend</unmanaged-short>
        internal unsafe void SetPrimitiveBlend_(DXNET.Direct2D1.PrimitiveBlend primitiveBlend)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)primitiveBlend), (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "unitMode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::SetUnitMode([In] D2D1_UNIT_MODE unitMode)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::SetUnitMode</unmanaged-short>
        internal unsafe void SetUnitMode_(DXNET.Direct2D1.UnitMode unitMode)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)unitMode), (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "color">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::Clear([In, Optional] const D2D_COLOR_F* color)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::Clear</unmanaged-short>
        internal unsafe void Clear_(DXNET.Mathematics.Interop.RawColor4? color)
        {
            DXNET.Mathematics.Interop.RawColor4 color_;
            DXNET.Result __result__;
            if (color != null)
                color_ = color.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, color == null ? (void *)0 : &color_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "baselineOrigin">No documentation.</param>
        /// <param name = "glyphRun">No documentation.</param>
        /// <param name = "glyphRunDescription">No documentation.</param>
        /// <param name = "foregroundBrush">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::DrawGlyphRun([In] D2D_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In, Optional] const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,[In] ID2D1Brush* foregroundBrush,[In] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::DrawGlyphRun</unmanaged-short>
        internal unsafe void DrawGlyphRun_(DXNET.Mathematics.Interop.RawVector2 baselineOrigin, DXNET.DirectWrite.GlyphRun glyphRun, DXNET.DirectWrite.GlyphRunDescription glyphRunDescription, DXNET.Direct2D1.Brush foregroundBrush, DXNET.Direct2D1.MeasuringMode measuringMode)
        {
            DXNET.DirectWrite.GlyphRun.__Native glyphRun_ = default (DXNET.DirectWrite.GlyphRun.__Native);
            DXNET.DirectWrite.GlyphRunDescription.__Native glyphRunDescription_ = default (DXNET.DirectWrite.GlyphRunDescription.__Native);
            System.IntPtr foregroundBrush_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            glyphRun.__MarshalTo(ref glyphRun_);
            if (glyphRunDescription != null)
                glyphRunDescription.__MarshalTo(ref glyphRunDescription_);
            foregroundBrush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(foregroundBrush);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, baselineOrigin, &glyphRun_, glyphRunDescription == null ? (void *)0 : &glyphRunDescription_, (void *)foregroundBrush_, unchecked ((System.Int32)measuringMode), (*(void ***)this._nativePointer)[13]);
            glyphRun.__MarshalFree(ref glyphRun_);
            if (glyphRunDescription != null)
                glyphRunDescription.__MarshalFree(ref glyphRunDescription_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "point0">No documentation.</param>
        /// <param name = "point1">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "strokeWidth">No documentation.</param>
        /// <param name = "strokeStyle">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::DrawLine([In] D2D_POINT_2F point0,[In] D2D_POINT_2F point1,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::DrawLine</unmanaged-short>
        internal unsafe void DrawLine_(DXNET.Mathematics.Interop.RawVector2 point0, DXNET.Mathematics.Interop.RawVector2 point1, DXNET.Direct2D1.Brush brush, System.Single strokeWidth, DXNET.Direct2D1.StrokeStyle strokeStyle)
        {
            System.IntPtr brush_ = System.IntPtr.Zero;
            System.IntPtr strokeStyle_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            strokeStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.StrokeStyle>(strokeStyle);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, point0, point1, (void *)brush_, strokeWidth, (void *)strokeStyle_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "geometry">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "strokeWidth">No documentation.</param>
        /// <param name = "strokeStyle">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::DrawGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::DrawGeometry</unmanaged-short>
        internal unsafe void DrawGeometry_(DXNET.Direct2D1.Geometry geometry, DXNET.Direct2D1.Brush brush, System.Single strokeWidth, DXNET.Direct2D1.StrokeStyle strokeStyle)
        {
            System.IntPtr geometry_ = System.IntPtr.Zero;
            System.IntPtr brush_ = System.IntPtr.Zero;
            System.IntPtr strokeStyle_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            geometry_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Geometry>(geometry);
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            strokeStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.StrokeStyle>(strokeStyle);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)geometry_, (void *)brush_, strokeWidth, (void *)strokeStyle_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rect">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "strokeWidth">No documentation.</param>
        /// <param name = "strokeStyle">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::DrawRectangle([In] const D2D_RECT_F* rect,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::DrawRectangle</unmanaged-short>
        internal unsafe void DrawRectangle_(DXNET.Mathematics.Interop.RawRectangleF rect, DXNET.Direct2D1.Brush brush, System.Single strokeWidth, DXNET.Direct2D1.StrokeStyle strokeStyle)
        {
            System.IntPtr brush_ = System.IntPtr.Zero;
            System.IntPtr strokeStyle_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            strokeStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.StrokeStyle>(strokeStyle);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &rect, (void *)brush_, strokeWidth, (void *)strokeStyle_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmap">No documentation.</param>
        /// <param name = "destinationRectangle">No documentation.</param>
        /// <param name = "opacity">No documentation.</param>
        /// <param name = "interpolationMode">No documentation.</param>
        /// <param name = "sourceRectangle">No documentation.</param>
        /// <param name = "erspectiveTransformRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::DrawBitmap([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D_RECT_F* destinationRectangle,[In] float opacity,[In] D2D1_INTERPOLATION_MODE interpolationMode,[In, Optional] const D2D_RECT_F* sourceRectangle,[In, Optional] const D2D_MATRIX_4X4_F* perspectiveTransform)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::DrawBitmap</unmanaged-short>
        internal unsafe void DrawBitmap_(DXNET.Direct2D1.Bitmap bitmap, DXNET.Mathematics.Interop.RawRectangleF? destinationRectangle, System.Single opacity, DXNET.Direct2D1.InterpolationMode interpolationMode, DXNET.Mathematics.Interop.RawRectangleF? sourceRectangle, DXNET.Mathematics.Interop.RawMatrix? erspectiveTransformRef)
        {
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawRectangleF destinationRectangle_;
            DXNET.Mathematics.Interop.RawRectangleF sourceRectangle_;
            DXNET.Mathematics.Interop.RawMatrix erspectiveTransformRef_;
            DXNET.Result __result__;
            bitmap_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Bitmap>(bitmap);
            if (destinationRectangle != null)
                destinationRectangle_ = destinationRectangle.Value;
            if (sourceRectangle != null)
                sourceRectangle_ = sourceRectangle.Value;
            if (erspectiveTransformRef != null)
                erspectiveTransformRef_ = erspectiveTransformRef.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bitmap_, destinationRectangle == null ? (void *)0 : &destinationRectangle_, opacity, unchecked ((System.Int32)interpolationMode), sourceRectangle == null ? (void *)0 : &sourceRectangle_, erspectiveTransformRef == null ? (void *)0 : &erspectiveTransformRef_, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "image">No documentation.</param>
        /// <param name = "targetOffset">No documentation.</param>
        /// <param name = "imageRectangle">No documentation.</param>
        /// <param name = "interpolationMode">No documentation.</param>
        /// <param name = "compositeMode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::DrawImage([In] ID2D1Image* image,[In, Optional] const D2D_POINT_2F* targetOffset,[In, Optional] const D2D_RECT_F* imageRectangle,[In] D2D1_INTERPOLATION_MODE interpolationMode,[In] D2D1_COMPOSITE_MODE compositeMode)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::DrawImage</unmanaged-short>
        internal unsafe void DrawImage_(DXNET.Direct2D1.Image image, DXNET.Mathematics.Interop.RawVector2? targetOffset, DXNET.Mathematics.Interop.RawRectangleF? imageRectangle, DXNET.Direct2D1.InterpolationMode interpolationMode, DXNET.Direct2D1.CompositeMode compositeMode)
        {
            System.IntPtr image_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawVector2 targetOffset_;
            DXNET.Mathematics.Interop.RawRectangleF imageRectangle_;
            DXNET.Result __result__;
            image_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Image>(image);
            if (targetOffset != null)
                targetOffset_ = targetOffset.Value;
            if (imageRectangle != null)
                imageRectangle_ = imageRectangle.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)image_, targetOffset == null ? (void *)0 : &targetOffset_, imageRectangle == null ? (void *)0 : &imageRectangle_, unchecked ((System.Int32)interpolationMode), unchecked ((System.Int32)compositeMode), (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gdiMetafile">No documentation.</param>
        /// <param name = "targetOffset">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::DrawGdiMetafile([In] ID2D1GdiMetafile* gdiMetafile,[In, Optional] const D2D_POINT_2F* targetOffset)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::DrawGdiMetafile</unmanaged-short>
        internal unsafe void DrawGdiMetafile_(DXNET.Direct2D1.GdiMetafile gdiMetafile, DXNET.Mathematics.Interop.RawVector2? targetOffset)
        {
            System.IntPtr gdiMetafile_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawVector2 targetOffset_;
            DXNET.Result __result__;
            gdiMetafile_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.GdiMetafile>(gdiMetafile);
            if (targetOffset != null)
                targetOffset_ = targetOffset.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)gdiMetafile_, targetOffset == null ? (void *)0 : &targetOffset_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "mesh">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::FillMesh([In] ID2D1Mesh* mesh,[In] ID2D1Brush* brush)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::FillMesh</unmanaged-short>
        internal unsafe void FillMesh_(DXNET.Direct2D1.Mesh mesh, DXNET.Direct2D1.Brush brush)
        {
            System.IntPtr mesh_ = System.IntPtr.Zero;
            System.IntPtr brush_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            mesh_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Mesh>(mesh);
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)mesh_, (void *)brush_, (*(void ***)this._nativePointer)[20]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "opacityMask">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "destinationRectangle">No documentation.</param>
        /// <param name = "sourceRectangle">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::FillOpacityMask([In] ID2D1Bitmap* opacityMask,[In] ID2D1Brush* brush,[In, Optional] const D2D_RECT_F* destinationRectangle,[In, Optional] const D2D_RECT_F* sourceRectangle)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::FillOpacityMask</unmanaged-short>
        internal unsafe void FillOpacityMask_(DXNET.Direct2D1.Bitmap opacityMask, DXNET.Direct2D1.Brush brush, DXNET.Mathematics.Interop.RawRectangleF? destinationRectangle, DXNET.Mathematics.Interop.RawRectangleF? sourceRectangle)
        {
            System.IntPtr opacityMask_ = System.IntPtr.Zero;
            System.IntPtr brush_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawRectangleF destinationRectangle_;
            DXNET.Mathematics.Interop.RawRectangleF sourceRectangle_;
            DXNET.Result __result__;
            opacityMask_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Bitmap>(opacityMask);
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            if (destinationRectangle != null)
                destinationRectangle_ = destinationRectangle.Value;
            if (sourceRectangle != null)
                sourceRectangle_ = sourceRectangle.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)opacityMask_, (void *)brush_, destinationRectangle == null ? (void *)0 : &destinationRectangle_, sourceRectangle == null ? (void *)0 : &sourceRectangle_, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "geometry">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "opacityBrush">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::FillGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[In, Optional] ID2D1Brush* opacityBrush)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::FillGeometry</unmanaged-short>
        internal unsafe void FillGeometry_(DXNET.Direct2D1.Geometry geometry, DXNET.Direct2D1.Brush brush, DXNET.Direct2D1.Brush opacityBrush)
        {
            System.IntPtr geometry_ = System.IntPtr.Zero;
            System.IntPtr brush_ = System.IntPtr.Zero;
            System.IntPtr opacityBrush_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            geometry_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Geometry>(geometry);
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            opacityBrush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(opacityBrush);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)geometry_, (void *)brush_, (void *)opacityBrush_, (*(void ***)this._nativePointer)[22]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rect">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::FillRectangle([In] const D2D_RECT_F* rect,[In] ID2D1Brush* brush)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::FillRectangle</unmanaged-short>
        internal unsafe void FillRectangle_(DXNET.Mathematics.Interop.RawRectangleF rect, DXNET.Direct2D1.Brush brush)
        {
            System.IntPtr brush_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &rect, (void *)brush_, (*(void ***)this._nativePointer)[23]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "clipRect">No documentation.</param>
        /// <param name = "antialiasMode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::PushAxisAlignedClip([In] const D2D_RECT_F* clipRect,[In] D2D1_ANTIALIAS_MODE antialiasMode)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::PushAxisAlignedClip</unmanaged-short>
        internal unsafe void PushAxisAlignedClip_(DXNET.Mathematics.Interop.RawRectangleF clipRect, DXNET.Direct2D1.AntialiasMode antialiasMode)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &clipRect, unchecked ((System.Int32)antialiasMode), (*(void ***)this._nativePointer)[24]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "layerParameters1">No documentation.</param>
        /// <param name = "layer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::PushLayer([In] const D2D1_LAYER_PARAMETERS1* layerParameters1,[In, Optional] ID2D1Layer* layer)</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::PushLayer</unmanaged-short>
        internal unsafe void PushLayer_(ref DXNET.Direct2D1.LayerParameters1 layerParameters1, DXNET.Direct2D1.Layer layer)
        {
            DXNET.Direct2D1.LayerParameters1.__Native layerParameters1_ = default (DXNET.Direct2D1.LayerParameters1.__Native);
            System.IntPtr layer_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            layerParameters1.__MarshalTo(ref layerParameters1_);
            layer_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Layer>(layer);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &layerParameters1_, (void *)layer_, (*(void ***)this._nativePointer)[25]);
            layerParameters1.__MarshalFree(ref layerParameters1_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::PopAxisAlignedClip()</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::PopAxisAlignedClip</unmanaged-short>
        internal unsafe void PopAxisAlignedClip_()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[26]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1CommandSink::PopLayer()</unmanaged>
        /// <unmanaged-short>ID2D1CommandSink::PopLayer</unmanaged-short>
        internal unsafe void PopLayer_()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[27]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5598b14b-9fd7-48b7-9bdb-8f0964eb38bc")]
    public partial class ComputeInformation : DXNET.Direct2D1.RenderInformation
    {
        public ComputeInformation(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ComputeInformation(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ComputeInformation(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetComputeShader</unmanaged>
        /// <unmanaged-short>SetComputeShader</unmanaged-short>
        public System.Guid ComputeShader
        {
            set => SetComputeShader(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "buffer">No documentation.</param>
        /// <param name = "bufferCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1ComputeInfo::SetComputeShaderConstantBuffer([In, Buffer] const unsigned char* buffer,[In] unsigned int bufferCount)</unmanaged>
        /// <unmanaged-short>ID2D1ComputeInfo::SetComputeShaderConstantBuffer</unmanaged-short>
        internal unsafe void SetComputeShaderConstantBuffer(System.IntPtr buffer, System.Int32 bufferCount)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)buffer, bufferCount, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "shaderId">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1ComputeInfo::SetComputeShader([In] const GUID&amp; shaderId)</unmanaged>
        /// <unmanaged-short>ID2D1ComputeInfo::SetComputeShader</unmanaged-short>
        internal unsafe void SetComputeShader(System.Guid shaderId)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &shaderId, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textureIndex">No documentation.</param>
        /// <param name = "resourceTexture">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1ComputeInfo::SetResourceTexture([In] unsigned int textureIndex,[In] ID2D1ResourceTexture* resourceTexture)</unmanaged>
        /// <unmanaged-short>ID2D1ComputeInfo::SetResourceTexture</unmanaged-short>
        public unsafe void SetResourceTexture(System.Int32 textureIndex, DXNET.Direct2D1.ResourceTexture resourceTexture)
        {
            System.IntPtr resourceTexture_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            resourceTexture_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.ResourceTexture>(resourceTexture);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, textureIndex, (void *)resourceTexture_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("0d85573c-01e3-4f7d-bfd9-0d60608bf3c3")]
    public partial interface ComputeTransform : DXNET.Direct2D1.Transform
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("0d85573c-01e3-4f7d-bfd9-0d60608bf3c3")]
    public partial class ComputeTransformNative : DXNET.Direct2D1.TransformNative, DXNET.Direct2D1.ComputeTransform
    {
        public ComputeTransformNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ComputeTransformNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ComputeTransformNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetComputeInfo</unmanaged>
        /// <unmanaged-short>SetComputeInfo</unmanaged-short>
        public DXNET.Direct2D1.ComputeInformation ComputeInfo_
        {
            set => SetComputeInfo_(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "computeInfo">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1ComputeTransform::SetComputeInfo([In] ID2D1ComputeInfo* computeInfo)</unmanaged>
        /// <unmanaged-short>ID2D1ComputeTransform::SetComputeInfo</unmanaged-short>
        internal unsafe void SetComputeInfo_(DXNET.Direct2D1.ComputeInformation computeInfo)
        {
            System.IntPtr computeInfo_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            computeInfo_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.ComputeInformation>(computeInfo);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)computeInfo_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "outputRect">No documentation.</param>
        /// <param name = "dimensionX">No documentation.</param>
        /// <param name = "dimensionY">No documentation.</param>
        /// <param name = "dimensionZ">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1ComputeTransform::CalculateThreadgroups([In] const RECT* outputRect,[Out] unsigned int* dimensionX,[Out] unsigned int* dimensionY,[Out] unsigned int* dimensionZ)</unmanaged>
        /// <unmanaged-short>ID2D1ComputeTransform::CalculateThreadgroups</unmanaged-short>
        internal unsafe void CalculateThreadgroups_(DXNET.Mathematics.Interop.RawRectangle outputRect, out System.Int32 dimensionX, out System.Int32 dimensionY, out System.Int32 dimensionZ)
        {
            DXNET.Result __result__;
            fixed (void *dimensionZ_ = &dimensionZ)
                fixed (void *dimensionY_ = &dimensionY)
                    fixed (void *dimensionX_ = &dimensionX)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &outputRect, dimensionX_, dimensionY_, dimensionZ_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("1a799d8a-69f7-4e4c-9fed-437ccc6684cc")]
    public partial class ConcreteTransform : DXNET.Direct2D1.TransformNodeNative
    {
        public ConcreteTransform(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ConcreteTransform(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ConcreteTransform(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetCached</unmanaged>
        /// <unmanaged-short>SetCached</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool Cached
        {
            set => SetCached(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bufferPrecision">No documentation.</param>
        /// <param name = "channelDepth">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1ConcreteTransform::SetOutputBuffer([In] D2D1_BUFFER_PRECISION bufferPrecision,[In] D2D1_CHANNEL_DEPTH channelDepth)</unmanaged>
        /// <unmanaged-short>ID2D1ConcreteTransform::SetOutputBuffer</unmanaged-short>
        public unsafe void SetOutputBuffer(DXNET.Direct2D1.BufferPrecision bufferPrecision, DXNET.Direct2D1.ChannelDepth channelDepth)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)bufferPrecision), unchecked ((System.Int32)channelDepth), (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "isCached">No documentation.</param>
        /// <unmanaged>void ID2D1ConcreteTransform::SetCached([In] BOOL isCached)</unmanaged>
        /// <unmanaged-short>ID2D1ConcreteTransform::SetCached</unmanaged-short>
        internal unsafe void SetCached(DXNET.Mathematics.Interop.RawBool isCached)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, isCached, (*(void ***)this._nativePointer)[5]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a248fd3f-3e6c-4e63-9f03-7f68ecc91db9")]
    public partial interface CustomEffect : DXNET.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("a248fd3f-3e6c-4e63-9f03-7f68ecc91db9")]
    internal partial class CustomEffectNative : DXNET.ComObject, DXNET.Direct2D1.CustomEffect
    {
        public CustomEffectNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator CustomEffectNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new CustomEffectNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetGraph</unmanaged>
        /// <unmanaged-short>SetGraph</unmanaged-short>
        public DXNET.Direct2D1.TransformGraph Graph_
        {
            set => SetGraph_(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "effectContext">No documentation.</param>
        /// <param name = "transformGraph">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectImpl::Initialize([In] ID2D1EffectContext* effectContext,[In] ID2D1TransformGraph* transformGraph)</unmanaged>
        /// <unmanaged-short>ID2D1EffectImpl::Initialize</unmanaged-short>
        internal unsafe void Initialize_(DXNET.Direct2D1.EffectContext effectContext, DXNET.Direct2D1.TransformGraph transformGraph)
        {
            System.IntPtr effectContext_ = System.IntPtr.Zero;
            System.IntPtr transformGraph_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            effectContext_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.EffectContext>(effectContext);
            transformGraph_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.TransformGraph>(transformGraph);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)effectContext_, (void *)transformGraph_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "changeType">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectImpl::PrepareForRender([In] D2D1_CHANGE_TYPE changeType)</unmanaged>
        /// <unmanaged-short>ID2D1EffectImpl::PrepareForRender</unmanaged-short>
        internal unsafe void PrepareForRender_(DXNET.Direct2D1.ChangeType changeType)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)changeType), (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "transformGraph">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectImpl::SetGraph([In] ID2D1TransformGraph* transformGraph)</unmanaged>
        /// <unmanaged-short>ID2D1EffectImpl::SetGraph</unmanaged-short>
        internal unsafe void SetGraph_(DXNET.Direct2D1.TransformGraph transformGraph)
        {
            System.IntPtr transformGraph_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            transformGraph_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.TransformGraph>(transformGraph);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)transformGraph_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("47dd575d-ac05-4cdd-8049-9b02cd16f44c")]
    public partial class Device : DXNET.Direct2D1.Resource
    {
        public Device(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Device(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Device(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMaximumTextureMemory / SetMaximumTextureMemory</unmanaged>
        /// <unmanaged-short>GetMaximumTextureMemory</unmanaged-short>
        public System.Int64 MaximumTextureMemory
        {
            get => GetMaximumTextureMemory();
            set => SetMaximumTextureMemory(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "options">No documentation.</param>
        /// <param name = "deviceContext">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Device::CreateDeviceContext([In] D2D1_DEVICE_CONTEXT_OPTIONS options,[Out, Fast] ID2D1DeviceContext** deviceContext)</unmanaged>
        /// <unmanaged-short>ID2D1Device::CreateDeviceContext</unmanaged-short>
        internal unsafe void CreateDeviceContext(DXNET.Direct2D1.DeviceContextOptions options, DXNET.Direct2D1.DeviceContext deviceContext)
        {
            System.IntPtr deviceContext_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)options), &deviceContext_, (*(void ***)this._nativePointer)[4]);
            (deviceContext).NativePointer = deviceContext_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "wicFactory">No documentation.</param>
        /// <param name = "documentTarget">No documentation.</param>
        /// <param name = "rintControlPropertiesRef">No documentation.</param>
        /// <param name = "rintControlRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Device::CreatePrintControl([In] IWICImagingFactory* wicFactory,[In] IPrintDocumentPackageTarget* documentTarget,[In, Optional] const D2D1_PRINT_CONTROL_PROPERTIES* printControlProperties,[Out, Fast] ID2D1PrintControl** printControl)</unmanaged>
        /// <unmanaged-short>ID2D1Device::CreatePrintControl</unmanaged-short>
        internal unsafe void CreatePrintControl(DXNET.WIC.ImagingFactory wicFactory, DXNET.ComObject documentTarget, DXNET.Direct2D1.PrintControlProperties? rintControlPropertiesRef, DXNET.Direct2D1.PrintControl rintControlRef)
        {
            System.IntPtr wicFactory_ = System.IntPtr.Zero;
            System.IntPtr documentTarget_ = System.IntPtr.Zero;
            DXNET.Direct2D1.PrintControlProperties rintControlPropertiesRef_;
            System.IntPtr rintControlRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            wicFactory_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.ImagingFactory>(wicFactory);
            documentTarget_ = DXNET.CppObject.ToCallbackPtr<DXNET.ComObject>(documentTarget);
            if (rintControlPropertiesRef != null)
                rintControlPropertiesRef_ = rintControlPropertiesRef.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wicFactory_, (void *)documentTarget_, rintControlPropertiesRef == null ? (void *)0 : &rintControlPropertiesRef_, &rintControlRef_, (*(void ***)this._nativePointer)[5]);
            (rintControlRef).NativePointer = rintControlRef_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "maximumInBytes">No documentation.</param>
        /// <unmanaged>void ID2D1Device::SetMaximumTextureMemory([In] unsigned longlong maximumInBytes)</unmanaged>
        /// <unmanaged-short>ID2D1Device::SetMaximumTextureMemory</unmanaged-short>
        internal unsafe void SetMaximumTextureMemory(System.Int64 maximumInBytes)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, maximumInBytes, (*(void ***)this._nativePointer)[6]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned longlong ID2D1Device::GetMaximumTextureMemory()</unmanaged>
        /// <unmanaged-short>ID2D1Device::GetMaximumTextureMemory</unmanaged-short>
        internal unsafe System.Int64 GetMaximumTextureMemory()
        {
            System.Int64 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCalllong(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "millisecondsSinceUse">No documentation.</param>
        /// <unmanaged>void ID2D1Device::ClearResources([In] unsigned int millisecondsSinceUse)</unmanaged>
        /// <unmanaged-short>ID2D1Device::ClearResources</unmanaged-short>
        public unsafe void ClearResources(System.Int32 millisecondsSinceUse)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, millisecondsSinceUse, (*(void ***)this._nativePointer)[8]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("d21768e1-23a4-4823-a14b-7c3eba85d658")]
    public partial class Device1 : DXNET.Direct2D1.Device
    {
        public Device1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Device1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Device1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetRenderingPriority / SetRenderingPriority</unmanaged>
        /// <unmanaged-short>GetRenderingPriority</unmanaged-short>
        public DXNET.Direct2D1.RenderingPriority RenderingPriority
        {
            get => GetRenderingPriority();
            set => SetRenderingPriority(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_RENDERING_PRIORITY ID2D1Device1::GetRenderingPriority()</unmanaged>
        /// <unmanaged-short>ID2D1Device1::GetRenderingPriority</unmanaged-short>
        internal unsafe DXNET.Direct2D1.RenderingPriority GetRenderingPriority()
        {
            DXNET.Direct2D1.RenderingPriority __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1RenderingPriority(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "renderingPriority">No documentation.</param>
        /// <unmanaged>void ID2D1Device1::SetRenderingPriority([In] D2D1_RENDERING_PRIORITY renderingPriority)</unmanaged>
        /// <unmanaged-short>ID2D1Device1::SetRenderingPriority</unmanaged-short>
        internal unsafe void SetRenderingPriority(DXNET.Direct2D1.RenderingPriority renderingPriority)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)renderingPriority), (*(void ***)this._nativePointer)[10]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "options">No documentation.</param>
        /// <param name = "deviceContext1">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Device1::CreateDeviceContext([In] D2D1_DEVICE_CONTEXT_OPTIONS options,[Out, Fast] ID2D1DeviceContext1** deviceContext1)</unmanaged>
        /// <unmanaged-short>ID2D1Device1::CreateDeviceContext</unmanaged-short>
        internal unsafe void CreateDeviceContext(DXNET.Direct2D1.DeviceContextOptions options, DXNET.Direct2D1.DeviceContext1 deviceContext1)
        {
            System.IntPtr deviceContext1_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)options), &deviceContext1_, (*(void ***)this._nativePointer)[11]);
            (deviceContext1).NativePointer = deviceContext1_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a44472e1-8dfb-4e60-8492-6e2861c9ca8b")]
    public partial class Device2 : DXNET.Direct2D1.Device1
    {
        public Device2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Device2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Device2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDxgiDevice</unmanaged>
        /// <unmanaged-short>GetDxgiDevice</unmanaged-short>
        public DXNET.DXGI.Device DxgiDevice
        {
            get
            {
                GetDxgiDevice(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "options">No documentation.</param>
        /// <param name = "deviceContext2">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Device2::CreateDeviceContext([In] D2D1_DEVICE_CONTEXT_OPTIONS options,[Out, Fast] ID2D1DeviceContext2** deviceContext2)</unmanaged>
        /// <unmanaged-short>ID2D1Device2::CreateDeviceContext</unmanaged-short>
        internal unsafe void CreateDeviceContext(DXNET.Direct2D1.DeviceContextOptions options, DXNET.Direct2D1.DeviceContext2 deviceContext2)
        {
            System.IntPtr deviceContext2_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)options), &deviceContext2_, (*(void ***)this._nativePointer)[12]);
            (deviceContext2).NativePointer = deviceContext2_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmap">No documentation.</param>
        /// <unmanaged>void ID2D1Device2::FlushDeviceContexts([In] ID2D1Bitmap* bitmap)</unmanaged>
        /// <unmanaged-short>ID2D1Device2::FlushDeviceContexts</unmanaged-short>
        public unsafe void FlushDeviceContexts(DXNET.Direct2D1.Bitmap bitmap)
        {
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            bitmap_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Bitmap>(bitmap);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)bitmap_, (*(void ***)this._nativePointer)[13]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dxgiDevice">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Device2::GetDxgiDevice([Out] IDXGIDevice** dxgiDevice)</unmanaged>
        /// <unmanaged-short>ID2D1Device2::GetDxgiDevice</unmanaged-short>
        internal unsafe void GetDxgiDevice(out DXNET.DXGI.Device dxgiDevice)
        {
            System.IntPtr dxgiDevice_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &dxgiDevice_, (*(void ***)this._nativePointer)[14]);
            if (dxgiDevice_ != System.IntPtr.Zero)
                dxgiDevice = new DXNET.DXGI.Device(dxgiDevice_);
            else
                dxgiDevice = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("852f2087-802c-4037-ab60-ff2e7ee6fc01")]
    public partial class Device3 : DXNET.Direct2D1.Device2
    {
        public Device3(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Device3(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Device3(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "options">No documentation.</param>
        /// <param name = "deviceContext3">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Device3::CreateDeviceContext([In] D2D1_DEVICE_CONTEXT_OPTIONS options,[Out, Fast] ID2D1DeviceContext3** deviceContext3)</unmanaged>
        /// <unmanaged-short>ID2D1Device3::CreateDeviceContext</unmanaged-short>
        internal unsafe void CreateDeviceContext(DXNET.Direct2D1.DeviceContextOptions options, DXNET.Direct2D1.DeviceContext3 deviceContext3)
        {
            System.IntPtr deviceContext3_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)options), &deviceContext3_, (*(void ***)this._nativePointer)[15]);
            (deviceContext3).NativePointer = deviceContext3_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("d7bdb159-5683-4a46-bc9c-72dc720b858b")]
    public partial class Device4 : DXNET.Direct2D1.Device3
    {
        public Device4(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Device4(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Device4(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMaximumColorGlyphCacheMemory / SetMaximumColorGlyphCacheMemory</unmanaged>
        /// <unmanaged-short>GetMaximumColorGlyphCacheMemory</unmanaged-short>
        public System.Int64 MaximumColorGlyphCacheMemory
        {
            get => GetMaximumColorGlyphCacheMemory();
            set => SetMaximumColorGlyphCacheMemory(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "options">No documentation.</param>
        /// <param name = "deviceContext4">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Device4::CreateDeviceContext([In] D2D1_DEVICE_CONTEXT_OPTIONS options,[Out, Fast] ID2D1DeviceContext4** deviceContext4)</unmanaged>
        /// <unmanaged-short>ID2D1Device4::CreateDeviceContext</unmanaged-short>
        internal unsafe void CreateDeviceContext(DXNET.Direct2D1.DeviceContextOptions options, DXNET.Direct2D1.DeviceContext4 deviceContext4)
        {
            System.IntPtr deviceContext4_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)options), &deviceContext4_, (*(void ***)this._nativePointer)[16]);
            (deviceContext4).NativePointer = deviceContext4_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "maximumInBytes">No documentation.</param>
        /// <unmanaged>void ID2D1Device4::SetMaximumColorGlyphCacheMemory([In] unsigned longlong maximumInBytes)</unmanaged>
        /// <unmanaged-short>ID2D1Device4::SetMaximumColorGlyphCacheMemory</unmanaged-short>
        internal unsafe void SetMaximumColorGlyphCacheMemory(System.Int64 maximumInBytes)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, maximumInBytes, (*(void ***)this._nativePointer)[17]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned longlong ID2D1Device4::GetMaximumColorGlyphCacheMemory()</unmanaged>
        /// <unmanaged-short>ID2D1Device4::GetMaximumColorGlyphCacheMemory</unmanaged-short>
        internal unsafe System.Int64 GetMaximumColorGlyphCacheMemory()
        {
            System.Int64 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCalllong(this._nativePointer, (*(void ***)this._nativePointer)[18]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("d55ba0a4-6405-4694-aef5-08ee1a4358b4")]
    public partial class Device5 : DXNET.Direct2D1.Device4
    {
        public Device5(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Device5(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Device5(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "options">No documentation.</param>
        /// <param name = "deviceContext5">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Device5::CreateDeviceContext([In] D2D1_DEVICE_CONTEXT_OPTIONS options,[Out, Fast] ID2D1DeviceContext5** deviceContext5)</unmanaged>
        /// <unmanaged-short>ID2D1Device5::CreateDeviceContext</unmanaged-short>
        internal unsafe void CreateDeviceContext(DXNET.Direct2D1.DeviceContextOptions options, DXNET.Direct2D1.DeviceContext5 deviceContext5)
        {
            System.IntPtr deviceContext5_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)options), &deviceContext5_, (*(void ***)this._nativePointer)[19]);
            (deviceContext5).NativePointer = deviceContext5_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("e8f7fe7a-191c-466d-ad95-975678bda998")]
    public partial class DeviceContext : DXNET.Direct2D1.RenderTarget
    {
        public DeviceContext(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DeviceContext(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DeviceContext(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDevice</unmanaged>
        /// <unmanaged-short>GetDevice</unmanaged-short>
        public DXNET.Direct2D1.Device Device
        {
            get
            {
                GetDevice(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetTarget / SetTarget</unmanaged>
        /// <unmanaged-short>GetTarget</unmanaged-short>
        public DXNET.Direct2D1.Image Target
        {
            get
            {
                GetTarget(out var __output__);
                return __output__;
            }

            set => SetTarget(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetRenderingControls / SetRenderingControls</unmanaged>
        /// <unmanaged-short>GetRenderingControls</unmanaged-short>
        public DXNET.Direct2D1.RenderingControls RenderingControls
        {
            get
            {
                GetRenderingControls(out var __output__);
                return __output__;
            }

            set => SetRenderingControls(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPrimitiveBlend / SetPrimitiveBlend</unmanaged>
        /// <unmanaged-short>GetPrimitiveBlend</unmanaged-short>
        public DXNET.Direct2D1.PrimitiveBlend PrimitiveBlend
        {
            get => GetPrimitiveBlend();
            set => SetPrimitiveBlend(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetUnitMode / SetUnitMode</unmanaged>
        /// <unmanaged-short>GetUnitMode</unmanaged-short>
        public DXNET.Direct2D1.UnitMode UnitMode
        {
            get => GetUnitMode();
            set => SetUnitMode(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "size">No documentation.</param>
        /// <param name = "sourceData">No documentation.</param>
        /// <param name = "pitch">No documentation.</param>
        /// <param name = "bitmapProperties">No documentation.</param>
        /// <param name = "bitmap">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::CreateBitmap([In] D2D_SIZE_U size,[In, Optional] const void* sourceData,[In] unsigned int pitch,[In] const D2D1_BITMAP_PROPERTIES1* bitmapProperties,[Out, Fast] ID2D1Bitmap1** bitmap)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::CreateBitmap</unmanaged-short>
        internal unsafe void CreateBitmap(DXNET.Size2 size, System.IntPtr sourceData, System.Int32 pitch, DXNET.Direct2D1.BitmapProperties1 bitmapProperties, DXNET.Direct2D1.Bitmap1 bitmap)
        {
            DXNET.Direct2D1.BitmapProperties1.__Native bitmapProperties_ = default (DXNET.Direct2D1.BitmapProperties1.__Native);
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            bitmapProperties.__MarshalTo(ref bitmapProperties_);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, size, (void *)sourceData, pitch, &bitmapProperties_, &bitmap_, (*(void ***)this._nativePointer)[57]);
            (bitmap).NativePointer = bitmap_;
            bitmapProperties.__MarshalFree(ref bitmapProperties_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "wicBitmapSource">No documentation.</param>
        /// <param name = "bitmapProperties">No documentation.</param>
        /// <param name = "bitmap">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::CreateBitmapFromWicBitmap([In] IWICBitmapSource* wicBitmapSource,[In, Optional] const D2D1_BITMAP_PROPERTIES1* bitmapProperties,[Out] ID2D1Bitmap1** bitmap)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::CreateBitmapFromWicBitmap</unmanaged-short>
        internal unsafe void CreateBitmapFromWicBitmap(DXNET.WIC.BitmapSource wicBitmapSource, DXNET.Direct2D1.BitmapProperties1 bitmapProperties, out DXNET.Direct2D1.Bitmap1 bitmap)
        {
            System.IntPtr wicBitmapSource_ = System.IntPtr.Zero;
            DXNET.Direct2D1.BitmapProperties1.__Native bitmapProperties_ = default (DXNET.Direct2D1.BitmapProperties1.__Native);
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            wicBitmapSource_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(wicBitmapSource);
            if (bitmapProperties != null)
                bitmapProperties.__MarshalTo(ref bitmapProperties_);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wicBitmapSource_, bitmapProperties == null ? (void *)0 : &bitmapProperties_, &bitmap_, (*(void ***)this._nativePointer)[58]);
            if (bitmap_ != System.IntPtr.Zero)
                bitmap = new DXNET.Direct2D1.Bitmap1(bitmap_);
            else
                bitmap = null;
            if (bitmapProperties != null)
                bitmapProperties.__MarshalFree(ref bitmapProperties_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "space">No documentation.</param>
        /// <param name = "rofileRef">No documentation.</param>
        /// <param name = "profileSize">No documentation.</param>
        /// <param name = "colorContext">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::CreateColorContext([In] D2D1_COLOR_SPACE space,[In, Buffer, Optional] const unsigned char* profile,[In] unsigned int profileSize,[Out, Fast] ID2D1ColorContext** colorContext)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::CreateColorContext</unmanaged-short>
        internal unsafe void CreateColorContext(DXNET.Direct2D1.ColorSpace space, System.Byte[] rofileRef, System.Int32 profileSize, DXNET.Direct2D1.ColorContext colorContext)
        {
            System.IntPtr colorContext_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *rofileRef_ = rofileRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)space), rofileRef_, profileSize, &colorContext_, (*(void ***)this._nativePointer)[59]);
            (colorContext).NativePointer = colorContext_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "filename">No documentation.</param>
        /// <param name = "colorContext">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::CreateColorContextFromFilename([In] const wchar_t* filename,[Out, Fast] ID2D1ColorContext** colorContext)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::CreateColorContextFromFilename</unmanaged-short>
        internal unsafe void CreateColorContextFromFilename(System.String filename, DXNET.Direct2D1.ColorContext colorContext)
        {
            System.IntPtr colorContext_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (char *filename_ = filename)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)filename_, &colorContext_, (*(void ***)this._nativePointer)[60]);
            (colorContext).NativePointer = colorContext_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "wicColorContext">No documentation.</param>
        /// <param name = "colorContext">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::CreateColorContextFromWicColorContext([In] IWICColorContext* wicColorContext,[Out, Fast] ID2D1ColorContext** colorContext)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::CreateColorContextFromWicColorContext</unmanaged-short>
        internal unsafe void CreateColorContextFromWicColorContext(DXNET.WIC.ColorContext wicColorContext, DXNET.Direct2D1.ColorContext colorContext)
        {
            System.IntPtr wicColorContext_ = System.IntPtr.Zero;
            System.IntPtr colorContext_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            wicColorContext_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.ColorContext>(wicColorContext);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wicColorContext_, &colorContext_, (*(void ***)this._nativePointer)[61]);
            (colorContext).NativePointer = colorContext_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "surface">No documentation.</param>
        /// <param name = "bitmapProperties">No documentation.</param>
        /// <param name = "bitmap">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::CreateBitmapFromDxgiSurface([In] IDXGISurface* surface,[In, Optional] const D2D1_BITMAP_PROPERTIES1* bitmapProperties,[Out, Fast] ID2D1Bitmap1** bitmap)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::CreateBitmapFromDxgiSurface</unmanaged-short>
        internal unsafe void CreateBitmapFromDxgiSurface(DXNET.DXGI.Surface surface, DXNET.Direct2D1.BitmapProperties1 bitmapProperties, DXNET.Direct2D1.Bitmap1 bitmap)
        {
            System.IntPtr surface_ = System.IntPtr.Zero;
            DXNET.Direct2D1.BitmapProperties1.__Native bitmapProperties_ = default (DXNET.Direct2D1.BitmapProperties1.__Native);
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            surface_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Surface>(surface);
            if (bitmapProperties != null)
                bitmapProperties.__MarshalTo(ref bitmapProperties_);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)surface_, bitmapProperties == null ? (void *)0 : &bitmapProperties_, &bitmap_, (*(void ***)this._nativePointer)[62]);
            (bitmap).NativePointer = bitmap_;
            if (bitmapProperties != null)
                bitmapProperties.__MarshalFree(ref bitmapProperties_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "effectId">No documentation.</param>
        /// <param name = "effect">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::CreateEffect([In] const GUID&amp; effectId,[Out, Fast] ID2D1Effect** effect)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::CreateEffect</unmanaged-short>
        internal unsafe void CreateEffect(System.Guid effectId, DXNET.Direct2D1.Effect effect)
        {
            System.IntPtr effect_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &effectId, &effect_, (*(void ***)this._nativePointer)[63]);
            (effect).NativePointer = effect_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "straightAlphaGradientStops">No documentation.</param>
        /// <param name = "straightAlphaGradientStopsCount">No documentation.</param>
        /// <param name = "preInterpolationSpace">No documentation.</param>
        /// <param name = "postInterpolationSpace">No documentation.</param>
        /// <param name = "bufferPrecision">No documentation.</param>
        /// <param name = "extendMode">No documentation.</param>
        /// <param name = "colorInterpolationMode">No documentation.</param>
        /// <param name = "gradientStopCollection1">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::CreateGradientStopCollection([In, Buffer] const D2D1_GRADIENT_STOP* straightAlphaGradientStops,[In] unsigned int straightAlphaGradientStopsCount,[In] D2D1_COLOR_SPACE preInterpolationSpace,[In] D2D1_COLOR_SPACE postInterpolationSpace,[In] D2D1_BUFFER_PRECISION bufferPrecision,[In] D2D1_EXTEND_MODE extendMode,[In] D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode,[Out, Fast] ID2D1GradientStopCollection1** gradientStopCollection1)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::CreateGradientStopCollection</unmanaged-short>
        internal unsafe void CreateGradientStopCollection(DXNET.Direct2D1.GradientStop[] straightAlphaGradientStops, System.Int32 straightAlphaGradientStopsCount, DXNET.Direct2D1.ColorSpace preInterpolationSpace, DXNET.Direct2D1.ColorSpace postInterpolationSpace, DXNET.Direct2D1.BufferPrecision bufferPrecision, DXNET.Direct2D1.ExtendMode extendMode, DXNET.Direct2D1.ColorInterpolationMode colorInterpolationMode, DXNET.Direct2D1.GradientStopCollection1 gradientStopCollection1)
        {
            System.IntPtr gradientStopCollection1_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *straightAlphaGradientStops_ = straightAlphaGradientStops)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, straightAlphaGradientStops_, straightAlphaGradientStopsCount, unchecked ((System.Int32)preInterpolationSpace), unchecked ((System.Int32)postInterpolationSpace), unchecked ((System.Int32)bufferPrecision), unchecked ((System.Int32)extendMode), unchecked ((System.Int32)colorInterpolationMode), &gradientStopCollection1_, (*(void ***)this._nativePointer)[64]);
            (gradientStopCollection1).NativePointer = gradientStopCollection1_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "image">No documentation.</param>
        /// <param name = "imageBrushProperties">No documentation.</param>
        /// <param name = "brushProperties">No documentation.</param>
        /// <param name = "imageBrush">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::CreateImageBrush([In, Optional] ID2D1Image* image,[In] const D2D1_IMAGE_BRUSH_PROPERTIES* imageBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out, Fast] ID2D1ImageBrush** imageBrush)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::CreateImageBrush</unmanaged-short>
        internal unsafe void CreateImageBrush(DXNET.Direct2D1.Image image, ref DXNET.Direct2D1.ImageBrushProperties imageBrushProperties, DXNET.Direct2D1.BrushProperties? brushProperties, DXNET.Direct2D1.ImageBrush imageBrush)
        {
            System.IntPtr image_ = System.IntPtr.Zero;
            DXNET.Direct2D1.BrushProperties brushProperties_;
            System.IntPtr imageBrush_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            image_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Image>(image);
            if (brushProperties != null)
                brushProperties_ = brushProperties.Value;
            fixed (void *imageBrushProperties_ = &imageBrushProperties)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)image_, imageBrushProperties_, brushProperties == null ? (void *)0 : &brushProperties_, &imageBrush_, (*(void ***)this._nativePointer)[65]);
            (imageBrush).NativePointer = imageBrush_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmap">No documentation.</param>
        /// <param name = "bitmapBrushProperties">No documentation.</param>
        /// <param name = "brushProperties">No documentation.</param>
        /// <param name = "bitmapBrush">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::CreateBitmapBrush([In, Optional] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_BITMAP_BRUSH_PROPERTIES1* bitmapBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out, Fast] ID2D1BitmapBrush1** bitmapBrush)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::CreateBitmapBrush</unmanaged-short>
        internal unsafe void CreateBitmapBrush(DXNET.Direct2D1.Bitmap bitmap, DXNET.Direct2D1.BitmapBrushProperties1? bitmapBrushProperties, DXNET.Direct2D1.BrushProperties? brushProperties, DXNET.Direct2D1.BitmapBrush1 bitmapBrush)
        {
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            DXNET.Direct2D1.BitmapBrushProperties1 bitmapBrushProperties_;
            DXNET.Direct2D1.BrushProperties brushProperties_;
            System.IntPtr bitmapBrush_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            bitmap_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Bitmap>(bitmap);
            if (bitmapBrushProperties != null)
                bitmapBrushProperties_ = bitmapBrushProperties.Value;
            if (brushProperties != null)
                brushProperties_ = brushProperties.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bitmap_, bitmapBrushProperties == null ? (void *)0 : &bitmapBrushProperties_, brushProperties == null ? (void *)0 : &brushProperties_, &bitmapBrush_, (*(void ***)this._nativePointer)[66]);
            (bitmapBrush).NativePointer = bitmapBrush_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "commandList">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::CreateCommandList([Out, Fast] ID2D1CommandList** commandList)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::CreateCommandList</unmanaged-short>
        internal unsafe void CreateCommandList(DXNET.Direct2D1.CommandList commandList)
        {
            System.IntPtr commandList_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &commandList_, (*(void ***)this._nativePointer)[67]);
            (commandList).NativePointer = commandList_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "format">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL ID2D1DeviceContext::IsDxgiFormatSupported([In] DXGI_FORMAT format)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::IsDxgiFormatSupported</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool IsDxgiFormatSupported(DXNET.DXGI.Format format)
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, unchecked ((System.Int32)format), (*(void ***)this._nativePointer)[68]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bufferPrecision">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL ID2D1DeviceContext::IsBufferPrecisionSupported([In] D2D1_BUFFER_PRECISION bufferPrecision)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::IsBufferPrecisionSupported</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool IsBufferPrecisionSupported(DXNET.Direct2D1.BufferPrecision bufferPrecision)
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, unchecked ((System.Int32)bufferPrecision), (*(void ***)this._nativePointer)[69]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "image">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::GetImageLocalBounds([In] ID2D1Image* image,[Out] D2D_RECT_F* localBounds)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::GetImageLocalBounds</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawRectangleF GetImageLocalBounds(DXNET.Direct2D1.Image image)
        {
            System.IntPtr image_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawRectangleF localBounds;
            DXNET.Result __result__;
            image_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Image>(image);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)image_, &localBounds, (*(void ***)this._nativePointer)[70]);
            __result__.CheckError();
            return localBounds;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "image">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::GetImageWorldBounds([In] ID2D1Image* image,[Out] D2D_RECT_F* worldBounds)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::GetImageWorldBounds</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawRectangleF GetImageWorldBounds(DXNET.Direct2D1.Image image)
        {
            System.IntPtr image_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawRectangleF worldBounds;
            DXNET.Result __result__;
            image_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Image>(image);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)image_, &worldBounds, (*(void ***)this._nativePointer)[71]);
            __result__.CheckError();
            return worldBounds;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "baselineOrigin">No documentation.</param>
        /// <param name = "glyphRun">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::GetGlyphRunWorldBounds([In] D2D_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] DWRITE_MEASURING_MODE measuringMode,[Out] D2D_RECT_F* bounds)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::GetGlyphRunWorldBounds</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawRectangleF GetGlyphRunWorldBounds(DXNET.Mathematics.Interop.RawVector2 baselineOrigin, DXNET.DirectWrite.GlyphRun glyphRun, DXNET.Direct2D1.MeasuringMode measuringMode)
        {
            DXNET.DirectWrite.GlyphRun.__Native glyphRun_ = default (DXNET.DirectWrite.GlyphRun.__Native);
            DXNET.Mathematics.Interop.RawRectangleF bounds;
            DXNET.Result __result__;
            glyphRun.__MarshalTo(ref glyphRun_);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, baselineOrigin, &glyphRun_, unchecked ((System.Int32)measuringMode), &bounds, (*(void ***)this._nativePointer)[72]);
            glyphRun.__MarshalFree(ref glyphRun_);
            __result__.CheckError();
            return bounds;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "device">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext::GetDevice([Out] ID2D1Device** device)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::GetDevice</unmanaged-short>
        internal unsafe void GetDevice(out DXNET.Direct2D1.Device device)
        {
            System.IntPtr device_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &device_, (*(void ***)this._nativePointer)[73]);
            if (device_ != System.IntPtr.Zero)
                device = new DXNET.Direct2D1.Device(device_);
            else
                device = null;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "image">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext::SetTarget([In, Optional] ID2D1Image* image)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::SetTarget</unmanaged-short>
        internal unsafe void SetTarget(DXNET.Direct2D1.Image image)
        {
            System.IntPtr image_ = System.IntPtr.Zero;
            image_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Image>(image);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)image_, (*(void ***)this._nativePointer)[74]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "image">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext::GetTarget([Out, Optional] ID2D1Image** image)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::GetTarget</unmanaged-short>
        internal unsafe void GetTarget(out DXNET.Direct2D1.Image image)
        {
            System.IntPtr image_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &image_, (*(void ***)this._nativePointer)[75]);
            if (image_ != System.IntPtr.Zero)
                image = new DXNET.Direct2D1.Image(image_);
            else
                image = null;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "renderingControls">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext::SetRenderingControls([In] const D2D1_RENDERING_CONTROLS* renderingControls)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::SetRenderingControls</unmanaged-short>
        internal unsafe void SetRenderingControls(DXNET.Direct2D1.RenderingControls renderingControls)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &renderingControls, (*(void ***)this._nativePointer)[76]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "renderingControls">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext::GetRenderingControls([Out] D2D1_RENDERING_CONTROLS* renderingControls)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::GetRenderingControls</unmanaged-short>
        internal unsafe void GetRenderingControls(out DXNET.Direct2D1.RenderingControls renderingControls)
        {
            renderingControls = default (DXNET.Direct2D1.RenderingControls);
            fixed (void *renderingControls_ = &renderingControls)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, renderingControls_, (*(void ***)this._nativePointer)[77]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "primitiveBlend">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext::SetPrimitiveBlend([In] D2D1_PRIMITIVE_BLEND primitiveBlend)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::SetPrimitiveBlend</unmanaged-short>
        internal unsafe void SetPrimitiveBlend(DXNET.Direct2D1.PrimitiveBlend primitiveBlend)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)primitiveBlend), (*(void ***)this._nativePointer)[78]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_PRIMITIVE_BLEND ID2D1DeviceContext::GetPrimitiveBlend()</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::GetPrimitiveBlend</unmanaged-short>
        internal unsafe DXNET.Direct2D1.PrimitiveBlend GetPrimitiveBlend()
        {
            DXNET.Direct2D1.PrimitiveBlend __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1PrimitiveBlend(this._nativePointer, (*(void ***)this._nativePointer)[79]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "unitMode">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext::SetUnitMode([In] D2D1_UNIT_MODE unitMode)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::SetUnitMode</unmanaged-short>
        internal unsafe void SetUnitMode(DXNET.Direct2D1.UnitMode unitMode)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)unitMode), (*(void ***)this._nativePointer)[80]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_UNIT_MODE ID2D1DeviceContext::GetUnitMode()</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::GetUnitMode</unmanaged-short>
        internal unsafe DXNET.Direct2D1.UnitMode GetUnitMode()
        {
            DXNET.Direct2D1.UnitMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1UnitMode(this._nativePointer, (*(void ***)this._nativePointer)[81]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "baselineOrigin">No documentation.</param>
        /// <param name = "glyphRun">No documentation.</param>
        /// <param name = "glyphRunDescription">No documentation.</param>
        /// <param name = "foregroundBrush">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext::DrawGlyphRun([In] D2D_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In, Optional] const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,[In] ID2D1Brush* foregroundBrush,[In] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::DrawGlyphRun</unmanaged-short>
        public unsafe void DrawGlyphRun(DXNET.Mathematics.Interop.RawVector2 baselineOrigin, DXNET.DirectWrite.GlyphRun glyphRun, DXNET.DirectWrite.GlyphRunDescription glyphRunDescription, DXNET.Direct2D1.Brush foregroundBrush, DXNET.Direct2D1.MeasuringMode measuringMode)
        {
            DXNET.DirectWrite.GlyphRun.__Native glyphRun_ = default (DXNET.DirectWrite.GlyphRun.__Native);
            DXNET.DirectWrite.GlyphRunDescription.__Native glyphRunDescription_ = default (DXNET.DirectWrite.GlyphRunDescription.__Native);
            System.IntPtr foregroundBrush_ = System.IntPtr.Zero;
            glyphRun.__MarshalTo(ref glyphRun_);
            if (glyphRunDescription != null)
                glyphRunDescription.__MarshalTo(ref glyphRunDescription_);
            foregroundBrush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(foregroundBrush);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, baselineOrigin, &glyphRun_, glyphRunDescription == null ? (void *)0 : &glyphRunDescription_, (void *)foregroundBrush_, unchecked ((System.Int32)measuringMode), (*(void ***)this._nativePointer)[82]);
            glyphRun.__MarshalFree(ref glyphRun_);
            if (glyphRunDescription != null)
                glyphRunDescription.__MarshalFree(ref glyphRunDescription_);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "image">No documentation.</param>
        /// <param name = "targetOffset">No documentation.</param>
        /// <param name = "imageRectangle">No documentation.</param>
        /// <param name = "interpolationMode">No documentation.</param>
        /// <param name = "compositeMode">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext::DrawImage([In] ID2D1Image* image,[In, Optional] const D2D_POINT_2F* targetOffset,[In, Optional] const D2D_RECT_F* imageRectangle,[In] D2D1_INTERPOLATION_MODE interpolationMode,[In] D2D1_COMPOSITE_MODE compositeMode)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::DrawImage</unmanaged-short>
        public unsafe void DrawImage(DXNET.Direct2D1.Image image, DXNET.Mathematics.Interop.RawVector2? targetOffset, DXNET.Mathematics.Interop.RawRectangleF? imageRectangle, DXNET.Direct2D1.InterpolationMode interpolationMode, DXNET.Direct2D1.CompositeMode compositeMode)
        {
            System.IntPtr image_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawVector2 targetOffset_;
            DXNET.Mathematics.Interop.RawRectangleF imageRectangle_;
            image_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Image>(image);
            if (targetOffset != null)
                targetOffset_ = targetOffset.Value;
            if (imageRectangle != null)
                imageRectangle_ = imageRectangle.Value;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)image_, targetOffset == null ? (void *)0 : &targetOffset_, imageRectangle == null ? (void *)0 : &imageRectangle_, unchecked ((System.Int32)interpolationMode), unchecked ((System.Int32)compositeMode), (*(void ***)this._nativePointer)[83]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gdiMetafile">No documentation.</param>
        /// <param name = "targetOffset">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext::DrawGdiMetafile([In] ID2D1GdiMetafile* gdiMetafile,[In, Optional] const D2D_POINT_2F* targetOffset)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::DrawGdiMetafile</unmanaged-short>
        public unsafe void DrawGdiMetafile(DXNET.Direct2D1.GdiMetafile gdiMetafile, DXNET.Mathematics.Interop.RawVector2? targetOffset)
        {
            System.IntPtr gdiMetafile_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawVector2 targetOffset_;
            gdiMetafile_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.GdiMetafile>(gdiMetafile);
            if (targetOffset != null)
                targetOffset_ = targetOffset.Value;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)gdiMetafile_, targetOffset == null ? (void *)0 : &targetOffset_, (*(void ***)this._nativePointer)[84]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmap">No documentation.</param>
        /// <param name = "destinationRectangle">No documentation.</param>
        /// <param name = "opacity">No documentation.</param>
        /// <param name = "interpolationMode">No documentation.</param>
        /// <param name = "sourceRectangle">No documentation.</param>
        /// <param name = "erspectiveTransformRef">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext::DrawBitmap([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D_RECT_F* destinationRectangle,[In] float opacity,[In] D2D1_INTERPOLATION_MODE interpolationMode,[In, Optional] const D2D_RECT_F* sourceRectangle,[In, Optional] const D2D_MATRIX_4X4_F* perspectiveTransform)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::DrawBitmap</unmanaged-short>
        public unsafe void DrawBitmap(DXNET.Direct2D1.Bitmap bitmap, DXNET.Mathematics.Interop.RawRectangleF? destinationRectangle, System.Single opacity, DXNET.Direct2D1.InterpolationMode interpolationMode, DXNET.Mathematics.Interop.RawRectangleF? sourceRectangle, DXNET.Mathematics.Interop.RawMatrix? erspectiveTransformRef)
        {
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawRectangleF destinationRectangle_;
            DXNET.Mathematics.Interop.RawRectangleF sourceRectangle_;
            DXNET.Mathematics.Interop.RawMatrix erspectiveTransformRef_;
            bitmap_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Bitmap>(bitmap);
            if (destinationRectangle != null)
                destinationRectangle_ = destinationRectangle.Value;
            if (sourceRectangle != null)
                sourceRectangle_ = sourceRectangle.Value;
            if (erspectiveTransformRef != null)
                erspectiveTransformRef_ = erspectiveTransformRef.Value;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)bitmap_, destinationRectangle == null ? (void *)0 : &destinationRectangle_, opacity, unchecked ((System.Int32)interpolationMode), sourceRectangle == null ? (void *)0 : &sourceRectangle_, erspectiveTransformRef == null ? (void *)0 : &erspectiveTransformRef_, (*(void ***)this._nativePointer)[85]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "layerParameters">No documentation.</param>
        /// <param name = "layer">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext::PushLayer([In] const D2D1_LAYER_PARAMETERS1* layerParameters,[In, Optional] ID2D1Layer* layer)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::PushLayer</unmanaged-short>
        public unsafe void PushLayer(ref DXNET.Direct2D1.LayerParameters1 layerParameters, DXNET.Direct2D1.Layer layer)
        {
            DXNET.Direct2D1.LayerParameters1.__Native layerParameters_ = default (DXNET.Direct2D1.LayerParameters1.__Native);
            System.IntPtr layer_ = System.IntPtr.Zero;
            layerParameters.__MarshalTo(ref layerParameters_);
            layer_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Layer>(layer);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &layerParameters_, (void *)layer_, (*(void ***)this._nativePointer)[86]);
            layerParameters.__MarshalFree(ref layerParameters_);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "effect">No documentation.</param>
        /// <param name = "input">No documentation.</param>
        /// <param name = "inputRectangle">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::InvalidateEffectInputRectangle([In] ID2D1Effect* effect,[In] unsigned int input,[In] const D2D_RECT_F* inputRectangle)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::InvalidateEffectInputRectangle</unmanaged-short>
        public unsafe void InvalidateEffectInputRectangle(DXNET.Direct2D1.Effect effect, System.Int32 input, DXNET.Mathematics.Interop.RawRectangleF inputRectangle)
        {
            System.IntPtr effect_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            effect_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Effect>(effect);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)effect_, input, &inputRectangle, (*(void ***)this._nativePointer)[87]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "effect">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::GetEffectInvalidRectangleCount([In] ID2D1Effect* effect,[Out] unsigned int* rectangleCount)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::GetEffectInvalidRectangleCount</unmanaged-short>
        internal unsafe System.Int32 GetEffectInvalidRectangleCount(DXNET.Direct2D1.Effect effect)
        {
            System.IntPtr effect_ = System.IntPtr.Zero;
            System.Int32 rectangleCount;
            DXNET.Result __result__;
            effect_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Effect>(effect);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)effect_, &rectangleCount, (*(void ***)this._nativePointer)[88]);
            __result__.CheckError();
            return rectangleCount;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "effect">No documentation.</param>
        /// <param name = "rectangles">No documentation.</param>
        /// <param name = "rectanglesCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::GetEffectInvalidRectangles([In] ID2D1Effect* effect,[Out, Buffer] D2D_RECT_F* rectangles,[In] unsigned int rectanglesCount)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::GetEffectInvalidRectangles</unmanaged-short>
        internal unsafe void GetEffectInvalidRectangles(DXNET.Direct2D1.Effect effect, DXNET.Mathematics.Interop.RawRectangleF[] rectangles, System.Int32 rectanglesCount)
        {
            System.IntPtr effect_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            effect_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Effect>(effect);
            fixed (void *rectangles_ = rectangles)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)effect_, rectangles_, rectanglesCount, (*(void ***)this._nativePointer)[89]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "renderEffect">No documentation.</param>
        /// <param name = "renderImageRectangle">No documentation.</param>
        /// <param name = "inputDescriptions">No documentation.</param>
        /// <param name = "requiredInputRects">No documentation.</param>
        /// <param name = "inputCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext::GetEffectRequiredInputRectangles([In] ID2D1Effect* renderEffect,[In, Optional] const D2D_RECT_F* renderImageRectangle,[In, Buffer] const D2D1_EFFECT_INPUT_DESCRIPTION* inputDescriptions,[Out, Buffer] D2D_RECT_F* requiredInputRects,[In] unsigned int inputCount)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::GetEffectRequiredInputRectangles</unmanaged-short>
        internal unsafe void GetEffectRequiredInputRectangles(DXNET.Direct2D1.Effect renderEffect, DXNET.Mathematics.Interop.RawRectangleF? renderImageRectangle, DXNET.Direct2D1.EffectInputDescription[] inputDescriptions, DXNET.Mathematics.Interop.RawRectangleF[] requiredInputRects, System.Int32 inputCount)
        {
            System.IntPtr renderEffect_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawRectangleF renderImageRectangle_;
            DXNET.Direct2D1.EffectInputDescription.__Native[] inputDescriptions_ = new DXNET.Direct2D1.EffectInputDescription.__Native[inputDescriptions.Length];
            DXNET.Result __result__;
            renderEffect_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Effect>(renderEffect);
            if (renderImageRectangle != null)
                renderImageRectangle_ = renderImageRectangle.Value;
            for (int i = 0; i < inputDescriptions.Length; ++i)
                inputDescriptions[i].__MarshalTo(ref (inputDescriptions_)[i]);
            fixed (void *requiredInputRects_ = requiredInputRects)
                fixed (void *_inputDescriptions = inputDescriptions_)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)renderEffect_, renderImageRectangle == null ? (void *)0 : &renderImageRectangle_, _inputDescriptions, requiredInputRects_, inputCount, (*(void ***)this._nativePointer)[90]);
            for (int i = 0; i < inputDescriptions.Length; ++i)
                inputDescriptions[i].__MarshalFree(ref (inputDescriptions_)[i]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "opacityMask">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "destinationRectangle">No documentation.</param>
        /// <param name = "sourceRectangle">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext::FillOpacityMask([In] ID2D1Bitmap* opacityMask,[In] ID2D1Brush* brush,[In, Optional] const D2D_RECT_F* destinationRectangle,[In, Optional] const D2D_RECT_F* sourceRectangle)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext::FillOpacityMask</unmanaged-short>
        public unsafe void FillOpacityMask(DXNET.Direct2D1.Bitmap opacityMask, DXNET.Direct2D1.Brush brush, DXNET.Mathematics.Interop.RawRectangleF? destinationRectangle, DXNET.Mathematics.Interop.RawRectangleF? sourceRectangle)
        {
            System.IntPtr opacityMask_ = System.IntPtr.Zero;
            System.IntPtr brush_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawRectangleF destinationRectangle_;
            DXNET.Mathematics.Interop.RawRectangleF sourceRectangle_;
            opacityMask_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Bitmap>(opacityMask);
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            if (destinationRectangle != null)
                destinationRectangle_ = destinationRectangle.Value;
            if (sourceRectangle != null)
                sourceRectangle_ = sourceRectangle.Value;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)opacityMask_, (void *)brush_, destinationRectangle == null ? (void *)0 : &destinationRectangle_, sourceRectangle == null ? (void *)0 : &sourceRectangle_, (*(void ***)this._nativePointer)[91]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("d37f57e4-6908-459f-a199-e72f24f79987")]
    public partial class DeviceContext1 : DXNET.Direct2D1.DeviceContext
    {
        public DeviceContext1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DeviceContext1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DeviceContext1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "geometry">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <param name = "geometryRealization">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext1::CreateFilledGeometryRealization([In] ID2D1Geometry* geometry,[In] float flatteningTolerance,[Out, Fast] ID2D1GeometryRealization** geometryRealization)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext1::CreateFilledGeometryRealization</unmanaged-short>
        internal unsafe void CreateFilledGeometryRealization(DXNET.Direct2D1.Geometry geometry, System.Single flatteningTolerance, DXNET.Direct2D1.GeometryRealization geometryRealization)
        {
            System.IntPtr geometry_ = System.IntPtr.Zero;
            System.IntPtr geometryRealization_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            geometry_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Geometry>(geometry);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)geometry_, flatteningTolerance, &geometryRealization_, (*(void ***)this._nativePointer)[92]);
            (geometryRealization).NativePointer = geometryRealization_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "geometry">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <param name = "strokeWidth">No documentation.</param>
        /// <param name = "strokeStyle">No documentation.</param>
        /// <param name = "geometryRealization">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext1::CreateStrokedGeometryRealization([In] ID2D1Geometry* geometry,[In] float flatteningTolerance,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[Out, Fast] ID2D1GeometryRealization** geometryRealization)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext1::CreateStrokedGeometryRealization</unmanaged-short>
        internal unsafe void CreateStrokedGeometryRealization(DXNET.Direct2D1.Geometry geometry, System.Single flatteningTolerance, System.Single strokeWidth, DXNET.Direct2D1.StrokeStyle strokeStyle, DXNET.Direct2D1.GeometryRealization geometryRealization)
        {
            System.IntPtr geometry_ = System.IntPtr.Zero;
            System.IntPtr strokeStyle_ = System.IntPtr.Zero;
            System.IntPtr geometryRealization_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            geometry_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Geometry>(geometry);
            strokeStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.StrokeStyle>(strokeStyle);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)geometry_, flatteningTolerance, strokeWidth, (void *)strokeStyle_, &geometryRealization_, (*(void ***)this._nativePointer)[93]);
            (geometryRealization).NativePointer = geometryRealization_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "geometryRealization">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext1::DrawGeometryRealization([In] ID2D1GeometryRealization* geometryRealization,[In] ID2D1Brush* brush)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext1::DrawGeometryRealization</unmanaged-short>
        public unsafe void DrawGeometryRealization(DXNET.Direct2D1.GeometryRealization geometryRealization, DXNET.Direct2D1.Brush brush)
        {
            System.IntPtr geometryRealization_ = System.IntPtr.Zero;
            System.IntPtr brush_ = System.IntPtr.Zero;
            geometryRealization_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.GeometryRealization>(geometryRealization);
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)geometryRealization_, (void *)brush_, (*(void ***)this._nativePointer)[94]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("394ea6a3-0c34-4321-950b-6ca20f0be6c7")]
    public partial class DeviceContext2 : DXNET.Direct2D1.DeviceContext1
    {
        public DeviceContext2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DeviceContext2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DeviceContext2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "startPoint">No documentation.</param>
        /// <param name = "ink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext2::CreateInk([In] const D2D1_INK_POINT* startPoint,[Out, Fast] ID2D1Ink** ink)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext2::CreateInk</unmanaged-short>
        internal unsafe void CreateInk(DXNET.Direct2D1.InkPoint startPoint, DXNET.Direct2D1.Ink ink)
        {
            System.IntPtr ink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &startPoint, &ink_, (*(void ***)this._nativePointer)[95]);
            (ink).NativePointer = ink_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "inkStyleProperties">No documentation.</param>
        /// <param name = "inkStyle">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext2::CreateInkStyle([In, Optional] const D2D1_INK_STYLE_PROPERTIES* inkStyleProperties,[Out, Fast] ID2D1InkStyle** inkStyle)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext2::CreateInkStyle</unmanaged-short>
        internal unsafe void CreateInkStyle(DXNET.Direct2D1.InkStyleProperties? inkStyleProperties, DXNET.Direct2D1.InkStyle inkStyle)
        {
            DXNET.Direct2D1.InkStyleProperties inkStyleProperties_;
            System.IntPtr inkStyle_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (inkStyleProperties != null)
                inkStyleProperties_ = inkStyleProperties.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, inkStyleProperties == null ? (void *)0 : &inkStyleProperties_, &inkStyle_, (*(void ***)this._nativePointer)[96]);
            (inkStyle).NativePointer = inkStyle_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "atchesRef">No documentation.</param>
        /// <param name = "patchesCount">No documentation.</param>
        /// <param name = "gradientMesh">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext2::CreateGradientMesh([In, Buffer] const D2D1_GRADIENT_MESH_PATCH* patches,[In] unsigned int patchesCount,[Out, Fast] ID2D1GradientMesh** gradientMesh)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext2::CreateGradientMesh</unmanaged-short>
        internal unsafe void CreateGradientMesh(DXNET.Direct2D1.GradientMeshPatch[] atchesRef, System.Int32 patchesCount, DXNET.Direct2D1.GradientMesh gradientMesh)
        {
            System.IntPtr gradientMesh_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *atchesRef_ = atchesRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, atchesRef_, patchesCount, &gradientMesh_, (*(void ***)this._nativePointer)[97]);
            (gradientMesh).NativePointer = gradientMesh_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "wicBitmapSource">No documentation.</param>
        /// <param name = "loadingOptions">No documentation.</param>
        /// <param name = "alphaMode">No documentation.</param>
        /// <param name = "imageSource">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext2::CreateImageSourceFromWic([In] IWICBitmapSource* wicBitmapSource,[In] D2D1_IMAGE_SOURCE_LOADING_OPTIONS loadingOptions,[In] D2D1_ALPHA_MODE alphaMode,[Out, Fast] ID2D1ImageSourceFromWic** imageSource)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext2::CreateImageSourceFromWic</unmanaged-short>
        internal unsafe void CreateImageSourceFromWic(DXNET.WIC.BitmapSource wicBitmapSource, DXNET.Direct2D1.ImageSourceLoadingOptions loadingOptions, DXNET.Direct2D1.AlphaMode alphaMode, DXNET.Direct2D1.ImageSourceFromWic imageSource)
        {
            System.IntPtr wicBitmapSource_ = System.IntPtr.Zero;
            System.IntPtr imageSource_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            wicBitmapSource_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(wicBitmapSource);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wicBitmapSource_, unchecked ((System.Int32)loadingOptions), unchecked ((System.Int32)alphaMode), &imageSource_, (*(void ***)this._nativePointer)[98]);
            (imageSource).NativePointer = imageSource_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "precision">No documentation.</param>
        /// <param name = "extents">No documentation.</param>
        /// <param name = "data">No documentation.</param>
        /// <param name = "dataCount">No documentation.</param>
        /// <param name = "strides">No documentation.</param>
        /// <param name = "lookupTable">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext2::CreateLookupTable3D([In] D2D1_BUFFER_PRECISION precision,[In, Buffer] const unsigned int* extents,[In, Buffer] const unsigned char* data,[In] unsigned int dataCount,[In, Buffer] const unsigned int* strides,[Out, Fast] ID2D1LookupTable3D** lookupTable)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext2::CreateLookupTable3D</unmanaged-short>
        internal unsafe void CreateLookupTable3D(DXNET.Direct2D1.BufferPrecision precision, System.Int32[] extents, System.Byte[] data, System.Int32 dataCount, System.Int32[] strides, DXNET.Direct2D1.LookupTable3D lookupTable)
        {
            System.IntPtr lookupTable_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *strides_ = strides)
                fixed (void *data_ = data)
                    fixed (void *extents_ = extents)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)precision), extents_, data_, dataCount, strides_, &lookupTable_, (*(void ***)this._nativePointer)[99]);
            (lookupTable).NativePointer = lookupTable_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "surfaces">No documentation.</param>
        /// <param name = "surfaceCount">No documentation.</param>
        /// <param name = "colorSpace">No documentation.</param>
        /// <param name = "options">No documentation.</param>
        /// <param name = "imageSource">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext2::CreateImageSourceFromDxgi([In, Buffer] IDXGISurface** surfaces,[In] unsigned int surfaceCount,[In] DXGI_COLOR_SPACE_TYPE colorSpace,[In] D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS options,[Out, Fast] ID2D1ImageSource** imageSource)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext2::CreateImageSourceFromDxgi</unmanaged-short>
        internal unsafe void CreateImageSourceFromDxgi(DXNET.DXGI.Surface[] surfaces, System.Int32 surfaceCount, DXNET.DXGI.ColorSpaceType colorSpace, DXNET.Direct2D1.ImageSourceFromDxgiOptions options, DXNET.Direct2D1.ImageSource imageSource)
        {
            System.IntPtr*surfaces_;
            surfaces_ = (System.IntPtr*)0;
            if (surfaces != null)
            {
                System.IntPtr*_surfaces = stackalloc System.IntPtr[surfaces.Length];
                surfaces_ = _surfaces;
            }

            System.IntPtr imageSource_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (surfaces != null)
                for (int i = 0; i < surfaces.Length; ++i)
                    (surfaces_)[i] = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Surface>(surfaces[i]);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)surfaces_, surfaceCount, unchecked ((System.Int32)colorSpace), unchecked ((System.Int32)options), &imageSource_, (*(void ***)this._nativePointer)[100]);
            (imageSource).NativePointer = imageSource_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gradientMesh">No documentation.</param>
        /// <param name = "boundsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext2::GetGradientMeshWorldBounds([In] ID2D1GradientMesh* gradientMesh,[Out] D2D_RECT_F* pBounds)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext2::GetGradientMeshWorldBounds</unmanaged-short>
        public unsafe void GetGradientMeshWorldBounds(DXNET.Direct2D1.GradientMesh gradientMesh, out DXNET.Mathematics.Interop.RawRectangleF boundsRef)
        {
            System.IntPtr gradientMesh_ = System.IntPtr.Zero;
            boundsRef = default (DXNET.Mathematics.Interop.RawRectangleF);
            DXNET.Result __result__;
            gradientMesh_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.GradientMesh>(gradientMesh);
            fixed (void *boundsRef_ = &boundsRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)gradientMesh_, boundsRef_, (*(void ***)this._nativePointer)[101]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ink">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "inkStyle">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext2::DrawInk([In] ID2D1Ink* ink,[In] ID2D1Brush* brush,[In, Optional] ID2D1InkStyle* inkStyle)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext2::DrawInk</unmanaged-short>
        public unsafe void DrawInk(DXNET.Direct2D1.Ink ink, DXNET.Direct2D1.Brush brush, DXNET.Direct2D1.InkStyle inkStyle)
        {
            System.IntPtr ink_ = System.IntPtr.Zero;
            System.IntPtr brush_ = System.IntPtr.Zero;
            System.IntPtr inkStyle_ = System.IntPtr.Zero;
            ink_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Ink>(ink);
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            inkStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.InkStyle>(inkStyle);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)ink_, (void *)brush_, (void *)inkStyle_, (*(void ***)this._nativePointer)[102]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gradientMesh">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext2::DrawGradientMesh([In] ID2D1GradientMesh* gradientMesh)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext2::DrawGradientMesh</unmanaged-short>
        public unsafe void DrawGradientMesh(DXNET.Direct2D1.GradientMesh gradientMesh)
        {
            System.IntPtr gradientMesh_ = System.IntPtr.Zero;
            gradientMesh_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.GradientMesh>(gradientMesh);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)gradientMesh_, (*(void ***)this._nativePointer)[103]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gdiMetafile">No documentation.</param>
        /// <param name = "destinationRectangle">No documentation.</param>
        /// <param name = "sourceRectangle">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext2::DrawGdiMetafile([In] ID2D1GdiMetafile* gdiMetafile,[In, Optional] const D2D_RECT_F* destinationRectangle,[In, Optional] const D2D_RECT_F* sourceRectangle)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext2::DrawGdiMetafile</unmanaged-short>
        public unsafe void DrawGdiMetafile(DXNET.Direct2D1.GdiMetafile gdiMetafile, DXNET.Mathematics.Interop.RawRectangleF? destinationRectangle, DXNET.Mathematics.Interop.RawRectangleF? sourceRectangle)
        {
            System.IntPtr gdiMetafile_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawRectangleF destinationRectangle_;
            DXNET.Mathematics.Interop.RawRectangleF sourceRectangle_;
            gdiMetafile_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.GdiMetafile>(gdiMetafile);
            if (destinationRectangle != null)
                destinationRectangle_ = destinationRectangle.Value;
            if (sourceRectangle != null)
                sourceRectangle_ = sourceRectangle.Value;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)gdiMetafile_, destinationRectangle == null ? (void *)0 : &destinationRectangle_, sourceRectangle == null ? (void *)0 : &sourceRectangle_, (*(void ***)this._nativePointer)[104]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "imageSource">No documentation.</param>
        /// <param name = "ropertiesRef">No documentation.</param>
        /// <param name = "transformedImageSource">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext2::CreateTransformedImageSource([In] ID2D1ImageSource* imageSource,[In] const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES* properties,[Out, Fast] ID2D1TransformedImageSource** transformedImageSource)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext2::CreateTransformedImageSource</unmanaged-short>
        internal unsafe void CreateTransformedImageSource(DXNET.Direct2D1.ImageSource imageSource, ref DXNET.Direct2D1.TransformedImageSourceProperties ropertiesRef, DXNET.Direct2D1.TransformedImageSource transformedImageSource)
        {
            System.IntPtr imageSource_ = System.IntPtr.Zero;
            System.IntPtr transformedImageSource_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            imageSource_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.ImageSource>(imageSource);
            fixed (void *ropertiesRef_ = &ropertiesRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)imageSource_, ropertiesRef_, &transformedImageSource_, (*(void ***)this._nativePointer)[105]);
            (transformedImageSource).NativePointer = transformedImageSource_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "surfaces">No documentation.</param>
        /// <param name = "surfaceCount">No documentation.</param>
        /// <param name = "colorSpace">No documentation.</param>
        /// <param name = "options">No documentation.</param>
        /// <param name = "imageSource">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext2::CreateImageSourceFromDxgi([In, Buffer] IDXGISurface** surfaces,[In] unsigned int surfaceCount,[In] DXGI_COLOR_SPACE_TYPE colorSpace,[In] D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS options,[Out, Fast] ID2D1ImageSource** imageSource)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext2::CreateImageSourceFromDxgi</unmanaged-short>
        internal unsafe void CreateImageSourceFromDxgi(DXNET.ComArray<DXNET.DXGI.Surface> surfaces, System.Int32 surfaceCount, DXNET.DXGI.ColorSpaceType colorSpace, DXNET.Direct2D1.ImageSourceFromDxgiOptions options, DXNET.Direct2D1.ImageSource imageSource)
        {
            System.IntPtr imageSource_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)(surfaces?.NativePointer ?? System.IntPtr.Zero), surfaceCount, unchecked ((System.Int32)colorSpace), unchecked ((System.Int32)options), &imageSource_, (*(void ***)this._nativePointer)[100]);
            (imageSource).NativePointer = imageSource_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "surfaces">No documentation.</param>
        /// <param name = "surfaceCount">No documentation.</param>
        /// <param name = "colorSpace">No documentation.</param>
        /// <param name = "options">No documentation.</param>
        /// <param name = "imageSource">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext2::CreateImageSourceFromDxgi([In, Buffer] IDXGISurface** surfaces,[In] unsigned int surfaceCount,[In] DXGI_COLOR_SPACE_TYPE colorSpace,[In] D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS options,[Out, Fast] ID2D1ImageSource** imageSource)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext2::CreateImageSourceFromDxgi</unmanaged-short>
        private unsafe void CreateImageSourceFromDxgi(System.IntPtr surfaces, System.Int32 surfaceCount, DXNET.DXGI.ColorSpaceType colorSpace, DXNET.Direct2D1.ImageSourceFromDxgiOptions options, System.IntPtr imageSource)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)surfaces, surfaceCount, unchecked ((System.Int32)colorSpace), unchecked ((System.Int32)options), (void *)imageSource, (*(void ***)this._nativePointer)[100]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("235a7496-8351-414c-bcd4-6672ab2d8e00")]
    public partial class DeviceContext3 : DXNET.Direct2D1.DeviceContext2
    {
        public DeviceContext3(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DeviceContext3(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DeviceContext3(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "spriteBatch">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext3::CreateSpriteBatch([Out, Fast] ID2D1SpriteBatch** spriteBatch)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext3::CreateSpriteBatch</unmanaged-short>
        internal unsafe void CreateSpriteBatch(DXNET.Direct2D1.SpriteBatch spriteBatch)
        {
            System.IntPtr spriteBatch_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &spriteBatch_, (*(void ***)this._nativePointer)[106]);
            (spriteBatch).NativePointer = spriteBatch_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "spriteBatch">No documentation.</param>
        /// <param name = "startIndex">No documentation.</param>
        /// <param name = "spriteCount">No documentation.</param>
        /// <param name = "bitmap">No documentation.</param>
        /// <param name = "interpolationMode">No documentation.</param>
        /// <param name = "spriteOptions">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext3::DrawSpriteBatch([In] ID2D1SpriteBatch* spriteBatch,[In] unsigned int startIndex,[In] unsigned int spriteCount,[In] ID2D1Bitmap* bitmap,[In] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode,[In] D2D1_SPRITE_OPTIONS spriteOptions)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext3::DrawSpriteBatch</unmanaged-short>
        public unsafe void DrawSpriteBatch(DXNET.Direct2D1.SpriteBatch spriteBatch, System.Int32 startIndex, System.Int32 spriteCount, DXNET.Direct2D1.Bitmap bitmap, DXNET.Direct2D1.BitmapInterpolationMode interpolationMode, DXNET.Direct2D1.SpriteOptions spriteOptions)
        {
            System.IntPtr spriteBatch_ = System.IntPtr.Zero;
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            spriteBatch_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SpriteBatch>(spriteBatch);
            bitmap_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Bitmap>(bitmap);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)spriteBatch_, startIndex, spriteCount, (void *)bitmap_, unchecked ((System.Int32)interpolationMode), unchecked ((System.Int32)spriteOptions), (*(void ***)this._nativePointer)[107]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("8c427831-3d90-4476-b647-c4fae349e4db")]
    public partial class DeviceContext4 : DXNET.Direct2D1.DeviceContext3
    {
        public DeviceContext4(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DeviceContext4(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DeviceContext4(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "svgGlyphStyle">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext4::CreateSvgGlyphStyle([Out] ID2D1SvgGlyphStyle** svgGlyphStyle)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext4::CreateSvgGlyphStyle</unmanaged-short>
        public unsafe void CreateSvgGlyphStyle(out DXNET.Direct2D1.SvgGlyphStyle svgGlyphStyle)
        {
            System.IntPtr svgGlyphStyle_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &svgGlyphStyle_, (*(void ***)this._nativePointer)[108]);
            if (svgGlyphStyle_ != System.IntPtr.Zero)
                svgGlyphStyle = new DXNET.Direct2D1.SvgGlyphStyle(svgGlyphStyle_);
            else
                svgGlyphStyle = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "text">No documentation.</param>
        /// <param name = "stringLength">No documentation.</param>
        /// <param name = "textFormat">No documentation.</param>
        /// <param name = "layoutRect">No documentation.</param>
        /// <param name = "defaultFillBrush">No documentation.</param>
        /// <param name = "svgGlyphStyle">No documentation.</param>
        /// <param name = "colorPaletteIndex">No documentation.</param>
        /// <param name = "options">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext4::DrawTextW([In, Buffer] const wchar_t* string,[In] unsigned int stringLength,[In] IDWriteTextFormat* textFormat,[In] const D2D_RECT_F* layoutRect,[In, Optional] ID2D1Brush* defaultFillBrush,[In, Optional] ID2D1SvgGlyphStyle* svgGlyphStyle,[In] unsigned int colorPaletteIndex,[In] D2D1_DRAW_TEXT_OPTIONS options,[In] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext4::DrawTextW</unmanaged-short>
        public unsafe void DrawText(System.String text, System.Int32 stringLength, DXNET.DirectWrite.TextFormat textFormat, DXNET.Mathematics.Interop.RawRectangleF layoutRect, DXNET.Direct2D1.Brush defaultFillBrush, DXNET.Direct2D1.SvgGlyphStyle svgGlyphStyle, System.Int32 colorPaletteIndex, DXNET.Direct2D1.DrawTextOptions options, DXNET.Direct2D1.MeasuringMode measuringMode)
        {
            System.IntPtr textFormat_ = System.IntPtr.Zero;
            System.IntPtr defaultFillBrush_ = System.IntPtr.Zero;
            System.IntPtr svgGlyphStyle_ = System.IntPtr.Zero;
            textFormat_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextFormat>(textFormat);
            defaultFillBrush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(defaultFillBrush);
            svgGlyphStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgGlyphStyle>(svgGlyphStyle);
            fixed (char *text_ = text)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)text_, stringLength, (void *)textFormat_, &layoutRect, (void *)defaultFillBrush_, (void *)svgGlyphStyle_, colorPaletteIndex, unchecked ((System.Int32)options), unchecked ((System.Int32)measuringMode), (*(void ***)this._nativePointer)[109]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "origin">No documentation.</param>
        /// <param name = "textLayout">No documentation.</param>
        /// <param name = "defaultFillBrush">No documentation.</param>
        /// <param name = "svgGlyphStyle">No documentation.</param>
        /// <param name = "colorPaletteIndex">No documentation.</param>
        /// <param name = "options">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext4::DrawTextLayout([In] D2D_POINT_2F origin,[In] IDWriteTextLayout* textLayout,[In, Optional] ID2D1Brush* defaultFillBrush,[In, Optional] ID2D1SvgGlyphStyle* svgGlyphStyle,[In] unsigned int colorPaletteIndex,[In] D2D1_DRAW_TEXT_OPTIONS options)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext4::DrawTextLayout</unmanaged-short>
        public unsafe void DrawTextLayout(DXNET.Mathematics.Interop.RawVector2 origin, DXNET.DirectWrite.TextLayout textLayout, DXNET.Direct2D1.Brush defaultFillBrush, DXNET.Direct2D1.SvgGlyphStyle svgGlyphStyle, System.Int32 colorPaletteIndex, DXNET.Direct2D1.DrawTextOptions options)
        {
            System.IntPtr textLayout_ = System.IntPtr.Zero;
            System.IntPtr defaultFillBrush_ = System.IntPtr.Zero;
            System.IntPtr svgGlyphStyle_ = System.IntPtr.Zero;
            textLayout_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextLayout>(textLayout);
            defaultFillBrush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(defaultFillBrush);
            svgGlyphStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgGlyphStyle>(svgGlyphStyle);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, origin, (void *)textLayout_, (void *)defaultFillBrush_, (void *)svgGlyphStyle_, colorPaletteIndex, unchecked ((System.Int32)options), (*(void ***)this._nativePointer)[110]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphImageFormat">No documentation.</param>
        /// <param name = "baselineOrigin">No documentation.</param>
        /// <param name = "glyphRun">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <param name = "bitmapSnapOption">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext4::DrawColorBitmapGlyphRun([In] DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat,[In] D2D_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] DWRITE_MEASURING_MODE measuringMode,[In] D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION bitmapSnapOption)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext4::DrawColorBitmapGlyphRun</unmanaged-short>
        public unsafe void DrawColorBitmapGlyphRun(DXNET.Direct2D1.GlyphImageFormatS glyphImageFormat, DXNET.Mathematics.Interop.RawVector2 baselineOrigin, DXNET.DirectWrite.GlyphRun glyphRun, DXNET.Direct2D1.MeasuringMode measuringMode, DXNET.Direct2D1.ColorBitmapGlyphSnapOption bitmapSnapOption)
        {
            DXNET.DirectWrite.GlyphRun.__Native glyphRun_ = default (DXNET.DirectWrite.GlyphRun.__Native);
            glyphRun.__MarshalTo(ref glyphRun_);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, unchecked ((System.Int32)glyphImageFormat), baselineOrigin, &glyphRun_, unchecked ((System.Int32)measuringMode), unchecked ((System.Int32)bitmapSnapOption), (*(void ***)this._nativePointer)[111]);
            glyphRun.__MarshalFree(ref glyphRun_);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "baselineOrigin">No documentation.</param>
        /// <param name = "glyphRun">No documentation.</param>
        /// <param name = "defaultFillBrush">No documentation.</param>
        /// <param name = "svgGlyphStyle">No documentation.</param>
        /// <param name = "colorPaletteIndex">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext4::DrawSvgGlyphRun([In] D2D_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In, Optional] ID2D1Brush* defaultFillBrush,[In, Optional] ID2D1SvgGlyphStyle* svgGlyphStyle,[In] unsigned int colorPaletteIndex,[In] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext4::DrawSvgGlyphRun</unmanaged-short>
        public unsafe void DrawSvgGlyphRun(DXNET.Mathematics.Interop.RawVector2 baselineOrigin, DXNET.DirectWrite.GlyphRun glyphRun, DXNET.Direct2D1.Brush defaultFillBrush, DXNET.Direct2D1.SvgGlyphStyle svgGlyphStyle, System.Int32 colorPaletteIndex, DXNET.Direct2D1.MeasuringMode measuringMode)
        {
            DXNET.DirectWrite.GlyphRun.__Native glyphRun_ = default (DXNET.DirectWrite.GlyphRun.__Native);
            System.IntPtr defaultFillBrush_ = System.IntPtr.Zero;
            System.IntPtr svgGlyphStyle_ = System.IntPtr.Zero;
            glyphRun.__MarshalTo(ref glyphRun_);
            defaultFillBrush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(defaultFillBrush);
            svgGlyphStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgGlyphStyle>(svgGlyphStyle);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, baselineOrigin, &glyphRun_, (void *)defaultFillBrush_, (void *)svgGlyphStyle_, colorPaletteIndex, unchecked ((System.Int32)measuringMode), (*(void ***)this._nativePointer)[112]);
            glyphRun.__MarshalFree(ref glyphRun_);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphImageFormat">No documentation.</param>
        /// <param name = "glyphOrigin">No documentation.</param>
        /// <param name = "fontFace">No documentation.</param>
        /// <param name = "fontEmSize">No documentation.</param>
        /// <param name = "glyphIndex">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <param name = "worldTransform">No documentation.</param>
        /// <param name = "dpiX">No documentation.</param>
        /// <param name = "dpiY">No documentation.</param>
        /// <param name = "glyphTransform">No documentation.</param>
        /// <param name = "glyphImage">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext4::GetColorBitmapGlyphImage([In] DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat,[In] D2D_POINT_2F glyphOrigin,[In] IDWriteFontFace* fontFace,[In] float fontEmSize,[In] unsigned short glyphIndex,[In] BOOL isSideways,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float dpiX,[In] float dpiY,[Out] D2D_MATRIX_3X2_F* glyphTransform,[Out] ID2D1Image** glyphImage)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext4::GetColorBitmapGlyphImage</unmanaged-short>
        public unsafe void GetColorBitmapGlyphImage(DXNET.Direct2D1.GlyphImageFormatS glyphImageFormat, DXNET.Mathematics.Interop.RawVector2 glyphOrigin, DXNET.DirectWrite.FontFace fontFace, System.Single fontEmSize, System.Int16 glyphIndex, DXNET.Mathematics.Interop.RawBool isSideways, DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform, System.Single dpiX, System.Single dpiY, out DXNET.Mathematics.Interop.RawMatrix3x2 glyphTransform, out DXNET.Direct2D1.Image glyphImage)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            glyphTransform = default (DXNET.Mathematics.Interop.RawMatrix3x2);
            System.IntPtr glyphImage_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFace_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFace>(fontFace);
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            fixed (void *glyphTransform_ = &glyphTransform)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, unchecked ((System.Int32)glyphImageFormat), glyphOrigin, (void *)fontFace_, fontEmSize, glyphIndex, isSideways, worldTransform == null ? (void *)0 : &worldTransform_, dpiX, dpiY, glyphTransform_, &glyphImage_, (*(void ***)this._nativePointer)[113]);
            if (glyphImage_ != System.IntPtr.Zero)
                glyphImage = new DXNET.Direct2D1.Image(glyphImage_);
            else
                glyphImage = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphOrigin">No documentation.</param>
        /// <param name = "fontFace">No documentation.</param>
        /// <param name = "fontEmSize">No documentation.</param>
        /// <param name = "glyphIndex">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <param name = "worldTransform">No documentation.</param>
        /// <param name = "defaultFillBrush">No documentation.</param>
        /// <param name = "svgGlyphStyle">No documentation.</param>
        /// <param name = "colorPaletteIndex">No documentation.</param>
        /// <param name = "glyphTransform">No documentation.</param>
        /// <param name = "glyphImage">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext4::GetSvgGlyphImage([In] D2D_POINT_2F glyphOrigin,[In] IDWriteFontFace* fontFace,[In] float fontEmSize,[In] unsigned short glyphIndex,[In] BOOL isSideways,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In, Optional] ID2D1Brush* defaultFillBrush,[In, Optional] ID2D1SvgGlyphStyle* svgGlyphStyle,[In] unsigned int colorPaletteIndex,[Out] D2D_MATRIX_3X2_F* glyphTransform,[Out] ID2D1CommandList** glyphImage)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext4::GetSvgGlyphImage</unmanaged-short>
        public unsafe void GetSvgGlyphImage(DXNET.Mathematics.Interop.RawVector2 glyphOrigin, DXNET.DirectWrite.FontFace fontFace, System.Single fontEmSize, System.Int16 glyphIndex, DXNET.Mathematics.Interop.RawBool isSideways, DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform, DXNET.Direct2D1.Brush defaultFillBrush, DXNET.Direct2D1.SvgGlyphStyle svgGlyphStyle, System.Int32 colorPaletteIndex, out DXNET.Mathematics.Interop.RawMatrix3x2 glyphTransform, out DXNET.Direct2D1.CommandList glyphImage)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            System.IntPtr defaultFillBrush_ = System.IntPtr.Zero;
            System.IntPtr svgGlyphStyle_ = System.IntPtr.Zero;
            glyphTransform = default (DXNET.Mathematics.Interop.RawMatrix3x2);
            System.IntPtr glyphImage_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFace_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFace>(fontFace);
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            defaultFillBrush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(defaultFillBrush);
            svgGlyphStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgGlyphStyle>(svgGlyphStyle);
            fixed (void *glyphTransform_ = &glyphTransform)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, glyphOrigin, (void *)fontFace_, fontEmSize, glyphIndex, isSideways, worldTransform == null ? (void *)0 : &worldTransform_, (void *)defaultFillBrush_, (void *)svgGlyphStyle_, colorPaletteIndex, glyphTransform_, &glyphImage_, (*(void ***)this._nativePointer)[114]);
            if (glyphImage_ != System.IntPtr.Zero)
                glyphImage = new DXNET.Direct2D1.CommandList(glyphImage_);
            else
                glyphImage = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7836d248-68cc-4df6-b9e8-de991bf62eb7")]
    public partial class DeviceContext5 : DXNET.Direct2D1.DeviceContext4
    {
        public DeviceContext5(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DeviceContext5(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DeviceContext5(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "inputXmlStream">No documentation.</param>
        /// <param name = "viewportSize">No documentation.</param>
        /// <param name = "svgDocument">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext5::CreateSvgDocument([In, Optional] IStream* inputXmlStream,[In] D2D_SIZE_F viewportSize,[Out] ID2D1SvgDocument** svgDocument)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext5::CreateSvgDocument</unmanaged-short>
        public unsafe void CreateSvgDocument(DXNET.Win32.IStream inputXmlStream, DXNET.Size2F viewportSize, out DXNET.Direct2D1.SvgDocument svgDocument)
        {
            System.IntPtr inputXmlStream_ = System.IntPtr.Zero;
            System.IntPtr svgDocument_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            inputXmlStream_ = DXNET.CppObject.ToCallbackPtr<DXNET.Win32.IStream>(inputXmlStream);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)inputXmlStream_, viewportSize, &svgDocument_, (*(void ***)this._nativePointer)[115]);
            if (svgDocument_ != System.IntPtr.Zero)
                svgDocument = new DXNET.Direct2D1.SvgDocument(svgDocument_);
            else
                svgDocument = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "svgDocument">No documentation.</param>
        /// <unmanaged>void ID2D1DeviceContext5::DrawSvgDocument([In] ID2D1SvgDocument* svgDocument)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext5::DrawSvgDocument</unmanaged-short>
        public unsafe void DrawSvgDocument(DXNET.Direct2D1.SvgDocument svgDocument)
        {
            System.IntPtr svgDocument_ = System.IntPtr.Zero;
            svgDocument_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgDocument>(svgDocument);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)svgDocument_, (*(void ***)this._nativePointer)[116]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "colorSpace">No documentation.</param>
        /// <param name = "colorContext">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext5::CreateColorContextFromDxgiColorSpace([In] DXGI_COLOR_SPACE_TYPE colorSpace,[Out, Fast] ID2D1ColorContext1** colorContext)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext5::CreateColorContextFromDxgiColorSpace</unmanaged-short>
        public unsafe void CreateColorContextFromDxgiColorSpace(DXNET.DXGI.ColorSpaceType colorSpace, DXNET.Direct2D1.ColorContext1 colorContext)
        {
            System.IntPtr colorContext_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)colorSpace), &colorContext_, (*(void ***)this._nativePointer)[117]);
            (colorContext).NativePointer = colorContext_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "simpleProfile">No documentation.</param>
        /// <param name = "colorContext">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DeviceContext5::CreateColorContextFromSimpleColorProfile([In] const D2D1_SIMPLE_COLOR_PROFILE* simpleProfile,[Out, Fast] ID2D1ColorContext1** colorContext)</unmanaged>
        /// <unmanaged-short>ID2D1DeviceContext5::CreateColorContextFromSimpleColorProfile</unmanaged-short>
        public unsafe void CreateColorContextFromSimpleColorProfile(ref DXNET.Direct2D1.SimpleColorProfile simpleProfile, DXNET.Direct2D1.ColorContext1 colorContext)
        {
            System.IntPtr colorContext_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *simpleProfile_ = &simpleProfile)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, simpleProfile_, &colorContext_, (*(void ***)this._nativePointer)[118]);
            (colorContext).NativePointer = colorContext_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("1c51bc64-de61-46fd-9899-63a5d8f03950")]
    public partial class DeviceContextRenderTarget : DXNET.Direct2D1.RenderTarget
    {
        public DeviceContextRenderTarget(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DeviceContextRenderTarget(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DeviceContextRenderTarget(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hDC">No documentation.</param>
        /// <param name = "subRectRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DCRenderTarget::BindDC([In] const HDC hDC,[In] const RECT* pSubRect)</unmanaged>
        /// <unmanaged-short>ID2D1DCRenderTarget::BindDC</unmanaged-short>
        public unsafe void BindDeviceContext(System.IntPtr hDC, DXNET.Mathematics.Interop.RawRectangle subRectRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hDC, &subRectRef, (*(void ***)this._nativePointer)[57]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("693ce632-7f2f-45de-93fe-18d88b37aa21")]
    public partial class DrawInformation : DXNET.Direct2D1.RenderInformation
    {
        public DrawInformation(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DrawInformation(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DrawInformation(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "buffer">No documentation.</param>
        /// <param name = "bufferCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DrawInfo::SetPixelShaderConstantBuffer([In, Buffer] const unsigned char* buffer,[In] unsigned int bufferCount)</unmanaged>
        /// <unmanaged-short>ID2D1DrawInfo::SetPixelShaderConstantBuffer</unmanaged-short>
        internal unsafe void SetPixelShaderConstantBuffer(System.IntPtr buffer, System.Int32 bufferCount)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)buffer, bufferCount, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textureIndex">No documentation.</param>
        /// <param name = "resourceTexture">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DrawInfo::SetResourceTexture([In] unsigned int textureIndex,[In] ID2D1ResourceTexture* resourceTexture)</unmanaged>
        /// <unmanaged-short>ID2D1DrawInfo::SetResourceTexture</unmanaged-short>
        public unsafe void SetResourceTexture(System.Int32 textureIndex, DXNET.Direct2D1.ResourceTexture resourceTexture)
        {
            System.IntPtr resourceTexture_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            resourceTexture_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.ResourceTexture>(resourceTexture);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, textureIndex, (void *)resourceTexture_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "buffer">No documentation.</param>
        /// <param name = "bufferCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DrawInfo::SetVertexShaderConstantBuffer([In, Buffer] const unsigned char* buffer,[In] unsigned int bufferCount)</unmanaged>
        /// <unmanaged-short>ID2D1DrawInfo::SetVertexShaderConstantBuffer</unmanaged-short>
        internal unsafe void SetVertexShaderConstantBuffer(System.IntPtr buffer, System.Int32 bufferCount)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)buffer, bufferCount, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "shaderId">No documentation.</param>
        /// <param name = "pixelOptions">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DrawInfo::SetPixelShader([In] const GUID&amp; shaderId,[In] D2D1_PIXEL_OPTIONS pixelOptions)</unmanaged>
        /// <unmanaged-short>ID2D1DrawInfo::SetPixelShader</unmanaged-short>
        public unsafe void SetPixelShader(System.Guid shaderId, DXNET.Direct2D1.PixelOptions pixelOptions)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &shaderId, unchecked ((System.Int32)pixelOptions), (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "vertexBuffer">No documentation.</param>
        /// <param name = "vertexOptions">No documentation.</param>
        /// <param name = "blendDescription">No documentation.</param>
        /// <param name = "vertexRange">No documentation.</param>
        /// <param name = "vertexShader">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DrawInfo::SetVertexProcessing([In, Optional] ID2D1VertexBuffer* vertexBuffer,[In] D2D1_VERTEX_OPTIONS vertexOptions,[In, Optional] const D2D1_BLEND_DESCRIPTION* blendDescription,[In, Optional] const D2D1_VERTEX_RANGE* vertexRange,[In, Optional] const GUID* vertexShader)</unmanaged>
        /// <unmanaged-short>ID2D1DrawInfo::SetVertexProcessing</unmanaged-short>
        public unsafe void SetVertexProcessing(DXNET.Direct2D1.VertexBuffer vertexBuffer, DXNET.Direct2D1.VertexOptions vertexOptions, DXNET.Direct2D1.BlendDescription? blendDescription = null, DXNET.Direct2D1.VertexRange? vertexRange = null, System.Guid? vertexShader = null)
        {
            System.IntPtr vertexBuffer_ = System.IntPtr.Zero;
            DXNET.Direct2D1.BlendDescription blendDescription_;
            DXNET.Direct2D1.VertexRange vertexRange_;
            System.Guid vertexShader_;
            DXNET.Result __result__;
            vertexBuffer_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.VertexBuffer>(vertexBuffer);
            if (blendDescription != null)
                blendDescription_ = blendDescription.Value;
            if (vertexRange != null)
                vertexRange_ = vertexRange.Value;
            if (vertexShader != null)
                vertexShader_ = vertexShader.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)vertexBuffer_, unchecked ((System.Int32)vertexOptions), blendDescription == null ? (void *)0 : &blendDescription_, vertexRange == null ? (void *)0 : &vertexRange_, vertexShader == null ? (void *)0 : &vertexShader_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("28506e39-ebf6-46a1-bb47-fd85565ab957")]
    public partial class DrawingStateBlock : DXNET.Direct2D1.Resource
    {
        public DrawingStateBlock(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DrawingStateBlock(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DrawingStateBlock(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDescription / SetDescription</unmanaged>
        /// <unmanaged-short>GetDescription</unmanaged-short>
        public DXNET.Direct2D1.DrawingStateDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }

            set => SetDescription(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetTextRenderingParams / SetTextRenderingParams</unmanaged>
        /// <unmanaged-short>GetTextRenderingParams</unmanaged-short>
        public DXNET.DirectWrite.RenderingParams TextRenderingParams
        {
            get
            {
                GetTextRenderingParams(out var __output__);
                return __output__;
            }

            set => SetTextRenderingParams(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "stateDescription">No documentation.</param>
        /// <unmanaged>void ID2D1DrawingStateBlock::GetDescription([Out] D2D1_DRAWING_STATE_DESCRIPTION* stateDescription)</unmanaged>
        /// <unmanaged-short>ID2D1DrawingStateBlock::GetDescription</unmanaged-short>
        internal unsafe void GetDescription(out DXNET.Direct2D1.DrawingStateDescription stateDescription)
        {
            stateDescription = default (DXNET.Direct2D1.DrawingStateDescription);
            fixed (void *stateDescription_ = &stateDescription)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, stateDescription_, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "stateDescription">No documentation.</param>
        /// <unmanaged>void ID2D1DrawingStateBlock::SetDescription([In] const D2D1_DRAWING_STATE_DESCRIPTION* stateDescription)</unmanaged>
        /// <unmanaged-short>ID2D1DrawingStateBlock::SetDescription</unmanaged-short>
        internal unsafe void SetDescription(ref DXNET.Direct2D1.DrawingStateDescription stateDescription)
        {
            fixed (void *stateDescription_ = &stateDescription)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, stateDescription_, (*(void ***)this._nativePointer)[5]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textRenderingParams">No documentation.</param>
        /// <unmanaged>void ID2D1DrawingStateBlock::SetTextRenderingParams([In, Optional] IDWriteRenderingParams* textRenderingParams)</unmanaged>
        /// <unmanaged-short>ID2D1DrawingStateBlock::SetTextRenderingParams</unmanaged-short>
        internal unsafe void SetTextRenderingParams(DXNET.DirectWrite.RenderingParams textRenderingParams)
        {
            System.IntPtr textRenderingParams_ = System.IntPtr.Zero;
            textRenderingParams_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.RenderingParams>(textRenderingParams);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)textRenderingParams_, (*(void ***)this._nativePointer)[6]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textRenderingParams">No documentation.</param>
        /// <unmanaged>void ID2D1DrawingStateBlock::GetTextRenderingParams([Out, Optional] IDWriteRenderingParams** textRenderingParams)</unmanaged>
        /// <unmanaged-short>ID2D1DrawingStateBlock::GetTextRenderingParams</unmanaged-short>
        internal unsafe void GetTextRenderingParams(out DXNET.DirectWrite.RenderingParams textRenderingParams)
        {
            System.IntPtr textRenderingParams_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &textRenderingParams_, (*(void ***)this._nativePointer)[7]);
            if (textRenderingParams_ != System.IntPtr.Zero)
                textRenderingParams = new DXNET.DirectWrite.RenderingParams(textRenderingParams_);
            else
                textRenderingParams = null;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("689f1f85-c72e-4e33-8f19-85754efd5ace")]
    public partial class DrawingStateBlock1 : DXNET.Direct2D1.DrawingStateBlock
    {
        public DrawingStateBlock1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DrawingStateBlock1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DrawingStateBlock1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDescription / SetDescription</unmanaged>
        /// <unmanaged-short>GetDescription</unmanaged-short>
        public DXNET.Direct2D1.DrawingStateDescription1 Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }

            set => SetDescription(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "stateDescription">No documentation.</param>
        /// <unmanaged>void ID2D1DrawingStateBlock1::GetDescription([Out] D2D1_DRAWING_STATE_DESCRIPTION1* stateDescription)</unmanaged>
        /// <unmanaged-short>ID2D1DrawingStateBlock1::GetDescription</unmanaged-short>
        internal unsafe void GetDescription(out DXNET.Direct2D1.DrawingStateDescription1 stateDescription)
        {
            stateDescription = default (DXNET.Direct2D1.DrawingStateDescription1);
            fixed (void *stateDescription_ = &stateDescription)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, stateDescription_, (*(void ***)this._nativePointer)[8]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "stateDescription">No documentation.</param>
        /// <unmanaged>void ID2D1DrawingStateBlock1::SetDescription([In] const D2D1_DRAWING_STATE_DESCRIPTION1* stateDescription)</unmanaged>
        /// <unmanaged-short>ID2D1DrawingStateBlock1::SetDescription</unmanaged-short>
        internal unsafe void SetDescription(ref DXNET.Direct2D1.DrawingStateDescription1 stateDescription)
        {
            fixed (void *stateDescription_ = &stateDescription)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, stateDescription_, (*(void ***)this._nativePointer)[9]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("36bfdcb6-9739-435d-a30d-a653beff6a6f")]
    public partial interface DrawTransform : DXNET.Direct2D1.Transform
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("36bfdcb6-9739-435d-a30d-a653beff6a6f")]
    public partial class DrawTransformNative : DXNET.Direct2D1.TransformNative, DXNET.Direct2D1.DrawTransform
    {
        public DrawTransformNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DrawTransformNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DrawTransformNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetDrawInfo</unmanaged>
        /// <unmanaged-short>SetDrawInfo</unmanaged-short>
        public DXNET.Direct2D1.DrawInformation DrawInfo_
        {
            set => SetDrawInfo_(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "drawInfo">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1DrawTransform::SetDrawInfo([In] ID2D1DrawInfo* drawInfo)</unmanaged>
        /// <unmanaged-short>ID2D1DrawTransform::SetDrawInfo</unmanaged-short>
        internal unsafe void SetDrawInfo_(DXNET.Direct2D1.DrawInformation drawInfo)
        {
            System.IntPtr drawInfo_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            drawInfo_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.DrawInformation>(drawInfo);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)drawInfo_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("28211a43-7d89-476f-8181-2d6159b220ad")]
    public partial class Effect : DXNET.Direct2D1.Properties
    {
        public Effect(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Effect(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Effect(nativePtr);
                ///<summary>Constant ArithmeticComposite</summary>
        ///<unmanaged>CLSID_D2D1ArithmeticComposite</unmanaged>
        public static readonly System.Guid ArithmeticComposite = new System.Guid("fc151437-049a-4784-a24a-f1c4daf20987");
                ///<summary>Constant Atlas</summary>
        ///<unmanaged>CLSID_D2D1Atlas</unmanaged>
        public static readonly System.Guid Atlas = new System.Guid("913e2be4-fdcf-4fe2-a5f0-2454f14ff408");
                ///<summary>Constant BitmapSource</summary>
        ///<unmanaged>CLSID_D2D1BitmapSource</unmanaged>
        public static readonly System.Guid BitmapSource = new System.Guid("5fb6c24d-c6dd-4231-9404-50f4d5c3252d");
                ///<summary>Constant Blend</summary>
        ///<unmanaged>CLSID_D2D1Blend</unmanaged>
        public static readonly System.Guid Blend = new System.Guid("81c5b77b-13f8-4cdd-ad20-c890547ac65d");
                ///<summary>Constant Border</summary>
        ///<unmanaged>CLSID_D2D1Border</unmanaged>
        public static readonly System.Guid Border = new System.Guid("2a2d49c0-4acf-43c7-8c6a-7c4a27874d27");
                ///<summary>Constant Brightness</summary>
        ///<unmanaged>CLSID_D2D1Brightness</unmanaged>
        public static readonly System.Guid Brightness = new System.Guid("8cea8d1e-77b0-4986-b3b9-2f0c0eae7887");
                ///<summary>Constant ColorManagement</summary>
        ///<unmanaged>CLSID_D2D1ColorManagement</unmanaged>
        public static readonly System.Guid ColorManagement = new System.Guid("1a28524c-fdd6-4aa4-ae8f-837eb8267b37");
                ///<summary>Constant ColorMatrix</summary>
        ///<unmanaged>CLSID_D2D1ColorMatrix</unmanaged>
        public static readonly System.Guid ColorMatrix = new System.Guid("921f03d6-641c-47df-852d-b4bb6153ae11");
                ///<summary>Constant Composite</summary>
        ///<unmanaged>CLSID_D2D1Composite</unmanaged>
        public static readonly System.Guid Composite = new System.Guid("48fc9f51-f6ac-48f1-8b58-3b28ac46f76d");
                ///<summary>Constant ConvolveMatrix</summary>
        ///<unmanaged>CLSID_D2D1ConvolveMatrix</unmanaged>
        public static readonly System.Guid ConvolveMatrix = new System.Guid("407f8c08-5533-4331-a341-23cc3877843e");
                ///<summary>Constant Crop</summary>
        ///<unmanaged>CLSID_D2D1Crop</unmanaged>
        public static readonly System.Guid Crop = new System.Guid("e23f7110-0e9a-4324-af47-6a2c0c46f35b");
                ///<summary>Constant DirectionalBlur</summary>
        ///<unmanaged>CLSID_D2D1DirectionalBlur</unmanaged>
        public static readonly System.Guid DirectionalBlur = new System.Guid("174319a6-58e9-49b2-bb63-caf2c811a3db");
                ///<summary>Constant DiscreteTransfer</summary>
        ///<unmanaged>CLSID_D2D1DiscreteTransfer</unmanaged>
        public static readonly System.Guid DiscreteTransfer = new System.Guid("90866fcd-488e-454b-af06-e5041b66c36c");
                ///<summary>Constant DisplacementMap</summary>
        ///<unmanaged>CLSID_D2D1DisplacementMap</unmanaged>
        public static readonly System.Guid DisplacementMap = new System.Guid("edc48364-0417-4111-9450-43845fa9f890");
                ///<summary>Constant DistantDiffuse</summary>
        ///<unmanaged>CLSID_D2D1DistantDiffuse</unmanaged>
        public static readonly System.Guid DistantDiffuse = new System.Guid("3e7efd62-a32d-46d4-a83c-5278889ac954");
                ///<summary>Constant DistantSpecular</summary>
        ///<unmanaged>CLSID_D2D1DistantSpecular</unmanaged>
        public static readonly System.Guid DistantSpecular = new System.Guid("428c1ee5-77b8-4450-8ab5-72219c21abda");
                ///<summary>Constant DpiCompensation</summary>
        ///<unmanaged>CLSID_D2D1DpiCompensation</unmanaged>
        public static readonly System.Guid DpiCompensation = new System.Guid("6c26c5c7-34e0-46fc-9cfd-e5823706e228");
                ///<summary>Constant Flood</summary>
        ///<unmanaged>CLSID_D2D1Flood</unmanaged>
        public static readonly System.Guid Flood = new System.Guid("61c23c20-ae69-4d8e-94cf-50078df638f2");
                ///<summary>Constant GammaTransfer</summary>
        ///<unmanaged>CLSID_D2D1GammaTransfer</unmanaged>
        public static readonly System.Guid GammaTransfer = new System.Guid("409444c4-c419-41a0-b0c1-8cd0c0a18e42");
                ///<summary>Constant GaussianBlur</summary>
        ///<unmanaged>CLSID_D2D1GaussianBlur</unmanaged>
        public static readonly System.Guid GaussianBlur = new System.Guid("1feb6d69-2fe6-4ac9-8c58-1d7f93e7a6a5");
                ///<summary>Constant Scale</summary>
        ///<unmanaged>CLSID_D2D1Scale</unmanaged>
        public static readonly System.Guid Scale = new System.Guid("9daf9369-3846-4d0e-a44e-0c607934a5d7");
                ///<summary>Constant Histogram</summary>
        ///<unmanaged>CLSID_D2D1Histogram</unmanaged>
        public static readonly System.Guid Histogram = new System.Guid("881db7d0-f7ee-4d4d-a6d2-4697acc66ee8");
                ///<summary>Constant HueRotation</summary>
        ///<unmanaged>CLSID_D2D1HueRotation</unmanaged>
        public static readonly System.Guid HueRotation = new System.Guid("0f4458ec-4b32-491b-9e85-bd73f44d3eb6");
                ///<summary>Constant LinearTransfer</summary>
        ///<unmanaged>CLSID_D2D1LinearTransfer</unmanaged>
        public static readonly System.Guid LinearTransfer = new System.Guid("ad47c8fd-63ef-4acc-9b51-67979c036c06");
                ///<summary>Constant LuminanceToAlpha</summary>
        ///<unmanaged>CLSID_D2D1LuminanceToAlpha</unmanaged>
        public static readonly System.Guid LuminanceToAlpha = new System.Guid("41251ab7-0beb-46f8-9da7-59e93fcce5de");
                ///<summary>Constant Morphology</summary>
        ///<unmanaged>CLSID_D2D1Morphology</unmanaged>
        public static readonly System.Guid Morphology = new System.Guid("eae6c40d-626a-4c2d-bfcb-391001abe202");
                ///<summary>Constant OpacityMetadata</summary>
        ///<unmanaged>CLSID_D2D1OpacityMetadata</unmanaged>
        public static readonly System.Guid OpacityMetadata = new System.Guid("6c53006a-4450-4199-aa5b-ad1656fece5e");
                ///<summary>Constant PointDiffuse</summary>
        ///<unmanaged>CLSID_D2D1PointDiffuse</unmanaged>
        public static readonly System.Guid PointDiffuse = new System.Guid("b9e303c3-c08c-4f91-8b7b-38656bc48c20");
                ///<summary>Constant PointSpecular</summary>
        ///<unmanaged>CLSID_D2D1PointSpecular</unmanaged>
        public static readonly System.Guid PointSpecular = new System.Guid("09c3ca26-3ae2-4f09-9ebc-ed3865d53f22");
                ///<summary>Constant Premultiply</summary>
        ///<unmanaged>CLSID_D2D1Premultiply</unmanaged>
        public static readonly System.Guid Premultiply = new System.Guid("06eab419-deed-4018-80d2-3e1d471adeb2");
                ///<summary>Constant Saturation</summary>
        ///<unmanaged>CLSID_D2D1Saturation</unmanaged>
        public static readonly System.Guid Saturation = new System.Guid("5cb2d9cf-327d-459f-a0ce-40c0b2086bf7");
                ///<summary>Constant Shadow</summary>
        ///<unmanaged>CLSID_D2D1Shadow</unmanaged>
        public static readonly System.Guid Shadow = new System.Guid("c67ea361-1863-4e69-89db-695d3e9a5b6b");
                ///<summary>Constant SpotDiffuse</summary>
        ///<unmanaged>CLSID_D2D1SpotDiffuse</unmanaged>
        public static readonly System.Guid SpotDiffuse = new System.Guid("818a1105-7932-44f4-aa86-08ae7b2f2c93");
                ///<summary>Constant SpotSpecular</summary>
        ///<unmanaged>CLSID_D2D1SpotSpecular</unmanaged>
        public static readonly System.Guid SpotSpecular = new System.Guid("edae421e-7654-4a37-9db8-71acc1beb3c1");
                ///<summary>Constant TableTransfer</summary>
        ///<unmanaged>CLSID_D2D1TableTransfer</unmanaged>
        public static readonly System.Guid TableTransfer = new System.Guid("5bf818c3-5e43-48cb-b631-868396d6a1d4");
                ///<summary>Constant Tile</summary>
        ///<unmanaged>CLSID_D2D1Tile</unmanaged>
        public static readonly System.Guid Tile = new System.Guid("b0784138-3b76-4bc5-b13b-0fa2ad02659f");
                ///<summary>Constant Turbulence</summary>
        ///<unmanaged>CLSID_D2D1Turbulence</unmanaged>
        public static readonly System.Guid Turbulence = new System.Guid("cf2bb6ae-889a-4ad7-ba29-a2fd732c9fc9");
                ///<summary>Constant UnPremultiply</summary>
        ///<unmanaged>CLSID_D2D1UnPremultiply</unmanaged>
        public static readonly System.Guid UnPremultiply = new System.Guid("fb9ac489-ad8d-41ed-9999-bb6347d110f7");
                ///<summary>Constant YCbCr</summary>
        ///<unmanaged>CLSID_D2D1YCbCr</unmanaged>
        public static readonly System.Guid YCbCr = new System.Guid("99503cc1-66c7-45c9-a875-8ad8a7914401");
                ///<summary>Constant Contrast</summary>
        ///<unmanaged>CLSID_D2D1Contrast</unmanaged>
        public static readonly System.Guid Contrast = new System.Guid("b648a78a-0ed5-4f80-a94a-8e825aca6b77");
                ///<summary>Constant RgbToHue</summary>
        ///<unmanaged>CLSID_D2D1RgbToHue</unmanaged>
        public static readonly System.Guid RgbToHue = new System.Guid("23f3e5ec-91e8-4d3d-ad0a-afadc1004aa1");
                ///<summary>Constant HueToRgb</summary>
        ///<unmanaged>CLSID_D2D1HueToRgb</unmanaged>
        public static readonly System.Guid HueToRgb = new System.Guid("7b78a6bd-0141-4def-8a52-6356ee0cbdd5");
                ///<summary>Constant ChromaKey</summary>
        ///<unmanaged>CLSID_D2D1ChromaKey</unmanaged>
        public static readonly System.Guid ChromaKey = new System.Guid("74c01f5b-2a0d-408c-88e2-c7a3c7197742");
                ///<summary>Constant Emboss</summary>
        ///<unmanaged>CLSID_D2D1Emboss</unmanaged>
        public static readonly System.Guid Emboss = new System.Guid("b1c5eb2b-0348-43f0-8107-4957cacba2ae");
                ///<summary>Constant Exposure</summary>
        ///<unmanaged>CLSID_D2D1Exposure</unmanaged>
        public static readonly System.Guid Exposure = new System.Guid("b56c8cfa-f634-41ee-bee0-ffa617106004");
                ///<summary>Constant Grayscale</summary>
        ///<unmanaged>CLSID_D2D1Grayscale</unmanaged>
        public static readonly System.Guid Grayscale = new System.Guid("36dde0eb-3725-42e0-836d-52fb20aee644");
                ///<summary>Constant Invert</summary>
        ///<unmanaged>CLSID_D2D1Invert</unmanaged>
        public static readonly System.Guid Invert = new System.Guid("e0c3784d-cb39-4e84-b6fd-6b72f0810263");
                ///<summary>Constant Posterize</summary>
        ///<unmanaged>CLSID_D2D1Posterize</unmanaged>
        public static readonly System.Guid Posterize = new System.Guid("2188945e-33a3-4366-b7bc-086bd02d0884");
                ///<summary>Constant Sepia</summary>
        ///<unmanaged>CLSID_D2D1Sepia</unmanaged>
        public static readonly System.Guid Sepia = new System.Guid("3a1af410-5f1d-4dbe-84df-915da79b7153");
                ///<summary>Constant Sharpen</summary>
        ///<unmanaged>CLSID_D2D1Sharpen</unmanaged>
        public static readonly System.Guid Sharpen = new System.Guid("c9b887cb-c5ff-4dc5-9779-273dcf417c7d");
                ///<summary>Constant Straighten</summary>
        ///<unmanaged>CLSID_D2D1Straighten</unmanaged>
        public static readonly System.Guid Straighten = new System.Guid("4da47b12-79a3-4fb0-8237-bbc3b2a4de08");
                ///<summary>Constant TemperatureTint</summary>
        ///<unmanaged>CLSID_D2D1TemperatureTint</unmanaged>
        public static readonly System.Guid TemperatureTint = new System.Guid("89176087-8af9-4a08-aeb1-895f38db1766");
                ///<summary>Constant Vignette</summary>
        ///<unmanaged>CLSID_D2D1Vignette</unmanaged>
        public static readonly System.Guid Vignette = new System.Guid("c00c40be-5e67-4ca3-95b4-f4b02c115135");
                ///<summary>Constant EdgeDetection</summary>
        ///<unmanaged>CLSID_D2D1EdgeDetection</unmanaged>
        public static readonly System.Guid EdgeDetection = new System.Guid("eff583ca-cb07-4aa9-ac5d-2cc44c76460f");
                ///<summary>Constant HighlightsShadows</summary>
        ///<unmanaged>CLSID_D2D1HighlightsShadows</unmanaged>
        public static readonly System.Guid HighlightsShadows = new System.Guid("cadc8384-323f-4c7e-a361-2e2b24df6ee4");
                ///<summary>Constant LookupTable3D</summary>
        ///<unmanaged>CLSID_D2D1LookupTable3D</unmanaged>
        public static readonly System.Guid LookupTable3D = new System.Guid("349e0eda-0088-4a79-9ca3-c7e300202020");
                ///<summary>Constant Opacity</summary>
        ///<unmanaged>CLSID_D2D1Opacity</unmanaged>
        public static readonly System.Guid Opacity = new System.Guid("811d79a4-de28-4454-8094-c64685f8bd4c");
                ///<summary>Constant AlphaMask</summary>
        ///<unmanaged>CLSID_D2D1AlphaMask</unmanaged>
        public static readonly System.Guid AlphaMask = new System.Guid("c80ecff0-3fd5-4f05-8328-c5d1724b4f0a");
                ///<summary>Constant CrossFade</summary>
        ///<unmanaged>CLSID_D2D1CrossFade</unmanaged>
        public static readonly System.Guid CrossFade = new System.Guid("12f575e8-4db1-485f-9a84-03a07dd3829f");
                ///<summary>Constant Tint</summary>
        ///<unmanaged>CLSID_D2D1Tint</unmanaged>
        public static readonly System.Guid Tint = new System.Guid("36312b17-f7dd-4014-915d-ffca768cf211");
                ///<summary>Constant AffineTransform2D</summary>
        ///<unmanaged>CLSID_D2D12DAffineTransform</unmanaged>
        public static readonly System.Guid AffineTransform2D = new System.Guid("6aa97485-6354-4cfc-908c-e4a74f62c96c");
                ///<summary>Constant PerspectiveTransform3D</summary>
        ///<unmanaged>CLSID_D2D13DPerspectiveTransform</unmanaged>
        public static readonly System.Guid PerspectiveTransform3D = new System.Guid("c2844d0b-3d86-46e7-85ba-526c9240f3fb");
                ///<summary>Constant Transform3D</summary>
        ///<unmanaged>CLSID_D2D13DTransform</unmanaged>
        public static readonly System.Guid Transform3D = new System.Guid("e8467b04-ec61-4b8a-b5de-d4d73debea5a");
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetInputCount / SetInputCount</unmanaged>
        /// <unmanaged-short>GetInputCount</unmanaged-short>
        public System.Int32 InputCount
        {
            get => GetInputCount();
            set => SetInputCount(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetOutput</unmanaged>
        /// <unmanaged-short>GetOutput</unmanaged-short>
        public DXNET.Direct2D1.Image Output
        {
            get
            {
                GetOutput(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "input">No documentation.</param>
        /// <param name = "invalidate">No documentation.</param>
        /// <unmanaged>void ID2D1Effect::SetInput([In] unsigned int index,[In, Optional] ID2D1Image* input,[In] BOOL invalidate)</unmanaged>
        /// <unmanaged-short>ID2D1Effect::SetInput</unmanaged-short>
        public unsafe void SetInput(System.Int32 index, DXNET.Direct2D1.Image input, DXNET.Mathematics.Interop.RawBool invalidate)
        {
            System.IntPtr input_ = System.IntPtr.Zero;
            input_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Image>(input);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, index, (void *)input_, invalidate, (*(void ***)this._nativePointer)[14]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "inputCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Effect::SetInputCount([In] unsigned int inputCount)</unmanaged>
        /// <unmanaged-short>ID2D1Effect::SetInputCount</unmanaged-short>
        internal unsafe void SetInputCount(System.Int32 inputCount)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, inputCount, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <unmanaged>void ID2D1Effect::GetInput([In] unsigned int index,[Out, Optional] ID2D1Image** input)</unmanaged>
        /// <unmanaged-short>ID2D1Effect::GetInput</unmanaged-short>
        public unsafe DXNET.Direct2D1.Image GetInput(System.Int32 index)
        {
            DXNET.Direct2D1.Image input;
            System.IntPtr input_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, index, &input_, (*(void ***)this._nativePointer)[16]);
            if (input_ != System.IntPtr.Zero)
                input = new DXNET.Direct2D1.Image(input_);
            else
                input = null;
            return input;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1Effect::GetInputCount()</unmanaged>
        /// <unmanaged-short>ID2D1Effect::GetInputCount</unmanaged-short>
        internal unsafe System.Int32 GetInputCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[17]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "outputImage">No documentation.</param>
        /// <unmanaged>void ID2D1Effect::GetOutput([Out] ID2D1Image** outputImage)</unmanaged>
        /// <unmanaged-short>ID2D1Effect::GetOutput</unmanaged-short>
        internal unsafe void GetOutput(out DXNET.Direct2D1.Image outputImage)
        {
            System.IntPtr outputImage_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &outputImage_, (*(void ***)this._nativePointer)[18]);
            if (outputImage_ != System.IntPtr.Zero)
                outputImage = new DXNET.Direct2D1.Image(outputImage_);
            else
                outputImage = null;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3d9f916b-27dc-4ad7-b4f1-64945340f563")]
    public partial class EffectContext : DXNET.ComObject
    {
        public EffectContext(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectContext(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectContext(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dpiX">No documentation.</param>
        /// <param name = "dpiY">No documentation.</param>
        /// <unmanaged>void ID2D1EffectContext::GetDpi([Out] float* dpiX,[Out] float* dpiY)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::GetDpi</unmanaged-short>
        internal unsafe void GetDpi(out System.Single dpiX, out System.Single dpiY)
        {
            fixed (void *dpiY_ = &dpiY)
                fixed (void *dpiX_ = &dpiX)
                    DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, dpiX_, dpiY_, (*(void ***)this._nativePointer)[3]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "effectId">No documentation.</param>
        /// <param name = "effect">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::CreateEffect([In] const GUID&amp; effectId,[Out, Fast] ID2D1Effect** effect)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::CreateEffect</unmanaged-short>
        internal unsafe void CreateEffect(System.Guid effectId, DXNET.Direct2D1.Effect effect)
        {
            System.IntPtr effect_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &effectId, &effect_, (*(void ***)this._nativePointer)[4]);
            (effect).NativePointer = effect_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "featureLevels">No documentation.</param>
        /// <param name = "featureLevelsCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::GetMaximumSupportedFeatureLevel([In, Buffer] const D3D_FEATURE_LEVEL* featureLevels,[In] unsigned int featureLevelsCount,[Out] D3D_FEATURE_LEVEL* maximumSupportedFeatureLevel)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::GetMaximumSupportedFeatureLevel</unmanaged-short>
        internal unsafe DXNET.Direct3D.FeatureLevel GetMaximumSupportedFeatureLevel(DXNET.Direct3D.FeatureLevel[] featureLevels, System.Int32 featureLevelsCount)
        {
            DXNET.Direct3D.FeatureLevel maximumSupportedFeatureLevel;
            DXNET.Result __result__;
            fixed (void *featureLevels_ = featureLevels)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, featureLevels_, featureLevelsCount, &maximumSupportedFeatureLevel, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
            return maximumSupportedFeatureLevel;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "effect">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::CreateTransformNodeFromEffect([In] ID2D1Effect* effect,[Out] ID2D1TransformNode** transformNode)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::CreateTransformNodeFromEffect</unmanaged-short>
        public unsafe DXNET.Direct2D1.TransformNode CreateTransformNodeFromEffect(DXNET.Direct2D1.Effect effect)
        {
            System.IntPtr effect_ = System.IntPtr.Zero;
            DXNET.Direct2D1.TransformNode transformNode;
            System.IntPtr transformNode_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            effect_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Effect>(effect);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)effect_, &transformNode_, (*(void ***)this._nativePointer)[6]);
            if (transformNode_ != System.IntPtr.Zero)
                transformNode = new DXNET.Direct2D1.TransformNodeNative(transformNode_);
            else
                transformNode = null;
            __result__.CheckError();
            return transformNode;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "numInputs">No documentation.</param>
        /// <param name = "blendDescription">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::CreateBlendTransform([In] unsigned int numInputs,[In] const D2D1_BLEND_DESCRIPTION* blendDescription,[Out, Fast] ID2D1BlendTransform** transform)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::CreateBlendTransform</unmanaged-short>
        internal unsafe void CreateBlendTransform(System.Int32 numInputs, ref DXNET.Direct2D1.BlendDescription blendDescription, DXNET.Direct2D1.BlendTransform transform)
        {
            System.IntPtr transform_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *blendDescription_ = &blendDescription)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, numInputs, blendDescription_, &transform_, (*(void ***)this._nativePointer)[7]);
            (transform).NativePointer = transform_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "extendModeX">No documentation.</param>
        /// <param name = "extendModeY">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::CreateBorderTransform([In] D2D1_EXTEND_MODE extendModeX,[In] D2D1_EXTEND_MODE extendModeY,[Out, Fast] ID2D1BorderTransform** transform)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::CreateBorderTransform</unmanaged-short>
        internal unsafe void CreateBorderTransform(DXNET.Direct2D1.ExtendMode extendModeX, DXNET.Direct2D1.ExtendMode extendModeY, DXNET.Direct2D1.BorderTransform transform)
        {
            System.IntPtr transform_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)extendModeX), unchecked ((System.Int32)extendModeY), &transform_, (*(void ***)this._nativePointer)[8]);
            (transform).NativePointer = transform_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "offset">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::CreateOffsetTransform([In] POINT offset,[Out, Fast] ID2D1OffsetTransform** transform)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::CreateOffsetTransform</unmanaged-short>
        internal unsafe void CreateOffsetTransform(DXNET.Mathematics.Interop.RawPoint offset, DXNET.Direct2D1.OffsetTransform transform)
        {
            System.IntPtr transform_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, offset, &transform_, (*(void ***)this._nativePointer)[9]);
            (transform).NativePointer = transform_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "outputRectangle">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::CreateBoundsAdjustmentTransform([In] const RECT* outputRectangle,[Out, Fast] ID2D1BoundsAdjustmentTransform** transform)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::CreateBoundsAdjustmentTransform</unmanaged-short>
        internal unsafe void CreateBoundsAdjustmentTransform(DXNET.Mathematics.Interop.RawRectangle outputRectangle, DXNET.Direct2D1.BoundsAdjustmentTransform transform)
        {
            System.IntPtr transform_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &outputRectangle, &transform_, (*(void ***)this._nativePointer)[10]);
            (transform).NativePointer = transform_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "shaderId">No documentation.</param>
        /// <param name = "shaderBuffer">No documentation.</param>
        /// <param name = "shaderBufferCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::LoadPixelShader([In] const GUID&amp; shaderId,[In, Buffer] const unsigned char* shaderBuffer,[In] unsigned int shaderBufferCount)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::LoadPixelShader</unmanaged-short>
        internal unsafe void LoadPixelShader(System.Guid shaderId, System.Byte[] shaderBuffer, System.Int32 shaderBufferCount)
        {
            DXNET.Result __result__;
            fixed (void *shaderBuffer_ = shaderBuffer)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &shaderId, shaderBuffer_, shaderBufferCount, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "resourceId">No documentation.</param>
        /// <param name = "shaderBuffer">No documentation.</param>
        /// <param name = "shaderBufferCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::LoadVertexShader([In] const GUID&amp; resourceId,[In, Buffer] const unsigned char* shaderBuffer,[In] unsigned int shaderBufferCount)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::LoadVertexShader</unmanaged-short>
        internal unsafe void LoadVertexShader(System.Guid resourceId, System.Byte[] shaderBuffer, System.Int32 shaderBufferCount)
        {
            DXNET.Result __result__;
            fixed (void *shaderBuffer_ = shaderBuffer)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &resourceId, shaderBuffer_, shaderBufferCount, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "resourceId">No documentation.</param>
        /// <param name = "shaderBuffer">No documentation.</param>
        /// <param name = "shaderBufferCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::LoadComputeShader([In] const GUID&amp; resourceId,[In, Buffer] const unsigned char* shaderBuffer,[In] unsigned int shaderBufferCount)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::LoadComputeShader</unmanaged-short>
        internal unsafe void LoadComputeShader(System.Guid resourceId, System.Byte[] shaderBuffer, System.Int32 shaderBufferCount)
        {
            DXNET.Result __result__;
            fixed (void *shaderBuffer_ = shaderBuffer)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &resourceId, shaderBuffer_, shaderBufferCount, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "shaderId">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL ID2D1EffectContext::IsShaderLoaded([In] const GUID&amp; shaderId)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::IsShaderLoaded</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool IsShaderLoaded(System.Guid shaderId)
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, &shaderId, (*(void ***)this._nativePointer)[14]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "resourceId">No documentation.</param>
        /// <param name = "resourceTextureProperties">No documentation.</param>
        /// <param name = "data">No documentation.</param>
        /// <param name = "strides">No documentation.</param>
        /// <param name = "dataSize">No documentation.</param>
        /// <param name = "resourceTexture">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::CreateResourceTexture([In, Optional] const GUID* resourceId,[In] const D2D1_RESOURCE_TEXTURE_PROPERTIES* resourceTextureProperties,[In, Buffer, Optional] const unsigned char* data,[In, Buffer, Optional] const unsigned int* strides,[In] unsigned int dataSize,[Out, Fast] ID2D1ResourceTexture** resourceTexture)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::CreateResourceTexture</unmanaged-short>
        internal unsafe void CreateResourceTexture(System.Guid? resourceId, System.IntPtr resourceTextureProperties, System.Byte[] data, System.Int32[] strides, System.Int32 dataSize, DXNET.Direct2D1.ResourceTexture resourceTexture)
        {
            System.Guid resourceId_;
            System.IntPtr resourceTexture_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (resourceId != null)
                resourceId_ = resourceId.Value;
            fixed (void *strides_ = strides)
                fixed (void *data_ = data)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, resourceId == null ? (void *)0 : &resourceId_, (void *)resourceTextureProperties, data_, strides_, dataSize, &resourceTexture_, (*(void ***)this._nativePointer)[15]);
            (resourceTexture).NativePointer = resourceTexture_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "resourceId">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::FindResourceTexture([In] const GUID* resourceId,[Out] ID2D1ResourceTexture** resourceTexture)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::FindResourceTexture</unmanaged-short>
        public unsafe DXNET.Direct2D1.ResourceTexture FindResourceTexture(System.Guid resourceId)
        {
            DXNET.Direct2D1.ResourceTexture resourceTexture;
            System.IntPtr resourceTexture_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &resourceId, &resourceTexture_, (*(void ***)this._nativePointer)[16]);
            if (resourceTexture_ != System.IntPtr.Zero)
                resourceTexture = new DXNET.Direct2D1.ResourceTexture(resourceTexture_);
            else
                resourceTexture = null;
            return resourceTexture;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "vertexBufferProperties">No documentation.</param>
        /// <param name = "resourceId">No documentation.</param>
        /// <param name = "customVertexBufferProperties">No documentation.</param>
        /// <param name = "buffer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::CreateVertexBuffer([In] const D2D1_VERTEX_BUFFER_PROPERTIES* vertexBufferProperties,[In, Optional] const GUID* resourceId,[In, Optional] const D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES* customVertexBufferProperties,[Out, Fast] ID2D1VertexBuffer** buffer)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::CreateVertexBuffer</unmanaged-short>
        internal unsafe void CreateVertexBuffer(DXNET.Direct2D1.VertexBufferProperties vertexBufferProperties, System.Guid? resourceId, System.IntPtr customVertexBufferProperties, DXNET.Direct2D1.VertexBuffer buffer)
        {
            DXNET.Direct2D1.VertexBufferProperties.__Native vertexBufferProperties_ = default (DXNET.Direct2D1.VertexBufferProperties.__Native);
            System.Guid resourceId_;
            System.IntPtr buffer_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            vertexBufferProperties.__MarshalTo(ref vertexBufferProperties_);
            if (resourceId != null)
                resourceId_ = resourceId.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &vertexBufferProperties_, resourceId == null ? (void *)0 : &resourceId_, (void *)customVertexBufferProperties, &buffer_, (*(void ***)this._nativePointer)[17]);
            (buffer).NativePointer = buffer_;
            vertexBufferProperties.__MarshalFree(ref vertexBufferProperties_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "resourceId">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::FindVertexBuffer([In] const GUID* resourceId,[Out] ID2D1VertexBuffer** buffer)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::FindVertexBuffer</unmanaged-short>
        public unsafe DXNET.Direct2D1.VertexBuffer FindVertexBuffer(System.Guid resourceId)
        {
            DXNET.Direct2D1.VertexBuffer buffer;
            System.IntPtr buffer_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &resourceId, &buffer_, (*(void ***)this._nativePointer)[18]);
            if (buffer_ != System.IntPtr.Zero)
                buffer = new DXNET.Direct2D1.VertexBuffer(buffer_);
            else
                buffer = null;
            return buffer;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "space">No documentation.</param>
        /// <param name = "rofileRef">No documentation.</param>
        /// <param name = "profileSize">No documentation.</param>
        /// <param name = "colorContext">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::CreateColorContext([In] D2D1_COLOR_SPACE space,[In, Buffer, Optional] const unsigned char* profile,[In] unsigned int profileSize,[Out, Fast] ID2D1ColorContext** colorContext)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::CreateColorContext</unmanaged-short>
        internal unsafe void CreateColorContext(DXNET.Direct2D1.ColorSpace space, System.Byte[] rofileRef, System.Int32 profileSize, DXNET.Direct2D1.ColorContext colorContext)
        {
            System.IntPtr colorContext_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *rofileRef_ = rofileRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)space), rofileRef_, profileSize, &colorContext_, (*(void ***)this._nativePointer)[19]);
            (colorContext).NativePointer = colorContext_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "filename">No documentation.</param>
        /// <param name = "colorContext">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::CreateColorContextFromFilename([In] const wchar_t* filename,[Out, Fast] ID2D1ColorContext** colorContext)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::CreateColorContextFromFilename</unmanaged-short>
        internal unsafe void CreateColorContextFromFilename(System.String filename, DXNET.Direct2D1.ColorContext colorContext)
        {
            System.IntPtr colorContext_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (char *filename_ = filename)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)filename_, &colorContext_, (*(void ***)this._nativePointer)[20]);
            (colorContext).NativePointer = colorContext_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "wicColorContext">No documentation.</param>
        /// <param name = "colorContext">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::CreateColorContextFromWicColorContext([In] IWICColorContext* wicColorContext,[Out, Fast] ID2D1ColorContext** colorContext)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::CreateColorContextFromWicColorContext</unmanaged-short>
        internal unsafe void CreateColorContextFromWicColorContext(DXNET.WIC.ColorContext wicColorContext, DXNET.Direct2D1.ColorContext colorContext)
        {
            System.IntPtr wicColorContext_ = System.IntPtr.Zero;
            System.IntPtr colorContext_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            wicColorContext_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.ColorContext>(wicColorContext);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wicColorContext_, &colorContext_, (*(void ***)this._nativePointer)[21]);
            (colorContext).NativePointer = colorContext_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "feature">No documentation.</param>
        /// <param name = "featureSupportData">No documentation.</param>
        /// <param name = "featureSupportDataSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext::CheckFeatureSupport([In] D2D1_FEATURE feature,[Out, Buffer] void* featureSupportData,[In] unsigned int featureSupportDataSize)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::CheckFeatureSupport</unmanaged-short>
        internal unsafe DXNET.Result CheckFeatureSupport(DXNET.Direct2D1.Feature feature, System.IntPtr featureSupportData, System.Int32 featureSupportDataSize)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)feature), (void *)featureSupportData, featureSupportDataSize, (*(void ***)this._nativePointer)[22]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bufferPrecision">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL ID2D1EffectContext::IsBufferPrecisionSupported([In] D2D1_BUFFER_PRECISION bufferPrecision)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext::IsBufferPrecisionSupported</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool IsBufferPrecisionSupported(DXNET.Direct2D1.BufferPrecision bufferPrecision)
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, unchecked ((System.Int32)bufferPrecision), (*(void ***)this._nativePointer)[23]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("84ab595a-fc81-4546-bacd-e8ef4d8abe7a")]
    public partial class EffectContext1 : DXNET.Direct2D1.EffectContext
    {
        public EffectContext1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectContext1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectContext1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "precision">No documentation.</param>
        /// <param name = "extents">No documentation.</param>
        /// <param name = "data">No documentation.</param>
        /// <param name = "dataCount">No documentation.</param>
        /// <param name = "strides">No documentation.</param>
        /// <param name = "lookupTable">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext1::CreateLookupTable3D([In] D2D1_BUFFER_PRECISION precision,[In, Buffer] const unsigned int* extents,[In, Buffer] const unsigned char* data,[In] unsigned int dataCount,[In, Buffer] const unsigned int* strides,[Out] ID2D1LookupTable3D** lookupTable)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext1::CreateLookupTable3D</unmanaged-short>
        public unsafe void CreateLookupTable3D(DXNET.Direct2D1.BufferPrecision precision, System.Int32[] extents, System.Byte[] data, System.Int32 dataCount, System.Int32[] strides, out DXNET.Direct2D1.LookupTable3D lookupTable)
        {
            System.IntPtr lookupTable_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *strides_ = strides)
                fixed (void *data_ = data)
                    fixed (void *extents_ = extents)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)precision), extents_, data_, dataCount, strides_, &lookupTable_, (*(void ***)this._nativePointer)[24]);
            if (lookupTable_ != System.IntPtr.Zero)
                lookupTable = new DXNET.Direct2D1.LookupTable3D(lookupTable_);
            else
                lookupTable = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("577ad2a0-9fc7-4dda-8b18-dab810140052")]
    public partial class EffectContext2 : DXNET.Direct2D1.EffectContext1
    {
        public EffectContext2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectContext2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectContext2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "colorSpace">No documentation.</param>
        /// <param name = "colorContext">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext2::CreateColorContextFromDxgiColorSpace([In] DXGI_COLOR_SPACE_TYPE colorSpace,[Out, Fast] ID2D1ColorContext1** colorContext)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext2::CreateColorContextFromDxgiColorSpace</unmanaged-short>
        public unsafe void CreateColorContextFromDxgiColorSpace(DXNET.DXGI.ColorSpaceType colorSpace, DXNET.Direct2D1.ColorContext1 colorContext)
        {
            System.IntPtr colorContext_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)colorSpace), &colorContext_, (*(void ***)this._nativePointer)[25]);
            (colorContext).NativePointer = colorContext_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "simpleProfile">No documentation.</param>
        /// <param name = "colorContext">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1EffectContext2::CreateColorContextFromSimpleColorProfile([In] const D2D1_SIMPLE_COLOR_PROFILE* simpleProfile,[Out, Fast] ID2D1ColorContext1** colorContext)</unmanaged>
        /// <unmanaged-short>ID2D1EffectContext2::CreateColorContextFromSimpleColorProfile</unmanaged-short>
        public unsafe void CreateColorContextFromSimpleColorProfile(ref DXNET.Direct2D1.SimpleColorProfile simpleProfile, DXNET.Direct2D1.ColorContext1 colorContext)
        {
            System.IntPtr colorContext_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *simpleProfile_ = &simpleProfile)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, simpleProfile_, &colorContext_, (*(void ***)this._nativePointer)[26]);
            (colorContext).NativePointer = colorContext_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906a4-12e2-11dc-9fed-001143a055f9")]
    public partial class EllipseGeometry : DXNET.Direct2D1.Geometry
    {
        public EllipseGeometry(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EllipseGeometry(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EllipseGeometry(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetEllipse</unmanaged>
        /// <unmanaged-short>GetEllipse</unmanaged-short>
        public DXNET.Direct2D1.Ellipse Ellipse
        {
            get
            {
                GetEllipse(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ellipse">No documentation.</param>
        /// <unmanaged>void ID2D1EllipseGeometry::GetEllipse([Out] D2D1_ELLIPSE* ellipse)</unmanaged>
        /// <unmanaged-short>ID2D1EllipseGeometry::GetEllipse</unmanaged-short>
        internal unsafe void GetEllipse(out DXNET.Direct2D1.Ellipse ellipse)
        {
            ellipse = default (DXNET.Direct2D1.Ellipse);
            fixed (void *ellipse_ = &ellipse)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, ellipse_, (*(void ***)this._nativePointer)[17]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("06152247-6f50-465a-9245-118bfd3b6007")]
    public partial class Factory : DXNET.ComObject
    {
        public Factory(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory::ReloadSystemMetrics()</unmanaged>
        /// <unmanaged-short>ID2D1Factory::ReloadSystemMetrics</unmanaged-short>
        public unsafe void ReloadSystemMetrics()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dpiX">No documentation.</param>
        /// <param name = "dpiY">No documentation.</param>
        /// <unmanaged>void ID2D1Factory::GetDesktopDpi([Out] float* dpiX,[Out] float* dpiY)</unmanaged>
        /// <unmanaged-short>ID2D1Factory::GetDesktopDpi</unmanaged-short>
        internal unsafe void GetDesktopDpi(out System.Single dpiX, out System.Single dpiY)
        {
            fixed (void *dpiY_ = &dpiY)
                fixed (void *dpiX_ = &dpiX)
                    DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, dpiX_, dpiY_, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rectangle">No documentation.</param>
        /// <param name = "rectangleGeometry">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory::CreateRectangleGeometry([In] const D2D_RECT_F* rectangle,[Out, Fast] ID2D1RectangleGeometry** rectangleGeometry)</unmanaged>
        /// <unmanaged-short>ID2D1Factory::CreateRectangleGeometry</unmanaged-short>
        internal unsafe void CreateRectangleGeometry(DXNET.Mathematics.Interop.RawRectangleF rectangle, DXNET.Direct2D1.RectangleGeometry rectangleGeometry)
        {
            System.IntPtr rectangleGeometry_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &rectangle, &rectangleGeometry_, (*(void ***)this._nativePointer)[5]);
            (rectangleGeometry).NativePointer = rectangleGeometry_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "roundedRectangle">No documentation.</param>
        /// <param name = "roundedRectangleGeometry">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory::CreateRoundedRectangleGeometry([In] const D2D1_ROUNDED_RECT* roundedRectangle,[Out, Fast] ID2D1RoundedRectangleGeometry** roundedRectangleGeometry)</unmanaged>
        /// <unmanaged-short>ID2D1Factory::CreateRoundedRectangleGeometry</unmanaged-short>
        internal unsafe void CreateRoundedRectangleGeometry(ref DXNET.Direct2D1.RoundedRectangle roundedRectangle, DXNET.Direct2D1.RoundedRectangleGeometry roundedRectangleGeometry)
        {
            System.IntPtr roundedRectangleGeometry_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *roundedRectangle_ = &roundedRectangle)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, roundedRectangle_, &roundedRectangleGeometry_, (*(void ***)this._nativePointer)[6]);
            (roundedRectangleGeometry).NativePointer = roundedRectangleGeometry_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ellipse">No documentation.</param>
        /// <param name = "ellipseGeometry">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory::CreateEllipseGeometry([In] const D2D1_ELLIPSE* ellipse,[Out, Fast] ID2D1EllipseGeometry** ellipseGeometry)</unmanaged>
        /// <unmanaged-short>ID2D1Factory::CreateEllipseGeometry</unmanaged-short>
        internal unsafe void CreateEllipseGeometry(DXNET.Direct2D1.Ellipse ellipse, DXNET.Direct2D1.EllipseGeometry ellipseGeometry)
        {
            System.IntPtr ellipseGeometry_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &ellipse, &ellipseGeometry_, (*(void ***)this._nativePointer)[7]);
            (ellipseGeometry).NativePointer = ellipseGeometry_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fillMode">No documentation.</param>
        /// <param name = "geometries">No documentation.</param>
        /// <param name = "geometriesCount">No documentation.</param>
        /// <param name = "geometryGroup">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory::CreateGeometryGroup([In] D2D1_FILL_MODE fillMode,[In, Buffer] ID2D1Geometry** geometries,[In] unsigned int geometriesCount,[Out, Fast] ID2D1GeometryGroup** geometryGroup)</unmanaged>
        /// <unmanaged-short>ID2D1Factory::CreateGeometryGroup</unmanaged-short>
        internal unsafe void CreateGeometryGroup(DXNET.Direct2D1.FillMode fillMode, DXNET.Direct2D1.Geometry[] geometries, System.Int32 geometriesCount, DXNET.Direct2D1.GeometryGroup geometryGroup)
        {
            System.IntPtr*geometries_;
            geometries_ = (System.IntPtr*)0;
            if (geometries != null)
            {
                System.IntPtr*_geometries = stackalloc System.IntPtr[geometries.Length];
                geometries_ = _geometries;
            }

            System.IntPtr geometryGroup_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (geometries != null)
                for (int i = 0; i < geometries.Length; ++i)
                    (geometries_)[i] = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Geometry>(geometries[i]);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)fillMode), (void *)geometries_, geometriesCount, &geometryGroup_, (*(void ***)this._nativePointer)[8]);
            (geometryGroup).NativePointer = geometryGroup_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sourceGeometry">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <param name = "transformedGeometry">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory::CreateTransformedGeometry([In] ID2D1Geometry* sourceGeometry,[In] const D2D_MATRIX_3X2_F* transform,[Out, Fast] ID2D1TransformedGeometry** transformedGeometry)</unmanaged>
        /// <unmanaged-short>ID2D1Factory::CreateTransformedGeometry</unmanaged-short>
        internal unsafe void CreateTransformedGeometry(DXNET.Direct2D1.Geometry sourceGeometry, ref DXNET.Mathematics.Interop.RawMatrix3x2 transform, DXNET.Direct2D1.TransformedGeometry transformedGeometry)
        {
            System.IntPtr sourceGeometry_ = System.IntPtr.Zero;
            System.IntPtr transformedGeometry_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            sourceGeometry_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Geometry>(sourceGeometry);
            fixed (void *transform_ = &transform)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)sourceGeometry_, transform_, &transformedGeometry_, (*(void ***)this._nativePointer)[9]);
            (transformedGeometry).NativePointer = transformedGeometry_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "athGeometryRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory::CreatePathGeometry([Out, Fast] ID2D1PathGeometry** pathGeometry)</unmanaged>
        /// <unmanaged-short>ID2D1Factory::CreatePathGeometry</unmanaged-short>
        internal unsafe void CreatePathGeometry(DXNET.Direct2D1.PathGeometry athGeometryRef)
        {
            System.IntPtr athGeometryRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &athGeometryRef_, (*(void ***)this._nativePointer)[10]);
            (athGeometryRef).NativePointer = athGeometryRef_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "strokeStyleProperties">No documentation.</param>
        /// <param name = "dashes">No documentation.</param>
        /// <param name = "dashesCount">No documentation.</param>
        /// <param name = "strokeStyle">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory::CreateStrokeStyle([In] const D2D1_STROKE_STYLE_PROPERTIES* strokeStyleProperties,[In, Buffer, Optional] const float* dashes,[In] unsigned int dashesCount,[Out, Fast] ID2D1StrokeStyle** strokeStyle)</unmanaged>
        /// <unmanaged-short>ID2D1Factory::CreateStrokeStyle</unmanaged-short>
        internal unsafe void CreateStrokeStyle(ref DXNET.Direct2D1.StrokeStyleProperties strokeStyleProperties, System.Single[] dashes, System.Int32 dashesCount, DXNET.Direct2D1.StrokeStyle strokeStyle)
        {
            System.IntPtr strokeStyle_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *dashes_ = dashes)
                fixed (void *strokeStyleProperties_ = &strokeStyleProperties)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, strokeStyleProperties_, dashes_, dashesCount, &strokeStyle_, (*(void ***)this._nativePointer)[11]);
            (strokeStyle).NativePointer = strokeStyle_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "drawingStateDescription">No documentation.</param>
        /// <param name = "textRenderingParams">No documentation.</param>
        /// <param name = "drawingStateBlock">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory::CreateDrawingStateBlock([In, Optional] const D2D1_DRAWING_STATE_DESCRIPTION* drawingStateDescription,[In, Optional] IDWriteRenderingParams* textRenderingParams,[Out, Fast] ID2D1DrawingStateBlock** drawingStateBlock)</unmanaged>
        /// <unmanaged-short>ID2D1Factory::CreateDrawingStateBlock</unmanaged-short>
        internal unsafe void CreateDrawingStateBlock(DXNET.Direct2D1.DrawingStateDescription? drawingStateDescription, DXNET.DirectWrite.RenderingParams textRenderingParams, DXNET.Direct2D1.DrawingStateBlock drawingStateBlock)
        {
            DXNET.Direct2D1.DrawingStateDescription drawingStateDescription_;
            System.IntPtr textRenderingParams_ = System.IntPtr.Zero;
            System.IntPtr drawingStateBlock_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (drawingStateDescription != null)
                drawingStateDescription_ = drawingStateDescription.Value;
            textRenderingParams_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.RenderingParams>(textRenderingParams);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, drawingStateDescription == null ? (void *)0 : &drawingStateDescription_, (void *)textRenderingParams_, &drawingStateBlock_, (*(void ***)this._nativePointer)[12]);
            (drawingStateBlock).NativePointer = drawingStateBlock_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "target">No documentation.</param>
        /// <param name = "renderTargetProperties">No documentation.</param>
        /// <param name = "renderTarget">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory::CreateWicBitmapRenderTarget([In] IWICBitmap* target,[In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties,[Out, Fast] ID2D1RenderTarget** renderTarget)</unmanaged>
        /// <unmanaged-short>ID2D1Factory::CreateWicBitmapRenderTarget</unmanaged-short>
        internal unsafe void CreateWicBitmapRenderTarget(DXNET.WIC.Bitmap target, ref DXNET.Direct2D1.RenderTargetProperties renderTargetProperties, DXNET.Direct2D1.RenderTarget renderTarget)
        {
            System.IntPtr target_ = System.IntPtr.Zero;
            System.IntPtr renderTarget_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            target_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.Bitmap>(target);
            fixed (void *renderTargetProperties_ = &renderTargetProperties)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)target_, renderTargetProperties_, &renderTarget_, (*(void ***)this._nativePointer)[13]);
            (renderTarget).NativePointer = renderTarget_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "renderTargetProperties">No documentation.</param>
        /// <param name = "hwndRenderTargetProperties">No documentation.</param>
        /// <param name = "hwndRenderTarget">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory::CreateHwndRenderTarget([In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties,[In] const D2D1_HWND_RENDER_TARGET_PROPERTIES* hwndRenderTargetProperties,[Out, Fast] ID2D1HwndRenderTarget** hwndRenderTarget)</unmanaged>
        /// <unmanaged-short>ID2D1Factory::CreateHwndRenderTarget</unmanaged-short>
        internal unsafe void CreateHwndRenderTarget(ref DXNET.Direct2D1.RenderTargetProperties renderTargetProperties, ref DXNET.Direct2D1.HwndRenderTargetProperties hwndRenderTargetProperties, DXNET.Direct2D1.WindowRenderTarget hwndRenderTarget)
        {
            System.IntPtr hwndRenderTarget_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *hwndRenderTargetProperties_ = &hwndRenderTargetProperties)
                fixed (void *renderTargetProperties_ = &renderTargetProperties)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, renderTargetProperties_, hwndRenderTargetProperties_, &hwndRenderTarget_, (*(void ***)this._nativePointer)[14]);
            (hwndRenderTarget).NativePointer = hwndRenderTarget_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dxgiSurface">No documentation.</param>
        /// <param name = "renderTargetProperties">No documentation.</param>
        /// <param name = "renderTarget">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory::CreateDxgiSurfaceRenderTarget([In] IDXGISurface* dxgiSurface,[In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties,[Out, Fast] ID2D1RenderTarget** renderTarget)</unmanaged>
        /// <unmanaged-short>ID2D1Factory::CreateDxgiSurfaceRenderTarget</unmanaged-short>
        internal unsafe void CreateDxgiSurfaceRenderTarget(DXNET.DXGI.Surface dxgiSurface, ref DXNET.Direct2D1.RenderTargetProperties renderTargetProperties, DXNET.Direct2D1.RenderTarget renderTarget)
        {
            System.IntPtr dxgiSurface_ = System.IntPtr.Zero;
            System.IntPtr renderTarget_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            dxgiSurface_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Surface>(dxgiSurface);
            fixed (void *renderTargetProperties_ = &renderTargetProperties)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)dxgiSurface_, renderTargetProperties_, &renderTarget_, (*(void ***)this._nativePointer)[15]);
            (renderTarget).NativePointer = renderTarget_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "renderTargetProperties">No documentation.</param>
        /// <param name = "dcRenderTarget">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory::CreateDCRenderTarget([In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties,[Out, Fast] ID2D1DCRenderTarget** dcRenderTarget)</unmanaged>
        /// <unmanaged-short>ID2D1Factory::CreateDCRenderTarget</unmanaged-short>
        internal unsafe void CreateDCRenderTarget(ref DXNET.Direct2D1.RenderTargetProperties renderTargetProperties, DXNET.Direct2D1.DeviceContextRenderTarget dcRenderTarget)
        {
            System.IntPtr dcRenderTarget_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *renderTargetProperties_ = &renderTargetProperties)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, renderTargetProperties_, &dcRenderTarget_, (*(void ***)this._nativePointer)[16]);
            (dcRenderTarget).NativePointer = dcRenderTarget_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fillMode">No documentation.</param>
        /// <param name = "geometries">No documentation.</param>
        /// <param name = "geometriesCount">No documentation.</param>
        /// <param name = "geometryGroup">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory::CreateGeometryGroup([In] D2D1_FILL_MODE fillMode,[In, Buffer] ID2D1Geometry** geometries,[In] unsigned int geometriesCount,[Out, Fast] ID2D1GeometryGroup** geometryGroup)</unmanaged>
        /// <unmanaged-short>ID2D1Factory::CreateGeometryGroup</unmanaged-short>
        internal unsafe void CreateGeometryGroup(DXNET.Direct2D1.FillMode fillMode, DXNET.ComArray<DXNET.Direct2D1.Geometry> geometries, System.Int32 geometriesCount, DXNET.Direct2D1.GeometryGroup geometryGroup)
        {
            System.IntPtr geometryGroup_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)fillMode), (void *)(geometries?.NativePointer ?? System.IntPtr.Zero), geometriesCount, &geometryGroup_, (*(void ***)this._nativePointer)[8]);
            (geometryGroup).NativePointer = geometryGroup_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fillMode">No documentation.</param>
        /// <param name = "geometries">No documentation.</param>
        /// <param name = "geometriesCount">No documentation.</param>
        /// <param name = "geometryGroup">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory::CreateGeometryGroup([In] D2D1_FILL_MODE fillMode,[In, Buffer] ID2D1Geometry** geometries,[In] unsigned int geometriesCount,[Out, Fast] ID2D1GeometryGroup** geometryGroup)</unmanaged>
        /// <unmanaged-short>ID2D1Factory::CreateGeometryGroup</unmanaged-short>
        private unsafe void CreateGeometryGroup(DXNET.Direct2D1.FillMode fillMode, System.IntPtr geometries, System.Int32 geometriesCount, System.IntPtr geometryGroup)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)fillMode), (void *)geometries, geometriesCount, (void *)geometryGroup, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("bb12d362-daee-4b9a-aa1d-14ba401cfa1f")]
    public partial class Factory1 : DXNET.Direct2D1.Factory
    {
        public Factory1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dxgiDevice">No documentation.</param>
        /// <param name = "d2dDevice">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory1::CreateDevice([In] IDXGIDevice* dxgiDevice,[Out, Fast] ID2D1Device** d2dDevice)</unmanaged>
        /// <unmanaged-short>ID2D1Factory1::CreateDevice</unmanaged-short>
        internal unsafe void CreateDevice(DXNET.DXGI.Device dxgiDevice, DXNET.Direct2D1.Device d2dDevice)
        {
            System.IntPtr dxgiDevice_ = System.IntPtr.Zero;
            System.IntPtr d2dDevice_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            dxgiDevice_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Device>(dxgiDevice);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)dxgiDevice_, &d2dDevice_, (*(void ***)this._nativePointer)[17]);
            (d2dDevice).NativePointer = d2dDevice_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "strokeStyleProperties">No documentation.</param>
        /// <param name = "dashes">No documentation.</param>
        /// <param name = "dashesCount">No documentation.</param>
        /// <param name = "strokeStyle">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory1::CreateStrokeStyle([In] const D2D1_STROKE_STYLE_PROPERTIES1* strokeStyleProperties,[In, Buffer, Optional] const float* dashes,[In] unsigned int dashesCount,[Out, Fast] ID2D1StrokeStyle1** strokeStyle)</unmanaged>
        /// <unmanaged-short>ID2D1Factory1::CreateStrokeStyle</unmanaged-short>
        internal unsafe void CreateStrokeStyle(ref DXNET.Direct2D1.StrokeStyleProperties1 strokeStyleProperties, System.Single[] dashes, System.Int32 dashesCount, DXNET.Direct2D1.StrokeStyle1 strokeStyle)
        {
            System.IntPtr strokeStyle_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *dashes_ = dashes)
                fixed (void *strokeStyleProperties_ = &strokeStyleProperties)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, strokeStyleProperties_, dashes_, dashesCount, &strokeStyle_, (*(void ***)this._nativePointer)[18]);
            (strokeStyle).NativePointer = strokeStyle_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "athGeometryRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory1::CreatePathGeometry([Out, Fast] ID2D1PathGeometry1** pathGeometry)</unmanaged>
        /// <unmanaged-short>ID2D1Factory1::CreatePathGeometry</unmanaged-short>
        internal unsafe void CreatePathGeometry(DXNET.Direct2D1.PathGeometry1 athGeometryRef)
        {
            System.IntPtr athGeometryRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &athGeometryRef_, (*(void ***)this._nativePointer)[19]);
            (athGeometryRef).NativePointer = athGeometryRef_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "drawingStateDescription">No documentation.</param>
        /// <param name = "textRenderingParams">No documentation.</param>
        /// <param name = "drawingStateBlock">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory1::CreateDrawingStateBlock([In, Optional] const D2D1_DRAWING_STATE_DESCRIPTION1* drawingStateDescription,[In, Optional] IDWriteRenderingParams* textRenderingParams,[Out, Fast] ID2D1DrawingStateBlock1** drawingStateBlock)</unmanaged>
        /// <unmanaged-short>ID2D1Factory1::CreateDrawingStateBlock</unmanaged-short>
        internal unsafe void CreateDrawingStateBlock(DXNET.Direct2D1.DrawingStateDescription1? drawingStateDescription, DXNET.DirectWrite.RenderingParams textRenderingParams, DXNET.Direct2D1.DrawingStateBlock1 drawingStateBlock)
        {
            DXNET.Direct2D1.DrawingStateDescription1 drawingStateDescription_;
            System.IntPtr textRenderingParams_ = System.IntPtr.Zero;
            System.IntPtr drawingStateBlock_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (drawingStateDescription != null)
                drawingStateDescription_ = drawingStateDescription.Value;
            textRenderingParams_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.RenderingParams>(textRenderingParams);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, drawingStateDescription == null ? (void *)0 : &drawingStateDescription_, (void *)textRenderingParams_, &drawingStateBlock_, (*(void ***)this._nativePointer)[20]);
            (drawingStateBlock).NativePointer = drawingStateBlock_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "metafileStream">No documentation.</param>
        /// <param name = "metafile">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory1::CreateGdiMetafile([In] IStream* metafileStream,[Out] ID2D1GdiMetafile** metafile)</unmanaged>
        /// <unmanaged-short>ID2D1Factory1::CreateGdiMetafile</unmanaged-short>
        internal unsafe void CreateGdiMetafile(DXNET.Win32.IStream metafileStream, out DXNET.Direct2D1.GdiMetafile metafile)
        {
            System.IntPtr metafileStream_ = System.IntPtr.Zero;
            System.IntPtr metafile_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            metafileStream_ = DXNET.CppObject.ToCallbackPtr<DXNET.Win32.IStream>(metafileStream);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)metafileStream_, &metafile_, (*(void ***)this._nativePointer)[21]);
            if (metafile_ != System.IntPtr.Zero)
                metafile = new DXNET.Direct2D1.GdiMetafile(metafile_);
            else
                metafile = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "classId">No documentation.</param>
        /// <param name = "ropertyXmlRef">No documentation.</param>
        /// <param name = "bindings">No documentation.</param>
        /// <param name = "bindingsCount">No documentation.</param>
        /// <param name = "effectFactory">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory1::RegisterEffectFromStream([In] const GUID&amp; classId,[In] IStream* propertyXml,[In, Buffer, Optional] const D2D1_PROPERTY_BINDING* bindings,[In] unsigned int bindingsCount,[In] const __function__stdcall* effectFactory)</unmanaged>
        /// <unmanaged-short>ID2D1Factory1::RegisterEffectFromStream</unmanaged-short>
        internal unsafe void RegisterEffectFromStream(System.Guid classId, DXNET.Win32.IStream ropertyXmlRef, DXNET.Direct2D1.PropertyBinding[] bindings, System.Int32 bindingsCount, DXNET.FunctionCallback effectFactory)
        {
            System.IntPtr ropertyXmlRef_ = System.IntPtr.Zero;
            DXNET.Direct2D1.PropertyBinding.__Native[] bindings_ = bindings == null ? null : new DXNET.Direct2D1.PropertyBinding.__Native[bindings.Length];
            DXNET.Result __result__;
            ropertyXmlRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.Win32.IStream>(ropertyXmlRef);
            if (bindings != null)
                for (int i = 0; i < bindings.Length; ++i)
                    if (bindings != null)
                        bindings[i].__MarshalTo(ref (bindings_)[i]);
            fixed (void *_bindings = bindings_)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &classId, (void *)ropertyXmlRef_, _bindings, bindingsCount, effectFactory, (*(void ***)this._nativePointer)[22]);
            if (bindings != null)
                for (int i = 0; i < bindings.Length; ++i)
                    if (bindings != null)
                        bindings[i].__MarshalFree(ref (bindings_)[i]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "classId">No documentation.</param>
        /// <param name = "ropertyXmlRef">No documentation.</param>
        /// <param name = "bindings">No documentation.</param>
        /// <param name = "bindingsCount">No documentation.</param>
        /// <param name = "effectFactory">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory1::RegisterEffectFromString([In] const GUID&amp; classId,[In] const wchar_t* propertyXml,[In, Buffer, Optional] const D2D1_PROPERTY_BINDING* bindings,[In] unsigned int bindingsCount,[In] const __function__stdcall* effectFactory)</unmanaged>
        /// <unmanaged-short>ID2D1Factory1::RegisterEffectFromString</unmanaged-short>
        internal unsafe void RegisterEffectFromString(System.Guid classId, System.String ropertyXmlRef, DXNET.Direct2D1.PropertyBinding[] bindings, System.Int32 bindingsCount, DXNET.FunctionCallback effectFactory)
        {
            DXNET.Direct2D1.PropertyBinding.__Native[] bindings_ = bindings == null ? null : new DXNET.Direct2D1.PropertyBinding.__Native[bindings.Length];
            DXNET.Result __result__;
            if (bindings != null)
                for (int i = 0; i < bindings.Length; ++i)
                    if (bindings != null)
                        bindings[i].__MarshalTo(ref (bindings_)[i]);
            fixed (void *_bindings = bindings_)
                fixed (char *ropertyXmlRef_ = ropertyXmlRef)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &classId, (void *)ropertyXmlRef_, _bindings, bindingsCount, effectFactory, (*(void ***)this._nativePointer)[23]);
            if (bindings != null)
                for (int i = 0; i < bindings.Length; ++i)
                    if (bindings != null)
                        bindings[i].__MarshalFree(ref (bindings_)[i]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "classId">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory1::UnregisterEffect([In] const GUID&amp; classId)</unmanaged>
        /// <unmanaged-short>ID2D1Factory1::UnregisterEffect</unmanaged-short>
        internal unsafe void UnregisterEffect(System.Guid classId)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &classId, (*(void ***)this._nativePointer)[24]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "effects">No documentation.</param>
        /// <param name = "effectsCount">No documentation.</param>
        /// <param name = "effectsReturned">No documentation.</param>
        /// <param name = "effectsRegistered">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory1::GetRegisteredEffects([Out, Buffer, Optional] GUID* effects,[In] unsigned int effectsCount,[Out, Optional] unsigned int* effectsReturned,[Out, Optional] unsigned int* effectsRegistered)</unmanaged>
        /// <unmanaged-short>ID2D1Factory1::GetRegisteredEffects</unmanaged-short>
        internal unsafe void GetRegisteredEffects(System.Guid[] effects, System.Int32 effectsCount, out System.Int32 effectsReturned, out System.Int32 effectsRegistered)
        {
            DXNET.Result __result__;
            fixed (void *effectsRegistered_ = &effectsRegistered)
                fixed (void *effectsReturned_ = &effectsReturned)
                    fixed (void *effects_ = effects)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, effects_, effectsCount, effectsReturned_, effectsRegistered_, (*(void ***)this._nativePointer)[25]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "effectId">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory1::GetEffectProperties([In] const GUID&amp; effectId,[Out] ID2D1Properties** properties)</unmanaged>
        /// <unmanaged-short>ID2D1Factory1::GetEffectProperties</unmanaged-short>
        public unsafe DXNET.Direct2D1.Properties GetEffectProperties(System.Guid effectId)
        {
            DXNET.Direct2D1.Properties ropertiesRef;
            System.IntPtr ropertiesRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &effectId, &ropertiesRef_, (*(void ***)this._nativePointer)[26]);
            if (ropertiesRef_ != System.IntPtr.Zero)
                ropertiesRef = new DXNET.Direct2D1.Properties(ropertiesRef_);
            else
                ropertiesRef = null;
            __result__.CheckError();
            return ropertiesRef;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("94f81a73-9212-4376-9c58-b16a3a0d3992")]
    public partial class Factory2 : DXNET.Direct2D1.Factory1
    {
        public Factory2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dxgiDevice">No documentation.</param>
        /// <param name = "d2dDevice1">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory2::CreateDevice([In] IDXGIDevice* dxgiDevice,[Out, Fast] ID2D1Device1** d2dDevice1)</unmanaged>
        /// <unmanaged-short>ID2D1Factory2::CreateDevice</unmanaged-short>
        internal unsafe void CreateDevice(DXNET.DXGI.Device dxgiDevice, DXNET.Direct2D1.Device1 d2dDevice1)
        {
            System.IntPtr dxgiDevice_ = System.IntPtr.Zero;
            System.IntPtr d2dDevice1_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            dxgiDevice_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Device>(dxgiDevice);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)dxgiDevice_, &d2dDevice1_, (*(void ***)this._nativePointer)[27]);
            (d2dDevice1).NativePointer = d2dDevice1_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("0869759f-4f00-413f-b03e-2bda45404d0f")]
    public partial class Factory3 : DXNET.Direct2D1.Factory2
    {
        public Factory3(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory3(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory3(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dxgiDevice">No documentation.</param>
        /// <param name = "d2dDevice2">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory3::CreateDevice([In] IDXGIDevice* dxgiDevice,[Out, Fast] ID2D1Device2** d2dDevice2)</unmanaged>
        /// <unmanaged-short>ID2D1Factory3::CreateDevice</unmanaged-short>
        internal unsafe void CreateDevice(DXNET.DXGI.Device dxgiDevice, DXNET.Direct2D1.Device2 d2dDevice2)
        {
            System.IntPtr dxgiDevice_ = System.IntPtr.Zero;
            System.IntPtr d2dDevice2_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            dxgiDevice_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Device>(dxgiDevice);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)dxgiDevice_, &d2dDevice2_, (*(void ***)this._nativePointer)[28]);
            (d2dDevice2).NativePointer = d2dDevice2_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("bd4ec2d2-0662-4bee-ba8e-6f29f032e096")]
    public partial class Factory4 : DXNET.Direct2D1.Factory3
    {
        public Factory4(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory4(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory4(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dxgiDevice">No documentation.</param>
        /// <param name = "d2dDevice3">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory4::CreateDevice([In] IDXGIDevice* dxgiDevice,[Out, Fast] ID2D1Device3** d2dDevice3)</unmanaged>
        /// <unmanaged-short>ID2D1Factory4::CreateDevice</unmanaged-short>
        internal unsafe void CreateDevice(DXNET.DXGI.Device dxgiDevice, DXNET.Direct2D1.Device3 d2dDevice3)
        {
            System.IntPtr dxgiDevice_ = System.IntPtr.Zero;
            System.IntPtr d2dDevice3_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            dxgiDevice_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Device>(dxgiDevice);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)dxgiDevice_, &d2dDevice3_, (*(void ***)this._nativePointer)[29]);
            (d2dDevice3).NativePointer = d2dDevice3_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("c4349994-838e-4b0f-8cab-44997d9eeacc")]
    public partial class Factory5 : DXNET.Direct2D1.Factory4
    {
        public Factory5(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory5(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory5(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dxgiDevice">No documentation.</param>
        /// <param name = "d2dDevice4">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory5::CreateDevice([In] IDXGIDevice* dxgiDevice,[Out, Fast] ID2D1Device4** d2dDevice4)</unmanaged>
        /// <unmanaged-short>ID2D1Factory5::CreateDevice</unmanaged-short>
        internal unsafe void CreateDevice(DXNET.DXGI.Device dxgiDevice, DXNET.Direct2D1.Device4 d2dDevice4)
        {
            System.IntPtr dxgiDevice_ = System.IntPtr.Zero;
            System.IntPtr d2dDevice4_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            dxgiDevice_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Device>(dxgiDevice);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)dxgiDevice_, &d2dDevice4_, (*(void ***)this._nativePointer)[30]);
            (d2dDevice4).NativePointer = d2dDevice4_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("f9976f46-f642-44c1-97ca-da32ea2a2635")]
    public partial class Factory6 : DXNET.Direct2D1.Factory5
    {
        public Factory6(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory6(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory6(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dxgiDevice">No documentation.</param>
        /// <param name = "d2dDevice5">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Factory6::CreateDevice([In] IDXGIDevice* dxgiDevice,[Out, Fast] ID2D1Device5** d2dDevice5)</unmanaged>
        /// <unmanaged-short>ID2D1Factory6::CreateDevice</unmanaged-short>
        internal unsafe void CreateDevice(DXNET.DXGI.Device dxgiDevice, DXNET.Direct2D1.Device5 d2dDevice5)
        {
            System.IntPtr dxgiDevice_ = System.IntPtr.Zero;
            System.IntPtr d2dDevice5_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            dxgiDevice_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Device>(dxgiDevice);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)dxgiDevice_, &d2dDevice5_, (*(void ***)this._nativePointer)[31]);
            (d2dDevice5).NativePointer = d2dDevice5_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("e0db51c3-6f77-4bae-b3d5-e47509b35838")]
    public partial class GdiInteropRenderTarget : DXNET.ComObject
    {
        public GdiInteropRenderTarget(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator GdiInteropRenderTarget(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new GdiInteropRenderTarget(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "mode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1GdiInteropRenderTarget::GetDC([In] D2D1_DC_INITIALIZE_MODE mode,[Out] HDC* hdc)</unmanaged>
        /// <unmanaged-short>ID2D1GdiInteropRenderTarget::GetDC</unmanaged-short>
        public unsafe System.IntPtr GetDC(DXNET.Direct2D1.DeviceContextInitializeMode mode)
        {
            System.IntPtr hdc;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)mode), &hdc, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
            return hdc;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "update">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1GdiInteropRenderTarget::ReleaseDC([In, Optional] const RECT* update)</unmanaged>
        /// <unmanaged-short>ID2D1GdiInteropRenderTarget::ReleaseDC</unmanaged-short>
        public unsafe void ReleaseDC(DXNET.Mathematics.Interop.RawRectangle? update)
        {
            DXNET.Mathematics.Interop.RawRectangle update_;
            DXNET.Result __result__;
            if (update != null)
                update_ = update.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, update == null ? (void *)0 : &update_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2f543dc3-cfc1-4211-864f-cfd91c6f3395")]
    public partial class GdiMetafile : DXNET.Direct2D1.Resource
    {
        public GdiMetafile(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator GdiMetafile(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new GdiMetafile(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetBounds</unmanaged>
        /// <unmanaged-short>GetBounds</unmanaged-short>
        public DXNET.Mathematics.Interop.RawRectangleF Bounds
        {
            get
            {
                GetBounds(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1GdiMetafile::Stream([In] ID2D1GdiMetafileSink* sink)</unmanaged>
        /// <unmanaged-short>ID2D1GdiMetafile::Stream</unmanaged-short>
        public unsafe void Stream(DXNET.Direct2D1.GdiMetafileSink sink)
        {
            System.IntPtr sink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            sink_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.GdiMetafileSink>(sink);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)sink_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bounds">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1GdiMetafile::GetBounds([Out] D2D_RECT_F* bounds)</unmanaged>
        /// <unmanaged-short>ID2D1GdiMetafile::GetBounds</unmanaged-short>
        internal unsafe void GetBounds(out DXNET.Mathematics.Interop.RawRectangleF bounds)
        {
            bounds = default (DXNET.Mathematics.Interop.RawRectangleF);
            DXNET.Result __result__;
            fixed (void *bounds_ = &bounds)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, bounds_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2e69f9e8-dd3f-4bf9-95ba-c04f49d788df")]
    public partial class GdiMetafile1 : DXNET.Direct2D1.GdiMetafile
    {
        public GdiMetafile1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator GdiMetafile1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new GdiMetafile1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSourceBounds</unmanaged>
        /// <unmanaged-short>GetSourceBounds</unmanaged-short>
        public DXNET.Mathematics.Interop.RawRectangleF SourceBounds
        {
            get
            {
                GetSourceBounds(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dpiX">No documentation.</param>
        /// <param name = "dpiY">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1GdiMetafile1::GetDpi([Out] float* dpiX,[Out] float* dpiY)</unmanaged>
        /// <unmanaged-short>ID2D1GdiMetafile1::GetDpi</unmanaged-short>
        public unsafe void GetDpi(out System.Single dpiX, out System.Single dpiY)
        {
            DXNET.Result __result__;
            fixed (void *dpiY_ = &dpiY)
                fixed (void *dpiX_ = &dpiX)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, dpiX_, dpiY_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bounds">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1GdiMetafile1::GetSourceBounds([Out] D2D_RECT_F* bounds)</unmanaged>
        /// <unmanaged-short>ID2D1GdiMetafile1::GetSourceBounds</unmanaged-short>
        internal unsafe void GetSourceBounds(out DXNET.Mathematics.Interop.RawRectangleF bounds)
        {
            bounds = default (DXNET.Mathematics.Interop.RawRectangleF);
            DXNET.Result __result__;
            fixed (void *bounds_ = &bounds)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, bounds_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("82237326-8111-4f7c-bcf4-b5c1175564fe")]
    public partial interface GdiMetafileSink : DXNET.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("fd0ecb6b-91e6-411e-8655-395e760f91b4")]
    public partial interface GdiMetafileSink1 : DXNET.Direct2D1.GdiMetafileSink
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("fd0ecb6b-91e6-411e-8655-395e760f91b4")]
    internal partial class GdiMetafileSink1Native : DXNET.Direct2D1.GdiMetafileSinkNative, DXNET.Direct2D1.GdiMetafileSink1
    {
        public GdiMetafileSink1Native(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator GdiMetafileSink1Native(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new GdiMetafileSink1Native(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "recordType">No documentation.</param>
        /// <param name = "recordData">No documentation.</param>
        /// <param name = "recordDataSize">No documentation.</param>
        /// <param name = "flags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1GdiMetafileSink1::ProcessRecord([In] DWORD recordType,[In, Optional] const void* recordData,[In] DWORD recordDataSize,[In] unsigned int flags)</unmanaged>
        /// <unmanaged-short>ID2D1GdiMetafileSink1::ProcessRecord</unmanaged-short>
        internal unsafe void ProcessRecord_(System.Int32 recordType, System.IntPtr recordData, System.Int32 recordDataSize, System.Int32 flags)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, recordType, (void *)recordData, recordDataSize, flags, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("82237326-8111-4f7c-bcf4-b5c1175564fe")]
    internal partial class GdiMetafileSinkNative : DXNET.ComObject, DXNET.Direct2D1.GdiMetafileSink
    {
        public GdiMetafileSinkNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator GdiMetafileSinkNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new GdiMetafileSinkNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "recordType">No documentation.</param>
        /// <param name = "recordData">No documentation.</param>
        /// <param name = "recordDataSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1GdiMetafileSink::ProcessRecord([In] DWORD recordType,[In, Optional] const void* recordData,[In] DWORD recordDataSize)</unmanaged>
        /// <unmanaged-short>ID2D1GdiMetafileSink::ProcessRecord</unmanaged-short>
        internal unsafe void ProcessRecord_(System.Int32 recordType, System.IntPtr recordData, System.Int32 recordDataSize)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, recordType, (void *)recordData, recordDataSize, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906a1-12e2-11dc-9fed-001143a055f9")]
    public partial class Geometry : DXNET.Direct2D1.Resource
    {
        public Geometry(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Geometry(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Geometry(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "worldTransform">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Geometry::GetBounds([In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[Out] D2D_RECT_F* bounds)</unmanaged>
        /// <unmanaged-short>ID2D1Geometry::GetBounds</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawRectangleF GetBounds(DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            DXNET.Mathematics.Interop.RawRectangleF bounds;
            DXNET.Result __result__;
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, worldTransform == null ? (void *)0 : &worldTransform_, &bounds, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
            return bounds;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "strokeWidth">No documentation.</param>
        /// <param name = "strokeStyle">No documentation.</param>
        /// <param name = "worldTransform">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Geometry::GetWidenedBounds([In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[Out] D2D_RECT_F* bounds)</unmanaged>
        /// <unmanaged-short>ID2D1Geometry::GetWidenedBounds</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawRectangleF GetWidenedBounds(System.Single strokeWidth, DXNET.Direct2D1.StrokeStyle strokeStyle, DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform, System.Single flatteningTolerance)
        {
            System.IntPtr strokeStyle_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            DXNET.Mathematics.Interop.RawRectangleF bounds;
            DXNET.Result __result__;
            strokeStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.StrokeStyle>(strokeStyle);
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, strokeWidth, (void *)strokeStyle_, worldTransform == null ? (void *)0 : &worldTransform_, flatteningTolerance, &bounds, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
            return bounds;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "point">No documentation.</param>
        /// <param name = "strokeWidth">No documentation.</param>
        /// <param name = "strokeStyle">No documentation.</param>
        /// <param name = "worldTransform">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Geometry::StrokeContainsPoint([In] D2D_POINT_2F point,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        /// <unmanaged-short>ID2D1Geometry::StrokeContainsPoint</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool StrokeContainsPoint(DXNET.Mathematics.Interop.RawVector2 point, System.Single strokeWidth, DXNET.Direct2D1.StrokeStyle strokeStyle, DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform, System.Single flatteningTolerance)
        {
            System.IntPtr strokeStyle_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            DXNET.Mathematics.Interop.RawBool contains;
            DXNET.Result __result__;
            strokeStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.StrokeStyle>(strokeStyle);
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, point, strokeWidth, (void *)strokeStyle_, worldTransform == null ? (void *)0 : &worldTransform_, flatteningTolerance, &contains, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
            return contains;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "point">No documentation.</param>
        /// <param name = "worldTransform">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Geometry::FillContainsPoint([In] D2D_POINT_2F point,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[Out] BOOL* contains)</unmanaged>
        /// <unmanaged-short>ID2D1Geometry::FillContainsPoint</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool FillContainsPoint(DXNET.Mathematics.Interop.RawVector2 point, DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform, System.Single flatteningTolerance)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            DXNET.Mathematics.Interop.RawBool contains;
            DXNET.Result __result__;
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, point, worldTransform == null ? (void *)0 : &worldTransform_, flatteningTolerance, &contains, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
            return contains;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "inputGeometry">No documentation.</param>
        /// <param name = "inputGeometryTransform">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Geometry::CompareWithGeometry([In] ID2D1Geometry* inputGeometry,[In, Optional] const D2D_MATRIX_3X2_F* inputGeometryTransform,[In] float flatteningTolerance,[Out] D2D1_GEOMETRY_RELATION* relation)</unmanaged>
        /// <unmanaged-short>ID2D1Geometry::CompareWithGeometry</unmanaged-short>
        public unsafe DXNET.Direct2D1.GeometryRelation Compare(DXNET.Direct2D1.Geometry inputGeometry, DXNET.Mathematics.Interop.RawMatrix3x2? inputGeometryTransform, System.Single flatteningTolerance)
        {
            System.IntPtr inputGeometry_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawMatrix3x2 inputGeometryTransform_;
            DXNET.Direct2D1.GeometryRelation relation;
            DXNET.Result __result__;
            inputGeometry_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Geometry>(inputGeometry);
            if (inputGeometryTransform != null)
                inputGeometryTransform_ = inputGeometryTransform.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)inputGeometry_, inputGeometryTransform == null ? (void *)0 : &inputGeometryTransform_, flatteningTolerance, &relation, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
            return relation;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "simplificationOption">No documentation.</param>
        /// <param name = "worldTransform">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <param name = "geometrySink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Geometry::Simplify([In] D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        /// <unmanaged-short>ID2D1Geometry::Simplify</unmanaged-short>
        public unsafe void Simplify(DXNET.Direct2D1.GeometrySimplificationOption simplificationOption, DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform, System.Single flatteningTolerance, DXNET.Direct2D1.SimplifiedGeometrySink geometrySink)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            System.IntPtr geometrySink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            geometrySink_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SimplifiedGeometrySink>(geometrySink);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)simplificationOption), worldTransform == null ? (void *)0 : &worldTransform_, flatteningTolerance, (void *)geometrySink_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "worldTransform">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <param name = "tessellationSink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Geometry::Tessellate([In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[In] ID2D1TessellationSink* tessellationSink)</unmanaged>
        /// <unmanaged-short>ID2D1Geometry::Tessellate</unmanaged-short>
        public unsafe void Tessellate(DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform, System.Single flatteningTolerance, DXNET.Direct2D1.TessellationSink tessellationSink)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            System.IntPtr tessellationSink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            tessellationSink_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.TessellationSink>(tessellationSink);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, worldTransform == null ? (void *)0 : &worldTransform_, flatteningTolerance, (void *)tessellationSink_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "inputGeometry">No documentation.</param>
        /// <param name = "combineMode">No documentation.</param>
        /// <param name = "inputGeometryTransform">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <param name = "geometrySink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Geometry::CombineWithGeometry([In] ID2D1Geometry* inputGeometry,[In] D2D1_COMBINE_MODE combineMode,[In, Optional] const D2D_MATRIX_3X2_F* inputGeometryTransform,[In] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        /// <unmanaged-short>ID2D1Geometry::CombineWithGeometry</unmanaged-short>
        public unsafe void Combine(DXNET.Direct2D1.Geometry inputGeometry, DXNET.Direct2D1.CombineMode combineMode, DXNET.Mathematics.Interop.RawMatrix3x2? inputGeometryTransform, System.Single flatteningTolerance, DXNET.Direct2D1.SimplifiedGeometrySink geometrySink)
        {
            System.IntPtr inputGeometry_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawMatrix3x2 inputGeometryTransform_;
            System.IntPtr geometrySink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            inputGeometry_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Geometry>(inputGeometry);
            if (inputGeometryTransform != null)
                inputGeometryTransform_ = inputGeometryTransform.Value;
            geometrySink_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SimplifiedGeometrySink>(geometrySink);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)inputGeometry_, unchecked ((System.Int32)combineMode), inputGeometryTransform == null ? (void *)0 : &inputGeometryTransform_, flatteningTolerance, (void *)geometrySink_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "worldTransform">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <param name = "geometrySink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Geometry::Outline([In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        /// <unmanaged-short>ID2D1Geometry::Outline</unmanaged-short>
        public unsafe void Outline(DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform, System.Single flatteningTolerance, DXNET.Direct2D1.SimplifiedGeometrySink geometrySink)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            System.IntPtr geometrySink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            geometrySink_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SimplifiedGeometrySink>(geometrySink);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, worldTransform == null ? (void *)0 : &worldTransform_, flatteningTolerance, (void *)geometrySink_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "worldTransform">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Geometry::ComputeArea([In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[Out] float* area)</unmanaged>
        /// <unmanaged-short>ID2D1Geometry::ComputeArea</unmanaged-short>
        public unsafe System.Single ComputeArea(DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform, System.Single flatteningTolerance)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            System.Single area;
            DXNET.Result __result__;
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, worldTransform == null ? (void *)0 : &worldTransform_, flatteningTolerance, &area, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
            return area;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "worldTransform">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Geometry::ComputeLength([In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[Out] float* length)</unmanaged>
        /// <unmanaged-short>ID2D1Geometry::ComputeLength</unmanaged-short>
        public unsafe System.Single ComputeLength(DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform, System.Single flatteningTolerance)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            System.Single length;
            DXNET.Result __result__;
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, worldTransform == null ? (void *)0 : &worldTransform_, flatteningTolerance, &length, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
            return length;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "length">No documentation.</param>
        /// <param name = "worldTransform">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <param name = "unitTangentVector">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Geometry::ComputePointAtLength([In] float length,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[Out, Optional] D2D_POINT_2F* point,[Out, Optional] D2D_POINT_2F* unitTangentVector)</unmanaged>
        /// <unmanaged-short>ID2D1Geometry::ComputePointAtLength</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawVector2 ComputePointAtLength(System.Single length, DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform, System.Single flatteningTolerance, out DXNET.Mathematics.Interop.RawVector2 unitTangentVector)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            DXNET.Mathematics.Interop.RawVector2 ointRef;
            unitTangentVector = default (DXNET.Mathematics.Interop.RawVector2);
            DXNET.Result __result__;
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            fixed (void *unitTangentVector_ = &unitTangentVector)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, length, worldTransform == null ? (void *)0 : &worldTransform_, flatteningTolerance, &ointRef, unitTangentVector_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
            return ointRef;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "strokeWidth">No documentation.</param>
        /// <param name = "strokeStyle">No documentation.</param>
        /// <param name = "worldTransform">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <param name = "geometrySink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Geometry::Widen([In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        /// <unmanaged-short>ID2D1Geometry::Widen</unmanaged-short>
        public unsafe void Widen(System.Single strokeWidth, DXNET.Direct2D1.StrokeStyle strokeStyle, DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform, System.Single flatteningTolerance, DXNET.Direct2D1.SimplifiedGeometrySink geometrySink)
        {
            System.IntPtr strokeStyle_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            System.IntPtr geometrySink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            strokeStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.StrokeStyle>(strokeStyle);
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            geometrySink_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SimplifiedGeometrySink>(geometrySink);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, strokeWidth, (void *)strokeStyle_, worldTransform == null ? (void *)0 : &worldTransform_, flatteningTolerance, (void *)geometrySink_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906a6-12e2-11dc-9fed-001143a055f9")]
    public partial class GeometryGroup : DXNET.Direct2D1.Geometry
    {
        public GeometryGroup(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator GeometryGroup(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new GeometryGroup(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFillMode</unmanaged>
        /// <unmanaged-short>GetFillMode</unmanaged-short>
        public DXNET.Direct2D1.FillMode FillMode
        {
            get => GetFillMode();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSourceGeometryCount</unmanaged>
        /// <unmanaged-short>GetSourceGeometryCount</unmanaged-short>
        public System.Int32 SourceGeometryCount
        {
            get => GetSourceGeometryCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_FILL_MODE ID2D1GeometryGroup::GetFillMode()</unmanaged>
        /// <unmanaged-short>ID2D1GeometryGroup::GetFillMode</unmanaged-short>
        internal unsafe DXNET.Direct2D1.FillMode GetFillMode()
        {
            DXNET.Direct2D1.FillMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1FillMode(this._nativePointer, (*(void ***)this._nativePointer)[17]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1GeometryGroup::GetSourceGeometryCount()</unmanaged>
        /// <unmanaged-short>ID2D1GeometryGroup::GetSourceGeometryCount</unmanaged-short>
        internal unsafe System.Int32 GetSourceGeometryCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[18]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "geometries">No documentation.</param>
        /// <param name = "geometriesCount">No documentation.</param>
        /// <unmanaged>void ID2D1GeometryGroup::GetSourceGeometries([Out, Buffer] ID2D1Geometry** geometries,[In] unsigned int geometriesCount)</unmanaged>
        /// <unmanaged-short>ID2D1GeometryGroup::GetSourceGeometries</unmanaged-short>
        internal unsafe void GetSourceGeometries(DXNET.Direct2D1.Geometry[] geometries, System.Int32 geometriesCount)
        {
            System.IntPtr*geometries_;
            geometries_ = (System.IntPtr*)0;
            {
                System.IntPtr*_geometries = stackalloc System.IntPtr[geometries.Length];
                geometries_ = _geometries;
            }

            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)geometries_, geometriesCount, (*(void ***)this._nativePointer)[19]);
            for (int i = 0; i < geometries.Length; ++i)
                if ((geometries_)[i] != System.IntPtr.Zero)
                    geometries[i] = new DXNET.Direct2D1.Geometry((geometries_)[i]);
                else
                    geometries[i] = null;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a16907d7-bc02-4801-99e8-8cf7f485f774")]
    public partial class GeometryRealization : DXNET.Direct2D1.Resource
    {
        public GeometryRealization(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator GeometryRealization(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new GeometryRealization(nativePtr);
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd9069f-12e2-11dc-9fed-001143a055f9")]
    public partial interface GeometrySink : DXNET.Direct2D1.SimplifiedGeometrySink
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd9069f-12e2-11dc-9fed-001143a055f9")]
    internal partial class GeometrySinkNative : DXNET.Direct2D1.SimplifiedGeometrySinkNative, DXNET.Direct2D1.GeometrySink
    {
        public GeometrySinkNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator GeometrySinkNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new GeometrySinkNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "point">No documentation.</param>
        /// <unmanaged>void ID2D1GeometrySink::AddLine([In] D2D_POINT_2F point)</unmanaged>
        /// <unmanaged-short>ID2D1GeometrySink::AddLine</unmanaged-short>
        internal unsafe void AddLine_(DXNET.Mathematics.Interop.RawVector2 point)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, point, (*(void ***)this._nativePointer)[10]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bezier">No documentation.</param>
        /// <unmanaged>void ID2D1GeometrySink::AddBezier([In] const D2D1_BEZIER_SEGMENT* bezier)</unmanaged>
        /// <unmanaged-short>ID2D1GeometrySink::AddBezier</unmanaged-short>
        internal unsafe void AddBezier_(ref DXNET.Direct2D1.BezierSegment bezier)
        {
            fixed (void *bezier_ = &bezier)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, bezier_, (*(void ***)this._nativePointer)[11]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bezier">No documentation.</param>
        /// <unmanaged>void ID2D1GeometrySink::AddQuadraticBezier([In] const D2D1_QUADRATIC_BEZIER_SEGMENT* bezier)</unmanaged>
        /// <unmanaged-short>ID2D1GeometrySink::AddQuadraticBezier</unmanaged-short>
        internal unsafe void AddQuadraticBezier_(DXNET.Direct2D1.QuadraticBezierSegment bezier)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &bezier, (*(void ***)this._nativePointer)[12]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "beziers">No documentation.</param>
        /// <param name = "beziersCount">No documentation.</param>
        /// <unmanaged>void ID2D1GeometrySink::AddQuadraticBeziers([In, Buffer] const D2D1_QUADRATIC_BEZIER_SEGMENT* beziers,[In] unsigned int beziersCount)</unmanaged>
        /// <unmanaged-short>ID2D1GeometrySink::AddQuadraticBeziers</unmanaged-short>
        internal unsafe void AddQuadraticBeziers_(DXNET.Direct2D1.QuadraticBezierSegment[] beziers, System.Int32 beziersCount)
        {
            fixed (void *beziers_ = beziers)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, beziers_, beziersCount, (*(void ***)this._nativePointer)[13]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "arc">No documentation.</param>
        /// <unmanaged>void ID2D1GeometrySink::AddArc([In] const D2D1_ARC_SEGMENT* arc)</unmanaged>
        /// <unmanaged-short>ID2D1GeometrySink::AddArc</unmanaged-short>
        internal unsafe void AddArc_(ref DXNET.Direct2D1.ArcSegment arc)
        {
            fixed (void *arc_ = &arc)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, arc_, (*(void ***)this._nativePointer)[14]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("f292e401-c050-4cde-83d7-04962d3b23c2")]
    public partial class GradientMesh : DXNET.Direct2D1.Resource
    {
        public GradientMesh(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator GradientMesh(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new GradientMesh(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPatchCount</unmanaged>
        /// <unmanaged-short>GetPatchCount</unmanaged-short>
        public System.Int32 PatchCount
        {
            get => GetPatchCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1GradientMesh::GetPatchCount()</unmanaged>
        /// <unmanaged-short>ID2D1GradientMesh::GetPatchCount</unmanaged-short>
        internal unsafe System.Int32 GetPatchCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "startIndex">No documentation.</param>
        /// <param name = "atchesRef">No documentation.</param>
        /// <param name = "patchesCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1GradientMesh::GetPatches([In] unsigned int startIndex,[Out, Buffer] D2D1_GRADIENT_MESH_PATCH* patches,[In] unsigned int patchesCount)</unmanaged>
        /// <unmanaged-short>ID2D1GradientMesh::GetPatches</unmanaged-short>
        public unsafe void GetPatches(System.Int32 startIndex, DXNET.Direct2D1.GradientMeshPatch[] atchesRef, System.Int32 patchesCount)
        {
            DXNET.Result __result__;
            fixed (void *atchesRef_ = atchesRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, startIndex, atchesRef_, patchesCount, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906a7-12e2-11dc-9fed-001143a055f9")]
    public partial class GradientStopCollection : DXNET.Direct2D1.Resource
    {
        public GradientStopCollection(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator GradientStopCollection(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new GradientStopCollection(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetGradientStopCount</unmanaged>
        /// <unmanaged-short>GetGradientStopCount</unmanaged-short>
        public System.Int32 GradientStopCount
        {
            get => GetGradientStopCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetColorInterpolationGamma</unmanaged>
        /// <unmanaged-short>GetColorInterpolationGamma</unmanaged-short>
        public DXNET.Direct2D1.Gamma ColorInterpolationGamma
        {
            get => GetColorInterpolationGamma();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetExtendMode</unmanaged>
        /// <unmanaged-short>GetExtendMode</unmanaged-short>
        public DXNET.Direct2D1.ExtendMode ExtendMode
        {
            get => GetExtendMode();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1GradientStopCollection::GetGradientStopCount()</unmanaged>
        /// <unmanaged-short>ID2D1GradientStopCollection::GetGradientStopCount</unmanaged-short>
        internal unsafe System.Int32 GetGradientStopCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gradientStops">No documentation.</param>
        /// <param name = "gradientStopsCount">No documentation.</param>
        /// <unmanaged>void ID2D1GradientStopCollection::GetGradientStops([Out, Buffer] D2D1_GRADIENT_STOP* gradientStops,[In] unsigned int gradientStopsCount)</unmanaged>
        /// <unmanaged-short>ID2D1GradientStopCollection::GetGradientStops</unmanaged-short>
        public unsafe void GetGradientStops(DXNET.Direct2D1.GradientStop[] gradientStops, System.Int32 gradientStopsCount)
        {
            fixed (void *gradientStops_ = gradientStops)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, gradientStops_, gradientStopsCount, (*(void ***)this._nativePointer)[5]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_GAMMA ID2D1GradientStopCollection::GetColorInterpolationGamma()</unmanaged>
        /// <unmanaged-short>ID2D1GradientStopCollection::GetColorInterpolationGamma</unmanaged-short>
        internal unsafe DXNET.Direct2D1.Gamma GetColorInterpolationGamma()
        {
            DXNET.Direct2D1.Gamma __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1Gamma(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_EXTEND_MODE ID2D1GradientStopCollection::GetExtendMode()</unmanaged>
        /// <unmanaged-short>ID2D1GradientStopCollection::GetExtendMode</unmanaged-short>
        internal unsafe DXNET.Direct2D1.ExtendMode GetExtendMode()
        {
            DXNET.Direct2D1.ExtendMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1ExtendMode(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ae1572f4-5dd0-4777-998b-9279472ae63b")]
    public partial class GradientStopCollection1 : DXNET.Direct2D1.GradientStopCollection
    {
        public GradientStopCollection1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator GradientStopCollection1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new GradientStopCollection1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPreInterpolationSpace</unmanaged>
        /// <unmanaged-short>GetPreInterpolationSpace</unmanaged-short>
        public DXNET.Direct2D1.ColorSpace PreInterpolationSpace
        {
            get => GetPreInterpolationSpace();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPostInterpolationSpace</unmanaged>
        /// <unmanaged-short>GetPostInterpolationSpace</unmanaged-short>
        public DXNET.Direct2D1.ColorSpace PostInterpolationSpace
        {
            get => GetPostInterpolationSpace();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetBufferPrecision</unmanaged>
        /// <unmanaged-short>GetBufferPrecision</unmanaged-short>
        public DXNET.Direct2D1.BufferPrecision BufferPrecision
        {
            get => GetBufferPrecision();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetColorInterpolationMode</unmanaged>
        /// <unmanaged-short>GetColorInterpolationMode</unmanaged-short>
        public DXNET.Direct2D1.ColorInterpolationMode ColorInterpolationMode
        {
            get => GetColorInterpolationMode();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gradientStops">No documentation.</param>
        /// <param name = "gradientStopsCount">No documentation.</param>
        /// <unmanaged>void ID2D1GradientStopCollection1::GetGradientStops1([Out, Buffer] D2D1_GRADIENT_STOP* gradientStops,[In] unsigned int gradientStopsCount)</unmanaged>
        /// <unmanaged-short>ID2D1GradientStopCollection1::GetGradientStops1</unmanaged-short>
        public unsafe void GetGradientStops1(DXNET.Direct2D1.GradientStop[] gradientStops, System.Int32 gradientStopsCount)
        {
            fixed (void *gradientStops_ = gradientStops)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, gradientStops_, gradientStopsCount, (*(void ***)this._nativePointer)[8]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_COLOR_SPACE ID2D1GradientStopCollection1::GetPreInterpolationSpace()</unmanaged>
        /// <unmanaged-short>ID2D1GradientStopCollection1::GetPreInterpolationSpace</unmanaged-short>
        internal unsafe DXNET.Direct2D1.ColorSpace GetPreInterpolationSpace()
        {
            DXNET.Direct2D1.ColorSpace __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1ColorSpace(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_COLOR_SPACE ID2D1GradientStopCollection1::GetPostInterpolationSpace()</unmanaged>
        /// <unmanaged-short>ID2D1GradientStopCollection1::GetPostInterpolationSpace</unmanaged-short>
        internal unsafe DXNET.Direct2D1.ColorSpace GetPostInterpolationSpace()
        {
            DXNET.Direct2D1.ColorSpace __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1ColorSpace(this._nativePointer, (*(void ***)this._nativePointer)[10]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_BUFFER_PRECISION ID2D1GradientStopCollection1::GetBufferPrecision()</unmanaged>
        /// <unmanaged-short>ID2D1GradientStopCollection1::GetBufferPrecision</unmanaged-short>
        internal unsafe DXNET.Direct2D1.BufferPrecision GetBufferPrecision()
        {
            DXNET.Direct2D1.BufferPrecision __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1BufferPrecision(this._nativePointer, (*(void ***)this._nativePointer)[11]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_COLOR_INTERPOLATION_MODE ID2D1GradientStopCollection1::GetColorInterpolationMode()</unmanaged>
        /// <unmanaged-short>ID2D1GradientStopCollection1::GetColorInterpolationMode</unmanaged-short>
        internal unsafe DXNET.Direct2D1.ColorInterpolationMode GetColorInterpolationMode()
        {
            DXNET.Direct2D1.ColorInterpolationMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1ColorInterpolationMode(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("65019f75-8da2-497c-b32c-dfa34e48ede6")]
    public partial class Image : DXNET.Direct2D1.Resource
    {
        public Image(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Image(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Image(nativePtr);
    }

    [System.Runtime.InteropServices.GuidAttribute("fe9e984d-3f95-407c-b5db-cb94d4e8f87c")]
    public partial class ImageBrush : DXNET.Direct2D1.Brush
    {
        public ImageBrush(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ImageBrush(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ImageBrush(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetImage / SetImage</unmanaged>
        /// <unmanaged-short>GetImage</unmanaged-short>
        public DXNET.Direct2D1.Image Image
        {
            get
            {
                GetImage(out var __output__);
                return __output__;
            }

            set => SetImage(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetExtendModeX / SetExtendModeX</unmanaged>
        /// <unmanaged-short>GetExtendModeX</unmanaged-short>
        public DXNET.Direct2D1.ExtendMode ExtendModeX
        {
            get => GetExtendModeX();
            set => SetExtendModeX(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetExtendModeY / SetExtendModeY</unmanaged>
        /// <unmanaged-short>GetExtendModeY</unmanaged-short>
        public DXNET.Direct2D1.ExtendMode ExtendModeY
        {
            get => GetExtendModeY();
            set => SetExtendModeY(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetInterpolationMode / SetInterpolationMode</unmanaged>
        /// <unmanaged-short>GetInterpolationMode</unmanaged-short>
        public DXNET.Direct2D1.InterpolationMode InterpolationMode
        {
            get => GetInterpolationMode();
            set => SetInterpolationMode(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSourceRectangle / SetSourceRectangle</unmanaged>
        /// <unmanaged-short>GetSourceRectangle</unmanaged-short>
        public DXNET.Mathematics.Interop.RawRectangleF SourceRectangle
        {
            get
            {
                GetSourceRectangle(out var __output__);
                return __output__;
            }

            set => SetSourceRectangle(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "image">No documentation.</param>
        /// <unmanaged>void ID2D1ImageBrush::SetImage([In, Optional] ID2D1Image* image)</unmanaged>
        /// <unmanaged-short>ID2D1ImageBrush::SetImage</unmanaged-short>
        internal unsafe void SetImage(DXNET.Direct2D1.Image image)
        {
            System.IntPtr image_ = System.IntPtr.Zero;
            image_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Image>(image);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)image_, (*(void ***)this._nativePointer)[8]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "extendModeX">No documentation.</param>
        /// <unmanaged>void ID2D1ImageBrush::SetExtendModeX([In] D2D1_EXTEND_MODE extendModeX)</unmanaged>
        /// <unmanaged-short>ID2D1ImageBrush::SetExtendModeX</unmanaged-short>
        internal unsafe void SetExtendModeX(DXNET.Direct2D1.ExtendMode extendModeX)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)extendModeX), (*(void ***)this._nativePointer)[9]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "extendModeY">No documentation.</param>
        /// <unmanaged>void ID2D1ImageBrush::SetExtendModeY([In] D2D1_EXTEND_MODE extendModeY)</unmanaged>
        /// <unmanaged-short>ID2D1ImageBrush::SetExtendModeY</unmanaged-short>
        internal unsafe void SetExtendModeY(DXNET.Direct2D1.ExtendMode extendModeY)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)extendModeY), (*(void ***)this._nativePointer)[10]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "interpolationMode">No documentation.</param>
        /// <unmanaged>void ID2D1ImageBrush::SetInterpolationMode([In] D2D1_INTERPOLATION_MODE interpolationMode)</unmanaged>
        /// <unmanaged-short>ID2D1ImageBrush::SetInterpolationMode</unmanaged-short>
        internal unsafe void SetInterpolationMode(DXNET.Direct2D1.InterpolationMode interpolationMode)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)interpolationMode), (*(void ***)this._nativePointer)[11]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sourceRectangle">No documentation.</param>
        /// <unmanaged>void ID2D1ImageBrush::SetSourceRectangle([In] const D2D_RECT_F* sourceRectangle)</unmanaged>
        /// <unmanaged-short>ID2D1ImageBrush::SetSourceRectangle</unmanaged-short>
        internal unsafe void SetSourceRectangle(DXNET.Mathematics.Interop.RawRectangleF sourceRectangle)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &sourceRectangle, (*(void ***)this._nativePointer)[12]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "image">No documentation.</param>
        /// <unmanaged>void ID2D1ImageBrush::GetImage([Out, Optional] ID2D1Image** image)</unmanaged>
        /// <unmanaged-short>ID2D1ImageBrush::GetImage</unmanaged-short>
        internal unsafe void GetImage(out DXNET.Direct2D1.Image image)
        {
            System.IntPtr image_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &image_, (*(void ***)this._nativePointer)[13]);
            if (image_ != System.IntPtr.Zero)
                image = new DXNET.Direct2D1.Image(image_);
            else
                image = null;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_EXTEND_MODE ID2D1ImageBrush::GetExtendModeX()</unmanaged>
        /// <unmanaged-short>ID2D1ImageBrush::GetExtendModeX</unmanaged-short>
        internal unsafe DXNET.Direct2D1.ExtendMode GetExtendModeX()
        {
            DXNET.Direct2D1.ExtendMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1ExtendMode(this._nativePointer, (*(void ***)this._nativePointer)[14]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_EXTEND_MODE ID2D1ImageBrush::GetExtendModeY()</unmanaged>
        /// <unmanaged-short>ID2D1ImageBrush::GetExtendModeY</unmanaged-short>
        internal unsafe DXNET.Direct2D1.ExtendMode GetExtendModeY()
        {
            DXNET.Direct2D1.ExtendMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1ExtendMode(this._nativePointer, (*(void ***)this._nativePointer)[15]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_INTERPOLATION_MODE ID2D1ImageBrush::GetInterpolationMode()</unmanaged>
        /// <unmanaged-short>ID2D1ImageBrush::GetInterpolationMode</unmanaged-short>
        internal unsafe DXNET.Direct2D1.InterpolationMode GetInterpolationMode()
        {
            DXNET.Direct2D1.InterpolationMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1InterpolationMode(this._nativePointer, (*(void ***)this._nativePointer)[16]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sourceRectangle">No documentation.</param>
        /// <unmanaged>void ID2D1ImageBrush::GetSourceRectangle([Out] D2D_RECT_F* sourceRectangle)</unmanaged>
        /// <unmanaged-short>ID2D1ImageBrush::GetSourceRectangle</unmanaged-short>
        internal unsafe void GetSourceRectangle(out DXNET.Mathematics.Interop.RawRectangleF sourceRectangle)
        {
            sourceRectangle = default (DXNET.Mathematics.Interop.RawRectangleF);
            fixed (void *sourceRectangle_ = &sourceRectangle)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, sourceRectangle_, (*(void ***)this._nativePointer)[17]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("c9b664e5-74a1-4378-9ac2-eefc37a3f4d8")]
    public partial class ImageSource : DXNET.Direct2D1.Image
    {
        public ImageSource(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ImageSource(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ImageSource(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1ImageSource::OfferResources()</unmanaged>
        /// <unmanaged-short>ID2D1ImageSource::OfferResources</unmanaged-short>
        public unsafe void OfferResources()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "resourcesDiscarded">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1ImageSource::TryReclaimResources([Out] BOOL* resourcesDiscarded)</unmanaged>
        /// <unmanaged-short>ID2D1ImageSource::TryReclaimResources</unmanaged-short>
        public unsafe void TryReclaimResources(out DXNET.Mathematics.Interop.RawBool resourcesDiscarded)
        {
            resourcesDiscarded = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *resourcesDiscarded_ = &resourcesDiscarded)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, resourcesDiscarded_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("77395441-1c8f-4555-8683-f50dab0fe792")]
    public partial class ImageSourceFromWic : DXNET.Direct2D1.ImageSource
    {
        public ImageSourceFromWic(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ImageSourceFromWic(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ImageSourceFromWic(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSource</unmanaged>
        /// <unmanaged-short>GetSource</unmanaged-short>
        public DXNET.WIC.BitmapSource Source
        {
            get
            {
                GetSource(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rectangleToFill">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1ImageSourceFromWic::EnsureCached([In, Optional] const D2D_RECT_U* rectangleToFill)</unmanaged>
        /// <unmanaged-short>ID2D1ImageSourceFromWic::EnsureCached</unmanaged-short>
        public unsafe void EnsureCached(DXNET.Mathematics.Interop.RawRectangle? rectangleToFill)
        {
            DXNET.Mathematics.Interop.RawRectangle rectangleToFill_;
            DXNET.Result __result__;
            if (rectangleToFill != null)
                rectangleToFill_ = rectangleToFill.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, rectangleToFill == null ? (void *)0 : &rectangleToFill_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rectangleToPreserve">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1ImageSourceFromWic::TrimCache([In, Optional] const D2D_RECT_U* rectangleToPreserve)</unmanaged>
        /// <unmanaged-short>ID2D1ImageSourceFromWic::TrimCache</unmanaged-short>
        public unsafe void TrimCache(DXNET.Mathematics.Interop.RawRectangle? rectangleToPreserve)
        {
            DXNET.Mathematics.Interop.RawRectangle rectangleToPreserve_;
            DXNET.Result __result__;
            if (rectangleToPreserve != null)
                rectangleToPreserve_ = rectangleToPreserve.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, rectangleToPreserve == null ? (void *)0 : &rectangleToPreserve_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "wicBitmapSource">No documentation.</param>
        /// <unmanaged>void ID2D1ImageSourceFromWic::GetSource([Out, Optional] IWICBitmapSource** wicBitmapSource)</unmanaged>
        /// <unmanaged-short>ID2D1ImageSourceFromWic::GetSource</unmanaged-short>
        internal unsafe void GetSource(out DXNET.WIC.BitmapSource wicBitmapSource)
        {
            System.IntPtr wicBitmapSource_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &wicBitmapSource_, (*(void ***)this._nativePointer)[8]);
            if (wicBitmapSource_ != System.IntPtr.Zero)
                wicBitmapSource = new DXNET.WIC.BitmapSource(wicBitmapSource_);
            else
                wicBitmapSource = null;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("b499923b-7029-478f-a8b3-432c7c5f5312")]
    public partial class Ink : DXNET.Direct2D1.Resource
    {
        public Ink(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Ink(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Ink(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStartPoint / SetStartPoint</unmanaged>
        /// <unmanaged-short>GetStartPoint</unmanaged-short>
        public DXNET.Direct2D1.InkPoint StartPoint
        {
            get => GetStartPoint();
            set => SetStartPoint(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetSegmentAtEnd</unmanaged>
        /// <unmanaged-short>SetSegmentAtEnd</unmanaged-short>
        public DXNET.Direct2D1.InkBezierSegment SegmentAtEnd
        {
            set => SetSegmentAtEnd(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSegmentCount</unmanaged>
        /// <unmanaged-short>GetSegmentCount</unmanaged-short>
        public System.Int32 SegmentCount
        {
            get => GetSegmentCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "startPoint">No documentation.</param>
        /// <unmanaged>void ID2D1Ink::SetStartPoint([In] const D2D1_INK_POINT* startPoint)</unmanaged>
        /// <unmanaged-short>ID2D1Ink::SetStartPoint</unmanaged-short>
        internal unsafe void SetStartPoint(DXNET.Direct2D1.InkPoint startPoint)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &startPoint, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_INK_POINT ID2D1Ink::GetStartPoint()</unmanaged>
        /// <unmanaged-short>ID2D1Ink::GetStartPoint</unmanaged-short>
        internal unsafe DXNET.Direct2D1.InkPoint GetStartPoint()
        {
            DXNET.Direct2D1.InkPoint __result__;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "segments">No documentation.</param>
        /// <param name = "segmentsCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Ink::AddSegments([In, Buffer] const D2D1_INK_BEZIER_SEGMENT* segments,[In] unsigned int segmentsCount)</unmanaged>
        /// <unmanaged-short>ID2D1Ink::AddSegments</unmanaged-short>
        public unsafe void AddSegments(DXNET.Direct2D1.InkBezierSegment[] segments, System.Int32 segmentsCount)
        {
            DXNET.Result __result__;
            fixed (void *segments_ = segments)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, segments_, segmentsCount, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "segmentsCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Ink::RemoveSegmentsAtEnd([In] unsigned int segmentsCount)</unmanaged>
        /// <unmanaged-short>ID2D1Ink::RemoveSegmentsAtEnd</unmanaged-short>
        public unsafe void RemoveSegmentsAtEnd(System.Int32 segmentsCount)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, segmentsCount, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "startSegment">No documentation.</param>
        /// <param name = "segments">No documentation.</param>
        /// <param name = "segmentsCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Ink::SetSegments([In] unsigned int startSegment,[In, Buffer] const D2D1_INK_BEZIER_SEGMENT* segments,[In] unsigned int segmentsCount)</unmanaged>
        /// <unmanaged-short>ID2D1Ink::SetSegments</unmanaged-short>
        public unsafe void SetSegments(System.Int32 startSegment, DXNET.Direct2D1.InkBezierSegment[] segments, System.Int32 segmentsCount)
        {
            DXNET.Result __result__;
            fixed (void *segments_ = segments)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, startSegment, segments_, segmentsCount, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "segment">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Ink::SetSegmentAtEnd([In] const D2D1_INK_BEZIER_SEGMENT* segment)</unmanaged>
        /// <unmanaged-short>ID2D1Ink::SetSegmentAtEnd</unmanaged-short>
        internal unsafe void SetSegmentAtEnd(ref DXNET.Direct2D1.InkBezierSegment segment)
        {
            DXNET.Result __result__;
            fixed (void *segment_ = &segment)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, segment_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1Ink::GetSegmentCount()</unmanaged>
        /// <unmanaged-short>ID2D1Ink::GetSegmentCount</unmanaged-short>
        internal unsafe System.Int32 GetSegmentCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[10]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "startSegment">No documentation.</param>
        /// <param name = "segments">No documentation.</param>
        /// <param name = "segmentsCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Ink::GetSegments([In] unsigned int startSegment,[Out, Buffer] D2D1_INK_BEZIER_SEGMENT* segments,[In] unsigned int segmentsCount)</unmanaged>
        /// <unmanaged-short>ID2D1Ink::GetSegments</unmanaged-short>
        public unsafe void GetSegments(System.Int32 startSegment, DXNET.Direct2D1.InkBezierSegment[] segments, System.Int32 segmentsCount)
        {
            DXNET.Result __result__;
            fixed (void *segments_ = segments)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, startSegment, segments_, segmentsCount, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "inkStyle">No documentation.</param>
        /// <param name = "worldTransform">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <param name = "geometrySink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Ink::StreamAsGeometry([In, Optional] ID2D1InkStyle* inkStyle,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        /// <unmanaged-short>ID2D1Ink::StreamAsGeometry</unmanaged-short>
        public unsafe void StreamAsGeometry(DXNET.Direct2D1.InkStyle inkStyle, DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform, System.Single flatteningTolerance, DXNET.Direct2D1.SimplifiedGeometrySink geometrySink)
        {
            System.IntPtr inkStyle_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            System.IntPtr geometrySink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            inkStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.InkStyle>(inkStyle);
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            geometrySink_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SimplifiedGeometrySink>(geometrySink);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)inkStyle_, worldTransform == null ? (void *)0 : &worldTransform_, flatteningTolerance, (void *)geometrySink_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "inkStyle">No documentation.</param>
        /// <param name = "worldTransform">No documentation.</param>
        /// <param name = "bounds">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Ink::GetBounds([In, Optional] ID2D1InkStyle* inkStyle,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[Out] D2D_RECT_F* bounds)</unmanaged>
        /// <unmanaged-short>ID2D1Ink::GetBounds</unmanaged-short>
        public unsafe void GetBounds(DXNET.Direct2D1.InkStyle inkStyle, DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform, out DXNET.Mathematics.Interop.RawRectangleF bounds)
        {
            System.IntPtr inkStyle_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            bounds = default (DXNET.Mathematics.Interop.RawRectangleF);
            DXNET.Result __result__;
            inkStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.InkStyle>(inkStyle);
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            fixed (void *bounds_ = &bounds)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)inkStyle_, worldTransform == null ? (void *)0 : &worldTransform_, bounds_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("bae8b344-23fc-4071-8cb5-d05d6f073848")]
    public partial class InkStyle : DXNET.Direct2D1.Resource
    {
        public InkStyle(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator InkStyle(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new InkStyle(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetNibTransform / SetNibTransform</unmanaged>
        /// <unmanaged-short>GetNibTransform</unmanaged-short>
        public DXNET.Mathematics.Interop.RawMatrix3x2 NibTransform
        {
            get
            {
                GetNibTransform(out var __output__);
                return __output__;
            }

            set => SetNibTransform(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetNibShape / SetNibShape</unmanaged>
        /// <unmanaged-short>GetNibShape</unmanaged-short>
        public DXNET.Direct2D1.InkNibShape NibShape
        {
            get => GetNibShape();
            set => SetNibShape(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "transform">No documentation.</param>
        /// <unmanaged>void ID2D1InkStyle::SetNibTransform([In] const D2D_MATRIX_3X2_F* transform)</unmanaged>
        /// <unmanaged-short>ID2D1InkStyle::SetNibTransform</unmanaged-short>
        internal unsafe void SetNibTransform(ref DXNET.Mathematics.Interop.RawMatrix3x2 transform)
        {
            fixed (void *transform_ = &transform)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, transform_, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "transform">No documentation.</param>
        /// <unmanaged>void ID2D1InkStyle::GetNibTransform([Out] D2D_MATRIX_3X2_F* transform)</unmanaged>
        /// <unmanaged-short>ID2D1InkStyle::GetNibTransform</unmanaged-short>
        internal unsafe void GetNibTransform(out DXNET.Mathematics.Interop.RawMatrix3x2 transform)
        {
            transform = default (DXNET.Mathematics.Interop.RawMatrix3x2);
            fixed (void *transform_ = &transform)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, transform_, (*(void ***)this._nativePointer)[5]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "nibShape">No documentation.</param>
        /// <unmanaged>void ID2D1InkStyle::SetNibShape([In] D2D1_INK_NIB_SHAPE nibShape)</unmanaged>
        /// <unmanaged-short>ID2D1InkStyle::SetNibShape</unmanaged-short>
        internal unsafe void SetNibShape(DXNET.Direct2D1.InkNibShape nibShape)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)nibShape), (*(void ***)this._nativePointer)[6]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_INK_NIB_SHAPE ID2D1InkStyle::GetNibShape()</unmanaged>
        /// <unmanaged-short>ID2D1InkStyle::GetNibShape</unmanaged-short>
        internal unsafe DXNET.Direct2D1.InkNibShape GetNibShape()
        {
            DXNET.Direct2D1.InkNibShape __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1InkNibShape(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd9069b-12e2-11dc-9fed-001143a055f9")]
    public partial class Layer : DXNET.Direct2D1.Resource
    {
        public Layer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Layer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Layer(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSize</unmanaged>
        /// <unmanaged-short>GetSize</unmanaged-short>
        public DXNET.Size2F Size
        {
            get => GetSize();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D_SIZE_F ID2D1Layer::GetSize()</unmanaged>
        /// <unmanaged-short>ID2D1Layer::GetSize</unmanaged-short>
        internal unsafe DXNET.Size2F GetSize()
        {
            DXNET.Size2F __result__;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906ab-12e2-11dc-9fed-001143a055f9")]
    public partial class LinearGradientBrush : DXNET.Direct2D1.Brush
    {
        public LinearGradientBrush(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator LinearGradientBrush(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new LinearGradientBrush(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStartPoint / SetStartPoint</unmanaged>
        /// <unmanaged-short>GetStartPoint</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 StartPoint
        {
            get => GetStartPoint();
            set => SetStartPoint(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetEndPoint / SetEndPoint</unmanaged>
        /// <unmanaged-short>GetEndPoint</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 EndPoint
        {
            get => GetEndPoint();
            set => SetEndPoint(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetGradientStopCollection</unmanaged>
        /// <unmanaged-short>GetGradientStopCollection</unmanaged-short>
        public DXNET.Direct2D1.GradientStopCollection GradientStopCollection
        {
            get
            {
                GetGradientStopCollection(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "startPoint">No documentation.</param>
        /// <unmanaged>void ID2D1LinearGradientBrush::SetStartPoint([In] D2D_POINT_2F startPoint)</unmanaged>
        /// <unmanaged-short>ID2D1LinearGradientBrush::SetStartPoint</unmanaged-short>
        internal unsafe void SetStartPoint(DXNET.Mathematics.Interop.RawVector2 startPoint)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, startPoint, (*(void ***)this._nativePointer)[8]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "endPoint">No documentation.</param>
        /// <unmanaged>void ID2D1LinearGradientBrush::SetEndPoint([In] D2D_POINT_2F endPoint)</unmanaged>
        /// <unmanaged-short>ID2D1LinearGradientBrush::SetEndPoint</unmanaged-short>
        internal unsafe void SetEndPoint(DXNET.Mathematics.Interop.RawVector2 endPoint)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, endPoint, (*(void ***)this._nativePointer)[9]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D_POINT_2F ID2D1LinearGradientBrush::GetStartPoint()</unmanaged>
        /// <unmanaged-short>ID2D1LinearGradientBrush::GetStartPoint</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawVector2 GetStartPoint()
        {
            DXNET.Mathematics.Interop.RawVector2 __result__;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__, (*(void ***)this._nativePointer)[10]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D_POINT_2F ID2D1LinearGradientBrush::GetEndPoint()</unmanaged>
        /// <unmanaged-short>ID2D1LinearGradientBrush::GetEndPoint</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawVector2 GetEndPoint()
        {
            DXNET.Mathematics.Interop.RawVector2 __result__;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__, (*(void ***)this._nativePointer)[11]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gradientStopCollection">No documentation.</param>
        /// <unmanaged>void ID2D1LinearGradientBrush::GetGradientStopCollection([Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        /// <unmanaged-short>ID2D1LinearGradientBrush::GetGradientStopCollection</unmanaged-short>
        internal unsafe void GetGradientStopCollection(out DXNET.Direct2D1.GradientStopCollection gradientStopCollection)
        {
            System.IntPtr gradientStopCollection_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &gradientStopCollection_, (*(void ***)this._nativePointer)[12]);
            if (gradientStopCollection_ != System.IntPtr.Zero)
                gradientStopCollection = new DXNET.Direct2D1.GradientStopCollection(gradientStopCollection_);
            else
                gradientStopCollection = null;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("53dd9855-a3b0-4d5b-82e1-26e25c5e5797")]
    public partial class LookupTable3D : DXNET.Direct2D1.Resource
    {
        public LookupTable3D(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator LookupTable3D(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new LookupTable3D(nativePtr);
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906c2-12e2-11dc-9fed-001143a055f9")]
    public partial class Mesh : DXNET.Direct2D1.Resource
    {
        public Mesh(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Mesh(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Mesh(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "tessellationSink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Mesh::Open([Out] ID2D1TessellationSink** tessellationSink)</unmanaged>
        /// <unmanaged-short>ID2D1Mesh::Open</unmanaged-short>
        internal unsafe void Open_(out DXNET.Direct2D1.TessellationSink tessellationSink)
        {
            System.IntPtr tessellationSink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &tessellationSink_, (*(void ***)this._nativePointer)[4]);
            if (tessellationSink_ != System.IntPtr.Zero)
                tessellationSink = new DXNET.Direct2D1.TessellationSinkNative(tessellationSink_);
            else
                tessellationSink = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("31e6e7bc-e0ff-4d46-8c64-a0a8c41c15d3")]
    public partial class Multithread : DXNET.ComObject
    {
        public Multithread(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Multithread(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Multithread(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMultithreadProtected</unmanaged>
        /// <unmanaged-short>GetMultithreadProtected</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool MultithreadProtected
        {
            get => GetMultithreadProtected();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL ID2D1Multithread::GetMultithreadProtected()</unmanaged>
        /// <unmanaged-short>ID2D1Multithread::GetMultithreadProtected</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool GetMultithreadProtected()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>void ID2D1Multithread::Enter()</unmanaged>
        /// <unmanaged-short>ID2D1Multithread::Enter</unmanaged-short>
        public unsafe void Enter()
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>void ID2D1Multithread::Leave()</unmanaged>
        /// <unmanaged-short>ID2D1Multithread::Leave</unmanaged-short>
        public unsafe void Leave()
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[5]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3fe6adea-7643-4f53-bd14-a0ce63f24042")]
    public partial class OffsetTransform : DXNET.Direct2D1.TransformNodeNative
    {
        public OffsetTransform(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator OffsetTransform(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new OffsetTransform(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetOffset / SetOffset</unmanaged>
        /// <unmanaged-short>GetOffset</unmanaged-short>
        public DXNET.Mathematics.Interop.RawPoint Offset
        {
            get => GetOffset();
            set => SetOffset(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "offset">No documentation.</param>
        /// <unmanaged>void ID2D1OffsetTransform::SetOffset([In] POINT offset)</unmanaged>
        /// <unmanaged-short>ID2D1OffsetTransform::SetOffset</unmanaged-short>
        internal unsafe void SetOffset(DXNET.Mathematics.Interop.RawPoint offset)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, offset, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>POINT ID2D1OffsetTransform::GetOffset()</unmanaged>
        /// <unmanaged-short>ID2D1OffsetTransform::GetOffset</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawPoint GetOffset()
        {
            DXNET.Mathematics.Interop.RawPoint __result__;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906a5-12e2-11dc-9fed-001143a055f9")]
    public partial class PathGeometry : DXNET.Direct2D1.Geometry
    {
        public PathGeometry(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PathGeometry(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PathGeometry(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSegmentCount</unmanaged>
        /// <unmanaged-short>GetSegmentCount</unmanaged-short>
        public System.Int32 SegmentCount
        {
            get
            {
                GetSegmentCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFigureCount</unmanaged>
        /// <unmanaged-short>GetFigureCount</unmanaged-short>
        public System.Int32 FigureCount
        {
            get
            {
                GetFigureCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1PathGeometry::Open([Out] ID2D1GeometrySink** geometrySink)</unmanaged>
        /// <unmanaged-short>ID2D1PathGeometry::Open</unmanaged-short>
        public unsafe DXNET.Direct2D1.GeometrySink Open()
        {
            DXNET.Direct2D1.GeometrySink geometrySink;
            System.IntPtr geometrySink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &geometrySink_, (*(void ***)this._nativePointer)[17]);
            if (geometrySink_ != System.IntPtr.Zero)
                geometrySink = new DXNET.Direct2D1.GeometrySinkNative(geometrySink_);
            else
                geometrySink = null;
            __result__.CheckError();
            return geometrySink;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "geometrySink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1PathGeometry::Stream([In] ID2D1GeometrySink* geometrySink)</unmanaged>
        /// <unmanaged-short>ID2D1PathGeometry::Stream</unmanaged-short>
        public unsafe void Stream(DXNET.Direct2D1.GeometrySink geometrySink)
        {
            System.IntPtr geometrySink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            geometrySink_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.GeometrySink>(geometrySink);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)geometrySink_, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "count">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1PathGeometry::GetSegmentCount([Out] unsigned int* count)</unmanaged>
        /// <unmanaged-short>ID2D1PathGeometry::GetSegmentCount</unmanaged-short>
        internal unsafe void GetSegmentCount(out System.Int32 count)
        {
            DXNET.Result __result__;
            fixed (void *count_ = &count)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, count_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "count">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1PathGeometry::GetFigureCount([Out] unsigned int* count)</unmanaged>
        /// <unmanaged-short>ID2D1PathGeometry::GetFigureCount</unmanaged-short>
        internal unsafe void GetFigureCount(out System.Int32 count)
        {
            DXNET.Result __result__;
            fixed (void *count_ = &count)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, count_, (*(void ***)this._nativePointer)[20]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("62baa2d2-ab54-41b7-b872-787e0106a421")]
    public partial class PathGeometry1 : DXNET.Direct2D1.PathGeometry
    {
        public PathGeometry1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PathGeometry1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PathGeometry1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "length">No documentation.</param>
        /// <param name = "startSegment">No documentation.</param>
        /// <param name = "worldTransform">No documentation.</param>
        /// <param name = "flatteningTolerance">No documentation.</param>
        /// <param name = "ointDescriptionRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1PathGeometry1::ComputePointAndSegmentAtLength([In] float length,[In] unsigned int startSegment,[In, Optional] const D2D_MATRIX_3X2_F* worldTransform,[In] float flatteningTolerance,[Out] D2D1_POINT_DESCRIPTION* pointDescription)</unmanaged>
        /// <unmanaged-short>ID2D1PathGeometry1::ComputePointAndSegmentAtLength</unmanaged-short>
        public unsafe void ComputePointAndSegmentAtLength(System.Single length, System.Int32 startSegment, DXNET.Mathematics.Interop.RawMatrix3x2? worldTransform, System.Single flatteningTolerance, out DXNET.Direct2D1.PointDescription ointDescriptionRef)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 worldTransform_;
            ointDescriptionRef = default (DXNET.Direct2D1.PointDescription);
            DXNET.Result __result__;
            if (worldTransform != null)
                worldTransform_ = worldTransform.Value;
            fixed (void *ointDescriptionRef_ = &ointDescriptionRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, length, startSegment, worldTransform == null ? (void *)0 : &worldTransform_, flatteningTolerance, ointDescriptionRef_, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2c1d867d-c290-41c8-ae7e-34a98702e9a5")]
    public partial class PrintControl : DXNET.ComObject
    {
        public PrintControl(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PrintControl(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PrintControl(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "commandList">No documentation.</param>
        /// <param name = "pageSize">No documentation.</param>
        /// <param name = "agePrintTicketStreamRef">No documentation.</param>
        /// <param name = "tag1">No documentation.</param>
        /// <param name = "tag2">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1PrintControl::AddPage([In] ID2D1CommandList* commandList,[In] D2D_SIZE_F pageSize,[In, Optional] IStream* pagePrintTicketStream,[Out, Optional] unsigned longlong* tag1,[Out, Optional] unsigned longlong* tag2)</unmanaged>
        /// <unmanaged-short>ID2D1PrintControl::AddPage</unmanaged-short>
        public unsafe void AddPage(DXNET.Direct2D1.CommandList commandList, DXNET.Size2F pageSize, DXNET.Win32.IStream agePrintTicketStreamRef, out System.Int64 tag1, out System.Int64 tag2)
        {
            System.IntPtr commandList_ = System.IntPtr.Zero;
            System.IntPtr agePrintTicketStreamRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            commandList_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.CommandList>(commandList);
            agePrintTicketStreamRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.Win32.IStream>(agePrintTicketStreamRef);
            fixed (void *tag2_ = &tag2)
                fixed (void *tag1_ = &tag1)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)commandList_, pageSize, (void *)agePrintTicketStreamRef_, tag1_, tag2_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1PrintControl::Close()</unmanaged>
        /// <unmanaged-short>ID2D1PrintControl::Close</unmanaged-short>
        public unsafe void Close()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("483473d7-cd46-4f9d-9d3a-3112aa80159d")]
    public partial class Properties : DXNET.ComObject
    {
        public Properties(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Properties(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Properties(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPropertyCount</unmanaged>
        /// <unmanaged-short>GetPropertyCount</unmanaged-short>
        public System.Int32 PropertyCount
        {
            get => GetPropertyCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1Properties::GetPropertyCount()</unmanaged>
        /// <unmanaged-short>ID2D1Properties::GetPropertyCount</unmanaged-short>
        internal unsafe System.Int32 GetPropertyCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "name">No documentation.</param>
        /// <param name = "nameCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Properties::GetPropertyName([In] unsigned int index,[Out, Buffer] wchar_t* name,[In] unsigned int nameCount)</unmanaged>
        /// <unmanaged-short>ID2D1Properties::GetPropertyName</unmanaged-short>
        internal unsafe void GetPropertyName(System.Int32 index, System.IntPtr name, System.Int32 nameCount)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, (void *)name, nameCount, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1Properties::GetPropertyNameLength([In] unsigned int index)</unmanaged>
        /// <unmanaged-short>ID2D1Properties::GetPropertyNameLength</unmanaged-short>
        internal unsafe System.Int32 GetPropertyNameLength(System.Int32 index)
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_PROPERTY_TYPE ID2D1Properties::GetType([In] unsigned int index)</unmanaged>
        /// <unmanaged-short>ID2D1Properties::GetType</unmanaged-short>
        public unsafe DXNET.Direct2D1.PropertyType GetTypeInfo(System.Int32 index)
        {
            DXNET.Direct2D1.PropertyType __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1PropertyType(this._nativePointer, index, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1Properties::GetPropertyIndex([In] const wchar_t* name)</unmanaged>
        /// <unmanaged-short>ID2D1Properties::GetPropertyIndex</unmanaged-short>
        public unsafe System.Int32 GetPropertyIndex(System.String name)
        {
            System.Int32 __result__;
            fixed (char *name_ = name)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "type">No documentation.</param>
        /// <param name = "data">No documentation.</param>
        /// <param name = "dataSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Properties::SetValueByName([In] const wchar_t* name,[In] D2D1_PROPERTY_TYPE type,[In, Buffer] const unsigned char* data,[In] unsigned int dataSize)</unmanaged>
        /// <unmanaged-short>ID2D1Properties::SetValueByName</unmanaged-short>
        public unsafe void SetValueByName(System.String name, DXNET.Direct2D1.PropertyType type, System.IntPtr data, System.Int32 dataSize)
        {
            DXNET.Result __result__;
            fixed (char *name_ = name)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, unchecked ((System.Int32)type), (void *)data, dataSize, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "type">No documentation.</param>
        /// <param name = "data">No documentation.</param>
        /// <param name = "dataSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Properties::SetValue([In] unsigned int index,[In] D2D1_PROPERTY_TYPE type,[In, Buffer] const unsigned char* data,[In] unsigned int dataSize)</unmanaged>
        /// <unmanaged-short>ID2D1Properties::SetValue</unmanaged-short>
        public unsafe void SetValue(System.Int32 index, DXNET.Direct2D1.PropertyType type, System.IntPtr data, System.Int32 dataSize)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, unchecked ((System.Int32)type), (void *)data, dataSize, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "type">No documentation.</param>
        /// <param name = "data">No documentation.</param>
        /// <param name = "dataSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Properties::GetValueByName([In] const wchar_t* name,[In] D2D1_PROPERTY_TYPE type,[Out, Buffer] unsigned char* data,[In] unsigned int dataSize)</unmanaged>
        /// <unmanaged-short>ID2D1Properties::GetValueByName</unmanaged-short>
        public unsafe void GetValueByName(System.String name, DXNET.Direct2D1.PropertyType type, System.IntPtr data, System.Int32 dataSize)
        {
            DXNET.Result __result__;
            fixed (char *name_ = name)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, unchecked ((System.Int32)type), (void *)data, dataSize, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "type">No documentation.</param>
        /// <param name = "data">No documentation.</param>
        /// <param name = "dataSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Properties::GetValue([In] unsigned int index,[In] D2D1_PROPERTY_TYPE type,[Out, Buffer] unsigned char* data,[In] unsigned int dataSize)</unmanaged>
        /// <unmanaged-short>ID2D1Properties::GetValue</unmanaged-short>
        public unsafe void GetValue(System.Int32 index, DXNET.Direct2D1.PropertyType type, System.IntPtr data, System.Int32 dataSize)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, unchecked ((System.Int32)type), (void *)data, dataSize, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1Properties::GetValueSize([In] unsigned int index)</unmanaged>
        /// <unmanaged-short>ID2D1Properties::GetValueSize</unmanaged-short>
        public unsafe System.Int32 GetValueSize(System.Int32 index)
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, (*(void ***)this._nativePointer)[12]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Properties::GetSubProperties([In] unsigned int index,[Out, Optional] ID2D1Properties** subProperties)</unmanaged>
        /// <unmanaged-short>ID2D1Properties::GetSubProperties</unmanaged-short>
        public unsafe DXNET.Direct2D1.Properties GetSubProperties(System.Int32 index)
        {
            DXNET.Direct2D1.Properties subProperties;
            System.IntPtr subProperties_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, &subProperties_, (*(void ***)this._nativePointer)[13]);
            if (subProperties_ != System.IntPtr.Zero)
                subProperties = new DXNET.Direct2D1.Properties(subProperties_);
            else
                subProperties = null;
            __result__.CheckError();
            return subProperties;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906ac-12e2-11dc-9fed-001143a055f9")]
    public partial class RadialGradientBrush : DXNET.Direct2D1.Brush
    {
        public RadialGradientBrush(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RadialGradientBrush(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RadialGradientBrush(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetCenter / SetCenter</unmanaged>
        /// <unmanaged-short>GetCenter</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Center
        {
            get => GetCenter();
            set => SetCenter(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetGradientOriginOffset / SetGradientOriginOffset</unmanaged>
        /// <unmanaged-short>GetGradientOriginOffset</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 GradientOriginOffset
        {
            get => GetGradientOriginOffset();
            set => SetGradientOriginOffset(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetRadiusX / SetRadiusX</unmanaged>
        /// <unmanaged-short>GetRadiusX</unmanaged-short>
        public System.Single RadiusX
        {
            get => GetRadiusX();
            set => SetRadiusX(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetRadiusY / SetRadiusY</unmanaged>
        /// <unmanaged-short>GetRadiusY</unmanaged-short>
        public System.Single RadiusY
        {
            get => GetRadiusY();
            set => SetRadiusY(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetGradientStopCollection</unmanaged>
        /// <unmanaged-short>GetGradientStopCollection</unmanaged-short>
        public DXNET.Direct2D1.GradientStopCollection GradientStopCollection
        {
            get
            {
                GetGradientStopCollection(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "center">No documentation.</param>
        /// <unmanaged>void ID2D1RadialGradientBrush::SetCenter([In] D2D_POINT_2F center)</unmanaged>
        /// <unmanaged-short>ID2D1RadialGradientBrush::SetCenter</unmanaged-short>
        internal unsafe void SetCenter(DXNET.Mathematics.Interop.RawVector2 center)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, center, (*(void ***)this._nativePointer)[8]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gradientOriginOffset">No documentation.</param>
        /// <unmanaged>void ID2D1RadialGradientBrush::SetGradientOriginOffset([In] D2D_POINT_2F gradientOriginOffset)</unmanaged>
        /// <unmanaged-short>ID2D1RadialGradientBrush::SetGradientOriginOffset</unmanaged-short>
        internal unsafe void SetGradientOriginOffset(DXNET.Mathematics.Interop.RawVector2 gradientOriginOffset)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, gradientOriginOffset, (*(void ***)this._nativePointer)[9]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "radiusX">No documentation.</param>
        /// <unmanaged>void ID2D1RadialGradientBrush::SetRadiusX([In] float radiusX)</unmanaged>
        /// <unmanaged-short>ID2D1RadialGradientBrush::SetRadiusX</unmanaged-short>
        internal unsafe void SetRadiusX(System.Single radiusX)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, radiusX, (*(void ***)this._nativePointer)[10]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "radiusY">No documentation.</param>
        /// <unmanaged>void ID2D1RadialGradientBrush::SetRadiusY([In] float radiusY)</unmanaged>
        /// <unmanaged-short>ID2D1RadialGradientBrush::SetRadiusY</unmanaged-short>
        internal unsafe void SetRadiusY(System.Single radiusY)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, radiusY, (*(void ***)this._nativePointer)[11]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D_POINT_2F ID2D1RadialGradientBrush::GetCenter()</unmanaged>
        /// <unmanaged-short>ID2D1RadialGradientBrush::GetCenter</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawVector2 GetCenter()
        {
            DXNET.Mathematics.Interop.RawVector2 __result__;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__, (*(void ***)this._nativePointer)[12]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D_POINT_2F ID2D1RadialGradientBrush::GetGradientOriginOffset()</unmanaged>
        /// <unmanaged-short>ID2D1RadialGradientBrush::GetGradientOriginOffset</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawVector2 GetGradientOriginOffset()
        {
            DXNET.Mathematics.Interop.RawVector2 __result__;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__, (*(void ***)this._nativePointer)[13]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float ID2D1RadialGradientBrush::GetRadiusX()</unmanaged>
        /// <unmanaged-short>ID2D1RadialGradientBrush::GetRadiusX</unmanaged-short>
        internal unsafe System.Single GetRadiusX()
        {
            System.Single __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallfloat(this._nativePointer, (*(void ***)this._nativePointer)[14]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float ID2D1RadialGradientBrush::GetRadiusY()</unmanaged>
        /// <unmanaged-short>ID2D1RadialGradientBrush::GetRadiusY</unmanaged-short>
        internal unsafe System.Single GetRadiusY()
        {
            System.Single __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallfloat(this._nativePointer, (*(void ***)this._nativePointer)[15]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gradientStopCollection">No documentation.</param>
        /// <unmanaged>void ID2D1RadialGradientBrush::GetGradientStopCollection([Out] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        /// <unmanaged-short>ID2D1RadialGradientBrush::GetGradientStopCollection</unmanaged-short>
        internal unsafe void GetGradientStopCollection(out DXNET.Direct2D1.GradientStopCollection gradientStopCollection)
        {
            System.IntPtr gradientStopCollection_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &gradientStopCollection_, (*(void ***)this._nativePointer)[16]);
            if (gradientStopCollection_ != System.IntPtr.Zero)
                gradientStopCollection = new DXNET.Direct2D1.GradientStopCollection(gradientStopCollection_);
            else
                gradientStopCollection = null;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906a2-12e2-11dc-9fed-001143a055f9")]
    public partial class RectangleGeometry : DXNET.Direct2D1.Geometry
    {
        public RectangleGeometry(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RectangleGeometry(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RectangleGeometry(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetRect</unmanaged>
        /// <unmanaged-short>GetRect</unmanaged-short>
        public DXNET.Mathematics.Interop.RawRectangleF Rectangle
        {
            get
            {
                GetRectangle(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rect">No documentation.</param>
        /// <unmanaged>void ID2D1RectangleGeometry::GetRect([Out] D2D_RECT_F* rect)</unmanaged>
        /// <unmanaged-short>ID2D1RectangleGeometry::GetRect</unmanaged-short>
        internal unsafe void GetRectangle(out DXNET.Mathematics.Interop.RawRectangleF rect)
        {
            rect = default (DXNET.Mathematics.Interop.RawRectangleF);
            fixed (void *rect_ = &rect)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, rect_, (*(void ***)this._nativePointer)[17]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("519ae1bd-d19a-420d-b849-364f594776b7")]
    public partial class RenderInformation : DXNET.ComObject
    {
        public RenderInformation(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RenderInformation(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RenderInformation(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetCached</unmanaged>
        /// <unmanaged-short>SetCached</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool Cached
        {
            set => SetCached(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetInstructionCountHint</unmanaged>
        /// <unmanaged-short>SetInstructionCountHint</unmanaged-short>
        public System.Int32 InstructionCountHint
        {
            set => SetInstructionCountHint(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "inputIndex">No documentation.</param>
        /// <param name = "inputDescription">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1RenderInfo::SetInputDescription([In] unsigned int inputIndex,[In] D2D1_INPUT_DESCRIPTION inputDescription)</unmanaged>
        /// <unmanaged-short>ID2D1RenderInfo::SetInputDescription</unmanaged-short>
        public unsafe void SetInputDescription(System.Int32 inputIndex, DXNET.Direct2D1.InputDescription inputDescription)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, inputIndex, inputDescription, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bufferPrecision">No documentation.</param>
        /// <param name = "channelDepth">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1RenderInfo::SetOutputBuffer([In] D2D1_BUFFER_PRECISION bufferPrecision,[In] D2D1_CHANNEL_DEPTH channelDepth)</unmanaged>
        /// <unmanaged-short>ID2D1RenderInfo::SetOutputBuffer</unmanaged-short>
        public unsafe void SetOutputBuffer(DXNET.Direct2D1.BufferPrecision bufferPrecision, DXNET.Direct2D1.ChannelDepth channelDepth)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)bufferPrecision), unchecked ((System.Int32)channelDepth), (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "isCached">No documentation.</param>
        /// <unmanaged>void ID2D1RenderInfo::SetCached([In] BOOL isCached)</unmanaged>
        /// <unmanaged-short>ID2D1RenderInfo::SetCached</unmanaged-short>
        internal unsafe void SetCached(DXNET.Mathematics.Interop.RawBool isCached)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, isCached, (*(void ***)this._nativePointer)[5]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "instructionCount">No documentation.</param>
        /// <unmanaged>void ID2D1RenderInfo::SetInstructionCountHint([In] unsigned int instructionCount)</unmanaged>
        /// <unmanaged-short>ID2D1RenderInfo::SetInstructionCountHint</unmanaged-short>
        internal unsafe void SetInstructionCountHint(System.Int32 instructionCount)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, instructionCount, (*(void ***)this._nativePointer)[6]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd90694-12e2-11dc-9fed-001143a055f9")]
    public partial class RenderTarget : DXNET.Direct2D1.Resource
    {
        public RenderTarget(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RenderTarget(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RenderTarget(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetTransform / SetTransform</unmanaged>
        /// <unmanaged-short>GetTransform</unmanaged-short>
        public DXNET.Mathematics.Interop.RawMatrix3x2 Transform
        {
            get
            {
                GetTransform(out var __output__);
                return __output__;
            }

            set => SetTransform(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetAntialiasMode / SetAntialiasMode</unmanaged>
        /// <unmanaged-short>GetAntialiasMode</unmanaged-short>
        public DXNET.Direct2D1.AntialiasMode AntialiasMode
        {
            get => GetAntialiasMode();
            set => SetAntialiasMode(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetTextAntialiasMode / SetTextAntialiasMode</unmanaged>
        /// <unmanaged-short>GetTextAntialiasMode</unmanaged-short>
        public DXNET.Direct2D1.TextAntialiasMode TextAntialiasMode
        {
            get => GetTextAntialiasMode();
            set => SetTextAntialiasMode(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetTextRenderingParams / SetTextRenderingParams</unmanaged>
        /// <unmanaged-short>GetTextRenderingParams</unmanaged-short>
        public DXNET.DirectWrite.RenderingParams TextRenderingParams
        {
            get
            {
                GetTextRenderingParams(out var __output__);
                return __output__;
            }

            set => SetTextRenderingParams(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPixelFormat</unmanaged>
        /// <unmanaged-short>GetPixelFormat</unmanaged-short>
        public DXNET.Direct2D1.PixelFormat PixelFormat
        {
            get => GetPixelFormat();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSize</unmanaged>
        /// <unmanaged-short>GetSize</unmanaged-short>
        public DXNET.Size2F Size
        {
            get => GetSize();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPixelSize</unmanaged>
        /// <unmanaged-short>GetPixelSize</unmanaged-short>
        public DXNET.Size2 PixelSize
        {
            get => GetPixelSize();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMaximumBitmapSize</unmanaged>
        /// <unmanaged-short>GetMaximumBitmapSize</unmanaged-short>
        public System.Int32 MaximumBitmapSize
        {
            get => GetMaximumBitmapSize();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "size">No documentation.</param>
        /// <param name = "srcData">No documentation.</param>
        /// <param name = "pitch">No documentation.</param>
        /// <param name = "bitmapProperties">No documentation.</param>
        /// <param name = "bitmap">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1RenderTarget::CreateBitmap([In] D2D_SIZE_U size,[In, Optional] const void* srcData,[In] unsigned int pitch,[In] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out, Fast] ID2D1Bitmap** bitmap)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::CreateBitmap</unmanaged-short>
        internal unsafe void CreateBitmap(DXNET.Size2 size, System.IntPtr srcData, System.Int32 pitch, DXNET.Direct2D1.BitmapProperties bitmapProperties, DXNET.Direct2D1.Bitmap bitmap)
        {
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, size, (void *)srcData, pitch, &bitmapProperties, &bitmap_, (*(void ***)this._nativePointer)[4]);
            (bitmap).NativePointer = bitmap_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "wicBitmapSource">No documentation.</param>
        /// <param name = "bitmapProperties">No documentation.</param>
        /// <param name = "bitmap">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1RenderTarget::CreateBitmapFromWicBitmap([In] IWICBitmapSource* wicBitmapSource,[In, Optional] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out] ID2D1Bitmap** bitmap)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::CreateBitmapFromWicBitmap</unmanaged-short>
        internal unsafe void CreateBitmapFromWicBitmap(DXNET.WIC.BitmapSource wicBitmapSource, DXNET.Direct2D1.BitmapProperties? bitmapProperties, out DXNET.Direct2D1.Bitmap bitmap)
        {
            System.IntPtr wicBitmapSource_ = System.IntPtr.Zero;
            DXNET.Direct2D1.BitmapProperties bitmapProperties_;
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            wicBitmapSource_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(wicBitmapSource);
            if (bitmapProperties != null)
                bitmapProperties_ = bitmapProperties.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)wicBitmapSource_, bitmapProperties == null ? (void *)0 : &bitmapProperties_, &bitmap_, (*(void ***)this._nativePointer)[5]);
            if (bitmap_ != System.IntPtr.Zero)
                bitmap = new DXNET.Direct2D1.Bitmap(bitmap_);
            else
                bitmap = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "riid">No documentation.</param>
        /// <param name = "data">No documentation.</param>
        /// <param name = "bitmapProperties">No documentation.</param>
        /// <param name = "bitmap">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1RenderTarget::CreateSharedBitmap([In] const GUID&amp; riid,[In] void* data,[In, Optional] const D2D1_BITMAP_PROPERTIES* bitmapProperties,[Out, Fast] ID2D1Bitmap** bitmap)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::CreateSharedBitmap</unmanaged-short>
        internal unsafe void CreateSharedBitmap(System.Guid riid, System.IntPtr data, DXNET.Direct2D1.BitmapProperties? bitmapProperties, DXNET.Direct2D1.Bitmap bitmap)
        {
            DXNET.Direct2D1.BitmapProperties bitmapProperties_;
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (bitmapProperties != null)
                bitmapProperties_ = bitmapProperties.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &riid, (void *)data, bitmapProperties == null ? (void *)0 : &bitmapProperties_, &bitmap_, (*(void ***)this._nativePointer)[6]);
            (bitmap).NativePointer = bitmap_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmap">No documentation.</param>
        /// <param name = "bitmapBrushProperties">No documentation.</param>
        /// <param name = "brushProperties">No documentation.</param>
        /// <param name = "bitmapBrush">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1RenderTarget::CreateBitmapBrush([In, Optional] ID2D1Bitmap* bitmap,[In, Optional] const D2D1_BITMAP_BRUSH_PROPERTIES* bitmapBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out, Fast] ID2D1BitmapBrush** bitmapBrush)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::CreateBitmapBrush</unmanaged-short>
        internal unsafe void CreateBitmapBrush(DXNET.Direct2D1.Bitmap bitmap, DXNET.Direct2D1.BitmapBrushProperties? bitmapBrushProperties, DXNET.Direct2D1.BrushProperties? brushProperties, DXNET.Direct2D1.BitmapBrush bitmapBrush)
        {
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            DXNET.Direct2D1.BitmapBrushProperties bitmapBrushProperties_;
            DXNET.Direct2D1.BrushProperties brushProperties_;
            System.IntPtr bitmapBrush_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            bitmap_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Bitmap>(bitmap);
            if (bitmapBrushProperties != null)
                bitmapBrushProperties_ = bitmapBrushProperties.Value;
            if (brushProperties != null)
                brushProperties_ = brushProperties.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bitmap_, bitmapBrushProperties == null ? (void *)0 : &bitmapBrushProperties_, brushProperties == null ? (void *)0 : &brushProperties_, &bitmapBrush_, (*(void ***)this._nativePointer)[7]);
            (bitmapBrush).NativePointer = bitmapBrush_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "color">No documentation.</param>
        /// <param name = "brushProperties">No documentation.</param>
        /// <param name = "solidColorBrush">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1RenderTarget::CreateSolidColorBrush([In] const D2D_COLOR_F* color,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[Out, Fast] ID2D1SolidColorBrush** solidColorBrush)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::CreateSolidColorBrush</unmanaged-short>
        internal unsafe void CreateSolidColorBrush(DXNET.Mathematics.Interop.RawColor4 color, DXNET.Direct2D1.BrushProperties? brushProperties, DXNET.Direct2D1.SolidColorBrush solidColorBrush)
        {
            DXNET.Direct2D1.BrushProperties brushProperties_;
            System.IntPtr solidColorBrush_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (brushProperties != null)
                brushProperties_ = brushProperties.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &color, brushProperties == null ? (void *)0 : &brushProperties_, &solidColorBrush_, (*(void ***)this._nativePointer)[8]);
            (solidColorBrush).NativePointer = solidColorBrush_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gradientStops">No documentation.</param>
        /// <param name = "gradientStopsCount">No documentation.</param>
        /// <param name = "colorInterpolationGamma">No documentation.</param>
        /// <param name = "extendMode">No documentation.</param>
        /// <param name = "gradientStopCollection">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1RenderTarget::CreateGradientStopCollection([In, Buffer] const D2D1_GRADIENT_STOP* gradientStops,[In] unsigned int gradientStopsCount,[In] D2D1_GAMMA colorInterpolationGamma,[In] D2D1_EXTEND_MODE extendMode,[Out, Fast] ID2D1GradientStopCollection** gradientStopCollection)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::CreateGradientStopCollection</unmanaged-short>
        internal unsafe void CreateGradientStopCollection(DXNET.Direct2D1.GradientStop[] gradientStops, System.Int32 gradientStopsCount, DXNET.Direct2D1.Gamma colorInterpolationGamma, DXNET.Direct2D1.ExtendMode extendMode, DXNET.Direct2D1.GradientStopCollection gradientStopCollection)
        {
            System.IntPtr gradientStopCollection_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *gradientStops_ = gradientStops)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, gradientStops_, gradientStopsCount, unchecked ((System.Int32)colorInterpolationGamma), unchecked ((System.Int32)extendMode), &gradientStopCollection_, (*(void ***)this._nativePointer)[9]);
            (gradientStopCollection).NativePointer = gradientStopCollection_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "linearGradientBrushProperties">No documentation.</param>
        /// <param name = "brushProperties">No documentation.</param>
        /// <param name = "gradientStopCollection">No documentation.</param>
        /// <param name = "linearGradientBrush">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1RenderTarget::CreateLinearGradientBrush([In] const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES* linearGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out, Fast] ID2D1LinearGradientBrush** linearGradientBrush)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::CreateLinearGradientBrush</unmanaged-short>
        internal unsafe void CreateLinearGradientBrush(DXNET.Direct2D1.LinearGradientBrushProperties linearGradientBrushProperties, DXNET.Direct2D1.BrushProperties? brushProperties, DXNET.Direct2D1.GradientStopCollection gradientStopCollection, DXNET.Direct2D1.LinearGradientBrush linearGradientBrush)
        {
            DXNET.Direct2D1.BrushProperties brushProperties_;
            System.IntPtr gradientStopCollection_ = System.IntPtr.Zero;
            System.IntPtr linearGradientBrush_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (brushProperties != null)
                brushProperties_ = brushProperties.Value;
            gradientStopCollection_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.GradientStopCollection>(gradientStopCollection);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &linearGradientBrushProperties, brushProperties == null ? (void *)0 : &brushProperties_, (void *)gradientStopCollection_, &linearGradientBrush_, (*(void ***)this._nativePointer)[10]);
            (linearGradientBrush).NativePointer = linearGradientBrush_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "radialGradientBrushProperties">No documentation.</param>
        /// <param name = "brushProperties">No documentation.</param>
        /// <param name = "gradientStopCollection">No documentation.</param>
        /// <param name = "radialGradientBrush">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1RenderTarget::CreateRadialGradientBrush([In] const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES* radialGradientBrushProperties,[In, Optional] const D2D1_BRUSH_PROPERTIES* brushProperties,[In] ID2D1GradientStopCollection* gradientStopCollection,[Out, Fast] ID2D1RadialGradientBrush** radialGradientBrush)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::CreateRadialGradientBrush</unmanaged-short>
        internal unsafe void CreateRadialGradientBrush(ref DXNET.Direct2D1.RadialGradientBrushProperties radialGradientBrushProperties, DXNET.Direct2D1.BrushProperties? brushProperties, DXNET.Direct2D1.GradientStopCollection gradientStopCollection, DXNET.Direct2D1.RadialGradientBrush radialGradientBrush)
        {
            DXNET.Direct2D1.BrushProperties brushProperties_;
            System.IntPtr gradientStopCollection_ = System.IntPtr.Zero;
            System.IntPtr radialGradientBrush_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (brushProperties != null)
                brushProperties_ = brushProperties.Value;
            gradientStopCollection_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.GradientStopCollection>(gradientStopCollection);
            fixed (void *radialGradientBrushProperties_ = &radialGradientBrushProperties)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, radialGradientBrushProperties_, brushProperties == null ? (void *)0 : &brushProperties_, (void *)gradientStopCollection_, &radialGradientBrush_, (*(void ***)this._nativePointer)[11]);
            (radialGradientBrush).NativePointer = radialGradientBrush_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "desiredSize">No documentation.</param>
        /// <param name = "desiredPixelSize">No documentation.</param>
        /// <param name = "desiredFormat">No documentation.</param>
        /// <param name = "options">No documentation.</param>
        /// <param name = "bitmapRenderTarget">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1RenderTarget::CreateCompatibleRenderTarget([In, Optional] const D2D_SIZE_F* desiredSize,[In, Optional] const D2D_SIZE_U* desiredPixelSize,[In, Optional] const D2D1_PIXEL_FORMAT* desiredFormat,[In] D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,[Out, Fast] ID2D1BitmapRenderTarget** bitmapRenderTarget)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::CreateCompatibleRenderTarget</unmanaged-short>
        internal unsafe void CreateCompatibleRenderTarget(DXNET.Size2F? desiredSize, DXNET.Size2? desiredPixelSize, DXNET.Direct2D1.PixelFormat? desiredFormat, DXNET.Direct2D1.CompatibleRenderTargetOptions options, DXNET.Direct2D1.BitmapRenderTarget bitmapRenderTarget)
        {
            DXNET.Size2F desiredSize_;
            DXNET.Size2 desiredPixelSize_;
            DXNET.Direct2D1.PixelFormat desiredFormat_;
            System.IntPtr bitmapRenderTarget_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (desiredSize != null)
                desiredSize_ = desiredSize.Value;
            if (desiredPixelSize != null)
                desiredPixelSize_ = desiredPixelSize.Value;
            if (desiredFormat != null)
                desiredFormat_ = desiredFormat.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, desiredSize == null ? (void *)0 : &desiredSize_, desiredPixelSize == null ? (void *)0 : &desiredPixelSize_, desiredFormat == null ? (void *)0 : &desiredFormat_, unchecked ((System.Int32)options), &bitmapRenderTarget_, (*(void ***)this._nativePointer)[12]);
            (bitmapRenderTarget).NativePointer = bitmapRenderTarget_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "size">No documentation.</param>
        /// <param name = "layer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1RenderTarget::CreateLayer([In, Optional] const D2D_SIZE_F* size,[Out, Fast] ID2D1Layer** layer)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::CreateLayer</unmanaged-short>
        internal unsafe void CreateLayer(DXNET.Size2F? size, DXNET.Direct2D1.Layer layer)
        {
            DXNET.Size2F size_;
            System.IntPtr layer_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (size != null)
                size_ = size.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, size == null ? (void *)0 : &size_, &layer_, (*(void ***)this._nativePointer)[13]);
            (layer).NativePointer = layer_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "mesh">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1RenderTarget::CreateMesh([Out, Fast] ID2D1Mesh** mesh)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::CreateMesh</unmanaged-short>
        internal unsafe void CreateMesh(DXNET.Direct2D1.Mesh mesh)
        {
            System.IntPtr mesh_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &mesh_, (*(void ***)this._nativePointer)[14]);
            (mesh).NativePointer = mesh_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "point0">No documentation.</param>
        /// <param name = "point1">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "strokeWidth">No documentation.</param>
        /// <param name = "strokeStyle">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::DrawLine([In] D2D_POINT_2F point0,[In] D2D_POINT_2F point1,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::DrawLine</unmanaged-short>
        public unsafe void DrawLine(DXNET.Mathematics.Interop.RawVector2 point0, DXNET.Mathematics.Interop.RawVector2 point1, DXNET.Direct2D1.Brush brush, System.Single strokeWidth, DXNET.Direct2D1.StrokeStyle strokeStyle)
        {
            System.IntPtr brush_ = System.IntPtr.Zero;
            System.IntPtr strokeStyle_ = System.IntPtr.Zero;
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            strokeStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.StrokeStyle>(strokeStyle);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, point0, point1, (void *)brush_, strokeWidth, (void *)strokeStyle_, (*(void ***)this._nativePointer)[15]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rect">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "strokeWidth">No documentation.</param>
        /// <param name = "strokeStyle">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::DrawRectangle([In] const D2D_RECT_F* rect,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::DrawRectangle</unmanaged-short>
        public unsafe void DrawRectangle(DXNET.Mathematics.Interop.RawRectangleF rect, DXNET.Direct2D1.Brush brush, System.Single strokeWidth, DXNET.Direct2D1.StrokeStyle strokeStyle)
        {
            System.IntPtr brush_ = System.IntPtr.Zero;
            System.IntPtr strokeStyle_ = System.IntPtr.Zero;
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            strokeStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.StrokeStyle>(strokeStyle);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &rect, (void *)brush_, strokeWidth, (void *)strokeStyle_, (*(void ***)this._nativePointer)[16]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rect">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::FillRectangle([In] const D2D_RECT_F* rect,[In] ID2D1Brush* brush)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::FillRectangle</unmanaged-short>
        public unsafe void FillRectangle(DXNET.Mathematics.Interop.RawRectangleF rect, DXNET.Direct2D1.Brush brush)
        {
            System.IntPtr brush_ = System.IntPtr.Zero;
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &rect, (void *)brush_, (*(void ***)this._nativePointer)[17]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "roundedRect">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "strokeWidth">No documentation.</param>
        /// <param name = "strokeStyle">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::DrawRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::DrawRoundedRectangle</unmanaged-short>
        public unsafe void DrawRoundedRectangle(ref DXNET.Direct2D1.RoundedRectangle roundedRect, DXNET.Direct2D1.Brush brush, System.Single strokeWidth, DXNET.Direct2D1.StrokeStyle strokeStyle)
        {
            System.IntPtr brush_ = System.IntPtr.Zero;
            System.IntPtr strokeStyle_ = System.IntPtr.Zero;
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            strokeStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.StrokeStyle>(strokeStyle);
            fixed (void *roundedRect_ = &roundedRect)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, roundedRect_, (void *)brush_, strokeWidth, (void *)strokeStyle_, (*(void ***)this._nativePointer)[18]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "roundedRect">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::FillRoundedRectangle([In] const D2D1_ROUNDED_RECT* roundedRect,[In] ID2D1Brush* brush)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::FillRoundedRectangle</unmanaged-short>
        public unsafe void FillRoundedRectangle(ref DXNET.Direct2D1.RoundedRectangle roundedRect, DXNET.Direct2D1.Brush brush)
        {
            System.IntPtr brush_ = System.IntPtr.Zero;
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            fixed (void *roundedRect_ = &roundedRect)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, roundedRect_, (void *)brush_, (*(void ***)this._nativePointer)[19]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ellipse">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "strokeWidth">No documentation.</param>
        /// <param name = "strokeStyle">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::DrawEllipse([In] const D2D1_ELLIPSE* ellipse,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::DrawEllipse</unmanaged-short>
        public unsafe void DrawEllipse(DXNET.Direct2D1.Ellipse ellipse, DXNET.Direct2D1.Brush brush, System.Single strokeWidth, DXNET.Direct2D1.StrokeStyle strokeStyle)
        {
            System.IntPtr brush_ = System.IntPtr.Zero;
            System.IntPtr strokeStyle_ = System.IntPtr.Zero;
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            strokeStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.StrokeStyle>(strokeStyle);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &ellipse, (void *)brush_, strokeWidth, (void *)strokeStyle_, (*(void ***)this._nativePointer)[20]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ellipse">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::FillEllipse([In] const D2D1_ELLIPSE* ellipse,[In] ID2D1Brush* brush)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::FillEllipse</unmanaged-short>
        public unsafe void FillEllipse(DXNET.Direct2D1.Ellipse ellipse, DXNET.Direct2D1.Brush brush)
        {
            System.IntPtr brush_ = System.IntPtr.Zero;
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &ellipse, (void *)brush_, (*(void ***)this._nativePointer)[21]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "geometry">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "strokeWidth">No documentation.</param>
        /// <param name = "strokeStyle">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::DrawGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[In] float strokeWidth,[In, Optional] ID2D1StrokeStyle* strokeStyle)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::DrawGeometry</unmanaged-short>
        public unsafe void DrawGeometry(DXNET.Direct2D1.Geometry geometry, DXNET.Direct2D1.Brush brush, System.Single strokeWidth, DXNET.Direct2D1.StrokeStyle strokeStyle)
        {
            System.IntPtr geometry_ = System.IntPtr.Zero;
            System.IntPtr brush_ = System.IntPtr.Zero;
            System.IntPtr strokeStyle_ = System.IntPtr.Zero;
            geometry_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Geometry>(geometry);
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            strokeStyle_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.StrokeStyle>(strokeStyle);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)geometry_, (void *)brush_, strokeWidth, (void *)strokeStyle_, (*(void ***)this._nativePointer)[22]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "geometry">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "opacityBrush">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::FillGeometry([In] ID2D1Geometry* geometry,[In] ID2D1Brush* brush,[In, Optional] ID2D1Brush* opacityBrush)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::FillGeometry</unmanaged-short>
        public unsafe void FillGeometry(DXNET.Direct2D1.Geometry geometry, DXNET.Direct2D1.Brush brush, DXNET.Direct2D1.Brush opacityBrush)
        {
            System.IntPtr geometry_ = System.IntPtr.Zero;
            System.IntPtr brush_ = System.IntPtr.Zero;
            System.IntPtr opacityBrush_ = System.IntPtr.Zero;
            geometry_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Geometry>(geometry);
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            opacityBrush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(opacityBrush);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)geometry_, (void *)brush_, (void *)opacityBrush_, (*(void ***)this._nativePointer)[23]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "mesh">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::FillMesh([In] ID2D1Mesh* mesh,[In] ID2D1Brush* brush)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::FillMesh</unmanaged-short>
        public unsafe void FillMesh(DXNET.Direct2D1.Mesh mesh, DXNET.Direct2D1.Brush brush)
        {
            System.IntPtr mesh_ = System.IntPtr.Zero;
            System.IntPtr brush_ = System.IntPtr.Zero;
            mesh_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Mesh>(mesh);
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)mesh_, (void *)brush_, (*(void ***)this._nativePointer)[24]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "opacityMask">No documentation.</param>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "content">No documentation.</param>
        /// <param name = "destinationRectangle">No documentation.</param>
        /// <param name = "sourceRectangle">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::FillOpacityMask([In] ID2D1Bitmap* opacityMask,[In] ID2D1Brush* brush,[In] D2D1_OPACITY_MASK_CONTENT content,[In, Optional] const D2D_RECT_F* destinationRectangle,[In, Optional] const D2D_RECT_F* sourceRectangle)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::FillOpacityMask</unmanaged-short>
        public unsafe void FillOpacityMask(DXNET.Direct2D1.Bitmap opacityMask, DXNET.Direct2D1.Brush brush, DXNET.Direct2D1.OpacityMaskContent content, DXNET.Mathematics.Interop.RawRectangleF? destinationRectangle, DXNET.Mathematics.Interop.RawRectangleF? sourceRectangle)
        {
            System.IntPtr opacityMask_ = System.IntPtr.Zero;
            System.IntPtr brush_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawRectangleF destinationRectangle_;
            DXNET.Mathematics.Interop.RawRectangleF sourceRectangle_;
            opacityMask_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Bitmap>(opacityMask);
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            if (destinationRectangle != null)
                destinationRectangle_ = destinationRectangle.Value;
            if (sourceRectangle != null)
                sourceRectangle_ = sourceRectangle.Value;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)opacityMask_, (void *)brush_, unchecked ((System.Int32)content), destinationRectangle == null ? (void *)0 : &destinationRectangle_, sourceRectangle == null ? (void *)0 : &sourceRectangle_, (*(void ***)this._nativePointer)[25]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmap">No documentation.</param>
        /// <param name = "destinationRectangle">No documentation.</param>
        /// <param name = "opacity">No documentation.</param>
        /// <param name = "interpolationMode">No documentation.</param>
        /// <param name = "sourceRectangle">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::DrawBitmap([In] ID2D1Bitmap* bitmap,[In, Optional] const D2D_RECT_F* destinationRectangle,[In] float opacity,[In] D2D1_BITMAP_INTERPOLATION_MODE interpolationMode,[In, Optional] const D2D_RECT_F* sourceRectangle)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::DrawBitmap</unmanaged-short>
        public unsafe void DrawBitmap(DXNET.Direct2D1.Bitmap bitmap, DXNET.Mathematics.Interop.RawRectangleF? destinationRectangle, System.Single opacity, DXNET.Direct2D1.BitmapInterpolationMode interpolationMode, DXNET.Mathematics.Interop.RawRectangleF? sourceRectangle)
        {
            System.IntPtr bitmap_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawRectangleF destinationRectangle_;
            DXNET.Mathematics.Interop.RawRectangleF sourceRectangle_;
            bitmap_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Bitmap>(bitmap);
            if (destinationRectangle != null)
                destinationRectangle_ = destinationRectangle.Value;
            if (sourceRectangle != null)
                sourceRectangle_ = sourceRectangle.Value;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)bitmap_, destinationRectangle == null ? (void *)0 : &destinationRectangle_, opacity, unchecked ((System.Int32)interpolationMode), sourceRectangle == null ? (void *)0 : &sourceRectangle_, (*(void ***)this._nativePointer)[26]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "text">No documentation.</param>
        /// <param name = "stringLength">No documentation.</param>
        /// <param name = "textFormat">No documentation.</param>
        /// <param name = "layoutRect">No documentation.</param>
        /// <param name = "defaultFillBrush">No documentation.</param>
        /// <param name = "options">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::DrawTextW([In, Buffer] const wchar_t* string,[In] unsigned int stringLength,[In] IDWriteTextFormat* textFormat,[In] const D2D_RECT_F* layoutRect,[In] ID2D1Brush* defaultFillBrush,[In] D2D1_DRAW_TEXT_OPTIONS options,[In] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::DrawTextW</unmanaged-short>
        public unsafe void DrawText(System.String text, System.Int32 stringLength, DXNET.DirectWrite.TextFormat textFormat, DXNET.Mathematics.Interop.RawRectangleF layoutRect, DXNET.Direct2D1.Brush defaultFillBrush, DXNET.Direct2D1.DrawTextOptions options, DXNET.Direct2D1.MeasuringMode measuringMode)
        {
            System.IntPtr textFormat_ = System.IntPtr.Zero;
            System.IntPtr defaultFillBrush_ = System.IntPtr.Zero;
            textFormat_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextFormat>(textFormat);
            defaultFillBrush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(defaultFillBrush);
            fixed (char *text_ = text)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)text_, stringLength, (void *)textFormat_, &layoutRect, (void *)defaultFillBrush_, unchecked ((System.Int32)options), unchecked ((System.Int32)measuringMode), (*(void ***)this._nativePointer)[27]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "origin">No documentation.</param>
        /// <param name = "textLayout">No documentation.</param>
        /// <param name = "defaultFillBrush">No documentation.</param>
        /// <param name = "options">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::DrawTextLayout([In] D2D_POINT_2F origin,[In] IDWriteTextLayout* textLayout,[In] ID2D1Brush* defaultFillBrush,[In] D2D1_DRAW_TEXT_OPTIONS options)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::DrawTextLayout</unmanaged-short>
        public unsafe void DrawTextLayout(DXNET.Mathematics.Interop.RawVector2 origin, DXNET.DirectWrite.TextLayout textLayout, DXNET.Direct2D1.Brush defaultFillBrush, DXNET.Direct2D1.DrawTextOptions options)
        {
            System.IntPtr textLayout_ = System.IntPtr.Zero;
            System.IntPtr defaultFillBrush_ = System.IntPtr.Zero;
            textLayout_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextLayout>(textLayout);
            defaultFillBrush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(defaultFillBrush);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, origin, (void *)textLayout_, (void *)defaultFillBrush_, unchecked ((System.Int32)options), (*(void ***)this._nativePointer)[28]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "baselineOrigin">No documentation.</param>
        /// <param name = "glyphRun">No documentation.</param>
        /// <param name = "foregroundBrush">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::DrawGlyphRun([In] D2D_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] ID2D1Brush* foregroundBrush,[In] DWRITE_MEASURING_MODE measuringMode)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::DrawGlyphRun</unmanaged-short>
        public unsafe void DrawGlyphRun(DXNET.Mathematics.Interop.RawVector2 baselineOrigin, DXNET.DirectWrite.GlyphRun glyphRun, DXNET.Direct2D1.Brush foregroundBrush, DXNET.Direct2D1.MeasuringMode measuringMode)
        {
            DXNET.DirectWrite.GlyphRun.__Native glyphRun_ = default (DXNET.DirectWrite.GlyphRun.__Native);
            System.IntPtr foregroundBrush_ = System.IntPtr.Zero;
            glyphRun.__MarshalTo(ref glyphRun_);
            foregroundBrush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(foregroundBrush);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, baselineOrigin, &glyphRun_, (void *)foregroundBrush_, unchecked ((System.Int32)measuringMode), (*(void ***)this._nativePointer)[29]);
            glyphRun.__MarshalFree(ref glyphRun_);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "transform">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::SetTransform([In] const D2D_MATRIX_3X2_F* transform)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::SetTransform</unmanaged-short>
        internal unsafe void SetTransform(ref DXNET.Mathematics.Interop.RawMatrix3x2 transform)
        {
            fixed (void *transform_ = &transform)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, transform_, (*(void ***)this._nativePointer)[30]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "transform">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::GetTransform([Out] D2D_MATRIX_3X2_F* transform)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::GetTransform</unmanaged-short>
        internal unsafe void GetTransform(out DXNET.Mathematics.Interop.RawMatrix3x2 transform)
        {
            transform = default (DXNET.Mathematics.Interop.RawMatrix3x2);
            fixed (void *transform_ = &transform)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, transform_, (*(void ***)this._nativePointer)[31]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "antialiasMode">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::SetAntialiasMode([In] D2D1_ANTIALIAS_MODE antialiasMode)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::SetAntialiasMode</unmanaged-short>
        internal unsafe void SetAntialiasMode(DXNET.Direct2D1.AntialiasMode antialiasMode)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)antialiasMode), (*(void ***)this._nativePointer)[32]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_ANTIALIAS_MODE ID2D1RenderTarget::GetAntialiasMode()</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::GetAntialiasMode</unmanaged-short>
        internal unsafe DXNET.Direct2D1.AntialiasMode GetAntialiasMode()
        {
            DXNET.Direct2D1.AntialiasMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1AntialiasMode(this._nativePointer, (*(void ***)this._nativePointer)[33]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textAntialiasMode">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::SetTextAntialiasMode([In] D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::SetTextAntialiasMode</unmanaged-short>
        internal unsafe void SetTextAntialiasMode(DXNET.Direct2D1.TextAntialiasMode textAntialiasMode)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)textAntialiasMode), (*(void ***)this._nativePointer)[34]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE ID2D1RenderTarget::GetTextAntialiasMode()</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::GetTextAntialiasMode</unmanaged-short>
        internal unsafe DXNET.Direct2D1.TextAntialiasMode GetTextAntialiasMode()
        {
            DXNET.Direct2D1.TextAntialiasMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1TextAntialiasMode(this._nativePointer, (*(void ***)this._nativePointer)[35]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textRenderingParams">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::SetTextRenderingParams([In, Optional] IDWriteRenderingParams* textRenderingParams)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::SetTextRenderingParams</unmanaged-short>
        internal unsafe void SetTextRenderingParams(DXNET.DirectWrite.RenderingParams textRenderingParams)
        {
            System.IntPtr textRenderingParams_ = System.IntPtr.Zero;
            textRenderingParams_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.RenderingParams>(textRenderingParams);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)textRenderingParams_, (*(void ***)this._nativePointer)[36]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textRenderingParams">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::GetTextRenderingParams([Out, Optional] IDWriteRenderingParams** textRenderingParams)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::GetTextRenderingParams</unmanaged-short>
        internal unsafe void GetTextRenderingParams(out DXNET.DirectWrite.RenderingParams textRenderingParams)
        {
            System.IntPtr textRenderingParams_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &textRenderingParams_, (*(void ***)this._nativePointer)[37]);
            if (textRenderingParams_ != System.IntPtr.Zero)
                textRenderingParams = new DXNET.DirectWrite.RenderingParams(textRenderingParams_);
            else
                textRenderingParams = null;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "tag1">No documentation.</param>
        /// <param name = "tag2">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::SetTags([In] unsigned longlong tag1,[In] unsigned longlong tag2)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::SetTags</unmanaged-short>
        public unsafe void SetTags(System.Int64 tag1, System.Int64 tag2)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, tag1, tag2, (*(void ***)this._nativePointer)[38]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "tag1">No documentation.</param>
        /// <param name = "tag2">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::GetTags([Out, Optional] unsigned longlong* tag1,[Out, Optional] unsigned longlong* tag2)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::GetTags</unmanaged-short>
        public unsafe void GetTags(out System.Int64 tag1, out System.Int64 tag2)
        {
            fixed (void *tag2_ = &tag2)
                fixed (void *tag1_ = &tag1)
                    DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, tag1_, tag2_, (*(void ***)this._nativePointer)[39]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "layerParameters">No documentation.</param>
        /// <param name = "layer">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::PushLayer([In] const D2D1_LAYER_PARAMETERS* layerParameters,[In, Optional] ID2D1Layer* layer)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::PushLayer</unmanaged-short>
        public unsafe void PushLayer(ref DXNET.Direct2D1.LayerParameters layerParameters, DXNET.Direct2D1.Layer layer)
        {
            DXNET.Direct2D1.LayerParameters.__Native layerParameters_ = default (DXNET.Direct2D1.LayerParameters.__Native);
            System.IntPtr layer_ = System.IntPtr.Zero;
            layerParameters.__MarshalTo(ref layerParameters_);
            layer_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Layer>(layer);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &layerParameters_, (void *)layer_, (*(void ***)this._nativePointer)[40]);
            layerParameters.__MarshalFree(ref layerParameters_);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>void ID2D1RenderTarget::PopLayer()</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::PopLayer</unmanaged-short>
        public unsafe void PopLayer()
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[41]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "tag1">No documentation.</param>
        /// <param name = "tag2">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1RenderTarget::Flush([Out, Optional] unsigned longlong* tag1,[Out, Optional] unsigned longlong* tag2)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::Flush</unmanaged-short>
        public unsafe void Flush(out System.Int64 tag1, out System.Int64 tag2)
        {
            DXNET.Result __result__;
            fixed (void *tag2_ = &tag2)
                fixed (void *tag1_ = &tag1)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, tag1_, tag2_, (*(void ***)this._nativePointer)[42]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "drawingStateBlock">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::SaveDrawingState([InOut] ID2D1DrawingStateBlock* drawingStateBlock)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::SaveDrawingState</unmanaged-short>
        public unsafe void SaveDrawingState(DXNET.Direct2D1.DrawingStateBlock drawingStateBlock)
        {
            System.IntPtr drawingStateBlock_ = System.IntPtr.Zero;
            drawingStateBlock_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.DrawingStateBlock>(drawingStateBlock);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)drawingStateBlock_, (*(void ***)this._nativePointer)[43]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "drawingStateBlock">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::RestoreDrawingState([In] ID2D1DrawingStateBlock* drawingStateBlock)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::RestoreDrawingState</unmanaged-short>
        public unsafe void RestoreDrawingState(DXNET.Direct2D1.DrawingStateBlock drawingStateBlock)
        {
            System.IntPtr drawingStateBlock_ = System.IntPtr.Zero;
            drawingStateBlock_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.DrawingStateBlock>(drawingStateBlock);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)drawingStateBlock_, (*(void ***)this._nativePointer)[44]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "clipRect">No documentation.</param>
        /// <param name = "antialiasMode">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::PushAxisAlignedClip([In] const D2D_RECT_F* clipRect,[In] D2D1_ANTIALIAS_MODE antialiasMode)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::PushAxisAlignedClip</unmanaged-short>
        public unsafe void PushAxisAlignedClip(DXNET.Mathematics.Interop.RawRectangleF clipRect, DXNET.Direct2D1.AntialiasMode antialiasMode)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &clipRect, unchecked ((System.Int32)antialiasMode), (*(void ***)this._nativePointer)[45]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>void ID2D1RenderTarget::PopAxisAlignedClip()</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::PopAxisAlignedClip</unmanaged-short>
        public unsafe void PopAxisAlignedClip()
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[46]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "clearColor">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::Clear([In, Optional] const D2D_COLOR_F* clearColor)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::Clear</unmanaged-short>
        public unsafe void Clear(DXNET.Mathematics.Interop.RawColor4? clearColor)
        {
            DXNET.Mathematics.Interop.RawColor4 clearColor_;
            if (clearColor != null)
                clearColor_ = clearColor.Value;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, clearColor == null ? (void *)0 : &clearColor_, (*(void ***)this._nativePointer)[47]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>void ID2D1RenderTarget::BeginDraw()</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::BeginDraw</unmanaged-short>
        public unsafe void BeginDraw()
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[48]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "tag1">No documentation.</param>
        /// <param name = "tag2">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1RenderTarget::EndDraw([Out, Optional] unsigned longlong* tag1,[Out, Optional] unsigned longlong* tag2)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::EndDraw</unmanaged-short>
        public unsafe DXNET.Result TryEndDraw(out System.Int64 tag1, out System.Int64 tag2)
        {
            DXNET.Result __result__;
            fixed (void *tag2_ = &tag2)
                fixed (void *tag1_ = &tag1)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, tag1_, tag2_, (*(void ***)this._nativePointer)[49]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_PIXEL_FORMAT ID2D1RenderTarget::GetPixelFormat()</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::GetPixelFormat</unmanaged-short>
        internal unsafe DXNET.Direct2D1.PixelFormat GetPixelFormat()
        {
            DXNET.Direct2D1.PixelFormat __result__;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__, (*(void ***)this._nativePointer)[50]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dpiX">No documentation.</param>
        /// <param name = "dpiY">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::SetDpi([In] float dpiX,[In] float dpiY)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::SetDpi</unmanaged-short>
        internal unsafe void SetDpi(System.Single dpiX, System.Single dpiY)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, dpiX, dpiY, (*(void ***)this._nativePointer)[51]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dpiX">No documentation.</param>
        /// <param name = "dpiY">No documentation.</param>
        /// <unmanaged>void ID2D1RenderTarget::GetDpi([Out] float* dpiX,[Out] float* dpiY)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::GetDpi</unmanaged-short>
        internal unsafe void GetDpi(out System.Single dpiX, out System.Single dpiY)
        {
            fixed (void *dpiY_ = &dpiY)
                fixed (void *dpiX_ = &dpiX)
                    DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, dpiX_, dpiY_, (*(void ***)this._nativePointer)[52]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D_SIZE_F ID2D1RenderTarget::GetSize()</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::GetSize</unmanaged-short>
        internal unsafe DXNET.Size2F GetSize()
        {
            DXNET.Size2F __result__;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__, (*(void ***)this._nativePointer)[53]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D_SIZE_U ID2D1RenderTarget::GetPixelSize()</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::GetPixelSize</unmanaged-short>
        internal unsafe DXNET.Size2 GetPixelSize()
        {
            DXNET.Size2 __result__;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__, (*(void ***)this._nativePointer)[54]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1RenderTarget::GetMaximumBitmapSize()</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::GetMaximumBitmapSize</unmanaged-short>
        internal unsafe System.Int32 GetMaximumBitmapSize()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[55]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "renderTargetProperties">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL ID2D1RenderTarget::IsSupported([In] const D2D1_RENDER_TARGET_PROPERTIES* renderTargetProperties)</unmanaged>
        /// <unmanaged-short>ID2D1RenderTarget::IsSupported</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool IsSupported(ref DXNET.Direct2D1.RenderTargetProperties renderTargetProperties)
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            fixed (void *renderTargetProperties_ = &renderTargetProperties)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, renderTargetProperties_, (*(void ***)this._nativePointer)[56]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd90691-12e2-11dc-9fed-001143a055f9")]
    public partial class Resource : DXNET.ComObject
    {
        public Resource(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Resource(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Resource(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFactory</unmanaged>
        /// <unmanaged-short>GetFactory</unmanaged-short>
        public DXNET.Direct2D1.Factory Factory
        {
            get
            {
                GetFactory(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "factory">No documentation.</param>
        /// <unmanaged>void ID2D1Resource::GetFactory([Out] ID2D1Factory** factory)</unmanaged>
        /// <unmanaged-short>ID2D1Resource::GetFactory</unmanaged-short>
        internal unsafe void GetFactory(out DXNET.Direct2D1.Factory factory)
        {
            System.IntPtr factory_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &factory_, (*(void ***)this._nativePointer)[3]);
            if (factory_ != System.IntPtr.Zero)
                factory = new DXNET.Direct2D1.Factory(factory_);
            else
                factory = null;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("688d15c3-02b0-438d-b13a-d1b44c32c39a")]
    public partial class ResourceTexture : DXNET.ComObject
    {
        public ResourceTexture(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ResourceTexture(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ResourceTexture(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "minimumExtents">No documentation.</param>
        /// <param name = "maximimumExtents">No documentation.</param>
        /// <param name = "strides">No documentation.</param>
        /// <param name = "dimensions">No documentation.</param>
        /// <param name = "data">No documentation.</param>
        /// <param name = "dataCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1ResourceTexture::Update([In, Buffer, Optional] const unsigned int* minimumExtents,[In, Buffer, Optional] const unsigned int* maximimumExtents,[In, Buffer, Optional] const unsigned int* strides,[In] unsigned int dimensions,[In, Buffer] const unsigned char* data,[In] unsigned int dataCount)</unmanaged>
        /// <unmanaged-short>ID2D1ResourceTexture::Update</unmanaged-short>
        public unsafe void Update(System.Int32[] minimumExtents, System.Int32[] maximimumExtents, System.Int32[] strides, System.Int32 dimensions, System.Byte[] data, System.Int32 dataCount)
        {
            DXNET.Result __result__;
            fixed (void *data_ = data)
                fixed (void *strides_ = strides)
                    fixed (void *maximimumExtents_ = maximimumExtents)
                        fixed (void *minimumExtents_ = minimumExtents)
                            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, minimumExtents_, maximimumExtents_, strides_, dimensions, data_, dataCount, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906a3-12e2-11dc-9fed-001143a055f9")]
    public partial class RoundedRectangleGeometry : DXNET.Direct2D1.Geometry
    {
        public RoundedRectangleGeometry(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RoundedRectangleGeometry(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RoundedRectangleGeometry(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetRoundedRect</unmanaged>
        /// <unmanaged-short>GetRoundedRect</unmanaged-short>
        public DXNET.Direct2D1.RoundedRectangle RoundedRect
        {
            get
            {
                GetRoundedRect(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "roundedRect">No documentation.</param>
        /// <unmanaged>void ID2D1RoundedRectangleGeometry::GetRoundedRect([Out] D2D1_ROUNDED_RECT* roundedRect)</unmanaged>
        /// <unmanaged-short>ID2D1RoundedRectangleGeometry::GetRoundedRect</unmanaged-short>
        internal unsafe void GetRoundedRect(out DXNET.Direct2D1.RoundedRectangle roundedRect)
        {
            roundedRect = default (DXNET.Direct2D1.RoundedRectangle);
            fixed (void *roundedRect_ = &roundedRect)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, roundedRect_, (*(void ***)this._nativePointer)[17]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd9069e-12e2-11dc-9fed-001143a055f9")]
    public partial interface SimplifiedGeometrySink : DXNET.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd9069e-12e2-11dc-9fed-001143a055f9")]
    internal partial class SimplifiedGeometrySinkNative : DXNET.ComObject, DXNET.Direct2D1.SimplifiedGeometrySink
    {
        public SimplifiedGeometrySinkNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SimplifiedGeometrySinkNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SimplifiedGeometrySinkNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetFillMode</unmanaged>
        /// <unmanaged-short>SetFillMode</unmanaged-short>
        public DXNET.Direct2D1.FillMode FillMode_
        {
            set => SetFillMode_(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetSegmentFlags</unmanaged>
        /// <unmanaged-short>SetSegmentFlags</unmanaged-short>
        public DXNET.Direct2D1.PathSegment SegmentFlags_
        {
            set => SetSegmentFlags_(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fillMode">No documentation.</param>
        /// <unmanaged>void ID2D1SimplifiedGeometrySink::SetFillMode([In] D2D1_FILL_MODE fillMode)</unmanaged>
        /// <unmanaged-short>ID2D1SimplifiedGeometrySink::SetFillMode</unmanaged-short>
        internal unsafe void SetFillMode_(DXNET.Direct2D1.FillMode fillMode)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)fillMode), (*(void ***)this._nativePointer)[3]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "vertexFlags">No documentation.</param>
        /// <unmanaged>void ID2D1SimplifiedGeometrySink::SetSegmentFlags([In] D2D1_PATH_SEGMENT vertexFlags)</unmanaged>
        /// <unmanaged-short>ID2D1SimplifiedGeometrySink::SetSegmentFlags</unmanaged-short>
        internal unsafe void SetSegmentFlags_(DXNET.Direct2D1.PathSegment vertexFlags)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)vertexFlags), (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "startPoint">No documentation.</param>
        /// <param name = "figureBegin">No documentation.</param>
        /// <unmanaged>void ID2D1SimplifiedGeometrySink::BeginFigure([In] D2D_POINT_2F startPoint,[In] D2D1_FIGURE_BEGIN figureBegin)</unmanaged>
        /// <unmanaged-short>ID2D1SimplifiedGeometrySink::BeginFigure</unmanaged-short>
        internal unsafe void BeginFigure_(DXNET.Mathematics.Interop.RawVector2 startPoint, DXNET.Direct2D1.FigureBegin figureBegin)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, startPoint, unchecked ((System.Int32)figureBegin), (*(void ***)this._nativePointer)[5]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ointsRef">No documentation.</param>
        /// <param name = "pointsCount">No documentation.</param>
        /// <unmanaged>void ID2D1SimplifiedGeometrySink::AddLines([In, Buffer] const D2D_POINT_2F* points,[In] unsigned int pointsCount)</unmanaged>
        /// <unmanaged-short>ID2D1SimplifiedGeometrySink::AddLines</unmanaged-short>
        internal unsafe void AddLines_(DXNET.Mathematics.Interop.RawVector2[] ointsRef, System.Int32 pointsCount)
        {
            fixed (void *ointsRef_ = ointsRef)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, ointsRef_, pointsCount, (*(void ***)this._nativePointer)[6]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "beziers">No documentation.</param>
        /// <param name = "beziersCount">No documentation.</param>
        /// <unmanaged>void ID2D1SimplifiedGeometrySink::AddBeziers([In, Buffer] const D2D1_BEZIER_SEGMENT* beziers,[In] unsigned int beziersCount)</unmanaged>
        /// <unmanaged-short>ID2D1SimplifiedGeometrySink::AddBeziers</unmanaged-short>
        internal unsafe void AddBeziers_(DXNET.Direct2D1.BezierSegment[] beziers, System.Int32 beziersCount)
        {
            fixed (void *beziers_ = beziers)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, beziers_, beziersCount, (*(void ***)this._nativePointer)[7]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "figureEnd">No documentation.</param>
        /// <unmanaged>void ID2D1SimplifiedGeometrySink::EndFigure([In] D2D1_FIGURE_END figureEnd)</unmanaged>
        /// <unmanaged-short>ID2D1SimplifiedGeometrySink::EndFigure</unmanaged-short>
        internal unsafe void EndFigure_(DXNET.Direct2D1.FigureEnd figureEnd)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, unchecked ((System.Int32)figureEnd), (*(void ***)this._nativePointer)[8]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SimplifiedGeometrySink::Close()</unmanaged>
        /// <unmanaged-short>ID2D1SimplifiedGeometrySink::Close</unmanaged-short>
        internal unsafe void Close_()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906a9-12e2-11dc-9fed-001143a055f9")]
    public partial class SolidColorBrush : DXNET.Direct2D1.Brush
    {
        public SolidColorBrush(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SolidColorBrush(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SolidColorBrush(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetColor / SetColor</unmanaged>
        /// <unmanaged-short>GetColor</unmanaged-short>
        public DXNET.Mathematics.Interop.RawColor4 Color
        {
            get => GetColor();
            set => SetColor(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "color">No documentation.</param>
        /// <unmanaged>void ID2D1SolidColorBrush::SetColor([In] const D2D_COLOR_F* color)</unmanaged>
        /// <unmanaged-short>ID2D1SolidColorBrush::SetColor</unmanaged-short>
        internal unsafe void SetColor(DXNET.Mathematics.Interop.RawColor4 color)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &color, (*(void ***)this._nativePointer)[8]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D_COLOR_F ID2D1SolidColorBrush::GetColor()</unmanaged>
        /// <unmanaged-short>ID2D1SolidColorBrush::GetColor</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawColor4 GetColor()
        {
            DXNET.Mathematics.Interop.RawColor4 __result__;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("db1800dd-0c34-4cf9-be90-31cc0a5653e1")]
    public partial interface SourceTransform : DXNET.Direct2D1.Transform
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("db1800dd-0c34-4cf9-be90-31cc0a5653e1")]
    public partial class SourceTransformNative : DXNET.Direct2D1.TransformNative, DXNET.Direct2D1.SourceTransform
    {
        public SourceTransformNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SourceTransformNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SourceTransformNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetRenderInfo</unmanaged>
        /// <unmanaged-short>SetRenderInfo</unmanaged-short>
        public DXNET.Direct2D1.RenderInformation RenderInfo_
        {
            set => SetRenderInfo_(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "renderInfo">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SourceTransform::SetRenderInfo([In] ID2D1RenderInfo* renderInfo)</unmanaged>
        /// <unmanaged-short>ID2D1SourceTransform::SetRenderInfo</unmanaged-short>
        internal unsafe void SetRenderInfo_(DXNET.Direct2D1.RenderInformation renderInfo)
        {
            System.IntPtr renderInfo_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            renderInfo_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.RenderInformation>(renderInfo);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)renderInfo_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "target">No documentation.</param>
        /// <param name = "drawRect">No documentation.</param>
        /// <param name = "targetOrigin">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SourceTransform::Draw([In] ID2D1Bitmap1* target,[In] const RECT* drawRect,[In] D2D_POINT_2U targetOrigin)</unmanaged>
        /// <unmanaged-short>ID2D1SourceTransform::Draw</unmanaged-short>
        internal unsafe void Draw_(DXNET.Direct2D1.Bitmap1 target, DXNET.Mathematics.Interop.RawRectangle drawRect, DXNET.Mathematics.Interop.RawPoint targetOrigin)
        {
            System.IntPtr target_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            target_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Bitmap1>(target);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)target_, &drawRect, targetOrigin, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("4dc583bf-3a10-438a-8722-e9765224f1f1")]
    public partial class SpriteBatch : DXNET.Direct2D1.Resource
    {
        public SpriteBatch(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SpriteBatch(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SpriteBatch(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSpriteCount</unmanaged>
        /// <unmanaged-short>GetSpriteCount</unmanaged-short>
        public System.Int32 SpriteCount
        {
            get => GetSpriteCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "spriteCount">No documentation.</param>
        /// <param name = "destinationRectangles">No documentation.</param>
        /// <param name = "sourceRectangles">No documentation.</param>
        /// <param name = "colors">No documentation.</param>
        /// <param name = "transforms">No documentation.</param>
        /// <param name = "destinationRectanglesStride">No documentation.</param>
        /// <param name = "sourceRectanglesStride">No documentation.</param>
        /// <param name = "colorsStride">No documentation.</param>
        /// <param name = "transformsStride">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SpriteBatch::AddSprites([In] unsigned int spriteCount,[In, Buffer] const D2D_RECT_F* destinationRectangles,[In, Buffer, Optional] const D2D_RECT_U* sourceRectangles,[In, Buffer, Optional] const D2D_COLOR_F* colors,[In, Buffer, Optional] const D2D_MATRIX_3X2_F* transforms,[In] unsigned int destinationRectanglesStride,[In] unsigned int sourceRectanglesStride,[In] unsigned int colorsStride,[In] unsigned int transformsStride)</unmanaged>
        /// <unmanaged-short>ID2D1SpriteBatch::AddSprites</unmanaged-short>
        public unsafe void AddSprites(System.Int32 spriteCount, DXNET.Mathematics.Interop.RawRectangleF[] destinationRectangles, DXNET.Mathematics.Interop.RawRectangle[] sourceRectangles, DXNET.Mathematics.Interop.RawColor4[] colors, DXNET.Mathematics.Interop.RawMatrix3x2[] transforms, System.Int32 destinationRectanglesStride, System.Int32 sourceRectanglesStride, System.Int32 colorsStride, System.Int32 transformsStride)
        {
            DXNET.Result __result__;
            fixed (void *transforms_ = transforms)
                fixed (void *colors_ = colors)
                    fixed (void *sourceRectangles_ = sourceRectangles)
                        fixed (void *destinationRectangles_ = destinationRectangles)
                            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, spriteCount, destinationRectangles_, sourceRectangles_, colors_, transforms_, destinationRectanglesStride, sourceRectanglesStride, colorsStride, transformsStride, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "startIndex">No documentation.</param>
        /// <param name = "spriteCount">No documentation.</param>
        /// <param name = "destinationRectangles">No documentation.</param>
        /// <param name = "sourceRectangles">No documentation.</param>
        /// <param name = "colors">No documentation.</param>
        /// <param name = "transforms">No documentation.</param>
        /// <param name = "destinationRectanglesStride">No documentation.</param>
        /// <param name = "sourceRectanglesStride">No documentation.</param>
        /// <param name = "colorsStride">No documentation.</param>
        /// <param name = "transformsStride">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SpriteBatch::SetSprites([In] unsigned int startIndex,[In] unsigned int spriteCount,[In, Buffer, Optional] const D2D_RECT_F* destinationRectangles,[In, Buffer, Optional] const D2D_RECT_U* sourceRectangles,[In, Buffer, Optional] const D2D_COLOR_F* colors,[In, Buffer, Optional] const D2D_MATRIX_3X2_F* transforms,[In] unsigned int destinationRectanglesStride,[In] unsigned int sourceRectanglesStride,[In] unsigned int colorsStride,[In] unsigned int transformsStride)</unmanaged>
        /// <unmanaged-short>ID2D1SpriteBatch::SetSprites</unmanaged-short>
        public unsafe void SetSprites(System.Int32 startIndex, System.Int32 spriteCount, DXNET.Mathematics.Interop.RawRectangleF[] destinationRectangles, DXNET.Mathematics.Interop.RawRectangle[] sourceRectangles, DXNET.Mathematics.Interop.RawColor4[] colors, DXNET.Mathematics.Interop.RawMatrix3x2[] transforms, System.Int32 destinationRectanglesStride, System.Int32 sourceRectanglesStride, System.Int32 colorsStride, System.Int32 transformsStride)
        {
            DXNET.Result __result__;
            fixed (void *transforms_ = transforms)
                fixed (void *colors_ = colors)
                    fixed (void *sourceRectangles_ = sourceRectangles)
                        fixed (void *destinationRectangles_ = destinationRectangles)
                            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, startIndex, spriteCount, destinationRectangles_, sourceRectangles_, colors_, transforms_, destinationRectanglesStride, sourceRectanglesStride, colorsStride, transformsStride, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "startIndex">No documentation.</param>
        /// <param name = "spriteCount">No documentation.</param>
        /// <param name = "destinationRectangles">No documentation.</param>
        /// <param name = "sourceRectangles">No documentation.</param>
        /// <param name = "colors">No documentation.</param>
        /// <param name = "transforms">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SpriteBatch::GetSprites([In] unsigned int startIndex,[In] unsigned int spriteCount,[Out, Buffer, Optional] D2D_RECT_F* destinationRectangles,[Out, Buffer, Optional] D2D_RECT_U* sourceRectangles,[Out, Buffer, Optional] D2D_COLOR_F* colors,[Out, Buffer, Optional] D2D_MATRIX_3X2_F* transforms)</unmanaged>
        /// <unmanaged-short>ID2D1SpriteBatch::GetSprites</unmanaged-short>
        public unsafe void GetSprites(System.Int32 startIndex, System.Int32 spriteCount, DXNET.Mathematics.Interop.RawRectangleF[] destinationRectangles, DXNET.Mathematics.Interop.RawRectangle[] sourceRectangles, DXNET.Mathematics.Interop.RawColor4[] colors, DXNET.Mathematics.Interop.RawMatrix3x2[] transforms)
        {
            DXNET.Result __result__;
            fixed (void *transforms_ = transforms)
                fixed (void *colors_ = colors)
                    fixed (void *sourceRectangles_ = sourceRectangles)
                        fixed (void *destinationRectangles_ = destinationRectangles)
                            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, startIndex, spriteCount, destinationRectangles_, sourceRectangles_, colors_, transforms_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1SpriteBatch::GetSpriteCount()</unmanaged>
        /// <unmanaged-short>ID2D1SpriteBatch::GetSpriteCount</unmanaged-short>
        internal unsafe System.Int32 GetSpriteCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>void ID2D1SpriteBatch::Clear()</unmanaged>
        /// <unmanaged-short>ID2D1SpriteBatch::Clear</unmanaged-short>
        public unsafe void Clear()
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[8]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd9069d-12e2-11dc-9fed-001143a055f9")]
    public partial class StrokeStyle : DXNET.Direct2D1.Resource
    {
        public StrokeStyle(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator StrokeStyle(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new StrokeStyle(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStartCap</unmanaged>
        /// <unmanaged-short>GetStartCap</unmanaged-short>
        public DXNET.Direct2D1.CapStyle StartCap
        {
            get => GetStartCap();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetEndCap</unmanaged>
        /// <unmanaged-short>GetEndCap</unmanaged-short>
        public DXNET.Direct2D1.CapStyle EndCap
        {
            get => GetEndCap();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDashCap</unmanaged>
        /// <unmanaged-short>GetDashCap</unmanaged-short>
        public DXNET.Direct2D1.CapStyle DashCap
        {
            get => GetDashCap();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMiterLimit</unmanaged>
        /// <unmanaged-short>GetMiterLimit</unmanaged-short>
        public System.Single MiterLimit
        {
            get => GetMiterLimit();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetLineJoin</unmanaged>
        /// <unmanaged-short>GetLineJoin</unmanaged-short>
        public DXNET.Direct2D1.LineJoin LineJoin
        {
            get => GetLineJoin();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDashOffset</unmanaged>
        /// <unmanaged-short>GetDashOffset</unmanaged-short>
        public System.Single DashOffset
        {
            get => GetDashOffset();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDashStyle</unmanaged>
        /// <unmanaged-short>GetDashStyle</unmanaged-short>
        public DXNET.Direct2D1.DashStyle DashStyle
        {
            get => GetDashStyle();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDashesCount</unmanaged>
        /// <unmanaged-short>GetDashesCount</unmanaged-short>
        public System.Int32 DashesCount
        {
            get => GetDashesCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_CAP_STYLE ID2D1StrokeStyle::GetStartCap()</unmanaged>
        /// <unmanaged-short>ID2D1StrokeStyle::GetStartCap</unmanaged-short>
        internal unsafe DXNET.Direct2D1.CapStyle GetStartCap()
        {
            DXNET.Direct2D1.CapStyle __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1CapStyle(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_CAP_STYLE ID2D1StrokeStyle::GetEndCap()</unmanaged>
        /// <unmanaged-short>ID2D1StrokeStyle::GetEndCap</unmanaged-short>
        internal unsafe DXNET.Direct2D1.CapStyle GetEndCap()
        {
            DXNET.Direct2D1.CapStyle __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1CapStyle(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_CAP_STYLE ID2D1StrokeStyle::GetDashCap()</unmanaged>
        /// <unmanaged-short>ID2D1StrokeStyle::GetDashCap</unmanaged-short>
        internal unsafe DXNET.Direct2D1.CapStyle GetDashCap()
        {
            DXNET.Direct2D1.CapStyle __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1CapStyle(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float ID2D1StrokeStyle::GetMiterLimit()</unmanaged>
        /// <unmanaged-short>ID2D1StrokeStyle::GetMiterLimit</unmanaged-short>
        internal unsafe System.Single GetMiterLimit()
        {
            System.Single __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallfloat(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_LINE_JOIN ID2D1StrokeStyle::GetLineJoin()</unmanaged>
        /// <unmanaged-short>ID2D1StrokeStyle::GetLineJoin</unmanaged-short>
        internal unsafe DXNET.Direct2D1.LineJoin GetLineJoin()
        {
            DXNET.Direct2D1.LineJoin __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1LineJoin(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float ID2D1StrokeStyle::GetDashOffset()</unmanaged>
        /// <unmanaged-short>ID2D1StrokeStyle::GetDashOffset</unmanaged-short>
        internal unsafe System.Single GetDashOffset()
        {
            System.Single __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallfloat(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_DASH_STYLE ID2D1StrokeStyle::GetDashStyle()</unmanaged>
        /// <unmanaged-short>ID2D1StrokeStyle::GetDashStyle</unmanaged-short>
        internal unsafe DXNET.Direct2D1.DashStyle GetDashStyle()
        {
            DXNET.Direct2D1.DashStyle __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1DashStyle(this._nativePointer, (*(void ***)this._nativePointer)[10]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1StrokeStyle::GetDashesCount()</unmanaged>
        /// <unmanaged-short>ID2D1StrokeStyle::GetDashesCount</unmanaged-short>
        internal unsafe System.Int32 GetDashesCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[11]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dashes">No documentation.</param>
        /// <param name = "dashesCount">No documentation.</param>
        /// <unmanaged>void ID2D1StrokeStyle::GetDashes([Out, Buffer] float* dashes,[In] unsigned int dashesCount)</unmanaged>
        /// <unmanaged-short>ID2D1StrokeStyle::GetDashes</unmanaged-short>
        public unsafe void GetDashes(System.Single[] dashes, System.Int32 dashesCount)
        {
            fixed (void *dashes_ = dashes)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, dashes_, dashesCount, (*(void ***)this._nativePointer)[12]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("10a72a66-e91c-43f4-993f-ddf4b82b0b4a")]
    public partial class StrokeStyle1 : DXNET.Direct2D1.StrokeStyle
    {
        public StrokeStyle1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator StrokeStyle1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new StrokeStyle1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStrokeTransformType</unmanaged>
        /// <unmanaged-short>GetStrokeTransformType</unmanaged-short>
        public DXNET.Direct2D1.StrokeTransformType StrokeTransformType
        {
            get => GetStrokeTransformType();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE ID2D1StrokeStyle1::GetStrokeTransformType()</unmanaged>
        /// <unmanaged-short>ID2D1StrokeStyle1::GetStrokeTransformType</unmanaged-short>
        internal unsafe DXNET.Direct2D1.StrokeTransformType GetStrokeTransformType()
        {
            DXNET.Direct2D1.StrokeTransformType __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1StrokeTransformType(this._nativePointer, (*(void ***)this._nativePointer)[13]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("c9cdb0dd-f8c9-4e70-b7c2-301c80292c5e")]
    public partial class SvgAttribute : DXNET.Direct2D1.Resource
    {
        public SvgAttribute(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SvgAttribute(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SvgAttribute(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetElement</unmanaged>
        /// <unmanaged-short>GetElement</unmanaged-short>
        public DXNET.Direct2D1.SvgElement Element
        {
            get
            {
                GetElement(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "element">No documentation.</param>
        /// <unmanaged>void ID2D1SvgAttribute::GetElement([Out, Optional] ID2D1SvgElement** element)</unmanaged>
        /// <unmanaged-short>ID2D1SvgAttribute::GetElement</unmanaged-short>
        internal unsafe void GetElement(out DXNET.Direct2D1.SvgElement element)
        {
            System.IntPtr element_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &element_, (*(void ***)this._nativePointer)[4]);
            if (element_ != System.IntPtr.Zero)
                element = new DXNET.Direct2D1.SvgElement(element_);
            else
                element = null;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "attribute">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgAttribute::Clone([Out] ID2D1SvgAttribute** attribute)</unmanaged>
        /// <unmanaged-short>ID2D1SvgAttribute::Clone</unmanaged-short>
        internal unsafe void Clone(out DXNET.Direct2D1.SvgAttribute attribute)
        {
            System.IntPtr attribute_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &attribute_, (*(void ***)this._nativePointer)[5]);
            if (attribute_ != System.IntPtr.Zero)
                attribute = new DXNET.Direct2D1.SvgAttribute(attribute_);
            else
                attribute = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("86b88e4d-afa4-4d7b-88e4-68a51c4a0aec")]
    public partial class SvgDocument : DXNET.Direct2D1.Resource
    {
        public SvgDocument(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SvgDocument(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SvgDocument(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetViewportSize / SetViewportSize</unmanaged>
        /// <unmanaged-short>GetViewportSize</unmanaged-short>
        public DXNET.Size2F ViewportSize
        {
            get => GetViewportSize();
            set => SetViewportSize(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetRoot / SetRoot</unmanaged>
        /// <unmanaged-short>GetRoot</unmanaged-short>
        public DXNET.Direct2D1.SvgElement Root
        {
            get
            {
                GetRoot(out var __output__);
                return __output__;
            }

            set => SetRoot(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "viewportSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgDocument::SetViewportSize([In] D2D_SIZE_F viewportSize)</unmanaged>
        /// <unmanaged-short>ID2D1SvgDocument::SetViewportSize</unmanaged-short>
        internal unsafe void SetViewportSize(DXNET.Size2F viewportSize)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, viewportSize, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D_SIZE_F ID2D1SvgDocument::GetViewportSize()</unmanaged>
        /// <unmanaged-short>ID2D1SvgDocument::GetViewportSize</unmanaged-short>
        internal unsafe DXNET.Size2F GetViewportSize()
        {
            DXNET.Size2F __result__;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, &__result__, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "root">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgDocument::SetRoot([In, Optional] ID2D1SvgElement* root)</unmanaged>
        /// <unmanaged-short>ID2D1SvgDocument::SetRoot</unmanaged-short>
        internal unsafe void SetRoot(DXNET.Direct2D1.SvgElement root)
        {
            System.IntPtr root_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            root_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgElement>(root);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)root_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "root">No documentation.</param>
        /// <unmanaged>void ID2D1SvgDocument::GetRoot([Out, Optional] ID2D1SvgElement** root)</unmanaged>
        /// <unmanaged-short>ID2D1SvgDocument::GetRoot</unmanaged-short>
        internal unsafe void GetRoot(out DXNET.Direct2D1.SvgElement root)
        {
            System.IntPtr root_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &root_, (*(void ***)this._nativePointer)[7]);
            if (root_ != System.IntPtr.Zero)
                root = new DXNET.Direct2D1.SvgElement(root_);
            else
                root = null;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "id">No documentation.</param>
        /// <param name = "svgElement">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgDocument::FindElementById([In] const wchar_t* id,[Out, Optional] ID2D1SvgElement** svgElement)</unmanaged>
        /// <unmanaged-short>ID2D1SvgDocument::FindElementById</unmanaged-short>
        private unsafe DXNET.Result TryFindElementById_(System.String id, out DXNET.Direct2D1.SvgElement svgElement)
        {
            System.IntPtr svgElement_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (char *id_ = id)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)id_, &svgElement_, (*(void ***)this._nativePointer)[8]);
            if (svgElement_ != System.IntPtr.Zero)
                svgElement = new DXNET.Direct2D1.SvgElement(svgElement_);
            else
                svgElement = null;
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "outputXmlStream">No documentation.</param>
        /// <param name = "subtree">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgDocument::Serialize([In] IStream* outputXmlStream,[In, Optional] ID2D1SvgElement* subtree)</unmanaged>
        /// <unmanaged-short>ID2D1SvgDocument::Serialize</unmanaged-short>
        public unsafe void Serialize(DXNET.Win32.IStream outputXmlStream, DXNET.Direct2D1.SvgElement subtree)
        {
            System.IntPtr outputXmlStream_ = System.IntPtr.Zero;
            System.IntPtr subtree_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            outputXmlStream_ = DXNET.CppObject.ToCallbackPtr<DXNET.Win32.IStream>(outputXmlStream);
            subtree_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgElement>(subtree);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)outputXmlStream_, (void *)subtree_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "inputXmlStream">No documentation.</param>
        /// <param name = "subtree">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgDocument::Deserialize([In] IStream* inputXmlStream,[Out] ID2D1SvgElement** subtree)</unmanaged>
        /// <unmanaged-short>ID2D1SvgDocument::Deserialize</unmanaged-short>
        public unsafe void Deserialize(DXNET.Win32.IStream inputXmlStream, out DXNET.Direct2D1.SvgElement subtree)
        {
            System.IntPtr inputXmlStream_ = System.IntPtr.Zero;
            System.IntPtr subtree_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            inputXmlStream_ = DXNET.CppObject.ToCallbackPtr<DXNET.Win32.IStream>(inputXmlStream);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)inputXmlStream_, &subtree_, (*(void ***)this._nativePointer)[10]);
            if (subtree_ != System.IntPtr.Zero)
                subtree = new DXNET.Direct2D1.SvgElement(subtree_);
            else
                subtree = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "paintType">No documentation.</param>
        /// <param name = "color">No documentation.</param>
        /// <param name = "id">No documentation.</param>
        /// <param name = "aintRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgDocument::CreatePaint([In] D2D1_SVG_PAINT_TYPE paintType,[In, Optional] const D2D_COLOR_F* color,[In, Optional] const wchar_t* id,[Out] ID2D1SvgPaint** paint)</unmanaged>
        /// <unmanaged-short>ID2D1SvgDocument::CreatePaint</unmanaged-short>
        public unsafe void CreatePaint(DXNET.Direct2D1.SvgPaintType paintType, DXNET.Mathematics.Interop.RawColor4? color, System.String id, out DXNET.Direct2D1.SvgPaint aintRef)
        {
            DXNET.Mathematics.Interop.RawColor4 color_;
            System.IntPtr aintRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (color != null)
                color_ = color.Value;
            fixed (char *id_ = id)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)paintType), color == null ? (void *)0 : &color_, (void *)id_, &aintRef_, (*(void ***)this._nativePointer)[11]);
            if (aintRef_ != System.IntPtr.Zero)
                aintRef = new DXNET.Direct2D1.SvgPaint(aintRef_);
            else
                aintRef = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dashes">No documentation.</param>
        /// <param name = "dashesCount">No documentation.</param>
        /// <param name = "strokeDashArray">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgDocument::CreateStrokeDashArray([In, Buffer, Optional] const D2D1_SVG_LENGTH* dashes,[In] unsigned int dashesCount,[Out] ID2D1SvgStrokeDashArray** strokeDashArray)</unmanaged>
        /// <unmanaged-short>ID2D1SvgDocument::CreateStrokeDashArray</unmanaged-short>
        public unsafe void CreateStrokeDashArray(DXNET.Direct2D1.SvgLength[] dashes, System.Int32 dashesCount, out DXNET.Direct2D1.SvgStrokeDashArray strokeDashArray)
        {
            System.IntPtr strokeDashArray_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *dashes_ = dashes)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, dashes_, dashesCount, &strokeDashArray_, (*(void ***)this._nativePointer)[12]);
            if (strokeDashArray_ != System.IntPtr.Zero)
                strokeDashArray = new DXNET.Direct2D1.SvgStrokeDashArray(strokeDashArray_);
            else
                strokeDashArray = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ointsRef">No documentation.</param>
        /// <param name = "pointsCount">No documentation.</param>
        /// <param name = "ointCollectionRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgDocument::CreatePointCollection([In, Buffer, Optional] const D2D_POINT_2F* points,[In] unsigned int pointsCount,[Out] ID2D1SvgPointCollection** pointCollection)</unmanaged>
        /// <unmanaged-short>ID2D1SvgDocument::CreatePointCollection</unmanaged-short>
        public unsafe void CreatePointCollection(DXNET.Mathematics.Interop.RawVector2[] ointsRef, System.Int32 pointsCount, out DXNET.Direct2D1.SvgPointCollection ointCollectionRef)
        {
            System.IntPtr ointCollectionRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *ointsRef_ = ointsRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, ointsRef_, pointsCount, &ointCollectionRef_, (*(void ***)this._nativePointer)[13]);
            if (ointCollectionRef_ != System.IntPtr.Zero)
                ointCollectionRef = new DXNET.Direct2D1.SvgPointCollection(ointCollectionRef_);
            else
                ointCollectionRef = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "segmentData">No documentation.</param>
        /// <param name = "segmentDataCount">No documentation.</param>
        /// <param name = "commands">No documentation.</param>
        /// <param name = "commandsCount">No documentation.</param>
        /// <param name = "athDataRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgDocument::CreatePathData([In, Buffer, Optional] const float* segmentData,[In] unsigned int segmentDataCount,[In, Buffer, Optional] const D2D1_SVG_PATH_COMMAND* commands,[In] unsigned int commandsCount,[Out] ID2D1SvgPathData** pathData)</unmanaged>
        /// <unmanaged-short>ID2D1SvgDocument::CreatePathData</unmanaged-short>
        public unsafe void CreatePathData(System.Single[] segmentData, System.Int32 segmentDataCount, DXNET.Direct2D1.SvgPathCommand[] commands, System.Int32 commandsCount, out DXNET.Direct2D1.SvgPathData athDataRef)
        {
            System.IntPtr athDataRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *commands_ = commands)
                fixed (void *segmentData_ = segmentData)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, segmentData_, segmentDataCount, commands_, commandsCount, &athDataRef_, (*(void ***)this._nativePointer)[14]);
            if (athDataRef_ != System.IntPtr.Zero)
                athDataRef = new DXNET.Direct2D1.SvgPathData(athDataRef_);
            else
                athDataRef = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ac7b67a6-183e-49c1-a823-0ebe40b0db29")]
    public partial class SvgElement : DXNET.Direct2D1.Resource
    {
        public SvgElement(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SvgElement(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SvgElement(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDocument</unmanaged>
        /// <unmanaged-short>GetDocument</unmanaged-short>
        public DXNET.Direct2D1.SvgDocument Document
        {
            get
            {
                GetDocument(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetTagNameLength</unmanaged>
        /// <unmanaged-short>GetTagNameLength</unmanaged-short>
        public System.Int32 TagNameLength
        {
            get => GetTagNameLength();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>IsTextContent</unmanaged>
        /// <unmanaged-short>IsTextContent</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsTextContent
        {
            get => IsTextContent_();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetParent</unmanaged>
        /// <unmanaged-short>GetParent</unmanaged-short>
        public DXNET.Direct2D1.SvgElement Parent
        {
            get
            {
                GetParent(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFirstChild</unmanaged>
        /// <unmanaged-short>GetFirstChild</unmanaged-short>
        public DXNET.Direct2D1.SvgElement FirstChild
        {
            get
            {
                GetFirstChild(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetLastChild</unmanaged>
        /// <unmanaged-short>GetLastChild</unmanaged-short>
        public DXNET.Direct2D1.SvgElement LastChild
        {
            get
            {
                GetLastChild(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSpecifiedAttributeCount</unmanaged>
        /// <unmanaged-short>GetSpecifiedAttributeCount</unmanaged-short>
        public System.Int32 SpecifiedAttributeCount
        {
            get => GetSpecifiedAttributeCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetTextValueLength</unmanaged>
        /// <unmanaged-short>GetTextValueLength</unmanaged-short>
        public System.Int32 TextValueLength
        {
            get => GetTextValueLength();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "document">No documentation.</param>
        /// <unmanaged>void ID2D1SvgElement::GetDocument([Out, Optional] ID2D1SvgDocument** document)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetDocument</unmanaged-short>
        internal unsafe void GetDocument(out DXNET.Direct2D1.SvgDocument document)
        {
            System.IntPtr document_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &document_, (*(void ***)this._nativePointer)[4]);
            if (document_ != System.IntPtr.Zero)
                document = new DXNET.Direct2D1.SvgDocument(document_);
            else
                document = null;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "nameCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::GetTagName([Out, Buffer] wchar_t* name,[In] unsigned int nameCount)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetTagName</unmanaged-short>
        public unsafe void GetTagName(System.IntPtr name, System.Int32 nameCount)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name, nameCount, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1SvgElement::GetTagNameLength()</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetTagNameLength</unmanaged-short>
        internal unsafe System.Int32 GetTagNameLength()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL ID2D1SvgElement::IsTextContent()</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::IsTextContent</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool IsTextContent_()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "arentRef">No documentation.</param>
        /// <unmanaged>void ID2D1SvgElement::GetParent([Out, Optional] ID2D1SvgElement** parent)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetParent</unmanaged-short>
        internal unsafe void GetParent(out DXNET.Direct2D1.SvgElement arentRef)
        {
            System.IntPtr arentRef_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &arentRef_, (*(void ***)this._nativePointer)[8]);
            if (arentRef_ != System.IntPtr.Zero)
                arentRef = new DXNET.Direct2D1.SvgElement(arentRef_);
            else
                arentRef = null;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL ID2D1SvgElement::HasChildren()</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::HasChildren</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool HasChildren()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "child">No documentation.</param>
        /// <unmanaged>void ID2D1SvgElement::GetFirstChild([Out, Optional] ID2D1SvgElement** child)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetFirstChild</unmanaged-short>
        internal unsafe void GetFirstChild(out DXNET.Direct2D1.SvgElement child)
        {
            System.IntPtr child_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &child_, (*(void ***)this._nativePointer)[10]);
            if (child_ != System.IntPtr.Zero)
                child = new DXNET.Direct2D1.SvgElement(child_);
            else
                child = null;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "child">No documentation.</param>
        /// <unmanaged>void ID2D1SvgElement::GetLastChild([Out, Optional] ID2D1SvgElement** child)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetLastChild</unmanaged-short>
        internal unsafe void GetLastChild(out DXNET.Direct2D1.SvgElement child)
        {
            System.IntPtr child_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &child_, (*(void ***)this._nativePointer)[11]);
            if (child_ != System.IntPtr.Zero)
                child = new DXNET.Direct2D1.SvgElement(child_);
            else
                child = null;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "referenceChild">No documentation.</param>
        /// <param name = "reviousChildRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::GetPreviousChild([In] ID2D1SvgElement* referenceChild,[Out, Optional] ID2D1SvgElement** previousChild)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetPreviousChild</unmanaged-short>
        public unsafe void GetPreviousChild(DXNET.Direct2D1.SvgElement referenceChild, out DXNET.Direct2D1.SvgElement reviousChildRef)
        {
            System.IntPtr referenceChild_ = System.IntPtr.Zero;
            System.IntPtr reviousChildRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            referenceChild_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgElement>(referenceChild);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)referenceChild_, &reviousChildRef_, (*(void ***)this._nativePointer)[12]);
            if (reviousChildRef_ != System.IntPtr.Zero)
                reviousChildRef = new DXNET.Direct2D1.SvgElement(reviousChildRef_);
            else
                reviousChildRef = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "referenceChild">No documentation.</param>
        /// <param name = "nextChild">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::GetNextChild([In] ID2D1SvgElement* referenceChild,[Out, Optional] ID2D1SvgElement** nextChild)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetNextChild</unmanaged-short>
        public unsafe void GetNextChild(DXNET.Direct2D1.SvgElement referenceChild, out DXNET.Direct2D1.SvgElement nextChild)
        {
            System.IntPtr referenceChild_ = System.IntPtr.Zero;
            System.IntPtr nextChild_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            referenceChild_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgElement>(referenceChild);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)referenceChild_, &nextChild_, (*(void ***)this._nativePointer)[13]);
            if (nextChild_ != System.IntPtr.Zero)
                nextChild = new DXNET.Direct2D1.SvgElement(nextChild_);
            else
                nextChild = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "newChild">No documentation.</param>
        /// <param name = "referenceChild">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::InsertChildBefore([In] ID2D1SvgElement* newChild,[In, Optional] ID2D1SvgElement* referenceChild)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::InsertChildBefore</unmanaged-short>
        public unsafe void InsertChildBefore(DXNET.Direct2D1.SvgElement newChild, DXNET.Direct2D1.SvgElement referenceChild)
        {
            System.IntPtr newChild_ = System.IntPtr.Zero;
            System.IntPtr referenceChild_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            newChild_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgElement>(newChild);
            referenceChild_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgElement>(referenceChild);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)newChild_, (void *)referenceChild_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "newChild">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::AppendChild([In] ID2D1SvgElement* newChild)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::AppendChild</unmanaged-short>
        public unsafe void AppendChild(DXNET.Direct2D1.SvgElement newChild)
        {
            System.IntPtr newChild_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            newChild_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgElement>(newChild);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)newChild_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "newChild">No documentation.</param>
        /// <param name = "oldChild">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::ReplaceChild([In] ID2D1SvgElement* newChild,[In] ID2D1SvgElement* oldChild)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::ReplaceChild</unmanaged-short>
        public unsafe void ReplaceChild(DXNET.Direct2D1.SvgElement newChild, DXNET.Direct2D1.SvgElement oldChild)
        {
            System.IntPtr newChild_ = System.IntPtr.Zero;
            System.IntPtr oldChild_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            newChild_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgElement>(newChild);
            oldChild_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgElement>(oldChild);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)newChild_, (void *)oldChild_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "oldChild">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::RemoveChild([In] ID2D1SvgElement* oldChild)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::RemoveChild</unmanaged-short>
        public unsafe void RemoveChild(DXNET.Direct2D1.SvgElement oldChild)
        {
            System.IntPtr oldChild_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            oldChild_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgElement>(oldChild);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)oldChild_, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "tagName">No documentation.</param>
        /// <param name = "newChild">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::CreateChild([In] const wchar_t* tagName,[Out] ID2D1SvgElement** newChild)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::CreateChild</unmanaged-short>
        public unsafe void CreateChild(System.String tagName, out DXNET.Direct2D1.SvgElement newChild)
        {
            System.IntPtr newChild_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (char *tagName_ = tagName)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)tagName_, &newChild_, (*(void ***)this._nativePointer)[18]);
            if (newChild_ != System.IntPtr.Zero)
                newChild = new DXNET.Direct2D1.SvgElement(newChild_);
            else
                newChild = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "inherited">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL ID2D1SvgElement::IsAttributeSpecified([In] const wchar_t* name,[Out, Optional] BOOL* inherited)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::IsAttributeSpecified</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool IsAttributeSpecified(System.String name, out DXNET.Mathematics.Interop.RawBool inherited)
        {
            inherited = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Mathematics.Interop.RawBool __result__;
            fixed (void *inherited_ = &inherited)
                fixed (char *name_ = name)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (void *)name_, inherited_, (*(void ***)this._nativePointer)[19]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1SvgElement::GetSpecifiedAttributeCount()</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetSpecifiedAttributeCount</unmanaged-short>
        internal unsafe System.Int32 GetSpecifiedAttributeCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[20]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "name">No documentation.</param>
        /// <param name = "nameCount">No documentation.</param>
        /// <param name = "inherited">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::GetSpecifiedAttributeName([In] unsigned int index,[Out, Buffer] wchar_t* name,[In] unsigned int nameCount,[Out, Optional] BOOL* inherited)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetSpecifiedAttributeName</unmanaged-short>
        public unsafe void GetSpecifiedAttributeName(System.Int32 index, System.IntPtr name, System.Int32 nameCount, out DXNET.Mathematics.Interop.RawBool inherited)
        {
            inherited = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *inherited_ = &inherited)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, (void *)name, nameCount, inherited_, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "nameLength">No documentation.</param>
        /// <param name = "inherited">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::GetSpecifiedAttributeNameLength([In] unsigned int index,[Out] unsigned int* nameLength,[Out, Optional] BOOL* inherited)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetSpecifiedAttributeNameLength</unmanaged-short>
        public unsafe void GetSpecifiedAttributeNameLength(System.Int32 index, out System.Int32 nameLength, out DXNET.Mathematics.Interop.RawBool inherited)
        {
            inherited = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *inherited_ = &inherited)
                fixed (void *nameLength_ = &nameLength)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, nameLength_, inherited_, (*(void ***)this._nativePointer)[22]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::RemoveAttribute([In] const wchar_t* name)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::RemoveAttribute</unmanaged-short>
        public unsafe void RemoveAttribute(System.String name)
        {
            DXNET.Result __result__;
            fixed (char *name_ = name)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[23]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "nameCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::SetTextValue([In, Buffer] const wchar_t* name,[In] unsigned int nameCount)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::SetTextValue</unmanaged-short>
        public unsafe void SetTextValue(System.String name, System.Int32 nameCount)
        {
            DXNET.Result __result__;
            fixed (char *name_ = name)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, nameCount, (*(void ***)this._nativePointer)[24]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "nameCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::GetTextValue([Out, Buffer] wchar_t* name,[In] unsigned int nameCount)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetTextValue</unmanaged-short>
        public unsafe void GetTextValue(System.IntPtr name, System.Int32 nameCount)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name, nameCount, (*(void ***)this._nativePointer)[25]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1SvgElement::GetTextValueLength()</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetTextValueLength</unmanaged-short>
        internal unsafe System.Int32 GetTextValueLength()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[26]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "value">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::SetAttributeValue([In] const wchar_t* name,[In] ID2D1SvgAttribute* value)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::SetAttributeValue</unmanaged-short>
        public unsafe void SetAttributeValue(System.String name, DXNET.Direct2D1.SvgAttribute value)
        {
            System.IntPtr value_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            value_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SvgAttribute>(value);
            fixed (char *name_ = name)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, (void *)value_, (*(void ***)this._nativePointer)[27]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "type">No documentation.</param>
        /// <param name = "value">No documentation.</param>
        /// <param name = "valueSizeInBytes">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::SetAttributeValue([In] const wchar_t* name,[In] D2D1_SVG_ATTRIBUTE_POD_TYPE type,[In, Buffer] const void* value,[In] unsigned int valueSizeInBytes)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::SetAttributeValue</unmanaged-short>
        public unsafe void SetAttributeValue(System.String name, DXNET.Direct2D1.SvgAttributePodType type, System.IntPtr value, System.Int32 valueSizeInBytes)
        {
            DXNET.Result __result__;
            fixed (char *name_ = name)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, unchecked ((System.Int32)type), (void *)value, valueSizeInBytes, (*(void ***)this._nativePointer)[28]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "type">No documentation.</param>
        /// <param name = "value">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::SetAttributeValue([In] const wchar_t* name,[In] D2D1_SVG_ATTRIBUTE_STRING_TYPE type,[In] const wchar_t* value)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::SetAttributeValue</unmanaged-short>
        public unsafe void SetAttributeValue(System.String name, DXNET.Direct2D1.SvgAttributeStringType type, System.String value)
        {
            DXNET.Result __result__;
            fixed (char *value_ = value)
                fixed (char *name_ = name)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, unchecked ((System.Int32)type), (void *)value_, (*(void ***)this._nativePointer)[29]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "riid">No documentation.</param>
        /// <param name = "value">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::GetAttributeValue([In] const wchar_t* name,[In] const GUID&amp; riid,[Out, Optional] void** value)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetAttributeValue</unmanaged-short>
        public unsafe void GetAttributeValue(System.String name, System.Guid riid, out System.IntPtr value)
        {
            DXNET.Result __result__;
            fixed (void *value_ = &value)
                fixed (char *name_ = name)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, &riid, value_, (*(void ***)this._nativePointer)[30]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "type">No documentation.</param>
        /// <param name = "value">No documentation.</param>
        /// <param name = "valueSizeInBytes">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::GetAttributeValue([In] const wchar_t* name,[In] D2D1_SVG_ATTRIBUTE_POD_TYPE type,[Out, Buffer] void* value,[In] unsigned int valueSizeInBytes)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetAttributeValue</unmanaged-short>
        public unsafe void GetAttributeValue(System.String name, DXNET.Direct2D1.SvgAttributePodType type, System.IntPtr value, System.Int32 valueSizeInBytes)
        {
            DXNET.Result __result__;
            fixed (char *name_ = name)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, unchecked ((System.Int32)type), (void *)value, valueSizeInBytes, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "type">No documentation.</param>
        /// <param name = "value">No documentation.</param>
        /// <param name = "valueCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::GetAttributeValue([In] const wchar_t* name,[In] D2D1_SVG_ATTRIBUTE_STRING_TYPE type,[Out, Buffer] wchar_t* value,[In] unsigned int valueCount)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetAttributeValue</unmanaged-short>
        public unsafe void GetAttributeValue(System.String name, DXNET.Direct2D1.SvgAttributeStringType type, System.IntPtr value, System.Int32 valueCount)
        {
            DXNET.Result __result__;
            fixed (char *name_ = name)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, unchecked ((System.Int32)type), (void *)value, valueCount, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "type">No documentation.</param>
        /// <param name = "valueLength">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgElement::GetAttributeValueLength([In] const wchar_t* name,[In] D2D1_SVG_ATTRIBUTE_STRING_TYPE type,[Out] unsigned int* valueLength)</unmanaged>
        /// <unmanaged-short>ID2D1SvgElement::GetAttributeValueLength</unmanaged-short>
        public unsafe void GetAttributeValueLength(System.String name, DXNET.Direct2D1.SvgAttributeStringType type, out System.Int32 valueLength)
        {
            DXNET.Result __result__;
            fixed (void *valueLength_ = &valueLength)
                fixed (char *name_ = name)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, unchecked ((System.Int32)type), valueLength_, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("af671749-d241-4db8-8e41-dcc2e5c1a438")]
    public partial class SvgGlyphStyle : DXNET.Direct2D1.Resource
    {
        public SvgGlyphStyle(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SvgGlyphStyle(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SvgGlyphStyle(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFill / SetFill</unmanaged>
        /// <unmanaged-short>GetFill</unmanaged-short>
        public DXNET.Direct2D1.Brush Fill
        {
            get
            {
                GetFill(out var __output__);
                return __output__;
            }

            set => SetFill(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStrokeDashesCount</unmanaged>
        /// <unmanaged-short>GetStrokeDashesCount</unmanaged-short>
        public System.Int32 StrokeDashesCount
        {
            get => GetStrokeDashesCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "brush">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgGlyphStyle::SetFill([In, Optional] ID2D1Brush* brush)</unmanaged>
        /// <unmanaged-short>ID2D1SvgGlyphStyle::SetFill</unmanaged-short>
        internal unsafe void SetFill(DXNET.Direct2D1.Brush brush)
        {
            System.IntPtr brush_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)brush_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "brush">No documentation.</param>
        /// <unmanaged>void ID2D1SvgGlyphStyle::GetFill([Out, Optional] ID2D1Brush** brush)</unmanaged>
        /// <unmanaged-short>ID2D1SvgGlyphStyle::GetFill</unmanaged-short>
        internal unsafe void GetFill(out DXNET.Direct2D1.Brush brush)
        {
            System.IntPtr brush_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &brush_, (*(void ***)this._nativePointer)[5]);
            if (brush_ != System.IntPtr.Zero)
                brush = new DXNET.Direct2D1.Brush(brush_);
            else
                brush = null;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "strokeWidth">No documentation.</param>
        /// <param name = "dashes">No documentation.</param>
        /// <param name = "dashesCount">No documentation.</param>
        /// <param name = "dashOffset">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgGlyphStyle::SetStroke([In, Optional] ID2D1Brush* brush,[In] float strokeWidth,[In, Buffer, Optional] const float* dashes,[In] unsigned int dashesCount,[In] float dashOffset)</unmanaged>
        /// <unmanaged-short>ID2D1SvgGlyphStyle::SetStroke</unmanaged-short>
        public unsafe void SetStroke(DXNET.Direct2D1.Brush brush, System.Single strokeWidth, System.Single[] dashes, System.Int32 dashesCount, System.Single dashOffset)
        {
            System.IntPtr brush_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            brush_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(brush);
            fixed (void *dashes_ = dashes)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)brush_, strokeWidth, dashes_, dashesCount, dashOffset, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1SvgGlyphStyle::GetStrokeDashesCount()</unmanaged>
        /// <unmanaged-short>ID2D1SvgGlyphStyle::GetStrokeDashesCount</unmanaged-short>
        internal unsafe System.Int32 GetStrokeDashesCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "brush">No documentation.</param>
        /// <param name = "strokeWidth">No documentation.</param>
        /// <param name = "dashes">No documentation.</param>
        /// <param name = "dashesCount">No documentation.</param>
        /// <param name = "dashOffset">No documentation.</param>
        /// <unmanaged>void ID2D1SvgGlyphStyle::GetStroke([Out, Optional] ID2D1Brush** brush,[Out, Optional] float* strokeWidth,[Out, Buffer, Optional] float* dashes,[In] unsigned int dashesCount,[Out, Optional] float* dashOffset)</unmanaged>
        /// <unmanaged-short>ID2D1SvgGlyphStyle::GetStroke</unmanaged-short>
        public unsafe void GetStroke(out DXNET.Direct2D1.Brush brush, out System.Single strokeWidth, System.Single[] dashes, System.Int32 dashesCount, out System.Single dashOffset)
        {
            System.IntPtr brush_ = System.IntPtr.Zero;
            fixed (void *dashOffset_ = &dashOffset)
                fixed (void *dashes_ = dashes)
                    fixed (void *strokeWidth_ = &strokeWidth)
                        DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &brush_, strokeWidth_, dashes_, dashesCount, dashOffset_, (*(void ***)this._nativePointer)[8]);
            if (brush_ != System.IntPtr.Zero)
                brush = new DXNET.Direct2D1.Brush(brush_);
            else
                brush = null;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("d59bab0a-68a2-455b-a5dc-9eb2854e2490")]
    public partial class SvgPaint : DXNET.Direct2D1.SvgAttribute
    {
        public SvgPaint(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SvgPaint(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SvgPaint(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPaintType / SetPaintType</unmanaged>
        /// <unmanaged-short>GetPaintType</unmanaged-short>
        public DXNET.Direct2D1.SvgPaintType PaintType
        {
            get => GetPaintType();
            set => SetPaintType(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetColor / SetColor</unmanaged>
        /// <unmanaged-short>GetColor</unmanaged-short>
        public DXNET.Mathematics.Interop.RawColor4 Color
        {
            get
            {
                GetColor(out var __output__);
                return __output__;
            }

            set => SetColor(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetIdLength</unmanaged>
        /// <unmanaged-short>GetIdLength</unmanaged-short>
        public System.Int32 IdLength
        {
            get => GetIdLength();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "paintType">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgPaint::SetPaintType([In] D2D1_SVG_PAINT_TYPE paintType)</unmanaged>
        /// <unmanaged-short>ID2D1SvgPaint::SetPaintType</unmanaged-short>
        internal unsafe void SetPaintType(DXNET.Direct2D1.SvgPaintType paintType)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)paintType), (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_SVG_PAINT_TYPE ID2D1SvgPaint::GetPaintType()</unmanaged>
        /// <unmanaged-short>ID2D1SvgPaint::GetPaintType</unmanaged-short>
        internal unsafe DXNET.Direct2D1.SvgPaintType GetPaintType()
        {
            DXNET.Direct2D1.SvgPaintType __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1SvgPaintType(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "color">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgPaint::SetColor([In] const D2D_COLOR_F* color)</unmanaged>
        /// <unmanaged-short>ID2D1SvgPaint::SetColor</unmanaged-short>
        internal unsafe void SetColor(DXNET.Mathematics.Interop.RawColor4 color)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &color, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "color">No documentation.</param>
        /// <unmanaged>void ID2D1SvgPaint::GetColor([Out] D2D_COLOR_F* color)</unmanaged>
        /// <unmanaged-short>ID2D1SvgPaint::GetColor</unmanaged-short>
        internal unsafe void GetColor(out DXNET.Mathematics.Interop.RawColor4 color)
        {
            color = default (DXNET.Mathematics.Interop.RawColor4);
            fixed (void *color_ = &color)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, color_, (*(void ***)this._nativePointer)[9]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "id">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgPaint::SetId([In] const wchar_t* id)</unmanaged>
        /// <unmanaged-short>ID2D1SvgPaint::SetId</unmanaged-short>
        public unsafe void SetId(System.String id)
        {
            DXNET.Result __result__;
            fixed (char *id_ = id)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)id_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "id">No documentation.</param>
        /// <param name = "idCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgPaint::GetId([Out, Buffer] wchar_t* id,[In] unsigned int idCount)</unmanaged>
        /// <unmanaged-short>ID2D1SvgPaint::GetId</unmanaged-short>
        public unsafe void GetId(System.IntPtr id, System.Int32 idCount)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)id, idCount, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1SvgPaint::GetIdLength()</unmanaged>
        /// <unmanaged-short>ID2D1SvgPaint::GetIdLength</unmanaged-short>
        internal unsafe System.Int32 GetIdLength()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("c095e4f4-bb98-43d6-9745-4d1b84ec9888")]
    public partial class SvgPathData : DXNET.Direct2D1.SvgAttribute
    {
        public SvgPathData(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SvgPathData(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SvgPathData(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSegmentDataCount</unmanaged>
        /// <unmanaged-short>GetSegmentDataCount</unmanaged-short>
        public System.Int32 SegmentDataCount
        {
            get => GetSegmentDataCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetCommandsCount</unmanaged>
        /// <unmanaged-short>GetCommandsCount</unmanaged-short>
        public System.Int32 CommandsCount
        {
            get => GetCommandsCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dataCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgPathData::RemoveSegmentDataAtEnd([In] unsigned int dataCount)</unmanaged>
        /// <unmanaged-short>ID2D1SvgPathData::RemoveSegmentDataAtEnd</unmanaged-short>
        public unsafe void RemoveSegmentDataAtEnd(System.Int32 dataCount)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, dataCount, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "data">No documentation.</param>
        /// <param name = "dataCount">No documentation.</param>
        /// <param name = "startIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgPathData::UpdateSegmentData([In, Buffer] const float* data,[In] unsigned int dataCount,[In] unsigned int startIndex)</unmanaged>
        /// <unmanaged-short>ID2D1SvgPathData::UpdateSegmentData</unmanaged-short>
        public unsafe void UpdateSegmentData(System.Single[] data, System.Int32 dataCount, System.Int32 startIndex)
        {
            DXNET.Result __result__;
            fixed (void *data_ = data)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, data_, dataCount, startIndex, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "data">No documentation.</param>
        /// <param name = "dataCount">No documentation.</param>
        /// <param name = "startIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgPathData::GetSegmentData([Out, Buffer] float* data,[In] unsigned int dataCount,[In] unsigned int startIndex)</unmanaged>
        /// <unmanaged-short>ID2D1SvgPathData::GetSegmentData</unmanaged-short>
        public unsafe void GetSegmentData(System.Single[] data, System.Int32 dataCount, System.Int32 startIndex)
        {
            DXNET.Result __result__;
            fixed (void *data_ = data)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, data_, dataCount, startIndex, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1SvgPathData::GetSegmentDataCount()</unmanaged>
        /// <unmanaged-short>ID2D1SvgPathData::GetSegmentDataCount</unmanaged-short>
        internal unsafe System.Int32 GetSegmentDataCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "commandsCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgPathData::RemoveCommandsAtEnd([In] unsigned int commandsCount)</unmanaged>
        /// <unmanaged-short>ID2D1SvgPathData::RemoveCommandsAtEnd</unmanaged-short>
        public unsafe void RemoveCommandsAtEnd(System.Int32 commandsCount)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, commandsCount, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "commands">No documentation.</param>
        /// <param name = "commandsCount">No documentation.</param>
        /// <param name = "startIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgPathData::UpdateCommands([In, Buffer] const D2D1_SVG_PATH_COMMAND* commands,[In] unsigned int commandsCount,[In] unsigned int startIndex)</unmanaged>
        /// <unmanaged-short>ID2D1SvgPathData::UpdateCommands</unmanaged-short>
        public unsafe void UpdateCommands(DXNET.Direct2D1.SvgPathCommand[] commands, System.Int32 commandsCount, System.Int32 startIndex)
        {
            DXNET.Result __result__;
            fixed (void *commands_ = commands)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, commands_, commandsCount, startIndex, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "commands">No documentation.</param>
        /// <param name = "commandsCount">No documentation.</param>
        /// <param name = "startIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgPathData::GetCommands([Out, Buffer] D2D1_SVG_PATH_COMMAND* commands,[In] unsigned int commandsCount,[In] unsigned int startIndex)</unmanaged>
        /// <unmanaged-short>ID2D1SvgPathData::GetCommands</unmanaged-short>
        public unsafe void GetCommands(DXNET.Direct2D1.SvgPathCommand[] commands, System.Int32 commandsCount, System.Int32 startIndex)
        {
            DXNET.Result __result__;
            fixed (void *commands_ = commands)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, commands_, commandsCount, startIndex, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1SvgPathData::GetCommandsCount()</unmanaged>
        /// <unmanaged-short>ID2D1SvgPathData::GetCommandsCount</unmanaged-short>
        internal unsafe System.Int32 GetCommandsCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[13]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fillMode">No documentation.</param>
        /// <param name = "athGeometryRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgPathData::CreatePathGeometry([In] D2D1_FILL_MODE fillMode,[Out] ID2D1PathGeometry1** pathGeometry)</unmanaged>
        /// <unmanaged-short>ID2D1SvgPathData::CreatePathGeometry</unmanaged-short>
        public unsafe void CreatePathGeometry(DXNET.Direct2D1.FillMode fillMode, out DXNET.Direct2D1.PathGeometry1 athGeometryRef)
        {
            System.IntPtr athGeometryRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)fillMode), &athGeometryRef_, (*(void ***)this._nativePointer)[14]);
            if (athGeometryRef_ != System.IntPtr.Zero)
                athGeometryRef = new DXNET.Direct2D1.PathGeometry1(athGeometryRef_);
            else
                athGeometryRef = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("9dbe4c0d-3572-4dd9-9825-5530813bb712")]
    public partial class SvgPointCollection : DXNET.Direct2D1.SvgAttribute
    {
        public SvgPointCollection(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SvgPointCollection(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SvgPointCollection(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPointsCount</unmanaged>
        /// <unmanaged-short>GetPointsCount</unmanaged-short>
        public System.Int32 PointsCount
        {
            get => GetPointsCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "pointsCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgPointCollection::RemovePointsAtEnd([In] unsigned int pointsCount)</unmanaged>
        /// <unmanaged-short>ID2D1SvgPointCollection::RemovePointsAtEnd</unmanaged-short>
        public unsafe void RemovePointsAtEnd(System.Int32 pointsCount)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, pointsCount, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ointsRef">No documentation.</param>
        /// <param name = "pointsCount">No documentation.</param>
        /// <param name = "startIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgPointCollection::UpdatePoints([In, Buffer] const D2D_POINT_2F* points,[In] unsigned int pointsCount,[In] unsigned int startIndex)</unmanaged>
        /// <unmanaged-short>ID2D1SvgPointCollection::UpdatePoints</unmanaged-short>
        public unsafe void UpdatePoints(DXNET.Mathematics.Interop.RawVector2[] ointsRef, System.Int32 pointsCount, System.Int32 startIndex)
        {
            DXNET.Result __result__;
            fixed (void *ointsRef_ = ointsRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, ointsRef_, pointsCount, startIndex, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ointsRef">No documentation.</param>
        /// <param name = "pointsCount">No documentation.</param>
        /// <param name = "startIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgPointCollection::GetPoints([Out, Buffer] D2D_POINT_2F* points,[In] unsigned int pointsCount,[In] unsigned int startIndex)</unmanaged>
        /// <unmanaged-short>ID2D1SvgPointCollection::GetPoints</unmanaged-short>
        public unsafe void GetPoints(DXNET.Mathematics.Interop.RawVector2[] ointsRef, System.Int32 pointsCount, System.Int32 startIndex)
        {
            DXNET.Result __result__;
            fixed (void *ointsRef_ = ointsRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, ointsRef_, pointsCount, startIndex, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1SvgPointCollection::GetPointsCount()</unmanaged>
        /// <unmanaged-short>ID2D1SvgPointCollection::GetPointsCount</unmanaged-short>
        internal unsafe System.Int32 GetPointsCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("f1c0ca52-92a3-4f00-b4ce-f35691efd9d9")]
    public partial class SvgStrokeDashArray : DXNET.Direct2D1.SvgAttribute
    {
        public SvgStrokeDashArray(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator SvgStrokeDashArray(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new SvgStrokeDashArray(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDashesCount</unmanaged>
        /// <unmanaged-short>GetDashesCount</unmanaged-short>
        public System.Int32 DashesCount
        {
            get => GetDashesCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dashesCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgStrokeDashArray::RemoveDashesAtEnd([In] unsigned int dashesCount)</unmanaged>
        /// <unmanaged-short>ID2D1SvgStrokeDashArray::RemoveDashesAtEnd</unmanaged-short>
        public unsafe void RemoveDashesAtEnd(System.Int32 dashesCount)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, dashesCount, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dashes">No documentation.</param>
        /// <param name = "dashesCount">No documentation.</param>
        /// <param name = "startIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgStrokeDashArray::UpdateDashes([In, Buffer] const D2D1_SVG_LENGTH* dashes,[In] unsigned int dashesCount,[In] unsigned int startIndex)</unmanaged>
        /// <unmanaged-short>ID2D1SvgStrokeDashArray::UpdateDashes</unmanaged-short>
        public unsafe void UpdateDashes(DXNET.Direct2D1.SvgLength[] dashes, System.Int32 dashesCount, System.Int32 startIndex)
        {
            DXNET.Result __result__;
            fixed (void *dashes_ = dashes)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, dashes_, dashesCount, startIndex, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dashes">No documentation.</param>
        /// <param name = "dashesCount">No documentation.</param>
        /// <param name = "startIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgStrokeDashArray::UpdateDashes([In, Buffer] const float* dashes,[In] unsigned int dashesCount,[In] unsigned int startIndex)</unmanaged>
        /// <unmanaged-short>ID2D1SvgStrokeDashArray::UpdateDashes</unmanaged-short>
        public unsafe void UpdateDashes(System.Single[] dashes, System.Int32 dashesCount, System.Int32 startIndex)
        {
            DXNET.Result __result__;
            fixed (void *dashes_ = dashes)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, dashes_, dashesCount, startIndex, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dashes">No documentation.</param>
        /// <param name = "dashesCount">No documentation.</param>
        /// <param name = "startIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgStrokeDashArray::GetDashes([Out, Buffer] D2D1_SVG_LENGTH* dashes,[In] unsigned int dashesCount,[In] unsigned int startIndex)</unmanaged>
        /// <unmanaged-short>ID2D1SvgStrokeDashArray::GetDashes</unmanaged-short>
        public unsafe void GetDashes(DXNET.Direct2D1.SvgLength[] dashes, System.Int32 dashesCount, System.Int32 startIndex)
        {
            DXNET.Result __result__;
            fixed (void *dashes_ = dashes)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, dashes_, dashesCount, startIndex, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dashes">No documentation.</param>
        /// <param name = "dashesCount">No documentation.</param>
        /// <param name = "startIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1SvgStrokeDashArray::GetDashes([Out, Buffer] float* dashes,[In] unsigned int dashesCount,[In] unsigned int startIndex)</unmanaged>
        /// <unmanaged-short>ID2D1SvgStrokeDashArray::GetDashes</unmanaged-short>
        public unsafe void GetDashes(System.Single[] dashes, System.Int32 dashesCount, System.Int32 startIndex)
        {
            DXNET.Result __result__;
            fixed (void *dashes_ = dashes)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, dashes_, dashesCount, startIndex, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1SvgStrokeDashArray::GetDashesCount()</unmanaged>
        /// <unmanaged-short>ID2D1SvgStrokeDashArray::GetDashesCount</unmanaged-short>
        internal unsafe System.Int32 GetDashesCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[11]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906c1-12e2-11dc-9fed-001143a055f9")]
    public partial interface TessellationSink : DXNET.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906c1-12e2-11dc-9fed-001143a055f9")]
    internal partial class TessellationSinkNative : DXNET.ComObject, DXNET.Direct2D1.TessellationSink
    {
        public TessellationSinkNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TessellationSinkNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TessellationSinkNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "triangles">No documentation.</param>
        /// <param name = "trianglesCount">No documentation.</param>
        /// <unmanaged>void ID2D1TessellationSink::AddTriangles([In, Buffer] const D2D1_TRIANGLE* triangles,[In] unsigned int trianglesCount)</unmanaged>
        /// <unmanaged-short>ID2D1TessellationSink::AddTriangles</unmanaged-short>
        internal unsafe void AddTriangles_(DXNET.Direct2D1.Triangle[] triangles, System.Int32 trianglesCount)
        {
            fixed (void *triangles_ = triangles)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, triangles_, trianglesCount, (*(void ***)this._nativePointer)[3]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1TessellationSink::Close()</unmanaged>
        /// <unmanaged-short>ID2D1TessellationSink::Close</unmanaged-short>
        internal unsafe void Close_()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ef1a287d-342a-4f76-8fdb-da0d6ea9f92b")]
    public partial interface Transform : DXNET.Direct2D1.TransformNode
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd906bb-12e2-11dc-9fed-001143a055f9")]
    public partial class TransformedGeometry : DXNET.Direct2D1.Geometry
    {
        public TransformedGeometry(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TransformedGeometry(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TransformedGeometry(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSourceGeometry</unmanaged>
        /// <unmanaged-short>GetSourceGeometry</unmanaged-short>
        public DXNET.Direct2D1.Geometry SourceGeometry
        {
            get
            {
                GetSourceGeometry(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetTransform</unmanaged>
        /// <unmanaged-short>GetTransform</unmanaged-short>
        public DXNET.Mathematics.Interop.RawMatrix3x2 Transform
        {
            get
            {
                GetTransform(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sourceGeometry">No documentation.</param>
        /// <unmanaged>void ID2D1TransformedGeometry::GetSourceGeometry([Out] ID2D1Geometry** sourceGeometry)</unmanaged>
        /// <unmanaged-short>ID2D1TransformedGeometry::GetSourceGeometry</unmanaged-short>
        internal unsafe void GetSourceGeometry(out DXNET.Direct2D1.Geometry sourceGeometry)
        {
            System.IntPtr sourceGeometry_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &sourceGeometry_, (*(void ***)this._nativePointer)[17]);
            if (sourceGeometry_ != System.IntPtr.Zero)
                sourceGeometry = new DXNET.Direct2D1.Geometry(sourceGeometry_);
            else
                sourceGeometry = null;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "transform">No documentation.</param>
        /// <unmanaged>void ID2D1TransformedGeometry::GetTransform([Out] D2D_MATRIX_3X2_F* transform)</unmanaged>
        /// <unmanaged-short>ID2D1TransformedGeometry::GetTransform</unmanaged-short>
        internal unsafe void GetTransform(out DXNET.Mathematics.Interop.RawMatrix3x2 transform)
        {
            transform = default (DXNET.Mathematics.Interop.RawMatrix3x2);
            fixed (void *transform_ = &transform)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, transform_, (*(void ***)this._nativePointer)[18]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7f1f79e5-2796-416c-8f55-700f911445e5")]
    public partial class TransformedImageSource : DXNET.Direct2D1.Image
    {
        public TransformedImageSource(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TransformedImageSource(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TransformedImageSource(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSource</unmanaged>
        /// <unmanaged-short>GetSource</unmanaged-short>
        public DXNET.Direct2D1.ImageSource Source
        {
            get
            {
                GetSource(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetProperties</unmanaged>
        /// <unmanaged-short>GetProperties</unmanaged-short>
        public DXNET.Direct2D1.TransformedImageSourceProperties Properties
        {
            get
            {
                GetProperties(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "imageSource">No documentation.</param>
        /// <unmanaged>void ID2D1TransformedImageSource::GetSource([Out, Optional] ID2D1ImageSource** imageSource)</unmanaged>
        /// <unmanaged-short>ID2D1TransformedImageSource::GetSource</unmanaged-short>
        internal unsafe void GetSource(out DXNET.Direct2D1.ImageSource imageSource)
        {
            System.IntPtr imageSource_ = System.IntPtr.Zero;
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &imageSource_, (*(void ***)this._nativePointer)[4]);
            if (imageSource_ != System.IntPtr.Zero)
                imageSource = new DXNET.Direct2D1.ImageSource(imageSource_);
            else
                imageSource = null;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ropertiesRef">No documentation.</param>
        /// <unmanaged>void ID2D1TransformedImageSource::GetProperties([Out] D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES* properties)</unmanaged>
        /// <unmanaged-short>ID2D1TransformedImageSource::GetProperties</unmanaged-short>
        internal unsafe void GetProperties(out DXNET.Direct2D1.TransformedImageSourceProperties ropertiesRef)
        {
            ropertiesRef = default (DXNET.Direct2D1.TransformedImageSourceProperties);
            fixed (void *ropertiesRef_ = &ropertiesRef)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, ropertiesRef_, (*(void ***)this._nativePointer)[5]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("13d29038-c3e6-4034-9081-13b53a417992")]
    public partial class TransformGraph : DXNET.ComObject
    {
        public TransformGraph(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TransformGraph(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TransformGraph(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetInputCount</unmanaged>
        /// <unmanaged-short>GetInputCount</unmanaged-short>
        public System.Int32 InputCount
        {
            get => GetInputCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1TransformGraph::GetInputCount()</unmanaged>
        /// <unmanaged-short>ID2D1TransformGraph::GetInputCount</unmanaged-short>
        internal unsafe System.Int32 GetInputCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "node">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1TransformGraph::SetSingleTransformNode([In] ID2D1TransformNode* node)</unmanaged>
        /// <unmanaged-short>ID2D1TransformGraph::SetSingleTransformNode</unmanaged-short>
        public unsafe void SetSingleTransformNode(DXNET.Direct2D1.TransformNode node)
        {
            System.IntPtr node_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            node_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.TransformNode>(node);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)node_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "node">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1TransformGraph::AddNode([In] ID2D1TransformNode* node)</unmanaged>
        /// <unmanaged-short>ID2D1TransformGraph::AddNode</unmanaged-short>
        public unsafe void AddNode(DXNET.Direct2D1.TransformNode node)
        {
            System.IntPtr node_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            node_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.TransformNode>(node);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)node_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "node">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1TransformGraph::RemoveNode([In] ID2D1TransformNode* node)</unmanaged>
        /// <unmanaged-short>ID2D1TransformGraph::RemoveNode</unmanaged-short>
        public unsafe void RemoveNode(DXNET.Direct2D1.TransformNode node)
        {
            System.IntPtr node_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            node_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.TransformNode>(node);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)node_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "node">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1TransformGraph::SetOutputNode([In] ID2D1TransformNode* node)</unmanaged>
        /// <unmanaged-short>ID2D1TransformGraph::SetOutputNode</unmanaged-short>
        public unsafe void SetOutputNode(DXNET.Direct2D1.TransformNode node)
        {
            System.IntPtr node_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            node_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.TransformNode>(node);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)node_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fromNode">No documentation.</param>
        /// <param name = "toNode">No documentation.</param>
        /// <param name = "toNodeInputIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1TransformGraph::ConnectNode([In] ID2D1TransformNode* fromNode,[In] ID2D1TransformNode* toNode,[In] unsigned int toNodeInputIndex)</unmanaged>
        /// <unmanaged-short>ID2D1TransformGraph::ConnectNode</unmanaged-short>
        public unsafe void ConnectNode(DXNET.Direct2D1.TransformNode fromNode, DXNET.Direct2D1.TransformNode toNode, System.Int32 toNodeInputIndex)
        {
            System.IntPtr fromNode_ = System.IntPtr.Zero;
            System.IntPtr toNode_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fromNode_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.TransformNode>(fromNode);
            toNode_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.TransformNode>(toNode);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fromNode_, (void *)toNode_, toNodeInputIndex, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "toEffectInputIndex">No documentation.</param>
        /// <param name = "node">No documentation.</param>
        /// <param name = "toNodeInputIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1TransformGraph::ConnectToEffectInput([In] unsigned int toEffectInputIndex,[In] ID2D1TransformNode* node,[In] unsigned int toNodeInputIndex)</unmanaged>
        /// <unmanaged-short>ID2D1TransformGraph::ConnectToEffectInput</unmanaged-short>
        public unsafe void ConnectToEffectInput(System.Int32 toEffectInputIndex, DXNET.Direct2D1.TransformNode node, System.Int32 toNodeInputIndex)
        {
            System.IntPtr node_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            node_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.TransformNode>(node);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, toEffectInputIndex, (void *)node_, toNodeInputIndex, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>void ID2D1TransformGraph::Clear()</unmanaged>
        /// <unmanaged-short>ID2D1TransformGraph::Clear</unmanaged-short>
        public unsafe void Clear()
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[10]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "effectInputIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1TransformGraph::SetPassthroughGraph([In] unsigned int effectInputIndex)</unmanaged>
        /// <unmanaged-short>ID2D1TransformGraph::SetPassthroughGraph</unmanaged-short>
        public unsafe void SetPassthroughGraph(System.Int32 effectInputIndex)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, effectInputIndex, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ef1a287d-342a-4f76-8fdb-da0d6ea9f92b")]
    public partial class TransformNative : DXNET.Direct2D1.TransformNodeNative, DXNET.Direct2D1.Transform
    {
        public TransformNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TransformNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TransformNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "outputRect">No documentation.</param>
        /// <param name = "inputRects">No documentation.</param>
        /// <param name = "inputRectsCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Transform::MapOutputRectToInputRects([In] const RECT* outputRect,[Out, Buffer] RECT* inputRects,[In] unsigned int inputRectsCount)</unmanaged>
        /// <unmanaged-short>ID2D1Transform::MapOutputRectToInputRects</unmanaged-short>
        internal unsafe void MapOutputRectToInputRects_(DXNET.Mathematics.Interop.RawRectangle outputRect, DXNET.Mathematics.Interop.RawRectangle[] inputRects, System.Int32 inputRectsCount)
        {
            DXNET.Result __result__;
            fixed (void *inputRects_ = inputRects)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &outputRect, inputRects_, inputRectsCount, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "inputRects">No documentation.</param>
        /// <param name = "inputOpaqueSubRects">No documentation.</param>
        /// <param name = "inputRectCount">No documentation.</param>
        /// <param name = "outputOpaqueSubRect">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Transform::MapInputRectsToOutputRect([In, Buffer] const RECT* inputRects,[In, Buffer] const RECT* inputOpaqueSubRects,[In] unsigned int inputRectCount,[Out] RECT* outputRect,[Out] RECT* outputOpaqueSubRect)</unmanaged>
        /// <unmanaged-short>ID2D1Transform::MapInputRectsToOutputRect</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawRectangle MapInputRectsToOutputRect_(DXNET.Mathematics.Interop.RawRectangle[] inputRects, DXNET.Mathematics.Interop.RawRectangle[] inputOpaqueSubRects, System.Int32 inputRectCount, out DXNET.Mathematics.Interop.RawRectangle outputOpaqueSubRect)
        {
            DXNET.Mathematics.Interop.RawRectangle outputRect;
            outputOpaqueSubRect = default (DXNET.Mathematics.Interop.RawRectangle);
            DXNET.Result __result__;
            fixed (void *outputOpaqueSubRect_ = &outputOpaqueSubRect)
                fixed (void *inputOpaqueSubRects_ = inputOpaqueSubRects)
                    fixed (void *inputRects_ = inputRects)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, inputRects_, inputOpaqueSubRects_, inputRectCount, &outputRect, outputOpaqueSubRect_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
            return outputRect;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "inputIndex">No documentation.</param>
        /// <param name = "invalidInputRect">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1Transform::MapInvalidRect([In] unsigned int inputIndex,[In] RECT invalidInputRect,[Out] RECT* invalidOutputRect)</unmanaged>
        /// <unmanaged-short>ID2D1Transform::MapInvalidRect</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawRectangle MapInvalidRect_(System.Int32 inputIndex, DXNET.Mathematics.Interop.RawRectangle invalidInputRect)
        {
            DXNET.Mathematics.Interop.RawRectangle invalidOutputRect;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, inputIndex, invalidInputRect, &invalidOutputRect, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
            return invalidOutputRect;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("b2efe1e7-729f-4102-949f-505fa21bf666")]
    public partial interface TransformNode : DXNET.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("b2efe1e7-729f-4102-949f-505fa21bf666")]
    public partial class TransformNodeNative : DXNET.ComObject, DXNET.Direct2D1.TransformNode
    {
        public TransformNodeNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TransformNodeNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TransformNodeNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetInputCount</unmanaged>
        /// <unmanaged-short>GetInputCount</unmanaged-short>
        public System.Int32 InputCount_
        {
            get => GetInputCount_();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int ID2D1TransformNode::GetInputCount()</unmanaged>
        /// <unmanaged-short>ID2D1TransformNode::GetInputCount</unmanaged-short>
        internal unsafe System.Int32 GetInputCount_()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("9b8b1336-00a5-4668-92b7-ced5d8bf9b7b")]
    public partial class VertexBuffer : DXNET.ComObject
    {
        public VertexBuffer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator VertexBuffer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new VertexBuffer(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "data">No documentation.</param>
        /// <param name = "bufferSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1VertexBuffer::Map([Out, Buffer] unsigned char** data,[In] unsigned int bufferSize)</unmanaged>
        /// <unmanaged-short>ID2D1VertexBuffer::Map</unmanaged-short>
        public unsafe void Map(System.Byte[] data, System.Int32 bufferSize)
        {
            DXNET.Result __result__;
            fixed (void *data_ = data)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, data_, bufferSize, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1VertexBuffer::Unmap()</unmanaged>
        /// <unmanaged-short>ID2D1VertexBuffer::Unmap</unmanaged-short>
        public unsafe void Unmap()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cd90698-12e2-11dc-9fed-001143a055f9")]
    public partial class WindowRenderTarget : DXNET.Direct2D1.RenderTarget
    {
        public WindowRenderTarget(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator WindowRenderTarget(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new WindowRenderTarget(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetHwnd</unmanaged>
        /// <unmanaged-short>GetHwnd</unmanaged-short>
        public System.IntPtr Hwnd
        {
            get => GetHwnd();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D1_WINDOW_STATE ID2D1HwndRenderTarget::CheckWindowState()</unmanaged>
        /// <unmanaged-short>ID2D1HwndRenderTarget::CheckWindowState</unmanaged-short>
        public unsafe DXNET.Direct2D1.WindowState CheckWindowState()
        {
            DXNET.Direct2D1.WindowState __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1WindowState(this._nativePointer, (*(void ***)this._nativePointer)[57]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ixelSizeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID2D1HwndRenderTarget::Resize([In] const D2D_SIZE_U* pixelSize)</unmanaged>
        /// <unmanaged-short>ID2D1HwndRenderTarget::Resize</unmanaged-short>
        public unsafe void Resize(DXNET.Size2 ixelSizeRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &ixelSizeRef, (*(void ***)this._nativePointer)[58]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HWND ID2D1HwndRenderTarget::GetHwnd()</unmanaged>
        /// <unmanaged-short>ID2D1HwndRenderTarget::GetHwnd</unmanaged-short>
        internal unsafe System.IntPtr GetHwnd()
        {
            System.IntPtr __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[59]);
            return __result__;
        }
    }
}
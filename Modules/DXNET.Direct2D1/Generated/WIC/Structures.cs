// <auto-generated/>

namespace DXNET.WIC
{
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>WICBitmapPattern</unmanaged>
    /// <unmanaged-short>WICBitmapPattern</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct BitmapPattern
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Position</unmanaged>
        /// <unmanaged-short>Position</unmanaged-short>
        public System.Int64 Position;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Length</unmanaged>
        /// <unmanaged-short>Length</unmanaged-short>
        public System.Int32 Length;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Pattern</unmanaged>
        /// <unmanaged-short>Pattern</unmanaged-short>
        public System.IntPtr Pattern;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Mask</unmanaged>
        /// <unmanaged-short>Mask</unmanaged-short>
        public System.IntPtr Mask;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>EndOfStream</unmanaged>
        /// <unmanaged-short>EndOfStream</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool EndOfStream;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>WICBitmapPlane</unmanaged>
    /// <unmanaged-short>WICBitmapPlane</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct BitmapPlane
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Format</unmanaged>
        /// <unmanaged-short>Format</unmanaged-short>
        public System.Guid Format;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pbBuffer</unmanaged>
        /// <unmanaged-short>pbBuffer</unmanaged-short>
        public System.IntPtr PbBuffer;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>cbStride</unmanaged>
        /// <unmanaged-short>cbStride</unmanaged-short>
        public System.Int32 CbStride;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>cbBufferSize</unmanaged>
        /// <unmanaged-short>cbBufferSize</unmanaged-short>
        public System.Int32 CbBufferSize;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>WICBitmapPlaneDescription</unmanaged>
    /// <unmanaged-short>WICBitmapPlaneDescription</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct BitmapPlaneDescription
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Format</unmanaged>
        /// <unmanaged-short>Format</unmanaged-short>
        public System.Guid Format;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Width</unmanaged>
        /// <unmanaged-short>Width</unmanaged-short>
        public System.Int32 Width;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Height</unmanaged>
        /// <unmanaged-short>Height</unmanaged-short>
        public System.Int32 Height;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>WICDdsFormatInfo</unmanaged>
    /// <unmanaged-short>WICDdsFormatInfo</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct DdsFormatInfo
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DxgiFormat</unmanaged>
        /// <unmanaged-short>DxgiFormat</unmanaged-short>
        public DXNET.DXGI.Format DxgiFormat;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>BytesPerBlock</unmanaged>
        /// <unmanaged-short>BytesPerBlock</unmanaged-short>
        public System.Int32 BytesPerBlock;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>BlockWidth</unmanaged>
        /// <unmanaged-short>BlockWidth</unmanaged-short>
        public System.Int32 BlockWidth;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>BlockHeight</unmanaged>
        /// <unmanaged-short>BlockHeight</unmanaged-short>
        public System.Int32 BlockHeight;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>WICDdsParameters</unmanaged>
    /// <unmanaged-short>WICDdsParameters</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct DdsParameters
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Width</unmanaged>
        /// <unmanaged-short>Width</unmanaged-short>
        public System.Int32 Width;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Height</unmanaged>
        /// <unmanaged-short>Height</unmanaged-short>
        public System.Int32 Height;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Depth</unmanaged>
        /// <unmanaged-short>Depth</unmanaged-short>
        public System.Int32 Depth;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>MipLevels</unmanaged>
        /// <unmanaged-short>MipLevels</unmanaged-short>
        public System.Int32 MipLevels;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>ArraySize</unmanaged>
        /// <unmanaged-short>ArraySize</unmanaged-short>
        public System.Int32 ArraySize;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DxgiFormat</unmanaged>
        /// <unmanaged-short>DxgiFormat</unmanaged-short>
        public DXNET.DXGI.Format DxgiFormat;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Dimension</unmanaged>
        /// <unmanaged-short>Dimension</unmanaged-short>
        public DXNET.WIC.DdsDimension Dimension;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>AlphaMode</unmanaged>
        /// <unmanaged-short>AlphaMode</unmanaged-short>
        public DXNET.WIC.DdsAlphaMode AlphaMode;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>WICImageParameters</unmanaged>
    /// <unmanaged-short>WICImageParameters</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct ImageParameters
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>PixelFormat</unmanaged>
        /// <unmanaged-short>PixelFormat</unmanaged-short>
        public DXNET.Direct2D1.PixelFormat PixelFormat;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DpiX</unmanaged>
        /// <unmanaged-short>DpiX</unmanaged-short>
        public System.Single DpiX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DpiY</unmanaged>
        /// <unmanaged-short>DpiY</unmanaged-short>
        public System.Single DpiY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Top</unmanaged>
        /// <unmanaged-short>Top</unmanaged-short>
        public System.Single Top;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Left</unmanaged>
        /// <unmanaged-short>Left</unmanaged-short>
        public System.Single Left;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>PixelWidth</unmanaged>
        /// <unmanaged-short>PixelWidth</unmanaged-short>
        public System.Int32 PixelWidth;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>PixelHeight</unmanaged>
        /// <unmanaged-short>PixelHeight</unmanaged-short>
        public System.Int32 PixelHeight;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>WICJpegFrameHeader</unmanaged>
    /// <unmanaged-short>WICJpegFrameHeader</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct JpegFrameHeader
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Width</unmanaged>
        /// <unmanaged-short>Width</unmanaged-short>
        public System.Int32 Width;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Height</unmanaged>
        /// <unmanaged-short>Height</unmanaged-short>
        public System.Int32 Height;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>TransferMatrix</unmanaged>
        /// <unmanaged-short>TransferMatrix</unmanaged-short>
        public DXNET.WIC.JpegTransferMatrix TransferMatrix;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>ScanType</unmanaged>
        /// <unmanaged-short>ScanType</unmanaged-short>
        public DXNET.WIC.JpegScanType ScanType;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>cComponents</unmanaged>
        /// <unmanaged-short>cComponents</unmanaged-short>
        public System.Int32 CComponents;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>ComponentIdentifiers</unmanaged>
        /// <unmanaged-short>ComponentIdentifiers</unmanaged-short>
        public System.Int32 ComponentIdentifiers;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SampleFactors</unmanaged>
        /// <unmanaged-short>SampleFactors</unmanaged-short>
        public System.Int32 SampleFactors;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>QuantizationTableIndices</unmanaged>
        /// <unmanaged-short>QuantizationTableIndices</unmanaged-short>
        public System.Int32 QuantizationTableIndices;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>WICJpegScanHeader</unmanaged>
    /// <unmanaged-short>WICJpegScanHeader</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct JpegScanHeader
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>cComponents</unmanaged>
        /// <unmanaged-short>cComponents</unmanaged-short>
        public System.Int32 CComponents;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>RestartInterval</unmanaged>
        /// <unmanaged-short>RestartInterval</unmanaged-short>
        public System.Int32 RestartInterval;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>ComponentSelectors</unmanaged>
        /// <unmanaged-short>ComponentSelectors</unmanaged-short>
        public System.Int32 ComponentSelectors;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>HuffmanTableIndices</unmanaged>
        /// <unmanaged-short>HuffmanTableIndices</unmanaged-short>
        public System.Int32 HuffmanTableIndices;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>StartSpectralSelection</unmanaged>
        /// <unmanaged-short>StartSpectralSelection</unmanaged-short>
        public System.Byte StartSpectralSelection;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>EndSpectralSelection</unmanaged>
        /// <unmanaged-short>EndSpectralSelection</unmanaged-short>
        public System.Byte EndSpectralSelection;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SuccessiveApproximationHigh</unmanaged>
        /// <unmanaged-short>SuccessiveApproximationHigh</unmanaged-short>
        public System.Byte SuccessiveApproximationHigh;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SuccessiveApproximationLow</unmanaged>
        /// <unmanaged-short>SuccessiveApproximationLow</unmanaged-short>
        public System.Byte SuccessiveApproximationLow;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>WICRawCapabilitiesInfo</unmanaged>
    /// <unmanaged-short>WICRawCapabilitiesInfo</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct RawCapabilitiesInfo
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>cbSize</unmanaged>
        /// <unmanaged-short>cbSize</unmanaged-short>
        public System.Int32 CbSize;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>CodecMajorVersion</unmanaged>
        /// <unmanaged-short>CodecMajorVersion</unmanaged-short>
        public System.Int32 CodecMajorVersion;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>CodecMinorVersion</unmanaged>
        /// <unmanaged-short>CodecMinorVersion</unmanaged-short>
        public System.Int32 CodecMinorVersion;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>ExposureCompensationSupport</unmanaged>
        /// <unmanaged-short>ExposureCompensationSupport</unmanaged-short>
        public DXNET.WIC.RawCapabilities ExposureCompensationSupport;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>ContrastSupport</unmanaged>
        /// <unmanaged-short>ContrastSupport</unmanaged-short>
        public DXNET.WIC.RawCapabilities ContrastSupport;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>RGBWhitePointSupport</unmanaged>
        /// <unmanaged-short>RGBWhitePointSupport</unmanaged-short>
        public DXNET.WIC.RawCapabilities RGBWhitePointSupport;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>NamedWhitePointSupport</unmanaged>
        /// <unmanaged-short>NamedWhitePointSupport</unmanaged-short>
        public DXNET.WIC.RawCapabilities NamedWhitePointSupport;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>NamedWhitePointSupportMask</unmanaged>
        /// <unmanaged-short>NamedWhitePointSupportMask</unmanaged-short>
        public System.Int32 NamedWhitePointSupportMask;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>KelvinWhitePointSupport</unmanaged>
        /// <unmanaged-short>KelvinWhitePointSupport</unmanaged-short>
        public DXNET.WIC.RawCapabilities KelvinWhitePointSupport;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GammaSupport</unmanaged>
        /// <unmanaged-short>GammaSupport</unmanaged-short>
        public DXNET.WIC.RawCapabilities GammaSupport;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>TintSupport</unmanaged>
        /// <unmanaged-short>TintSupport</unmanaged-short>
        public DXNET.WIC.RawCapabilities TintSupport;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SaturationSupport</unmanaged>
        /// <unmanaged-short>SaturationSupport</unmanaged-short>
        public DXNET.WIC.RawCapabilities SaturationSupport;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SharpnessSupport</unmanaged>
        /// <unmanaged-short>SharpnessSupport</unmanaged-short>
        public DXNET.WIC.RawCapabilities SharpnessSupport;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>NoiseReductionSupport</unmanaged>
        /// <unmanaged-short>NoiseReductionSupport</unmanaged-short>
        public DXNET.WIC.RawCapabilities NoiseReductionSupport;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DestinationColorProfileSupport</unmanaged>
        /// <unmanaged-short>DestinationColorProfileSupport</unmanaged-short>
        public DXNET.WIC.RawCapabilities DestinationColorProfileSupport;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>ToneCurveSupport</unmanaged>
        /// <unmanaged-short>ToneCurveSupport</unmanaged-short>
        public DXNET.WIC.RawCapabilities ToneCurveSupport;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>RotationSupport</unmanaged>
        /// <unmanaged-short>RotationSupport</unmanaged-short>
        public DXNET.WIC.RawRotationCapabilities RotationSupport;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>RenderModeSupport</unmanaged>
        /// <unmanaged-short>RenderModeSupport</unmanaged-short>
        public DXNET.WIC.RawCapabilities RenderModeSupport;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>WICRawToneCurve</unmanaged>
    /// <unmanaged-short>WICRawToneCurve</unmanaged-short>
    public partial struct RawToneCurve
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>cPoints</unmanaged>
        /// <unmanaged-short>cPoints</unmanaged-short>
        public System.Int32 CPoints;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>aPoints</unmanaged>
        /// <unmanaged-short>aPoints</unmanaged-short>
        public DXNET.WIC.RawToneCurvePoint[] APoints
        {
            get => _APoints ?? (_APoints = new DXNET.WIC.RawToneCurvePoint[1]);
            private set => _APoints = value;
        }

        internal DXNET.WIC.RawToneCurvePoint[] _APoints;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.Int32 CPoints;
            public DXNET.WIC.RawToneCurvePoint APoints;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            CPoints = @ref.CPoints;
            fixed (void *__to = &APoints[0], __from = &@ref.APoints)
                DXNET.Utilities.CopyMemory((System.IntPtr)__to, (System.IntPtr)__from, 1 * sizeof (DXNET.WIC.RawToneCurvePoint));
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.CPoints = CPoints;
            fixed (void *__from = &APoints[0], __to = &@ref.APoints)
                DXNET.Utilities.CopyMemory((System.IntPtr)__to, (System.IntPtr)__from, 1 * sizeof (DXNET.WIC.RawToneCurvePoint));
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>WICRawToneCurvePoint</unmanaged>
    /// <unmanaged-short>WICRawToneCurvePoint</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct RawToneCurvePoint
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Input</unmanaged>
        /// <unmanaged-short>Input</unmanaged-short>
        public System.Double Input;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>Output</unmanaged>
        /// <unmanaged-short>Output</unmanaged-short>
        public System.Double Output;
    }
}
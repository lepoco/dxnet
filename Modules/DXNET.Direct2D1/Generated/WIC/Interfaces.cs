// <auto-generated/>

namespace DXNET.WIC
{
    [System.Runtime.InteropServices.GuidAttribute("00000121-a8f2-4877-ba0a-fd2b6645fb94")]
    public partial class Bitmap : DXNET.WIC.BitmapSource
    {
        public Bitmap(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Bitmap(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Bitmap(nativePtr);
        
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetPalette</unmanaged>
        /// <unmanaged-short>SetPalette</unmanaged-short>
        public DXNET.WIC.Palette Palette
        {
            set => SetPalette(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rcLockRef">No documentation.</param>
        /// <param name = "flags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmap::Lock([In] const WICRect* prcLock,[In] DWORD flags,[Out] IWICBitmapLock** ppILock)</unmanaged>
        /// <unmanaged-short>IWICBitmap::Lock</unmanaged-short>
        internal unsafe DXNET.WIC.BitmapLock Lock(System.IntPtr rcLockRef, DXNET.WIC.BitmapLockFlags flags)
        {
            DXNET.WIC.BitmapLock lockOut;
            System.IntPtr lockOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)rcLockRef, unchecked ((System.Int32)flags), &lockOut_, (*(void ***)this._nativePointer)[8]);
            if (lockOut_ != System.IntPtr.Zero)
                lockOut = new DXNET.WIC.BitmapLock(lockOut_);
            else
                lockOut = null;
            __result__.CheckError();
            return lockOut;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "paletteRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmap::SetPalette([In, Optional] IWICPalette* pIPalette)</unmanaged>
        /// <unmanaged-short>IWICBitmap::SetPalette</unmanaged-short>
        internal unsafe void SetPalette(DXNET.WIC.Palette paletteRef)
        {
            System.IntPtr paletteRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            paletteRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.Palette>(paletteRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)paletteRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dpiX">No documentation.</param>
        /// <param name = "dpiY">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmap::SetResolution([In] double dpiX,[In] double dpiY)</unmanaged>
        /// <unmanaged-short>IWICBitmap::SetResolution</unmanaged-short>
        public unsafe void SetResolution(System.Double dpiX, System.Double dpiY)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, dpiX, dpiY, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("E4FBCF03-223D-4e81-9333-D635556DD1B5")]
    public partial class BitmapClipper : DXNET.WIC.BitmapSource
    {
        public BitmapClipper(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapClipper(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapClipper(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sourceRef">No documentation.</param>
        /// <param name = "rectangleRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapClipper::Initialize([In, Optional] IWICBitmapSource* pISource,[In] const WICRect* prc)</unmanaged>
        /// <unmanaged-short>IWICBitmapClipper::Initialize</unmanaged-short>
        internal unsafe void Initialize(DXNET.WIC.BitmapSource sourceRef, System.IntPtr rectangleRef)
        {
            System.IntPtr sourceRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            sourceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(sourceRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)sourceRef_, (void *)rectangleRef, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("E87A44C4-B76E-4c47-8B09-298EB12A2714")]
    public partial class BitmapCodecInfo : DXNET.WIC.ComponentInfo
    {
        public BitmapCodecInfo(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapCodecInfo(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapCodecInfo(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetContainerFormat</unmanaged>
        /// <unmanaged-short>GetContainerFormat</unmanaged-short>
        public System.Guid ContainerFormat
        {
            get
            {
                GetContainerFormat(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DoesSupportAnimation</unmanaged>
        /// <unmanaged-short>DoesSupportAnimation</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsAnimationSupported
        {
            get
            {
                IsAnimationSupported_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DoesSupportChromakey</unmanaged>
        /// <unmanaged-short>DoesSupportChromakey</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsChromakeySupported
        {
            get
            {
                IsChromakeySupported_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DoesSupportLossless</unmanaged>
        /// <unmanaged-short>DoesSupportLossless</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsLosslessSupported
        {
            get
            {
                IsLosslessSupported_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DoesSupportMultiframe</unmanaged>
        /// <unmanaged-short>DoesSupportMultiframe</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsMultiframeSupported
        {
            get
            {
                IsMultiframeSupported_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "guidContainerFormatRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapCodecInfo::GetContainerFormat([Out] GUID* pguidContainerFormat)</unmanaged>
        /// <unmanaged-short>IWICBitmapCodecInfo::GetContainerFormat</unmanaged-short>
        internal unsafe void GetContainerFormat(out System.Guid guidContainerFormatRef)
        {
            guidContainerFormatRef = default (System.Guid);
            DXNET.Result __result__;
            fixed (void *guidContainerFormatRef_ = &guidContainerFormatRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, guidContainerFormatRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "formats">No documentation.</param>
        /// <param name = "guidPixelFormatsRef">No documentation.</param>
        /// <param name = "actualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapCodecInfo::GetPixelFormats([In] unsigned int cFormats,[In, Buffer] GUID* pguidPixelFormats,[Out] unsigned int* pcActual)</unmanaged>
        /// <unmanaged-short>IWICBitmapCodecInfo::GetPixelFormats</unmanaged-short>
        internal unsafe void GetPixelFormats(System.Int32 formats, System.Guid[] guidPixelFormatsRef, out System.Int32 actualRef)
        {
            DXNET.Result __result__;
            fixed (void *actualRef_ = &actualRef)
                fixed (void *guidPixelFormatsRef_ = guidPixelFormatsRef)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, formats, guidPixelFormatsRef_, actualRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cchColorManagementVersion">No documentation.</param>
        /// <param name = "colorManagementVersion">No documentation.</param>
        /// <param name = "cchActualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapCodecInfo::GetColorManagementVersion([In] unsigned int cchColorManagementVersion,[In] wchar_t* wzColorManagementVersion,[Out] unsigned int* pcchActual)</unmanaged>
        /// <unmanaged-short>IWICBitmapCodecInfo::GetColorManagementVersion</unmanaged-short>
        internal unsafe void GetColorManagementVersion(System.Int32 cchColorManagementVersion, System.IntPtr colorManagementVersion, out System.Int32 cchActualRef)
        {
            DXNET.Result __result__;
            fixed (void *cchActualRef_ = &cchActualRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, cchColorManagementVersion, (void *)colorManagementVersion, cchActualRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cchDeviceManufacturer">No documentation.</param>
        /// <param name = "deviceManufacturer">No documentation.</param>
        /// <param name = "cchActualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapCodecInfo::GetDeviceManufacturer([In] unsigned int cchDeviceManufacturer,[In] wchar_t* wzDeviceManufacturer,[Out] unsigned int* pcchActual)</unmanaged>
        /// <unmanaged-short>IWICBitmapCodecInfo::GetDeviceManufacturer</unmanaged-short>
        internal unsafe void GetDeviceManufacturer(System.Int32 cchDeviceManufacturer, System.IntPtr deviceManufacturer, out System.Int32 cchActualRef)
        {
            DXNET.Result __result__;
            fixed (void *cchActualRef_ = &cchActualRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, cchDeviceManufacturer, (void *)deviceManufacturer, cchActualRef_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cchDeviceModels">No documentation.</param>
        /// <param name = "deviceModels">No documentation.</param>
        /// <param name = "cchActualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapCodecInfo::GetDeviceModels([In] unsigned int cchDeviceModels,[In] wchar_t* wzDeviceModels,[Out] unsigned int* pcchActual)</unmanaged>
        /// <unmanaged-short>IWICBitmapCodecInfo::GetDeviceModels</unmanaged-short>
        internal unsafe void GetDeviceModels(System.Int32 cchDeviceModels, System.IntPtr deviceModels, out System.Int32 cchActualRef)
        {
            DXNET.Result __result__;
            fixed (void *cchActualRef_ = &cchActualRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, cchDeviceModels, (void *)deviceModels, cchActualRef_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cchMimeTypes">No documentation.</param>
        /// <param name = "mimeTypes">No documentation.</param>
        /// <param name = "cchActualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapCodecInfo::GetMimeTypes([In] unsigned int cchMimeTypes,[In] wchar_t* wzMimeTypes,[Out] unsigned int* pcchActual)</unmanaged>
        /// <unmanaged-short>IWICBitmapCodecInfo::GetMimeTypes</unmanaged-short>
        internal unsafe void GetMimeTypes(System.Int32 cchMimeTypes, System.IntPtr mimeTypes, out System.Int32 cchActualRef)
        {
            DXNET.Result __result__;
            fixed (void *cchActualRef_ = &cchActualRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, cchMimeTypes, (void *)mimeTypes, cchActualRef_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cchFileExtensions">No documentation.</param>
        /// <param name = "fileExtensions">No documentation.</param>
        /// <param name = "cchActualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapCodecInfo::GetFileExtensions([In] unsigned int cchFileExtensions,[In] wchar_t* wzFileExtensions,[Out] unsigned int* pcchActual)</unmanaged>
        /// <unmanaged-short>IWICBitmapCodecInfo::GetFileExtensions</unmanaged-short>
        internal unsafe void GetFileExtensions(System.Int32 cchFileExtensions, System.IntPtr fileExtensions, out System.Int32 cchActualRef)
        {
            DXNET.Result __result__;
            fixed (void *cchActualRef_ = &cchActualRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, cchFileExtensions, (void *)fileExtensions, cchActualRef_, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fSupportAnimationRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapCodecInfo::DoesSupportAnimation([Out] BOOL* pfSupportAnimation)</unmanaged>
        /// <unmanaged-short>IWICBitmapCodecInfo::DoesSupportAnimation</unmanaged-short>
        internal unsafe void IsAnimationSupported_(out DXNET.Mathematics.Interop.RawBool fSupportAnimationRef)
        {
            fSupportAnimationRef = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *fSupportAnimationRef_ = &fSupportAnimationRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, fSupportAnimationRef_, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fSupportChromakeyRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapCodecInfo::DoesSupportChromakey([Out] BOOL* pfSupportChromakey)</unmanaged>
        /// <unmanaged-short>IWICBitmapCodecInfo::DoesSupportChromakey</unmanaged-short>
        internal unsafe void IsChromakeySupported_(out DXNET.Mathematics.Interop.RawBool fSupportChromakeyRef)
        {
            fSupportChromakeyRef = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *fSupportChromakeyRef_ = &fSupportChromakeyRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, fSupportChromakeyRef_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fSupportLosslessRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapCodecInfo::DoesSupportLossless([Out] BOOL* pfSupportLossless)</unmanaged>
        /// <unmanaged-short>IWICBitmapCodecInfo::DoesSupportLossless</unmanaged-short>
        internal unsafe void IsLosslessSupported_(out DXNET.Mathematics.Interop.RawBool fSupportLosslessRef)
        {
            fSupportLosslessRef = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *fSupportLosslessRef_ = &fSupportLosslessRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, fSupportLosslessRef_, (*(void ***)this._nativePointer)[20]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fSupportMultiframeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapCodecInfo::DoesSupportMultiframe([Out] BOOL* pfSupportMultiframe)</unmanaged>
        /// <unmanaged-short>IWICBitmapCodecInfo::DoesSupportMultiframe</unmanaged-short>
        internal unsafe void IsMultiframeSupported_(out DXNET.Mathematics.Interop.RawBool fSupportMultiframeRef)
        {
            fSupportMultiframeRef = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *fSupportMultiframeRef_ = &fSupportMultiframeRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, fSupportMultiframeRef_, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "mimeType">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapCodecInfo::MatchesMimeType([In] const wchar_t* wzMimeType,[Out] BOOL* pfMatches)</unmanaged>
        /// <unmanaged-short>IWICBitmapCodecInfo::MatchesMimeType</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool MatchesMimeType(System.String mimeType)
        {
            DXNET.Mathematics.Interop.RawBool fMatchesRef;
            DXNET.Result __result__;
            fixed (char *mimeType_ = mimeType)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)mimeType_, &fMatchesRef, (*(void ***)this._nativePointer)[22]);
            __result__.CheckError();
            return fMatchesRef;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("64C1024E-C3CF-4462-8078-88C2B11C46D9")]
    internal partial class BitmapCodecProgressNotification : DXNET.ComObject
    {
        public BitmapCodecProgressNotification(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapCodecProgressNotification(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapCodecProgressNotification(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fnProgressNotificationRef">No documentation.</param>
        /// <param name = "vDataRef">No documentation.</param>
        /// <param name = "progressFlags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapCodecProgressNotification::RegisterProgressNotification([In, Optional] __function__stdcall* pfnProgressNotification,[In, Optional] void* pvData,[In] DWORD dwProgressFlags)</unmanaged>
        /// <unmanaged-short>IWICBitmapCodecProgressNotification::RegisterProgressNotification</unmanaged-short>
        internal unsafe void RegisterProgressNotification(DXNET.FunctionCallback fnProgressNotificationRef, System.IntPtr vDataRef, System.Int32 progressFlags)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, fnProgressNotificationRef, (void *)vDataRef, progressFlags, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("9EDDE9E7-8DEE-47ea-99DF-E6FAF2ED44BF")]
    public partial class BitmapDecoder : DXNET.ComObject
    {
        public BitmapDecoder(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapDecoder(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapDecoder(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetContainerFormat</unmanaged>
        /// <unmanaged-short>GetContainerFormat</unmanaged-short>
        public System.Guid ContainerFormat
        {
            get
            {
                GetContainerFormat(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetDecoderInfo</unmanaged>
        /// <unmanaged-short>GetDecoderInfo</unmanaged-short>
        public DXNET.WIC.BitmapDecoderInfo DecoderInfo
        {
            get
            {
                GetDecoderInfo(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMetadataQueryReader</unmanaged>
        /// <unmanaged-short>GetMetadataQueryReader</unmanaged-short>
        public DXNET.WIC.MetadataQueryReader MetadataQueryReader
        {
            get
            {
                GetMetadataQueryReader(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPreview</unmanaged>
        /// <unmanaged-short>GetPreview</unmanaged-short>
        public DXNET.WIC.BitmapSource Preview
        {
            get
            {
                GetPreview(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetThumbnail</unmanaged>
        /// <unmanaged-short>GetThumbnail</unmanaged-short>
        public DXNET.WIC.BitmapSource Thumbnail
        {
            get
            {
                GetThumbnail(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFrameCount</unmanaged>
        /// <unmanaged-short>GetFrameCount</unmanaged-short>
        public System.Int32 FrameCount
        {
            get
            {
                GetFrameCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "streamRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoder::QueryCapability([In, Optional] IStream* pIStream,[Out] DWORD* pdwCapability)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoder::QueryCapability</unmanaged-short>
        public unsafe DXNET.WIC.BitmapDecoderCapabilities QueryCapability(DXNET.Win32.IStream streamRef)
        {
            System.IntPtr streamRef_ = System.IntPtr.Zero;
            DXNET.WIC.BitmapDecoderCapabilities capabilityRef;
            DXNET.Result __result__;
            streamRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.Win32.IStream>(streamRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)streamRef_, &capabilityRef, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
            return capabilityRef;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "streamRef">No documentation.</param>
        /// <param name = "cacheOptions">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoder::Initialize([In, Optional] IStream* pIStream,[In] WICDecodeOptions cacheOptions)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoder::Initialize</unmanaged-short>
        internal unsafe void Initialize_(DXNET.Win32.IStream streamRef, DXNET.WIC.DecodeOptions cacheOptions)
        {
            System.IntPtr streamRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            streamRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.Win32.IStream>(streamRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)streamRef_, unchecked ((System.Int32)cacheOptions), (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "guidContainerFormatRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoder::GetContainerFormat([Out] GUID* pguidContainerFormat)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoder::GetContainerFormat</unmanaged-short>
        internal unsafe void GetContainerFormat(out System.Guid guidContainerFormatRef)
        {
            guidContainerFormatRef = default (System.Guid);
            DXNET.Result __result__;
            fixed (void *guidContainerFormatRef_ = &guidContainerFormatRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, guidContainerFormatRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "decoderInfoOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoder::GetDecoderInfo([Out] IWICBitmapDecoderInfo** ppIDecoderInfo)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoder::GetDecoderInfo</unmanaged-short>
        internal unsafe void GetDecoderInfo(out DXNET.WIC.BitmapDecoderInfo decoderInfoOut)
        {
            System.IntPtr decoderInfoOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &decoderInfoOut_, (*(void ***)this._nativePointer)[6]);
            if (decoderInfoOut_ != System.IntPtr.Zero)
                decoderInfoOut = new DXNET.WIC.BitmapDecoderInfo(decoderInfoOut_);
            else
                decoderInfoOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "paletteRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoder::CopyPalette([In, Optional] IWICPalette* pIPalette)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoder::CopyPalette</unmanaged-short>
        public unsafe void CopyPalette(DXNET.WIC.Palette paletteRef)
        {
            System.IntPtr paletteRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            paletteRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.Palette>(paletteRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)paletteRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "metadataQueryReaderOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoder::GetMetadataQueryReader([Out] IWICMetadataQueryReader** ppIMetadataQueryReader)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoder::GetMetadataQueryReader</unmanaged-short>
        internal unsafe void GetMetadataQueryReader(out DXNET.WIC.MetadataQueryReader metadataQueryReaderOut)
        {
            System.IntPtr metadataQueryReaderOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &metadataQueryReaderOut_, (*(void ***)this._nativePointer)[8]);
            if (metadataQueryReaderOut_ != System.IntPtr.Zero)
                metadataQueryReaderOut = new DXNET.WIC.MetadataQueryReader(metadataQueryReaderOut_);
            else
                metadataQueryReaderOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmapSourceOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoder::GetPreview([Out] IWICBitmapSource** ppIBitmapSource)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoder::GetPreview</unmanaged-short>
        internal unsafe void GetPreview(out DXNET.WIC.BitmapSource bitmapSourceOut)
        {
            System.IntPtr bitmapSourceOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &bitmapSourceOut_, (*(void ***)this._nativePointer)[9]);
            if (bitmapSourceOut_ != System.IntPtr.Zero)
                bitmapSourceOut = new DXNET.WIC.BitmapSource(bitmapSourceOut_);
            else
                bitmapSourceOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "count">No documentation.</param>
        /// <param name = "colorContextsOut">No documentation.</param>
        /// <param name = "actualCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoder::GetColorContexts([In] unsigned int cCount,[InOut, Buffer, Optional] IWICColorContext** ppIColorContexts,[Out] unsigned int* pcActualCount)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoder::GetColorContexts</unmanaged-short>
        internal unsafe DXNET.Result GetColorContexts(System.Int32 count, DXNET.WIC.ColorContext[] colorContextsOut, out System.Int32 actualCountRef)
        {
            System.IntPtr*colorContextsOut_;
            colorContextsOut_ = (System.IntPtr*)0;
            if (colorContextsOut != null)
            {
                System.IntPtr*_colorContextsOut = stackalloc System.IntPtr[colorContextsOut.Length];
                colorContextsOut_ = _colorContextsOut;
            }

            DXNET.Result __result__;
            if (colorContextsOut != null)
                for (int i = 0; i < colorContextsOut.Length; ++i)
                    (colorContextsOut_)[i] = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.ColorContext>(colorContextsOut[i]);
            fixed (void *actualCountRef_ = &actualCountRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, count, (void *)colorContextsOut_, actualCountRef_, (*(void ***)this._nativePointer)[10]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "thumbnailOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoder::GetThumbnail([Out] IWICBitmapSource** ppIThumbnail)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoder::GetThumbnail</unmanaged-short>
        internal unsafe void GetThumbnail(out DXNET.WIC.BitmapSource thumbnailOut)
        {
            System.IntPtr thumbnailOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &thumbnailOut_, (*(void ***)this._nativePointer)[11]);
            if (thumbnailOut_ != System.IntPtr.Zero)
                thumbnailOut = new DXNET.WIC.BitmapSource(thumbnailOut_);
            else
                thumbnailOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "countRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoder::GetFrameCount([Out] unsigned int* pCount)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoder::GetFrameCount</unmanaged-short>
        internal unsafe void GetFrameCount(out System.Int32 countRef)
        {
            DXNET.Result __result__;
            fixed (void *countRef_ = &countRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, countRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoder::GetFrame([In] unsigned int index,[Out] IWICBitmapFrameDecode** ppIBitmapFrame)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoder::GetFrame</unmanaged-short>
        public unsafe DXNET.WIC.BitmapFrameDecode GetFrame(System.Int32 index)
        {
            DXNET.WIC.BitmapFrameDecode bitmapFrameOut;
            System.IntPtr bitmapFrameOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, &bitmapFrameOut_, (*(void ***)this._nativePointer)[13]);
            if (bitmapFrameOut_ != System.IntPtr.Zero)
                bitmapFrameOut = new DXNET.WIC.BitmapFrameDecode(bitmapFrameOut_);
            else
                bitmapFrameOut = null;
            __result__.CheckError();
            return bitmapFrameOut;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "count">No documentation.</param>
        /// <param name = "colorContextsOut">No documentation.</param>
        /// <param name = "actualCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoder::GetColorContexts([In] unsigned int cCount,[InOut, Buffer, Optional] IWICColorContext** ppIColorContexts,[Out] unsigned int* pcActualCount)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoder::GetColorContexts</unmanaged-short>
        internal unsafe DXNET.Result GetColorContexts(System.Int32 count, DXNET.ComArray<DXNET.WIC.ColorContext> colorContextsOut, out System.Int32 actualCountRef)
        {
            DXNET.Result __result__;
            fixed (void *actualCountRef_ = &actualCountRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, count, (void *)(colorContextsOut?.NativePointer ?? System.IntPtr.Zero), actualCountRef_, (*(void ***)this._nativePointer)[10]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "count">No documentation.</param>
        /// <param name = "colorContextsOut">No documentation.</param>
        /// <param name = "actualCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoder::GetColorContexts([In] unsigned int cCount,[InOut, Buffer, Optional] IWICColorContext** ppIColorContexts,[Out] unsigned int* pcActualCount)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoder::GetColorContexts</unmanaged-short>
        private unsafe DXNET.Result GetColorContexts(System.Int32 count, System.IntPtr colorContextsOut, System.IntPtr actualCountRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, count, (void *)colorContextsOut, (void *)actualCountRef, (*(void ***)this._nativePointer)[10]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("D8CD007F-D08F-4191-9BFC-236EA7F0E4B5")]
    public partial class BitmapDecoderInfo : DXNET.WIC.BitmapCodecInfo
    {
        public BitmapDecoderInfo(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapDecoderInfo(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapDecoderInfo(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sizePatterns">No documentation.</param>
        /// <param name = "patternsRef">No documentation.</param>
        /// <param name = "atternCountRef">No documentation.</param>
        /// <param name = "patternsActualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoderInfo::GetPatterns([In] unsigned int cbSizePatterns,[Out, Buffer, Optional] WICBitmapPattern* pPatterns,[Out] unsigned int* pcPatterns,[Out] unsigned int* pcbPatternsActual)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoderInfo::GetPatterns</unmanaged-short>
        internal unsafe void GetPatterns(System.Int32 sizePatterns, DXNET.WIC.BitmapPattern[] patternsRef, out System.Int32 atternCountRef, out System.Int32 patternsActualRef)
        {
            DXNET.Result __result__;
            fixed (void *patternsActualRef_ = &patternsActualRef)
                fixed (void *atternCountRef_ = &atternCountRef)
                    fixed (void *patternsRef_ = patternsRef)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, sizePatterns, patternsRef_, atternCountRef_, patternsActualRef_, (*(void ***)this._nativePointer)[23]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "streamRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoderInfo::MatchesPattern([In, Optional] IStream* pIStream,[Out] BOOL* pfMatches)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoderInfo::MatchesPattern</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool MatchesPattern(DXNET.Win32.IStream streamRef)
        {
            System.IntPtr streamRef_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawBool fMatchesRef;
            DXNET.Result __result__;
            streamRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.Win32.IStream>(streamRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)streamRef_, &fMatchesRef, (*(void ***)this._nativePointer)[24]);
            __result__.CheckError();
            return fMatchesRef;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmapDecoderOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapDecoderInfo::CreateInstance([Out, Fast] IWICBitmapDecoder** ppIBitmapDecoder)</unmanaged>
        /// <unmanaged-short>IWICBitmapDecoderInfo::CreateInstance</unmanaged-short>
        internal unsafe void CreateInstance(DXNET.WIC.BitmapDecoder bitmapDecoderOut)
        {
            System.IntPtr bitmapDecoderOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &bitmapDecoderOut_, (*(void ***)this._nativePointer)[25]);
            (bitmapDecoderOut).NativePointer = bitmapDecoderOut_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("00000103-a8f2-4877-ba0a-fd2b6645fb94")]
    public partial class BitmapEncoder : DXNET.ComObject
    {
        public BitmapEncoder(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapEncoder(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapEncoder(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetContainerFormat</unmanaged>
        /// <unmanaged-short>GetContainerFormat</unmanaged-short>
        public System.Guid ContainerFormat
        {
            get
            {
                GetContainerFormat(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetEncoderInfo</unmanaged>
        /// <unmanaged-short>GetEncoderInfo</unmanaged-short>
        public DXNET.WIC.BitmapEncoderInfo EncoderInfo
        {
            get
            {
                GetEncoderInfo(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetPalette</unmanaged>
        /// <unmanaged-short>SetPalette</unmanaged-short>
        public DXNET.WIC.Palette Palette
        {
            set => SetPalette(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetThumbnail</unmanaged>
        /// <unmanaged-short>SetThumbnail</unmanaged-short>
        public DXNET.WIC.BitmapSource Thumbnail
        {
            set => SetThumbnail(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetPreview</unmanaged>
        /// <unmanaged-short>SetPreview</unmanaged-short>
        public DXNET.WIC.BitmapSource Preview
        {
            set => SetPreview(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMetadataQueryWriter</unmanaged>
        /// <unmanaged-short>GetMetadataQueryWriter</unmanaged-short>
        public DXNET.WIC.MetadataQueryWriter MetadataQueryWriter
        {
            get
            {
                GetMetadataQueryWriter(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "streamRef">No documentation.</param>
        /// <param name = "cacheOption">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapEncoder::Initialize([In, Optional] IStream* pIStream,[In] WICBitmapEncoderCacheOption cacheOption)</unmanaged>
        /// <unmanaged-short>IWICBitmapEncoder::Initialize</unmanaged-short>
        internal unsafe void Initialize(DXNET.Win32.IStream streamRef, DXNET.WIC.BitmapEncoderCacheOption cacheOption)
        {
            System.IntPtr streamRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            streamRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.Win32.IStream>(streamRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)streamRef_, unchecked ((System.Int32)cacheOption), (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "guidContainerFormatRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapEncoder::GetContainerFormat([Out] GUID* pguidContainerFormat)</unmanaged>
        /// <unmanaged-short>IWICBitmapEncoder::GetContainerFormat</unmanaged-short>
        internal unsafe void GetContainerFormat(out System.Guid guidContainerFormatRef)
        {
            guidContainerFormatRef = default (System.Guid);
            DXNET.Result __result__;
            fixed (void *guidContainerFormatRef_ = &guidContainerFormatRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, guidContainerFormatRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "encoderInfoOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapEncoder::GetEncoderInfo([Out] IWICBitmapEncoderInfo** ppIEncoderInfo)</unmanaged>
        /// <unmanaged-short>IWICBitmapEncoder::GetEncoderInfo</unmanaged-short>
        internal unsafe void GetEncoderInfo(out DXNET.WIC.BitmapEncoderInfo encoderInfoOut)
        {
            System.IntPtr encoderInfoOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &encoderInfoOut_, (*(void ***)this._nativePointer)[5]);
            if (encoderInfoOut_ != System.IntPtr.Zero)
                encoderInfoOut = new DXNET.WIC.BitmapEncoderInfo(encoderInfoOut_);
            else
                encoderInfoOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "count">No documentation.</param>
        /// <param name = "colorContextOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapEncoder::SetColorContexts([In] unsigned int cCount,[In, Buffer] IWICColorContext** ppIColorContext)</unmanaged>
        /// <unmanaged-short>IWICBitmapEncoder::SetColorContexts</unmanaged-short>
        internal unsafe void SetColorContexts(System.Int32 count, DXNET.WIC.ColorContext[] colorContextOut)
        {
            System.IntPtr*colorContextOut_;
            colorContextOut_ = (System.IntPtr*)0;
            if (colorContextOut != null)
            {
                System.IntPtr*_colorContextOut = stackalloc System.IntPtr[colorContextOut.Length];
                colorContextOut_ = _colorContextOut;
            }

            DXNET.Result __result__;
            if (colorContextOut != null)
                for (int i = 0; i < colorContextOut.Length; ++i)
                    (colorContextOut_)[i] = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.ColorContext>(colorContextOut[i]);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, count, (void *)colorContextOut_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "paletteRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapEncoder::SetPalette([In, Optional] IWICPalette* pIPalette)</unmanaged>
        /// <unmanaged-short>IWICBitmapEncoder::SetPalette</unmanaged-short>
        internal unsafe void SetPalette(DXNET.WIC.Palette paletteRef)
        {
            System.IntPtr paletteRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            paletteRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.Palette>(paletteRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)paletteRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "thumbnailRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapEncoder::SetThumbnail([In, Optional] IWICBitmapSource* pIThumbnail)</unmanaged>
        /// <unmanaged-short>IWICBitmapEncoder::SetThumbnail</unmanaged-short>
        internal unsafe void SetThumbnail(DXNET.WIC.BitmapSource thumbnailRef)
        {
            System.IntPtr thumbnailRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            thumbnailRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(thumbnailRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)thumbnailRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "previewRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapEncoder::SetPreview([In, Optional] IWICBitmapSource* pIPreview)</unmanaged>
        /// <unmanaged-short>IWICBitmapEncoder::SetPreview</unmanaged-short>
        internal unsafe void SetPreview(DXNET.WIC.BitmapSource previewRef)
        {
            System.IntPtr previewRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            previewRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(previewRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)previewRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "frameEncodeOut">No documentation.</param>
        /// <param name = "encoderOptionsOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapEncoder::CreateNewFrame([Out, Fast] IWICBitmapFrameEncode** ppIFrameEncode,[Out, Fast] IPropertyBag2** ppIEncoderOptions)</unmanaged>
        /// <unmanaged-short>IWICBitmapEncoder::CreateNewFrame</unmanaged-short>
        internal unsafe void CreateNewFrame(DXNET.WIC.BitmapFrameEncode frameEncodeOut, DXNET.Win32.PropertyBag encoderOptionsOut)
        {
            System.IntPtr frameEncodeOut_ = System.IntPtr.Zero;
            System.IntPtr encoderOptionsOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &frameEncodeOut_, &encoderOptionsOut_, (*(void ***)this._nativePointer)[10]);
            (frameEncodeOut).NativePointer = frameEncodeOut_;
            (encoderOptionsOut).NativePointer = encoderOptionsOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapEncoder::Commit()</unmanaged>
        /// <unmanaged-short>IWICBitmapEncoder::Commit</unmanaged-short>
        public unsafe void Commit()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "metadataQueryWriterOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapEncoder::GetMetadataQueryWriter([Out] IWICMetadataQueryWriter** ppIMetadataQueryWriter)</unmanaged>
        /// <unmanaged-short>IWICBitmapEncoder::GetMetadataQueryWriter</unmanaged-short>
        internal unsafe void GetMetadataQueryWriter(out DXNET.WIC.MetadataQueryWriter metadataQueryWriterOut)
        {
            System.IntPtr metadataQueryWriterOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &metadataQueryWriterOut_, (*(void ***)this._nativePointer)[12]);
            if (metadataQueryWriterOut_ != System.IntPtr.Zero)
                metadataQueryWriterOut = new DXNET.WIC.MetadataQueryWriter(metadataQueryWriterOut_);
            else
                metadataQueryWriterOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "count">No documentation.</param>
        /// <param name = "colorContextOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapEncoder::SetColorContexts([In] unsigned int cCount,[In, Buffer] IWICColorContext** ppIColorContext)</unmanaged>
        /// <unmanaged-short>IWICBitmapEncoder::SetColorContexts</unmanaged-short>
        internal unsafe void SetColorContexts(System.Int32 count, DXNET.ComArray<DXNET.WIC.ColorContext> colorContextOut)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, count, (void *)(colorContextOut?.NativePointer ?? System.IntPtr.Zero), (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "count">No documentation.</param>
        /// <param name = "colorContextOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapEncoder::SetColorContexts([In] unsigned int cCount,[In, Buffer] IWICColorContext** ppIColorContext)</unmanaged>
        /// <unmanaged-short>IWICBitmapEncoder::SetColorContexts</unmanaged-short>
        private unsafe void SetColorContexts(System.Int32 count, System.IntPtr colorContextOut)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, count, (void *)colorContextOut, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("94C9B4EE-A09F-4f92-8A1E-4A9BCE7E76FB")]
    public partial class BitmapEncoderInfo : DXNET.WIC.BitmapCodecInfo
    {
        public BitmapEncoderInfo(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapEncoderInfo(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapEncoderInfo(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmapEncoderOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapEncoderInfo::CreateInstance([Out] IWICBitmapEncoder** ppIBitmapEncoder)</unmanaged>
        /// <unmanaged-short>IWICBitmapEncoderInfo::CreateInstance</unmanaged-short>
        public unsafe void CreateInstance(out DXNET.WIC.BitmapEncoder bitmapEncoderOut)
        {
            System.IntPtr bitmapEncoderOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &bitmapEncoderOut_, (*(void ***)this._nativePointer)[23]);
            if (bitmapEncoderOut_ != System.IntPtr.Zero)
                bitmapEncoderOut = new DXNET.WIC.BitmapEncoder(bitmapEncoderOut_);
            else
                bitmapEncoderOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5009834F-2D6A-41ce-9E1B-17C5AFF7A782")]
    public partial class BitmapFlipRotator : DXNET.WIC.BitmapSource
    {
        public BitmapFlipRotator(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapFlipRotator(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapFlipRotator(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sourceRef">No documentation.</param>
        /// <param name = "options">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFlipRotator::Initialize([In, Optional] IWICBitmapSource* pISource,[In] WICBitmapTransformOptions options)</unmanaged>
        /// <unmanaged-short>IWICBitmapFlipRotator::Initialize</unmanaged-short>
        public unsafe void Initialize(DXNET.WIC.BitmapSource sourceRef, DXNET.WIC.BitmapTransformOptions options)
        {
            System.IntPtr sourceRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            sourceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(sourceRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)sourceRef_, unchecked ((System.Int32)options), (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3B16811B-6A43-4ec9-A813-3D930C13B940")]
    public partial class BitmapFrameDecode : DXNET.WIC.BitmapSource
    {
        public BitmapFrameDecode(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapFrameDecode(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapFrameDecode(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMetadataQueryReader</unmanaged>
        /// <unmanaged-short>GetMetadataQueryReader</unmanaged-short>
        public DXNET.WIC.MetadataQueryReader MetadataQueryReader
        {
            get
            {
                GetMetadataQueryReader(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetThumbnail</unmanaged>
        /// <unmanaged-short>GetThumbnail</unmanaged-short>
        public DXNET.WIC.BitmapSource Thumbnail
        {
            get
            {
                GetThumbnail(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "metadataQueryReaderOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameDecode::GetMetadataQueryReader([Out] IWICMetadataQueryReader** ppIMetadataQueryReader)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameDecode::GetMetadataQueryReader</unmanaged-short>
        internal unsafe void GetMetadataQueryReader(out DXNET.WIC.MetadataQueryReader metadataQueryReaderOut)
        {
            System.IntPtr metadataQueryReaderOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &metadataQueryReaderOut_, (*(void ***)this._nativePointer)[8]);
            if (metadataQueryReaderOut_ != System.IntPtr.Zero)
                metadataQueryReaderOut = new DXNET.WIC.MetadataQueryReader(metadataQueryReaderOut_);
            else
                metadataQueryReaderOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "count">No documentation.</param>
        /// <param name = "colorContextsOut">No documentation.</param>
        /// <param name = "actualCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameDecode::GetColorContexts([In] unsigned int cCount,[InOut, Buffer, Optional] IWICColorContext** ppIColorContexts,[Out] unsigned int* pcActualCount)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameDecode::GetColorContexts</unmanaged-short>
        internal unsafe DXNET.Result GetColorContexts(System.Int32 count, DXNET.WIC.ColorContext[] colorContextsOut, out System.Int32 actualCountRef)
        {
            System.IntPtr*colorContextsOut_;
            colorContextsOut_ = (System.IntPtr*)0;
            if (colorContextsOut != null)
            {
                System.IntPtr*_colorContextsOut = stackalloc System.IntPtr[colorContextsOut.Length];
                colorContextsOut_ = _colorContextsOut;
            }

            DXNET.Result __result__;
            if (colorContextsOut != null)
                for (int i = 0; i < colorContextsOut.Length; ++i)
                    (colorContextsOut_)[i] = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.ColorContext>(colorContextsOut[i]);
            fixed (void *actualCountRef_ = &actualCountRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, count, (void *)colorContextsOut_, actualCountRef_, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "thumbnailOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameDecode::GetThumbnail([Out] IWICBitmapSource** ppIThumbnail)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameDecode::GetThumbnail</unmanaged-short>
        internal unsafe void GetThumbnail(out DXNET.WIC.BitmapSource thumbnailOut)
        {
            System.IntPtr thumbnailOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &thumbnailOut_, (*(void ***)this._nativePointer)[10]);
            if (thumbnailOut_ != System.IntPtr.Zero)
                thumbnailOut = new DXNET.WIC.BitmapSource(thumbnailOut_);
            else
                thumbnailOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "count">No documentation.</param>
        /// <param name = "colorContextsOut">No documentation.</param>
        /// <param name = "actualCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameDecode::GetColorContexts([In] unsigned int cCount,[InOut, Buffer, Optional] IWICColorContext** ppIColorContexts,[Out] unsigned int* pcActualCount)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameDecode::GetColorContexts</unmanaged-short>
        internal unsafe DXNET.Result GetColorContexts(System.Int32 count, DXNET.ComArray<DXNET.WIC.ColorContext> colorContextsOut, out System.Int32 actualCountRef)
        {
            DXNET.Result __result__;
            fixed (void *actualCountRef_ = &actualCountRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, count, (void *)(colorContextsOut?.NativePointer ?? System.IntPtr.Zero), actualCountRef_, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "count">No documentation.</param>
        /// <param name = "colorContextsOut">No documentation.</param>
        /// <param name = "actualCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameDecode::GetColorContexts([In] unsigned int cCount,[InOut, Buffer, Optional] IWICColorContext** ppIColorContexts,[Out] unsigned int* pcActualCount)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameDecode::GetColorContexts</unmanaged-short>
        private unsafe DXNET.Result GetColorContexts(System.Int32 count, System.IntPtr colorContextsOut, System.IntPtr actualCountRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, count, (void *)colorContextsOut, (void *)actualCountRef, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("00000105-a8f2-4877-ba0a-fd2b6645fb94")]
    public partial class BitmapFrameEncode : DXNET.ComObject
    {
        public BitmapFrameEncode(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapFrameEncode(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapFrameEncode(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetPalette</unmanaged>
        /// <unmanaged-short>SetPalette</unmanaged-short>
        public DXNET.WIC.Palette Palette
        {
            set => SetPalette(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetThumbnail</unmanaged>
        /// <unmanaged-short>SetThumbnail</unmanaged-short>
        public DXNET.WIC.BitmapSource Thumbnail
        {
            set => SetThumbnail(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMetadataQueryWriter</unmanaged>
        /// <unmanaged-short>GetMetadataQueryWriter</unmanaged-short>
        public DXNET.WIC.MetadataQueryWriter MetadataQueryWriter
        {
            get
            {
                GetMetadataQueryWriter(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "encoderOptionsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameEncode::Initialize([In, Optional] IPropertyBag2* pIEncoderOptions)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameEncode::Initialize</unmanaged-short>
        internal unsafe void Initialize(DXNET.Win32.PropertyBag encoderOptionsRef)
        {
            System.IntPtr encoderOptionsRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            encoderOptionsRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.Win32.PropertyBag>(encoderOptionsRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)encoderOptionsRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "width">No documentation.</param>
        /// <param name = "height">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameEncode::SetSize([In] unsigned int uiWidth,[In] unsigned int uiHeight)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameEncode::SetSize</unmanaged-short>
        public unsafe void SetSize(System.Int32 width, System.Int32 height)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, width, height, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dpiX">No documentation.</param>
        /// <param name = "dpiY">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameEncode::SetResolution([In] double dpiX,[In] double dpiY)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameEncode::SetResolution</unmanaged-short>
        public unsafe void SetResolution(System.Double dpiX, System.Double dpiY)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, dpiX, dpiY, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "pixelFormatRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameEncode::SetPixelFormat([InOut] GUID* pPixelFormat)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameEncode::SetPixelFormat</unmanaged-short>
        public unsafe void SetPixelFormat(ref System.Guid pixelFormatRef)
        {
            DXNET.Result __result__;
            fixed (void *pixelFormatRef_ = &pixelFormatRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, pixelFormatRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "count">No documentation.</param>
        /// <param name = "colorContextOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameEncode::SetColorContexts([In] unsigned int cCount,[In, Buffer] IWICColorContext** ppIColorContext)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameEncode::SetColorContexts</unmanaged-short>
        internal unsafe void SetColorContexts(System.Int32 count, DXNET.WIC.ColorContext[] colorContextOut)
        {
            System.IntPtr*colorContextOut_;
            colorContextOut_ = (System.IntPtr*)0;
            if (colorContextOut != null)
            {
                System.IntPtr*_colorContextOut = stackalloc System.IntPtr[colorContextOut.Length];
                colorContextOut_ = _colorContextOut;
            }

            DXNET.Result __result__;
            if (colorContextOut != null)
                for (int i = 0; i < colorContextOut.Length; ++i)
                    (colorContextOut_)[i] = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.ColorContext>(colorContextOut[i]);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, count, (void *)colorContextOut_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "paletteRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameEncode::SetPalette([In, Optional] IWICPalette* pIPalette)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameEncode::SetPalette</unmanaged-short>
        internal unsafe void SetPalette(DXNET.WIC.Palette paletteRef)
        {
            System.IntPtr paletteRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            paletteRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.Palette>(paletteRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)paletteRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "thumbnailRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameEncode::SetThumbnail([In, Optional] IWICBitmapSource* pIThumbnail)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameEncode::SetThumbnail</unmanaged-short>
        internal unsafe void SetThumbnail(DXNET.WIC.BitmapSource thumbnailRef)
        {
            System.IntPtr thumbnailRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            thumbnailRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(thumbnailRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)thumbnailRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lineCount">No documentation.</param>
        /// <param name = "stride">No documentation.</param>
        /// <param name = "bufferSize">No documentation.</param>
        /// <param name = "pixelsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameEncode::WritePixels([In] unsigned int lineCount,[In] unsigned int cbStride,[In] unsigned int cbBufferSize,[In, Buffer] unsigned char* pbPixels)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameEncode::WritePixels</unmanaged-short>
        internal unsafe void WritePixels(System.Int32 lineCount, System.Int32 stride, System.Int32 bufferSize, System.IntPtr pixelsRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, lineCount, stride, bufferSize, (void *)pixelsRef, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmapSourceRef">No documentation.</param>
        /// <param name = "rectangleRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameEncode::WriteSource([In, Optional] IWICBitmapSource* pIBitmapSource,[In] WICRect* prc)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameEncode::WriteSource</unmanaged-short>
        internal unsafe void WriteSource(DXNET.WIC.BitmapSource bitmapSourceRef, System.IntPtr rectangleRef)
        {
            System.IntPtr bitmapSourceRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            bitmapSourceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(bitmapSourceRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bitmapSourceRef_, (void *)rectangleRef, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameEncode::Commit()</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameEncode::Commit</unmanaged-short>
        public unsafe void Commit()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "metadataQueryWriterOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameEncode::GetMetadataQueryWriter([Out] IWICMetadataQueryWriter** ppIMetadataQueryWriter)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameEncode::GetMetadataQueryWriter</unmanaged-short>
        internal unsafe void GetMetadataQueryWriter(out DXNET.WIC.MetadataQueryWriter metadataQueryWriterOut)
        {
            System.IntPtr metadataQueryWriterOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &metadataQueryWriterOut_, (*(void ***)this._nativePointer)[13]);
            if (metadataQueryWriterOut_ != System.IntPtr.Zero)
                metadataQueryWriterOut = new DXNET.WIC.MetadataQueryWriter(metadataQueryWriterOut_);
            else
                metadataQueryWriterOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "count">No documentation.</param>
        /// <param name = "colorContextOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameEncode::SetColorContexts([In] unsigned int cCount,[In, Buffer] IWICColorContext** ppIColorContext)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameEncode::SetColorContexts</unmanaged-short>
        internal unsafe void SetColorContexts(System.Int32 count, DXNET.ComArray<DXNET.WIC.ColorContext> colorContextOut)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, count, (void *)(colorContextOut?.NativePointer ?? System.IntPtr.Zero), (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "count">No documentation.</param>
        /// <param name = "colorContextOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapFrameEncode::SetColorContexts([In] unsigned int cCount,[In, Buffer] IWICColorContext** ppIColorContext)</unmanaged>
        /// <unmanaged-short>IWICBitmapFrameEncode::SetColorContexts</unmanaged-short>
        private unsafe void SetColorContexts(System.Int32 count, System.IntPtr colorContextOut)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, count, (void *)colorContextOut, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("00000123-a8f2-4877-ba0a-fd2b6645fb94")]
    public partial class BitmapLock : DXNET.ComObject
    {
        public BitmapLock(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapLock(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapLock(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStride</unmanaged>
        /// <unmanaged-short>GetStride</unmanaged-short>
        public System.Int32 Stride
        {
            get
            {
                GetStride(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPixelFormat</unmanaged>
        /// <unmanaged-short>GetPixelFormat</unmanaged-short>
        public System.Guid PixelFormat
        {
            get
            {
                GetPixelFormat(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "widthRef">No documentation.</param>
        /// <param name = "heightRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapLock::GetSize([Out] unsigned int* puiWidth,[Out] unsigned int* puiHeight)</unmanaged>
        /// <unmanaged-short>IWICBitmapLock::GetSize</unmanaged-short>
        internal unsafe void GetSize(out System.Int32 widthRef, out System.Int32 heightRef)
        {
            DXNET.Result __result__;
            fixed (void *heightRef_ = &heightRef)
                fixed (void *widthRef_ = &widthRef)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, widthRef_, heightRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "strideRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapLock::GetStride([Out] unsigned int* pcbStride)</unmanaged>
        /// <unmanaged-short>IWICBitmapLock::GetStride</unmanaged-short>
        internal unsafe void GetStride(out System.Int32 strideRef)
        {
            DXNET.Result __result__;
            fixed (void *strideRef_ = &strideRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, strideRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bufferSizeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapLock::GetDataPointer([Out] unsigned int* pcbBufferSize,[Out] unsigned char** ppbData)</unmanaged>
        /// <unmanaged-short>IWICBitmapLock::GetDataPointer</unmanaged-short>
        internal unsafe System.IntPtr GetDataPointer(out System.Int32 bufferSizeRef)
        {
            System.IntPtr dataOut;
            DXNET.Result __result__;
            fixed (void *bufferSizeRef_ = &bufferSizeRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, bufferSizeRef_, &dataOut, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
            return dataOut;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "pixelFormatRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapLock::GetPixelFormat([Out] GUID* pPixelFormat)</unmanaged>
        /// <unmanaged-short>IWICBitmapLock::GetPixelFormat</unmanaged-short>
        internal unsafe void GetPixelFormat(out System.Guid pixelFormatRef)
        {
            pixelFormatRef = default (System.Guid);
            DXNET.Result __result__;
            fixed (void *pixelFormatRef_ = &pixelFormatRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, pixelFormatRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("00000302-a8f2-4877-ba0a-fd2b6645fb94")]
    public partial class BitmapScaler : DXNET.WIC.BitmapSource
    {
        public BitmapScaler(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapScaler(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapScaler(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sourceRef">No documentation.</param>
        /// <param name = "width">No documentation.</param>
        /// <param name = "height">No documentation.</param>
        /// <param name = "mode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapScaler::Initialize([In, Optional] IWICBitmapSource* pISource,[In] unsigned int uiWidth,[In] unsigned int uiHeight,[In] WICBitmapInterpolationMode mode)</unmanaged>
        /// <unmanaged-short>IWICBitmapScaler::Initialize</unmanaged-short>
        public unsafe void Initialize(DXNET.WIC.BitmapSource sourceRef, System.Int32 width, System.Int32 height, DXNET.WIC.BitmapInterpolationMode mode)
        {
            System.IntPtr sourceRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            sourceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(sourceRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)sourceRef_, width, height, unchecked ((System.Int32)mode), (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("00000120-a8f2-4877-ba0a-fd2b6645fb94")]
    public partial class BitmapSource : DXNET.ComObject
    {
        public BitmapSource(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapSource(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapSource(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPixelFormat</unmanaged>
        /// <unmanaged-short>GetPixelFormat</unmanaged-short>
        public System.Guid PixelFormat
        {
            get
            {
                GetPixelFormat(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "widthRef">No documentation.</param>
        /// <param name = "heightRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapSource::GetSize([Out] unsigned int* puiWidth,[Out] unsigned int* puiHeight)</unmanaged>
        /// <unmanaged-short>IWICBitmapSource::GetSize</unmanaged-short>
        internal unsafe void GetSize(out System.Int32 widthRef, out System.Int32 heightRef)
        {
            DXNET.Result __result__;
            fixed (void *heightRef_ = &heightRef)
                fixed (void *widthRef_ = &widthRef)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, widthRef_, heightRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "pixelFormatRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapSource::GetPixelFormat([Out] GUID* pPixelFormat)</unmanaged>
        /// <unmanaged-short>IWICBitmapSource::GetPixelFormat</unmanaged-short>
        internal unsafe void GetPixelFormat(out System.Guid pixelFormatRef)
        {
            pixelFormatRef = default (System.Guid);
            DXNET.Result __result__;
            fixed (void *pixelFormatRef_ = &pixelFormatRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, pixelFormatRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dpiXRef">No documentation.</param>
        /// <param name = "dpiYRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapSource::GetResolution([Out] double* pDpiX,[Out] double* pDpiY)</unmanaged>
        /// <unmanaged-short>IWICBitmapSource::GetResolution</unmanaged-short>
        public unsafe void GetResolution(out System.Double dpiXRef, out System.Double dpiYRef)
        {
            DXNET.Result __result__;
            fixed (void *dpiYRef_ = &dpiYRef)
                fixed (void *dpiXRef_ = &dpiXRef)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, dpiXRef_, dpiYRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "paletteRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapSource::CopyPalette([In, Optional] IWICPalette* pIPalette)</unmanaged>
        /// <unmanaged-short>IWICBitmapSource::CopyPalette</unmanaged-short>
        public unsafe void CopyPalette(DXNET.WIC.Palette paletteRef)
        {
            System.IntPtr paletteRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            paletteRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.Palette>(paletteRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)paletteRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rectangleRef">No documentation.</param>
        /// <param name = "stride">No documentation.</param>
        /// <param name = "bufferSize">No documentation.</param>
        /// <param name = "bufferRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapSource::CopyPixels([In] const WICRect* prc,[In] unsigned int cbStride,[In] unsigned int cbBufferSize,[In] unsigned char* pbBuffer)</unmanaged>
        /// <unmanaged-short>IWICBitmapSource::CopyPixels</unmanaged-short>
        internal unsafe void CopyPixels(System.IntPtr rectangleRef, System.Int32 stride, System.Int32 bufferSize, System.IntPtr bufferRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)rectangleRef, stride, bufferSize, (void *)bufferRef, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3B16811B-6A43-4ec9-B713-3D5A0C13B940")]
    public partial class BitmapSourceTransform : DXNET.ComObject
    {
        public BitmapSourceTransform(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapSourceTransform(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapSourceTransform(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rectangleRef">No documentation.</param>
        /// <param name = "width">No documentation.</param>
        /// <param name = "height">No documentation.</param>
        /// <param name = "guidDstFormatRef">No documentation.</param>
        /// <param name = "dstTransform">No documentation.</param>
        /// <param name = "nStride">No documentation.</param>
        /// <param name = "bufferSize">No documentation.</param>
        /// <param name = "bufferRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapSourceTransform::CopyPixels([In] const WICRect* prc,[In] unsigned int uiWidth,[In] unsigned int uiHeight,[In, Optional] GUID* pguidDstFormat,[In] WICBitmapTransformOptions dstTransform,[In] unsigned int nStride,[In] unsigned int cbBufferSize,[In] unsigned char* pbBuffer)</unmanaged>
        /// <unmanaged-short>IWICBitmapSourceTransform::CopyPixels</unmanaged-short>
        internal unsafe void CopyPixels(System.IntPtr rectangleRef, System.Int32 width, System.Int32 height, System.Guid? guidDstFormatRef, DXNET.WIC.BitmapTransformOptions dstTransform, System.Int32 nStride, System.Int32 bufferSize, System.IntPtr bufferRef)
        {
            System.Guid guidDstFormatRef_;
            DXNET.Result __result__;
            if (guidDstFormatRef != null)
                guidDstFormatRef_ = guidDstFormatRef.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)rectangleRef, width, height, guidDstFormatRef == null ? (void *)0 : &guidDstFormatRef_, unchecked ((System.Int32)dstTransform), nStride, bufferSize, (void *)bufferRef, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "widthRef">No documentation.</param>
        /// <param name = "heightRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapSourceTransform::GetClosestSize([InOut] unsigned int* puiWidth,[InOut] unsigned int* puiHeight)</unmanaged>
        /// <unmanaged-short>IWICBitmapSourceTransform::GetClosestSize</unmanaged-short>
        internal unsafe void GetClosestSize(ref System.Int32 widthRef, ref System.Int32 heightRef)
        {
            DXNET.Result __result__;
            fixed (void *heightRef_ = &heightRef)
                fixed (void *widthRef_ = &widthRef)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, widthRef_, heightRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "guidDstFormatRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapSourceTransform::GetClosestPixelFormat([InOut] GUID* pguidDstFormat)</unmanaged>
        /// <unmanaged-short>IWICBitmapSourceTransform::GetClosestPixelFormat</unmanaged-short>
        public unsafe void GetClosestPixelFormat(ref System.Guid guidDstFormatRef)
        {
            DXNET.Result __result__;
            fixed (void *guidDstFormatRef_ = &guidDstFormatRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, guidDstFormatRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dstTransform">No documentation.</param>
        /// <param name = "fIsSupportedRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICBitmapSourceTransform::DoesSupportTransform([In] WICBitmapTransformOptions dstTransform,[Out] BOOL* pfIsSupported)</unmanaged>
        /// <unmanaged-short>IWICBitmapSourceTransform::DoesSupportTransform</unmanaged-short>
        public unsafe void IsSupportingTransform(DXNET.WIC.BitmapTransformOptions dstTransform, out DXNET.Mathematics.Interop.RawBool fIsSupportedRef)
        {
            fIsSupportedRef = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *fIsSupportedRef_ = &fIsSupportedRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)dstTransform), fIsSupportedRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3C613A02-34B2-44ea-9A7C-45AEA9C6FD6D")]
    public partial class ColorContext : DXNET.ComObject
    {
        public ColorContext(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ColorContext(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ColorContext(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetType</unmanaged>
        /// <unmanaged-short>GetType</unmanaged-short>
        public DXNET.WIC.ColorContextType TypeInfo
        {
            get
            {
                GetTypeInfo(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetExifColorSpace</unmanaged>
        /// <unmanaged-short>GetExifColorSpace</unmanaged-short>
        public System.Int32 ExifColorSpace
        {
            get
            {
                GetExifColorSpace(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "filename">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICColorContext::InitializeFromFilename([In] const wchar_t* wzFilename)</unmanaged>
        /// <unmanaged-short>IWICColorContext::InitializeFromFilename</unmanaged-short>
        public unsafe void InitializeFromFilename(System.String filename)
        {
            DXNET.Result __result__;
            fixed (char *filename_ = filename)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)filename_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bufferRef">No documentation.</param>
        /// <param name = "bufferSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICColorContext::InitializeFromMemory([In] const unsigned char* pbBuffer,[In] unsigned int cbBufferSize)</unmanaged>
        /// <unmanaged-short>IWICColorContext::InitializeFromMemory</unmanaged-short>
        internal unsafe void InitializeFromMemory(System.IntPtr bufferRef, System.Int32 bufferSize)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bufferRef, bufferSize, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "value">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICColorContext::InitializeFromExifColorSpace([In] unsigned int value)</unmanaged>
        /// <unmanaged-short>IWICColorContext::InitializeFromExifColorSpace</unmanaged-short>
        public unsafe void InitializeFromExifColorSpace(System.Int32 value)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, value, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "typeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICColorContext::GetType([Out] WICColorContextType* pType)</unmanaged>
        /// <unmanaged-short>IWICColorContext::GetType</unmanaged-short>
        internal unsafe void GetTypeInfo(out DXNET.WIC.ColorContextType typeRef)
        {
            DXNET.Result __result__;
            fixed (void *typeRef_ = &typeRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, typeRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "buffer">No documentation.</param>
        /// <param name = "bufferRef">No documentation.</param>
        /// <param name = "actualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICColorContext::GetProfileBytes([In] unsigned int cbBuffer,[In] unsigned char* pbBuffer,[Out] unsigned int* pcbActual)</unmanaged>
        /// <unmanaged-short>IWICColorContext::GetProfileBytes</unmanaged-short>
        internal unsafe void GetProfileBytes(System.Int32 buffer, System.IntPtr bufferRef, out System.Int32 actualRef)
        {
            DXNET.Result __result__;
            fixed (void *actualRef_ = &actualRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, buffer, (void *)bufferRef, actualRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "valueRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICColorContext::GetExifColorSpace([Out] unsigned int* pValue)</unmanaged>
        /// <unmanaged-short>IWICColorContext::GetExifColorSpace</unmanaged-short>
        internal unsafe void GetExifColorSpace(out System.Int32 valueRef)
        {
            DXNET.Result __result__;
            fixed (void *valueRef_ = &valueRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, valueRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("B66F034F-D0E2-40ab-B436-6DE39E321A94")]
    public partial class ColorTransform : DXNET.WIC.BitmapSource
    {
        public ColorTransform(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ColorTransform(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ColorTransform(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmapSourceRef">No documentation.</param>
        /// <param name = "contextSourceRef">No documentation.</param>
        /// <param name = "contextDestRef">No documentation.</param>
        /// <param name = "ixelFmtDestRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICColorTransform::Initialize([In, Optional] IWICBitmapSource* pIBitmapSource,[In, Optional] IWICColorContext* pIContextSource,[In, Optional] IWICColorContext* pIContextDest,[In] const GUID&amp; pixelFmtDest)</unmanaged>
        /// <unmanaged-short>IWICColorTransform::Initialize</unmanaged-short>
        public unsafe void Initialize(DXNET.WIC.BitmapSource bitmapSourceRef, DXNET.WIC.ColorContext contextSourceRef, DXNET.WIC.ColorContext contextDestRef, System.Guid ixelFmtDestRef)
        {
            System.IntPtr bitmapSourceRef_ = System.IntPtr.Zero;
            System.IntPtr contextSourceRef_ = System.IntPtr.Zero;
            System.IntPtr contextDestRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            bitmapSourceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(bitmapSourceRef);
            contextSourceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.ColorContext>(contextSourceRef);
            contextDestRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.ColorContext>(contextDestRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bitmapSourceRef_, (void *)contextSourceRef_, (void *)contextDestRef_, &ixelFmtDestRef, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("23BC3F0A-698B-4357-886B-F24D50671334")]
    public partial class ComponentInfo : DXNET.ComObject
    {
        public ComponentInfo(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ComponentInfo(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ComponentInfo(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetComponentType</unmanaged>
        /// <unmanaged-short>GetComponentType</unmanaged-short>
        public DXNET.WIC.ComponentType ComponentType
        {
            get
            {
                GetComponentType(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetCLSID</unmanaged>
        /// <unmanaged-short>GetCLSID</unmanaged-short>
        public System.Guid CLSID
        {
            get
            {
                GetCLSID(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSigningStatus</unmanaged>
        /// <unmanaged-short>GetSigningStatus</unmanaged-short>
        public System.Int32 SigningStatus
        {
            get
            {
                GetSigningStatus(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetVendorGUID</unmanaged>
        /// <unmanaged-short>GetVendorGUID</unmanaged-short>
        public System.Guid VendorGUID
        {
            get
            {
                GetVendorGUID(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "typeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICComponentInfo::GetComponentType([Out] WICComponentType* pType)</unmanaged>
        /// <unmanaged-short>IWICComponentInfo::GetComponentType</unmanaged-short>
        internal unsafe void GetComponentType(out DXNET.WIC.ComponentType typeRef)
        {
            DXNET.Result __result__;
            fixed (void *typeRef_ = &typeRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, typeRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "clsidRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICComponentInfo::GetCLSID([Out] GUID* pclsid)</unmanaged>
        /// <unmanaged-short>IWICComponentInfo::GetCLSID</unmanaged-short>
        internal unsafe void GetCLSID(out System.Guid clsidRef)
        {
            clsidRef = default (System.Guid);
            DXNET.Result __result__;
            fixed (void *clsidRef_ = &clsidRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, clsidRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "statusRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICComponentInfo::GetSigningStatus([Out] DWORD* pStatus)</unmanaged>
        /// <unmanaged-short>IWICComponentInfo::GetSigningStatus</unmanaged-short>
        internal unsafe void GetSigningStatus(out System.Int32 statusRef)
        {
            DXNET.Result __result__;
            fixed (void *statusRef_ = &statusRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, statusRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cchAuthor">No documentation.</param>
        /// <param name = "author">No documentation.</param>
        /// <param name = "cchActualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICComponentInfo::GetAuthor([In] unsigned int cchAuthor,[In] wchar_t* wzAuthor,[Out] unsigned int* pcchActual)</unmanaged>
        /// <unmanaged-short>IWICComponentInfo::GetAuthor</unmanaged-short>
        internal unsafe void GetAuthor(System.Int32 cchAuthor, System.IntPtr author, out System.Int32 cchActualRef)
        {
            DXNET.Result __result__;
            fixed (void *cchActualRef_ = &cchActualRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, cchAuthor, (void *)author, cchActualRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "guidVendorRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICComponentInfo::GetVendorGUID([Out] GUID* pguidVendor)</unmanaged>
        /// <unmanaged-short>IWICComponentInfo::GetVendorGUID</unmanaged-short>
        internal unsafe void GetVendorGUID(out System.Guid guidVendorRef)
        {
            guidVendorRef = default (System.Guid);
            DXNET.Result __result__;
            fixed (void *guidVendorRef_ = &guidVendorRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, guidVendorRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cchVersion">No documentation.</param>
        /// <param name = "version">No documentation.</param>
        /// <param name = "cchActualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICComponentInfo::GetVersion([In] unsigned int cchVersion,[In] wchar_t* wzVersion,[Out] unsigned int* pcchActual)</unmanaged>
        /// <unmanaged-short>IWICComponentInfo::GetVersion</unmanaged-short>
        internal unsafe void GetVersion(System.Int32 cchVersion, System.IntPtr version, out System.Int32 cchActualRef)
        {
            DXNET.Result __result__;
            fixed (void *cchActualRef_ = &cchActualRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, cchVersion, (void *)version, cchActualRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cchSpecVersion">No documentation.</param>
        /// <param name = "specVersion">No documentation.</param>
        /// <param name = "cchActualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICComponentInfo::GetSpecVersion([In] unsigned int cchSpecVersion,[In] wchar_t* wzSpecVersion,[Out] unsigned int* pcchActual)</unmanaged>
        /// <unmanaged-short>IWICComponentInfo::GetSpecVersion</unmanaged-short>
        internal unsafe void GetSpecVersion(System.Int32 cchSpecVersion, System.IntPtr specVersion, out System.Int32 cchActualRef)
        {
            DXNET.Result __result__;
            fixed (void *cchActualRef_ = &cchActualRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, cchSpecVersion, (void *)specVersion, cchActualRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cchFriendlyName">No documentation.</param>
        /// <param name = "friendlyName">No documentation.</param>
        /// <param name = "cchActualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICComponentInfo::GetFriendlyName([In] unsigned int cchFriendlyName,[In] wchar_t* wzFriendlyName,[Out] unsigned int* pcchActual)</unmanaged>
        /// <unmanaged-short>IWICComponentInfo::GetFriendlyName</unmanaged-short>
        internal unsafe void GetFriendlyName(System.Int32 cchFriendlyName, System.IntPtr friendlyName, out System.Int32 cchActualRef)
        {
            DXNET.Result __result__;
            fixed (void *cchActualRef_ = &cchActualRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, cchFriendlyName, (void *)friendlyName, cchActualRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("409cd537-8532-40cb-9774-e2feb2df4e9c")]
    public partial class DdsDecoder : DXNET.ComObject
    {
        public DdsDecoder(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DdsDecoder(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DdsDecoder(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetParameters</unmanaged>
        /// <unmanaged-short>GetParameters</unmanaged-short>
        public DXNET.WIC.DdsParameters Parameters
        {
            get
            {
                GetParameters(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "parametersRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDdsDecoder::GetParameters([Out] WICDdsParameters* pParameters)</unmanaged>
        /// <unmanaged-short>IWICDdsDecoder::GetParameters</unmanaged-short>
        internal unsafe void GetParameters(out DXNET.WIC.DdsParameters parametersRef)
        {
            parametersRef = default (DXNET.WIC.DdsParameters);
            DXNET.Result __result__;
            fixed (void *parametersRef_ = &parametersRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, parametersRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "arrayIndex">No documentation.</param>
        /// <param name = "mipLevel">No documentation.</param>
        /// <param name = "sliceIndex">No documentation.</param>
        /// <param name = "bitmapFrameOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDdsDecoder::GetFrame([In] unsigned int arrayIndex,[In] unsigned int mipLevel,[In] unsigned int sliceIndex,[Out] IWICBitmapFrameDecode** ppIBitmapFrame)</unmanaged>
        /// <unmanaged-short>IWICDdsDecoder::GetFrame</unmanaged-short>
        public unsafe void GetFrame(System.Int32 arrayIndex, System.Int32 mipLevel, System.Int32 sliceIndex, out DXNET.WIC.BitmapFrameDecode bitmapFrameOut)
        {
            System.IntPtr bitmapFrameOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, arrayIndex, mipLevel, sliceIndex, &bitmapFrameOut_, (*(void ***)this._nativePointer)[4]);
            if (bitmapFrameOut_ != System.IntPtr.Zero)
                bitmapFrameOut = new DXNET.WIC.BitmapFrameDecode(bitmapFrameOut_);
            else
                bitmapFrameOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5cacdb4c-407e-41b3-b936-d0f010cd6732")]
    public partial class DdsEncoder : DXNET.ComObject
    {
        public DdsEncoder(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DdsEncoder(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DdsEncoder(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetParameters / SetParameters</unmanaged>
        /// <unmanaged-short>GetParameters</unmanaged-short>
        public DXNET.WIC.DdsParameters Parameters
        {
            get
            {
                GetParameters(out var __output__);
                return __output__;
            }

            set => SetParameters(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "parametersRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDdsEncoder::SetParameters([In] WICDdsParameters* pParameters)</unmanaged>
        /// <unmanaged-short>IWICDdsEncoder::SetParameters</unmanaged-short>
        internal unsafe void SetParameters(ref DXNET.WIC.DdsParameters parametersRef)
        {
            DXNET.Result __result__;
            fixed (void *parametersRef_ = &parametersRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, parametersRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "parametersRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDdsEncoder::GetParameters([Out] WICDdsParameters* pParameters)</unmanaged>
        /// <unmanaged-short>IWICDdsEncoder::GetParameters</unmanaged-short>
        internal unsafe void GetParameters(out DXNET.WIC.DdsParameters parametersRef)
        {
            parametersRef = default (DXNET.WIC.DdsParameters);
            DXNET.Result __result__;
            fixed (void *parametersRef_ = &parametersRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, parametersRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "frameEncodeOut">No documentation.</param>
        /// <param name = "arrayIndexRef">No documentation.</param>
        /// <param name = "mipLevelRef">No documentation.</param>
        /// <param name = "sliceIndexRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDdsEncoder::CreateNewFrame([Out] IWICBitmapFrameEncode** ppIFrameEncode,[Out] unsigned int* pArrayIndex,[Out] unsigned int* pMipLevel,[Out] unsigned int* pSliceIndex)</unmanaged>
        /// <unmanaged-short>IWICDdsEncoder::CreateNewFrame</unmanaged-short>
        public unsafe void CreateNewFrame(out DXNET.WIC.BitmapFrameEncode frameEncodeOut, out System.Int32 arrayIndexRef, out System.Int32 mipLevelRef, out System.Int32 sliceIndexRef)
        {
            System.IntPtr frameEncodeOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *sliceIndexRef_ = &sliceIndexRef)
                fixed (void *mipLevelRef_ = &mipLevelRef)
                    fixed (void *arrayIndexRef_ = &arrayIndexRef)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &frameEncodeOut_, arrayIndexRef_, mipLevelRef_, sliceIndexRef_, (*(void ***)this._nativePointer)[5]);
            if (frameEncodeOut_ != System.IntPtr.Zero)
                frameEncodeOut = new DXNET.WIC.BitmapFrameEncode(frameEncodeOut_);
            else
                frameEncodeOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3d4c0c61-18a4-41e4-bd80-481a4fc9f464")]
    public partial class DdsFrameDecode : DXNET.ComObject
    {
        public DdsFrameDecode(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DdsFrameDecode(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DdsFrameDecode(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFormatInfo</unmanaged>
        /// <unmanaged-short>GetFormatInfo</unmanaged-short>
        public DXNET.WIC.DdsFormatInfo FormatInfo
        {
            get
            {
                GetFormatInfo(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "widthInBlocksRef">No documentation.</param>
        /// <param name = "heightInBlocksRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDdsFrameDecode::GetSizeInBlocks([Out] unsigned int* pWidthInBlocks,[Out] unsigned int* pHeightInBlocks)</unmanaged>
        /// <unmanaged-short>IWICDdsFrameDecode::GetSizeInBlocks</unmanaged-short>
        internal unsafe void GetSizeInBlocks(out System.Int32 widthInBlocksRef, out System.Int32 heightInBlocksRef)
        {
            DXNET.Result __result__;
            fixed (void *heightInBlocksRef_ = &heightInBlocksRef)
                fixed (void *widthInBlocksRef_ = &widthInBlocksRef)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, widthInBlocksRef_, heightInBlocksRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "formatInfoRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDdsFrameDecode::GetFormatInfo([Out] WICDdsFormatInfo* pFormatInfo)</unmanaged>
        /// <unmanaged-short>IWICDdsFrameDecode::GetFormatInfo</unmanaged-short>
        internal unsafe void GetFormatInfo(out DXNET.WIC.DdsFormatInfo formatInfoRef)
        {
            formatInfoRef = default (DXNET.WIC.DdsFormatInfo);
            DXNET.Result __result__;
            fixed (void *formatInfoRef_ = &formatInfoRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, formatInfoRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rcBoundsInBlocksRef">No documentation.</param>
        /// <param name = "stride">No documentation.</param>
        /// <param name = "bufferSize">No documentation.</param>
        /// <param name = "bufferRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDdsFrameDecode::CopyBlocks([In, Optional] const WICRect* prcBoundsInBlocks,[In] unsigned int cbStride,[In] unsigned int cbBufferSize,[In] unsigned char* pbBuffer)</unmanaged>
        /// <unmanaged-short>IWICDdsFrameDecode::CopyBlocks</unmanaged-short>
        internal unsafe void CopyBlocks(DXNET.Mathematics.Interop.RawBox? rcBoundsInBlocksRef, System.Int32 stride, System.Int32 bufferSize, System.IntPtr bufferRef)
        {
            DXNET.Mathematics.Interop.RawBox rcBoundsInBlocksRef_;
            DXNET.Result __result__;
            if (rcBoundsInBlocksRef != null)
                rcBoundsInBlocksRef_ = rcBoundsInBlocksRef.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, rcBoundsInBlocksRef == null ? (void *)0 : &rcBoundsInBlocksRef_, stride, bufferSize, (void *)bufferRef, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("fbec5e44-f7be-4b65-b7f8-c0c81fef026d")]
    public partial class DevelopRaw : DXNET.WIC.BitmapFrameDecode
    {
        public DevelopRaw(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DevelopRaw(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DevelopRaw(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetCurrentParameterSet</unmanaged>
        /// <unmanaged-short>GetCurrentParameterSet</unmanaged-short>
        public DXNET.Win32.PropertyBag CurrentParameterSet
        {
            get
            {
                GetCurrentParameterSet(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetExposureCompensation / SetExposureCompensation</unmanaged>
        /// <unmanaged-short>GetExposureCompensation</unmanaged-short>
        public System.Double ExposureCompensation
        {
            get
            {
                GetExposureCompensation(out var __output__);
                return __output__;
            }

            set => SetExposureCompensation(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetNamedWhitePoint / SetNamedWhitePoint</unmanaged>
        /// <unmanaged-short>GetNamedWhitePoint</unmanaged-short>
        public DXNET.WIC.NamedWhitePoint NamedWhitePoint
        {
            get
            {
                GetNamedWhitePoint(out var __output__);
                return __output__;
            }

            set => SetNamedWhitePoint(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetWhitePointKelvin / SetWhitePointKelvin</unmanaged>
        /// <unmanaged-short>GetWhitePointKelvin</unmanaged-short>
        public System.Int32 WhitePointKelvin
        {
            get
            {
                GetWhitePointKelvin(out var __output__);
                return __output__;
            }

            set => SetWhitePointKelvin(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetContrast / SetContrast</unmanaged>
        /// <unmanaged-short>GetContrast</unmanaged-short>
        public System.Double Contrast
        {
            get
            {
                GetContrast(out var __output__);
                return __output__;
            }

            set => SetContrast(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetGamma / SetGamma</unmanaged>
        /// <unmanaged-short>GetGamma</unmanaged-short>
        public System.Double Gamma
        {
            get
            {
                GetGamma(out var __output__);
                return __output__;
            }

            set => SetGamma(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSharpness / SetSharpness</unmanaged>
        /// <unmanaged-short>GetSharpness</unmanaged-short>
        public System.Double Sharpness
        {
            get
            {
                GetSharpness(out var __output__);
                return __output__;
            }

            set => SetSharpness(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSaturation / SetSaturation</unmanaged>
        /// <unmanaged-short>GetSaturation</unmanaged-short>
        public System.Double Saturation
        {
            get
            {
                GetSaturation(out var __output__);
                return __output__;
            }

            set => SetSaturation(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetTint / SetTint</unmanaged>
        /// <unmanaged-short>GetTint</unmanaged-short>
        public System.Double Tint
        {
            get
            {
                GetTint(out var __output__);
                return __output__;
            }

            set => SetTint(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetNoiseReduction / SetNoiseReduction</unmanaged>
        /// <unmanaged-short>GetNoiseReduction</unmanaged-short>
        public System.Double NoiseReduction
        {
            get
            {
                GetNoiseReduction(out var __output__);
                return __output__;
            }

            set => SetNoiseReduction(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetDestinationColorContext</unmanaged>
        /// <unmanaged-short>SetDestinationColorContext</unmanaged-short>
        public DXNET.WIC.ColorContext DestinationColorContext
        {
            set => SetDestinationColorContext(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetRotation / SetRotation</unmanaged>
        /// <unmanaged-short>GetRotation</unmanaged-short>
        public System.Double Rotation
        {
            get
            {
                GetRotation(out var __output__);
                return __output__;
            }

            set => SetRotation(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetRenderMode / SetRenderMode</unmanaged>
        /// <unmanaged-short>GetRenderMode</unmanaged-short>
        public DXNET.WIC.RawRenderMode RenderMode
        {
            get
            {
                GetRenderMode(out var __output__);
                return __output__;
            }

            set => SetRenderMode(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SetNotificationCallback</unmanaged>
        /// <unmanaged-short>SetNotificationCallback</unmanaged-short>
        internal DXNET.WIC.DevelopRawNotificationCallback NotificationCallback
        {
            set => SetNotificationCallback(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "infoRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::QueryRawCapabilitiesInfo([In] WICRawCapabilitiesInfo* pInfo)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::QueryRawCapabilitiesInfo</unmanaged-short>
        public unsafe void QueryRawCapabilitiesInfo(ref DXNET.WIC.RawCapabilitiesInfo infoRef)
        {
            DXNET.Result __result__;
            fixed (void *infoRef_ = &infoRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, infoRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "parameterSet">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::LoadParameterSet([In] WICRawParameterSet ParameterSet)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::LoadParameterSet</unmanaged-short>
        public unsafe void LoadParameterSet(DXNET.WIC.RawParameterSet parameterSet)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)parameterSet), (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentParameterSetOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::GetCurrentParameterSet([Out] IPropertyBag2** ppCurrentParameterSet)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::GetCurrentParameterSet</unmanaged-short>
        internal unsafe void GetCurrentParameterSet(out DXNET.Win32.PropertyBag currentParameterSetOut)
        {
            System.IntPtr currentParameterSetOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &currentParameterSetOut_, (*(void ***)this._nativePointer)[13]);
            if (currentParameterSetOut_ != System.IntPtr.Zero)
                currentParameterSetOut = new DXNET.Win32.PropertyBag(currentParameterSetOut_);
            else
                currentParameterSetOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ev">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::SetExposureCompensation([In] double ev)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::SetExposureCompensation</unmanaged-short>
        internal unsafe void SetExposureCompensation(System.Double ev)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, ev, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "eVRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::GetExposureCompensation([Out] double* pEV)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::GetExposureCompensation</unmanaged-short>
        internal unsafe void GetExposureCompensation(out System.Double eVRef)
        {
            DXNET.Result __result__;
            fixed (void *eVRef_ = &eVRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, eVRef_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "red">No documentation.</param>
        /// <param name = "green">No documentation.</param>
        /// <param name = "blue">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::SetWhitePointRGB([In] unsigned int Red,[In] unsigned int Green,[In] unsigned int Blue)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::SetWhitePointRGB</unmanaged-short>
        public unsafe void SetWhitePointRGB(System.Int32 red, System.Int32 green, System.Int32 blue)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, red, green, blue, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "redRef">No documentation.</param>
        /// <param name = "greenRef">No documentation.</param>
        /// <param name = "blueRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::GetWhitePointRGB([Out] unsigned int* pRed,[Out] unsigned int* pGreen,[Out] unsigned int* pBlue)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::GetWhitePointRGB</unmanaged-short>
        public unsafe void GetWhitePointRGB(out System.Int32 redRef, out System.Int32 greenRef, out System.Int32 blueRef)
        {
            DXNET.Result __result__;
            fixed (void *blueRef_ = &blueRef)
                fixed (void *greenRef_ = &greenRef)
                    fixed (void *redRef_ = &redRef)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, redRef_, greenRef_, blueRef_, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "whitePoint">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::SetNamedWhitePoint([In] WICNamedWhitePoint WhitePoint)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::SetNamedWhitePoint</unmanaged-short>
        internal unsafe void SetNamedWhitePoint(DXNET.WIC.NamedWhitePoint whitePoint)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)whitePoint), (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "whitePointRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::GetNamedWhitePoint([Out] WICNamedWhitePoint* pWhitePoint)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::GetNamedWhitePoint</unmanaged-short>
        internal unsafe void GetNamedWhitePoint(out DXNET.WIC.NamedWhitePoint whitePointRef)
        {
            DXNET.Result __result__;
            fixed (void *whitePointRef_ = &whitePointRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, whitePointRef_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "whitePointKelvin">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::SetWhitePointKelvin([In] unsigned int WhitePointKelvin)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::SetWhitePointKelvin</unmanaged-short>
        internal unsafe void SetWhitePointKelvin(System.Int32 whitePointKelvin)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, whitePointKelvin, (*(void ***)this._nativePointer)[20]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "whitePointKelvinRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::GetWhitePointKelvin([Out] unsigned int* pWhitePointKelvin)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::GetWhitePointKelvin</unmanaged-short>
        internal unsafe void GetWhitePointKelvin(out System.Int32 whitePointKelvinRef)
        {
            DXNET.Result __result__;
            fixed (void *whitePointKelvinRef_ = &whitePointKelvinRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, whitePointKelvinRef_, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "minKelvinTempRef">No documentation.</param>
        /// <param name = "maxKelvinTempRef">No documentation.</param>
        /// <param name = "kelvinTempStepValueRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::GetKelvinRangeInfo([Out] unsigned int* pMinKelvinTemp,[Out] unsigned int* pMaxKelvinTemp,[Out] unsigned int* pKelvinTempStepValue)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::GetKelvinRangeInfo</unmanaged-short>
        public unsafe void GetKelvinRangeInfo(out System.Int32 minKelvinTempRef, out System.Int32 maxKelvinTempRef, out System.Int32 kelvinTempStepValueRef)
        {
            DXNET.Result __result__;
            fixed (void *kelvinTempStepValueRef_ = &kelvinTempStepValueRef)
                fixed (void *maxKelvinTempRef_ = &maxKelvinTempRef)
                    fixed (void *minKelvinTempRef_ = &minKelvinTempRef)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, minKelvinTempRef_, maxKelvinTempRef_, kelvinTempStepValueRef_, (*(void ***)this._nativePointer)[22]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "contrast">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::SetContrast([In] double Contrast)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::SetContrast</unmanaged-short>
        internal unsafe void SetContrast(System.Double contrast)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, contrast, (*(void ***)this._nativePointer)[23]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "contrastRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::GetContrast([Out] double* pContrast)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::GetContrast</unmanaged-short>
        internal unsafe void GetContrast(out System.Double contrastRef)
        {
            DXNET.Result __result__;
            fixed (void *contrastRef_ = &contrastRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, contrastRef_, (*(void ***)this._nativePointer)[24]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gamma">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::SetGamma([In] double Gamma)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::SetGamma</unmanaged-short>
        internal unsafe void SetGamma(System.Double gamma)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, gamma, (*(void ***)this._nativePointer)[25]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gammaRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::GetGamma([Out] double* pGamma)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::GetGamma</unmanaged-short>
        internal unsafe void GetGamma(out System.Double gammaRef)
        {
            DXNET.Result __result__;
            fixed (void *gammaRef_ = &gammaRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, gammaRef_, (*(void ***)this._nativePointer)[26]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sharpness">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::SetSharpness([In] double Sharpness)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::SetSharpness</unmanaged-short>
        internal unsafe void SetSharpness(System.Double sharpness)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, sharpness, (*(void ***)this._nativePointer)[27]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sharpnessRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::GetSharpness([Out] double* pSharpness)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::GetSharpness</unmanaged-short>
        internal unsafe void GetSharpness(out System.Double sharpnessRef)
        {
            DXNET.Result __result__;
            fixed (void *sharpnessRef_ = &sharpnessRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, sharpnessRef_, (*(void ***)this._nativePointer)[28]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "saturation">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::SetSaturation([In] double Saturation)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::SetSaturation</unmanaged-short>
        internal unsafe void SetSaturation(System.Double saturation)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, saturation, (*(void ***)this._nativePointer)[29]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "saturationRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::GetSaturation([Out] double* pSaturation)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::GetSaturation</unmanaged-short>
        internal unsafe void GetSaturation(out System.Double saturationRef)
        {
            DXNET.Result __result__;
            fixed (void *saturationRef_ = &saturationRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, saturationRef_, (*(void ***)this._nativePointer)[30]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "tint">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::SetTint([In] double Tint)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::SetTint</unmanaged-short>
        internal unsafe void SetTint(System.Double tint)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, tint, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "tintRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::GetTint([Out] double* pTint)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::GetTint</unmanaged-short>
        internal unsafe void GetTint(out System.Double tintRef)
        {
            DXNET.Result __result__;
            fixed (void *tintRef_ = &tintRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, tintRef_, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "noiseReduction">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::SetNoiseReduction([In] double NoiseReduction)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::SetNoiseReduction</unmanaged-short>
        internal unsafe void SetNoiseReduction(System.Double noiseReduction)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, noiseReduction, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "noiseReductionRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::GetNoiseReduction([Out] double* pNoiseReduction)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::GetNoiseReduction</unmanaged-short>
        internal unsafe void GetNoiseReduction(out System.Double noiseReductionRef)
        {
            DXNET.Result __result__;
            fixed (void *noiseReductionRef_ = &noiseReductionRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, noiseReductionRef_, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "colorContextRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::SetDestinationColorContext([In, Optional] IWICColorContext* pColorContext)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::SetDestinationColorContext</unmanaged-short>
        internal unsafe void SetDestinationColorContext(DXNET.WIC.ColorContext colorContextRef)
        {
            System.IntPtr colorContextRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            colorContextRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.ColorContext>(colorContextRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)colorContextRef_, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "toneCurveSize">No documentation.</param>
        /// <param name = "toneCurveRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::SetToneCurve([In] unsigned int cbToneCurveSize,[In, Buffer] const WICRawToneCurve* pToneCurve)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::SetToneCurve</unmanaged-short>
        public unsafe void SetToneCurve(System.Int32 toneCurveSize, DXNET.WIC.RawToneCurve[] toneCurveRef)
        {
            DXNET.WIC.RawToneCurve.__Native[] toneCurveRef_ = new DXNET.WIC.RawToneCurve.__Native[toneCurveRef.Length];
            DXNET.Result __result__;
            for (int i = 0; i < toneCurveRef.Length; ++i)
                toneCurveRef[i].__MarshalTo(ref (toneCurveRef_)[i]);
            fixed (void *_toneCurveRef = toneCurveRef_)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, toneCurveSize, _toneCurveRef, (*(void ***)this._nativePointer)[36]);
            for (int i = 0; i < toneCurveRef.Length; ++i)
                toneCurveRef[i].__MarshalFree(ref (toneCurveRef_)[i]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "toneCurveBufferSize">No documentation.</param>
        /// <param name = "toneCurveRef">No documentation.</param>
        /// <param name = "actualToneCurveBufferSizeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::GetToneCurve([In] unsigned int cbToneCurveBufferSize,[Out, Buffer, Optional] WICRawToneCurve* pToneCurve,[InOut, Optional] unsigned int* pcbActualToneCurveBufferSize)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::GetToneCurve</unmanaged-short>
        public unsafe void GetToneCurve(System.Int32 toneCurveBufferSize, DXNET.WIC.RawToneCurve[] toneCurveRef, System.IntPtr actualToneCurveBufferSizeRef)
        {
            DXNET.WIC.RawToneCurve.__Native[] toneCurveRef_ = toneCurveRef == null ? null : new DXNET.WIC.RawToneCurve.__Native[toneCurveRef.Length];
            DXNET.Result __result__;
            fixed (void *_toneCurveRef = toneCurveRef_)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, toneCurveBufferSize, _toneCurveRef, (void *)actualToneCurveBufferSizeRef, (*(void ***)this._nativePointer)[37]);
            if (toneCurveRef != null)
                for (int i = 0; i < toneCurveRef.Length; ++i)
                    if (toneCurveRef != null)
                        toneCurveRef[i].__MarshalFrom(ref (toneCurveRef_)[i]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rotation">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::SetRotation([In] double Rotation)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::SetRotation</unmanaged-short>
        internal unsafe void SetRotation(System.Double rotation)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, rotation, (*(void ***)this._nativePointer)[38]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rotationRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::GetRotation([Out] double* pRotation)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::GetRotation</unmanaged-short>
        internal unsafe void GetRotation(out System.Double rotationRef)
        {
            DXNET.Result __result__;
            fixed (void *rotationRef_ = &rotationRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, rotationRef_, (*(void ***)this._nativePointer)[39]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "renderMode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::SetRenderMode([In] WICRawRenderMode RenderMode)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::SetRenderMode</unmanaged-short>
        internal unsafe void SetRenderMode(DXNET.WIC.RawRenderMode renderMode)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)renderMode), (*(void ***)this._nativePointer)[40]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "renderModeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::GetRenderMode([Out] WICRawRenderMode* pRenderMode)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::GetRenderMode</unmanaged-short>
        internal unsafe void GetRenderMode(out DXNET.WIC.RawRenderMode renderModeRef)
        {
            DXNET.Result __result__;
            fixed (void *renderModeRef_ = &renderModeRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, renderModeRef_, (*(void ***)this._nativePointer)[41]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "callbackRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRaw::SetNotificationCallback([In, Optional] IWICDevelopRawNotificationCallback* pCallback)</unmanaged>
        /// <unmanaged-short>IWICDevelopRaw::SetNotificationCallback</unmanaged-short>
        internal unsafe void SetNotificationCallback(DXNET.WIC.DevelopRawNotificationCallback callbackRef)
        {
            System.IntPtr callbackRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            callbackRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.DevelopRawNotificationCallback>(callbackRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)callbackRef_, (*(void ***)this._nativePointer)[42]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("95c75a6e-3e8c-4ec2-85a8-aebcc551e59b")]
    internal partial class DevelopRawNotificationCallback : DXNET.ComObject
    {
        public DevelopRawNotificationCallback(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DevelopRawNotificationCallback(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DevelopRawNotificationCallback(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "notificationMask">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICDevelopRawNotificationCallback::Notify([In] unsigned int NotificationMask)</unmanaged>
        /// <unmanaged-short>IWICDevelopRawNotificationCallback::Notify</unmanaged-short>
        public unsafe void Notify(System.Int32 notificationMask)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, notificationMask, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("DC2BB46D-3F07-481E-8625-220C4AEDBB33")]
    internal partial class EnumMetadataItem : DXNET.ComObject
    {
        public EnumMetadataItem(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EnumMetadataItem(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EnumMetadataItem(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "celt">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICEnumMetadataItem::Skip([In] ULONG celt)</unmanaged>
        /// <unmanaged-short>IWICEnumMetadataItem::Skip</unmanaged-short>
        public unsafe void Skip(System.Int32 celt)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, celt, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICEnumMetadataItem::Reset()</unmanaged>
        /// <unmanaged-short>IWICEnumMetadataItem::Reset</unmanaged-short>
        public unsafe void Reset()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "enumMetadataItemOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICEnumMetadataItem::Clone([Out] IWICEnumMetadataItem** ppIEnumMetadataItem)</unmanaged>
        /// <unmanaged-short>IWICEnumMetadataItem::Clone</unmanaged-short>
        public unsafe void Clone(out DXNET.WIC.EnumMetadataItem enumMetadataItemOut)
        {
            System.IntPtr enumMetadataItemOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &enumMetadataItemOut_, (*(void ***)this._nativePointer)[6]);
            if (enumMetadataItemOut_ != System.IntPtr.Zero)
                enumMetadataItemOut = new DXNET.WIC.EnumMetadataItem(enumMetadataItemOut_);
            else
                enumMetadataItemOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("B84E2C09-78C9-4AC4-8BD3-524AE1663A2F")]
    public partial class FastMetadataEncoder : DXNET.ComObject
    {
        public FastMetadataEncoder(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FastMetadataEncoder(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FastMetadataEncoder(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMetadataQueryWriter</unmanaged>
        /// <unmanaged-short>GetMetadataQueryWriter</unmanaged-short>
        public DXNET.WIC.MetadataQueryWriter MetadataQueryWriter
        {
            get
            {
                GetMetadataQueryWriter(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICFastMetadataEncoder::Commit()</unmanaged>
        /// <unmanaged-short>IWICFastMetadataEncoder::Commit</unmanaged-short>
        public unsafe void Commit()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "metadataQueryWriterOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICFastMetadataEncoder::GetMetadataQueryWriter([Out] IWICMetadataQueryWriter** ppIMetadataQueryWriter)</unmanaged>
        /// <unmanaged-short>IWICFastMetadataEncoder::GetMetadataQueryWriter</unmanaged-short>
        internal unsafe void GetMetadataQueryWriter(out DXNET.WIC.MetadataQueryWriter metadataQueryWriterOut)
        {
            System.IntPtr metadataQueryWriterOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &metadataQueryWriterOut_, (*(void ***)this._nativePointer)[4]);
            if (metadataQueryWriterOut_ != System.IntPtr.Zero)
                metadataQueryWriterOut = new DXNET.WIC.MetadataQueryWriter(metadataQueryWriterOut_);
            else
                metadataQueryWriterOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("00000301-a8f2-4877-ba0a-fd2b6645fb94")]
    public partial class FormatConverter : DXNET.WIC.BitmapSource
    {
        public FormatConverter(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FormatConverter(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FormatConverter(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sourceRef">No documentation.</param>
        /// <param name = "dstFormat">No documentation.</param>
        /// <param name = "dither">No documentation.</param>
        /// <param name = "paletteRef">No documentation.</param>
        /// <param name = "alphaThresholdPercent">No documentation.</param>
        /// <param name = "paletteTranslate">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICFormatConverter::Initialize([In, Optional] IWICBitmapSource* pISource,[In] const GUID&amp; dstFormat,[In] WICBitmapDitherType dither,[In, Optional] IWICPalette* pIPalette,[In] double alphaThresholdPercent,[In] WICBitmapPaletteType paletteTranslate)</unmanaged>
        /// <unmanaged-short>IWICFormatConverter::Initialize</unmanaged-short>
        public unsafe void Initialize(DXNET.WIC.BitmapSource sourceRef, System.Guid dstFormat, DXNET.WIC.BitmapDitherType dither, DXNET.WIC.Palette paletteRef, System.Double alphaThresholdPercent, DXNET.WIC.BitmapPaletteType paletteTranslate)
        {
            System.IntPtr sourceRef_ = System.IntPtr.Zero;
            System.IntPtr paletteRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            sourceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(sourceRef);
            paletteRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.Palette>(paletteRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)sourceRef_, &dstFormat, unchecked ((System.Int32)dither), (void *)paletteRef_, alphaThresholdPercent, unchecked ((System.Int32)paletteTranslate), (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "srcPixelFormat">No documentation.</param>
        /// <param name = "dstPixelFormat">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICFormatConverter::CanConvert([In] const GUID&amp; srcPixelFormat,[In] const GUID&amp; dstPixelFormat,[Out] BOOL* pfCanConvert)</unmanaged>
        /// <unmanaged-short>IWICFormatConverter::CanConvert</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool CanConvert(System.Guid srcPixelFormat, System.Guid dstPixelFormat)
        {
            DXNET.Mathematics.Interop.RawBool fCanConvertRef;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &srcPixelFormat, &dstPixelFormat, &fCanConvertRef, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
            return fCanConvertRef;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("9F34FB65-13F4-4f15-BC57-3726B5E53D9F")]
    public partial class FormatConverterInfo : DXNET.WIC.ComponentInfo
    {
        public FormatConverterInfo(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FormatConverterInfo(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FormatConverterInfo(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "formats">No documentation.</param>
        /// <param name = "pixelFormatGUIDsRef">No documentation.</param>
        /// <param name = "actualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICFormatConverterInfo::GetPixelFormats([In] unsigned int cFormats,[Out, Buffer, Optional] GUID* pPixelFormatGUIDs,[Out] unsigned int* pcActual)</unmanaged>
        /// <unmanaged-short>IWICFormatConverterInfo::GetPixelFormats</unmanaged-short>
        internal unsafe void GetPixelFormats(System.Int32 formats, System.Guid[] pixelFormatGUIDsRef, out System.Int32 actualRef)
        {
            DXNET.Result __result__;
            fixed (void *actualRef_ = &actualRef)
                fixed (void *pixelFormatGUIDsRef_ = pixelFormatGUIDsRef)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, formats, pixelFormatGUIDsRef_, actualRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "converterOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICFormatConverterInfo::CreateInstance([Out, Fast] IWICFormatConverter** ppIConverter)</unmanaged>
        /// <unmanaged-short>IWICFormatConverterInfo::CreateInstance</unmanaged-short>
        internal unsafe void CreateInstance(DXNET.WIC.FormatConverter converterOut)
        {
            System.IntPtr converterOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &converterOut_, (*(void ***)this._nativePointer)[12]);
            (converterOut).NativePointer = converterOut_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("04C75BF8-3CE1-473B-ACC5-3CC4F5E94999")]
    public partial class ImageEncoder : DXNET.ComObject
    {
        public ImageEncoder(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ImageEncoder(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ImageEncoder(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "imageRef">No documentation.</param>
        /// <param name = "frameEncodeRef">No documentation.</param>
        /// <param name = "imageParametersRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImageEncoder::WriteFrame([In] ID2D1Image* pImage,[In] IWICBitmapFrameEncode* pFrameEncode,[In, Value] const WICImageParameters* pImageParameters)</unmanaged>
        /// <unmanaged-short>IWICImageEncoder::WriteFrame</unmanaged-short>
        public unsafe void WriteFrame(DXNET.Direct2D1.Image imageRef, DXNET.WIC.BitmapFrameEncode frameEncodeRef, DXNET.WIC.ImageParameters imageParametersRef)
        {
            System.IntPtr imageRef_ = System.IntPtr.Zero;
            System.IntPtr frameEncodeRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            imageRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Image>(imageRef);
            frameEncodeRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapFrameEncode>(frameEncodeRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)imageRef_, (void *)frameEncodeRef_, &imageParametersRef, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "imageRef">No documentation.</param>
        /// <param name = "frameEncodeRef">No documentation.</param>
        /// <param name = "imageParametersRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImageEncoder::WriteFrameThumbnail([In] ID2D1Image* pImage,[In] IWICBitmapFrameEncode* pFrameEncode,[In, Value] const WICImageParameters* pImageParameters)</unmanaged>
        /// <unmanaged-short>IWICImageEncoder::WriteFrameThumbnail</unmanaged-short>
        public unsafe void WriteFrameThumbnail(DXNET.Direct2D1.Image imageRef, DXNET.WIC.BitmapFrameEncode frameEncodeRef, DXNET.WIC.ImageParameters imageParametersRef)
        {
            System.IntPtr imageRef_ = System.IntPtr.Zero;
            System.IntPtr frameEncodeRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            imageRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Image>(imageRef);
            frameEncodeRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapFrameEncode>(frameEncodeRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)imageRef_, (void *)frameEncodeRef_, &imageParametersRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "imageRef">No documentation.</param>
        /// <param name = "encoderRef">No documentation.</param>
        /// <param name = "imageParametersRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImageEncoder::WriteThumbnail([In] ID2D1Image* pImage,[In] IWICBitmapEncoder* pEncoder,[In, Value] const WICImageParameters* pImageParameters)</unmanaged>
        /// <unmanaged-short>IWICImageEncoder::WriteThumbnail</unmanaged-short>
        public unsafe void WriteThumbnail(DXNET.Direct2D1.Image imageRef, DXNET.WIC.BitmapEncoder encoderRef, DXNET.WIC.ImageParameters imageParametersRef)
        {
            System.IntPtr imageRef_ = System.IntPtr.Zero;
            System.IntPtr encoderRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            imageRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Image>(imageRef);
            encoderRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapEncoder>(encoderRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)imageRef_, (void *)encoderRef_, &imageParametersRef, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ec5ec8a9-c395-4314-9c77-54d7a935ff70")]
    public partial class ImagingFactory : DXNET.ComObject
    {
        public ImagingFactory(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ImagingFactory(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ImagingFactory(nativePtr);
                ///<summary>Constant WICImagingFactoryClsid</summary>
        ///<unmanaged>CLSID_WICImagingFactory</unmanaged>
        public static readonly System.Guid WICImagingFactoryClsid = new System.Guid("cacaf262-9370-4615-a13b-9f5539da4c0a");
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "filename">No documentation.</param>
        /// <param name = "guidVendorRef">No documentation.</param>
        /// <param name = "desiredAccess">No documentation.</param>
        /// <param name = "metadataOptions">No documentation.</param>
        /// <param name = "decoderOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateDecoderFromFilename([In] const wchar_t* wzFilename,[In, Optional] const GUID* pguidVendor,[In] DWORD dwDesiredAccess,[In] WICDecodeOptions metadataOptions,[Out, Fast] IWICBitmapDecoder** ppIDecoder)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateDecoderFromFilename</unmanaged-short>
        internal unsafe void CreateDecoderFromFilename(System.String filename, System.Guid? guidVendorRef, System.Int32 desiredAccess, DXNET.WIC.DecodeOptions metadataOptions, DXNET.WIC.BitmapDecoder decoderOut)
        {
            System.Guid guidVendorRef_;
            System.IntPtr decoderOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (guidVendorRef != null)
                guidVendorRef_ = guidVendorRef.Value;
            fixed (char *filename_ = filename)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)filename_, guidVendorRef == null ? (void *)0 : &guidVendorRef_, desiredAccess, unchecked ((System.Int32)metadataOptions), &decoderOut_, (*(void ***)this._nativePointer)[3]);
            (decoderOut).NativePointer = decoderOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "streamRef">No documentation.</param>
        /// <param name = "guidVendorRef">No documentation.</param>
        /// <param name = "metadataOptions">No documentation.</param>
        /// <param name = "decoderOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateDecoderFromStream([In, Optional] IStream* pIStream,[In, Optional] const GUID* pguidVendor,[In] WICDecodeOptions metadataOptions,[Out, Fast] IWICBitmapDecoder** ppIDecoder)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateDecoderFromStream</unmanaged-short>
        internal unsafe void CreateDecoderFromStream(DXNET.Win32.IStream streamRef, System.Guid? guidVendorRef, DXNET.WIC.DecodeOptions metadataOptions, DXNET.WIC.BitmapDecoder decoderOut)
        {
            System.IntPtr streamRef_ = System.IntPtr.Zero;
            System.Guid guidVendorRef_;
            System.IntPtr decoderOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            streamRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.Win32.IStream>(streamRef);
            if (guidVendorRef != null)
                guidVendorRef_ = guidVendorRef.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)streamRef_, guidVendorRef == null ? (void *)0 : &guidVendorRef_, unchecked ((System.Int32)metadataOptions), &decoderOut_, (*(void ***)this._nativePointer)[4]);
            (decoderOut).NativePointer = decoderOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hFile">No documentation.</param>
        /// <param name = "guidVendorRef">No documentation.</param>
        /// <param name = "metadataOptions">No documentation.</param>
        /// <param name = "decoderOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateDecoderFromFileHandle([In] ULONG_PTR hFile,[In, Optional] const GUID* pguidVendor,[In] WICDecodeOptions metadataOptions,[Out, Fast] IWICBitmapDecoder** ppIDecoder)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateDecoderFromFileHandle</unmanaged-short>
        internal unsafe void CreateDecoderFromFileHandle(System.IntPtr hFile, System.Guid? guidVendorRef, DXNET.WIC.DecodeOptions metadataOptions, DXNET.WIC.BitmapDecoder decoderOut)
        {
            System.Guid guidVendorRef_;
            System.IntPtr decoderOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (guidVendorRef != null)
                guidVendorRef_ = guidVendorRef.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hFile, guidVendorRef == null ? (void *)0 : &guidVendorRef_, unchecked ((System.Int32)metadataOptions), &decoderOut_, (*(void ***)this._nativePointer)[5]);
            (decoderOut).NativePointer = decoderOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "clsidComponent">No documentation.</param>
        /// <param name = "infoOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateComponentInfo([In] const GUID&amp; clsidComponent,[Out, Fast] IWICComponentInfo** ppIInfo)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateComponentInfo</unmanaged-short>
        internal unsafe void CreateComponentInfo(System.Guid clsidComponent, DXNET.WIC.ComponentInfo infoOut)
        {
            System.IntPtr infoOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &clsidComponent, &infoOut_, (*(void ***)this._nativePointer)[6]);
            (infoOut).NativePointer = infoOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "guidContainerFormat">No documentation.</param>
        /// <param name = "guidVendorRef">No documentation.</param>
        /// <param name = "decoderOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateDecoder([In] const GUID&amp; guidContainerFormat,[In, Optional] const GUID* pguidVendor,[Out, Fast] IWICBitmapDecoder** ppIDecoder)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateDecoder</unmanaged-short>
        internal unsafe void CreateDecoder(System.Guid guidContainerFormat, System.Guid? guidVendorRef, DXNET.WIC.BitmapDecoder decoderOut)
        {
            System.Guid guidVendorRef_;
            System.IntPtr decoderOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (guidVendorRef != null)
                guidVendorRef_ = guidVendorRef.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &guidContainerFormat, guidVendorRef == null ? (void *)0 : &guidVendorRef_, &decoderOut_, (*(void ***)this._nativePointer)[7]);
            (decoderOut).NativePointer = decoderOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "guidContainerFormat">No documentation.</param>
        /// <param name = "guidVendorRef">No documentation.</param>
        /// <param name = "encoderOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateEncoder([In] const GUID&amp; guidContainerFormat,[In, Optional] const GUID* pguidVendor,[Out, Fast] IWICBitmapEncoder** ppIEncoder)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateEncoder</unmanaged-short>
        internal unsafe void CreateEncoder(System.Guid guidContainerFormat, System.Guid? guidVendorRef, DXNET.WIC.BitmapEncoder encoderOut)
        {
            System.Guid guidVendorRef_;
            System.IntPtr encoderOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (guidVendorRef != null)
                guidVendorRef_ = guidVendorRef.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &guidContainerFormat, guidVendorRef == null ? (void *)0 : &guidVendorRef_, &encoderOut_, (*(void ***)this._nativePointer)[8]);
            (encoderOut).NativePointer = encoderOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "paletteOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreatePalette([Out, Fast] IWICPalette** ppIPalette)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreatePalette</unmanaged-short>
        internal unsafe void CreatePalette(DXNET.WIC.Palette paletteOut)
        {
            System.IntPtr paletteOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &paletteOut_, (*(void ***)this._nativePointer)[9]);
            (paletteOut).NativePointer = paletteOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "formatConverterOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateFormatConverter([Out, Fast] IWICFormatConverter** ppIFormatConverter)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateFormatConverter</unmanaged-short>
        internal unsafe void CreateFormatConverter(DXNET.WIC.FormatConverter formatConverterOut)
        {
            System.IntPtr formatConverterOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &formatConverterOut_, (*(void ***)this._nativePointer)[10]);
            (formatConverterOut).NativePointer = formatConverterOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmapScalerOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateBitmapScaler([Out, Fast] IWICBitmapScaler** ppIBitmapScaler)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateBitmapScaler</unmanaged-short>
        internal unsafe void CreateBitmapScaler(DXNET.WIC.BitmapScaler bitmapScalerOut)
        {
            System.IntPtr bitmapScalerOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &bitmapScalerOut_, (*(void ***)this._nativePointer)[11]);
            (bitmapScalerOut).NativePointer = bitmapScalerOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmapClipperOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateBitmapClipper([Out, Fast] IWICBitmapClipper** ppIBitmapClipper)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateBitmapClipper</unmanaged-short>
        internal unsafe void CreateBitmapClipper(DXNET.WIC.BitmapClipper bitmapClipperOut)
        {
            System.IntPtr bitmapClipperOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &bitmapClipperOut_, (*(void ***)this._nativePointer)[12]);
            (bitmapClipperOut).NativePointer = bitmapClipperOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmapFlipRotatorOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateBitmapFlipRotator([Out, Fast] IWICBitmapFlipRotator** ppIBitmapFlipRotator)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateBitmapFlipRotator</unmanaged-short>
        internal unsafe void CreateBitmapFlipRotator(DXNET.WIC.BitmapFlipRotator bitmapFlipRotatorOut)
        {
            System.IntPtr bitmapFlipRotatorOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &bitmapFlipRotatorOut_, (*(void ***)this._nativePointer)[13]);
            (bitmapFlipRotatorOut).NativePointer = bitmapFlipRotatorOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "wICStreamOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateStream([Out, Fast] IWICStream** ppIWICStream)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateStream</unmanaged-short>
        internal unsafe void CreateStream(DXNET.WIC.WICStream wICStreamOut)
        {
            System.IntPtr wICStreamOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &wICStreamOut_, (*(void ***)this._nativePointer)[14]);
            (wICStreamOut).NativePointer = wICStreamOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "wICColorContextOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateColorContext([Out, Fast] IWICColorContext** ppIWICColorContext)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateColorContext</unmanaged-short>
        internal unsafe void CreateColorContext(DXNET.WIC.ColorContext wICColorContextOut)
        {
            System.IntPtr wICColorContextOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &wICColorContextOut_, (*(void ***)this._nativePointer)[15]);
            (wICColorContextOut).NativePointer = wICColorContextOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "wICColorTransformOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateColorTransformer([Out, Fast] IWICColorTransform** ppIWICColorTransform)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateColorTransformer</unmanaged-short>
        internal unsafe void CreateColorTransformer(DXNET.WIC.ColorTransform wICColorTransformOut)
        {
            System.IntPtr wICColorTransformOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &wICColorTransformOut_, (*(void ***)this._nativePointer)[16]);
            (wICColorTransformOut).NativePointer = wICColorTransformOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "width">No documentation.</param>
        /// <param name = "height">No documentation.</param>
        /// <param name = "ixelFormatRef">No documentation.</param>
        /// <param name = "option">No documentation.</param>
        /// <param name = "bitmapOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateBitmap([In] unsigned int uiWidth,[In] unsigned int uiHeight,[In] const GUID&amp; pixelFormat,[In] WICBitmapCreateCacheOption option,[Out, Fast] IWICBitmap** ppIBitmap)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateBitmap</unmanaged-short>
        internal unsafe void CreateBitmap(System.Int32 width, System.Int32 height, System.Guid ixelFormatRef, DXNET.WIC.BitmapCreateCacheOption option, DXNET.WIC.Bitmap bitmapOut)
        {
            System.IntPtr bitmapOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, width, height, &ixelFormatRef, unchecked ((System.Int32)option), &bitmapOut_, (*(void ***)this._nativePointer)[17]);
            (bitmapOut).NativePointer = bitmapOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmapSourceRef">No documentation.</param>
        /// <param name = "option">No documentation.</param>
        /// <param name = "bitmapOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateBitmapFromSource([In, Optional] IWICBitmapSource* pIBitmapSource,[In] WICBitmapCreateCacheOption option,[Out, Fast] IWICBitmap** ppIBitmap)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateBitmapFromSource</unmanaged-short>
        internal unsafe void CreateBitmapFromSource(DXNET.WIC.BitmapSource bitmapSourceRef, DXNET.WIC.BitmapCreateCacheOption option, DXNET.WIC.Bitmap bitmapOut)
        {
            System.IntPtr bitmapSourceRef_ = System.IntPtr.Zero;
            System.IntPtr bitmapOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            bitmapSourceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(bitmapSourceRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bitmapSourceRef_, unchecked ((System.Int32)option), &bitmapOut_, (*(void ***)this._nativePointer)[18]);
            (bitmapOut).NativePointer = bitmapOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitmapSourceRef">No documentation.</param>
        /// <param name = "x">No documentation.</param>
        /// <param name = "y">No documentation.</param>
        /// <param name = "width">No documentation.</param>
        /// <param name = "height">No documentation.</param>
        /// <param name = "bitmapOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateBitmapFromSourceRect([In, Optional] IWICBitmapSource* pIBitmapSource,[In] unsigned int x,[In] unsigned int y,[In] unsigned int width,[In] unsigned int height,[Out, Fast] IWICBitmap** ppIBitmap)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateBitmapFromSourceRect</unmanaged-short>
        internal unsafe void CreateBitmapFromSourceRect(DXNET.WIC.BitmapSource bitmapSourceRef, System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height, DXNET.WIC.Bitmap bitmapOut)
        {
            System.IntPtr bitmapSourceRef_ = System.IntPtr.Zero;
            System.IntPtr bitmapOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            bitmapSourceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(bitmapSourceRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bitmapSourceRef_, x, y, width, height, &bitmapOut_, (*(void ***)this._nativePointer)[19]);
            (bitmapOut).NativePointer = bitmapOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "width">No documentation.</param>
        /// <param name = "height">No documentation.</param>
        /// <param name = "ixelFormatRef">No documentation.</param>
        /// <param name = "stride">No documentation.</param>
        /// <param name = "bufferSize">No documentation.</param>
        /// <param name = "bufferRef">No documentation.</param>
        /// <param name = "bitmapOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateBitmapFromMemory([In] unsigned int uiWidth,[In] unsigned int uiHeight,[In] const GUID&amp; pixelFormat,[In] unsigned int cbStride,[In] unsigned int cbBufferSize,[In] unsigned char* pbBuffer,[Out, Fast] IWICBitmap** ppIBitmap)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateBitmapFromMemory</unmanaged-short>
        internal unsafe void CreateBitmapFromMemory(System.Int32 width, System.Int32 height, System.Guid ixelFormatRef, System.Int32 stride, System.Int32 bufferSize, System.IntPtr bufferRef, DXNET.WIC.Bitmap bitmapOut)
        {
            System.IntPtr bitmapOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, width, height, &ixelFormatRef, stride, bufferSize, (void *)bufferRef, &bitmapOut_, (*(void ***)this._nativePointer)[20]);
            (bitmapOut).NativePointer = bitmapOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hBitmap">No documentation.</param>
        /// <param name = "hPalette">No documentation.</param>
        /// <param name = "options">No documentation.</param>
        /// <param name = "bitmapOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateBitmapFromHBITMAP([In] HBITMAP hBitmap,[In, Optional] HPALETTE hPalette,[In] WICBitmapAlphaChannelOption options,[Out, Fast] IWICBitmap** ppIBitmap)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateBitmapFromHBITMAP</unmanaged-short>
        internal unsafe void CreateBitmapFromHBITMAP(System.IntPtr hBitmap, System.IntPtr hPalette, DXNET.WIC.BitmapAlphaChannelOption options, DXNET.WIC.Bitmap bitmapOut)
        {
            System.IntPtr bitmapOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hBitmap, (void *)hPalette, unchecked ((System.Int32)options), &bitmapOut_, (*(void ***)this._nativePointer)[21]);
            (bitmapOut).NativePointer = bitmapOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hIcon">No documentation.</param>
        /// <param name = "bitmapOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateBitmapFromHICON([In] HICON hIcon,[Out, Fast] IWICBitmap** ppIBitmap)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateBitmapFromHICON</unmanaged-short>
        internal unsafe void CreateBitmapFromHICON(System.IntPtr hIcon, DXNET.WIC.Bitmap bitmapOut)
        {
            System.IntPtr bitmapOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hIcon, &bitmapOut_, (*(void ***)this._nativePointer)[22]);
            (bitmapOut).NativePointer = bitmapOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "componentTypes">No documentation.</param>
        /// <param name = "options">No documentation.</param>
        /// <param name = "enumUnknownOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateComponentEnumerator([In] DWORD componentTypes,[In] DWORD options,[Out, Fast] IEnumUnknown** ppIEnumUnknown)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateComponentEnumerator</unmanaged-short>
        internal unsafe void CreateComponentEnumerator(System.Int32 componentTypes, System.Int32 options, DXNET.ComObject enumUnknownOut)
        {
            System.IntPtr enumUnknownOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, componentTypes, options, &enumUnknownOut_, (*(void ***)this._nativePointer)[23]);
            (enumUnknownOut).NativePointer = enumUnknownOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "decoderRef">No documentation.</param>
        /// <param name = "fastEncoderOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateFastMetadataEncoderFromDecoder([In, Optional] IWICBitmapDecoder* pIDecoder,[Out, Fast] IWICFastMetadataEncoder** ppIFastEncoder)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateFastMetadataEncoderFromDecoder</unmanaged-short>
        internal unsafe void CreateFastMetadataEncoderFromDecoder(DXNET.WIC.BitmapDecoder decoderRef, DXNET.WIC.FastMetadataEncoder fastEncoderOut)
        {
            System.IntPtr decoderRef_ = System.IntPtr.Zero;
            System.IntPtr fastEncoderOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            decoderRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapDecoder>(decoderRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)decoderRef_, &fastEncoderOut_, (*(void ***)this._nativePointer)[24]);
            (fastEncoderOut).NativePointer = fastEncoderOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "frameDecoderRef">No documentation.</param>
        /// <param name = "fastEncoderOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateFastMetadataEncoderFromFrameDecode([In, Optional] IWICBitmapFrameDecode* pIFrameDecoder,[Out, Fast] IWICFastMetadataEncoder** ppIFastEncoder)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateFastMetadataEncoderFromFrameDecode</unmanaged-short>
        internal unsafe void CreateFastMetadataEncoderFromFrameDecode(DXNET.WIC.BitmapFrameDecode frameDecoderRef, DXNET.WIC.FastMetadataEncoder fastEncoderOut)
        {
            System.IntPtr frameDecoderRef_ = System.IntPtr.Zero;
            System.IntPtr fastEncoderOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            frameDecoderRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapFrameDecode>(frameDecoderRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)frameDecoderRef_, &fastEncoderOut_, (*(void ***)this._nativePointer)[25]);
            (fastEncoderOut).NativePointer = fastEncoderOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "guidMetadataFormat">No documentation.</param>
        /// <param name = "guidVendorRef">No documentation.</param>
        /// <param name = "queryWriterOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateQueryWriter([In] const GUID&amp; guidMetadataFormat,[In, Optional] const GUID* pguidVendor,[Out, Fast] IWICMetadataQueryWriter** ppIQueryWriter)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateQueryWriter</unmanaged-short>
        internal unsafe void CreateQueryWriter(System.Guid guidMetadataFormat, System.Guid? guidVendorRef, DXNET.WIC.MetadataQueryWriter queryWriterOut)
        {
            System.Guid guidVendorRef_;
            System.IntPtr queryWriterOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (guidVendorRef != null)
                guidVendorRef_ = guidVendorRef.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &guidMetadataFormat, guidVendorRef == null ? (void *)0 : &guidVendorRef_, &queryWriterOut_, (*(void ***)this._nativePointer)[26]);
            (queryWriterOut).NativePointer = queryWriterOut_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "queryReaderRef">No documentation.</param>
        /// <param name = "guidVendorRef">No documentation.</param>
        /// <param name = "queryWriterOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory::CreateQueryWriterFromReader([In, Optional] IWICMetadataQueryReader* pIQueryReader,[In, Optional] const GUID* pguidVendor,[Out, Fast] IWICMetadataQueryWriter** ppIQueryWriter)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory::CreateQueryWriterFromReader</unmanaged-short>
        internal unsafe void CreateQueryWriterFromReader(DXNET.WIC.MetadataQueryReader queryReaderRef, System.Guid? guidVendorRef, DXNET.WIC.MetadataQueryWriter queryWriterOut)
        {
            System.IntPtr queryReaderRef_ = System.IntPtr.Zero;
            System.Guid guidVendorRef_;
            System.IntPtr queryWriterOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            queryReaderRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.MetadataQueryReader>(queryReaderRef);
            if (guidVendorRef != null)
                guidVendorRef_ = guidVendorRef.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)queryReaderRef_, guidVendorRef == null ? (void *)0 : &guidVendorRef_, &queryWriterOut_, (*(void ***)this._nativePointer)[27]);
            (queryWriterOut).NativePointer = queryWriterOut_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7B816B45-1996-4476-B132-DE9E247C8AF0")]
    public partial class ImagingFactory2 : DXNET.WIC.ImagingFactory
    {
        public ImagingFactory2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ImagingFactory2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ImagingFactory2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "d2DDeviceRef">No documentation.</param>
        /// <param name = "wICImageEncoderOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICImagingFactory2::CreateImageEncoder([In] ID2D1Device* pD2DDevice,[Out, Fast] IWICImageEncoder** ppWICImageEncoder)</unmanaged>
        /// <unmanaged-short>IWICImagingFactory2::CreateImageEncoder</unmanaged-short>
        internal unsafe void CreateImageEncoder(DXNET.Direct2D1.Device d2DDeviceRef, DXNET.WIC.ImageEncoder wICImageEncoderOut)
        {
            System.IntPtr d2DDeviceRef_ = System.IntPtr.Zero;
            System.IntPtr wICImageEncoderOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            d2DDeviceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Device>(d2DDeviceRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)d2DDeviceRef_, &wICImageEncoderOut_, (*(void ***)this._nativePointer)[28]);
            (wICImageEncoderOut).NativePointer = wICImageEncoderOut_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("8939F66E-C46A-4c21-A9D1-98B327CE1679")]
    public partial class JpegFrameDecode : DXNET.ComObject
    {
        public JpegFrameDecode(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator JpegFrameDecode(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new JpegFrameDecode(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFrameHeader</unmanaged>
        /// <unmanaged-short>GetFrameHeader</unmanaged-short>
        public DXNET.WIC.JpegFrameHeader FrameHeader
        {
            get
            {
                GetFrameHeader(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fIndexingSupportedRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICJpegFrameDecode::DoesSupportIndexing([Out] BOOL* pfIndexingSupported)</unmanaged>
        /// <unmanaged-short>IWICJpegFrameDecode::DoesSupportIndexing</unmanaged-short>
        public unsafe void DoesSupportIndexing(out DXNET.Mathematics.Interop.RawBool fIndexingSupportedRef)
        {
            fIndexingSupportedRef = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *fIndexingSupportedRef_ = &fIndexingSupportedRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, fIndexingSupportedRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "options">No documentation.</param>
        /// <param name = "horizontalIntervalSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICJpegFrameDecode::SetIndexing([In] WICJpegIndexingOptions options,[In] unsigned int horizontalIntervalSize)</unmanaged>
        /// <unmanaged-short>IWICJpegFrameDecode::SetIndexing</unmanaged-short>
        public unsafe void SetIndexing(DXNET.WIC.JpegIndexingOptions options, System.Int32 horizontalIntervalSize)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)options), horizontalIntervalSize, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICJpegFrameDecode::ClearIndexing()</unmanaged>
        /// <unmanaged-short>IWICJpegFrameDecode::ClearIndexing</unmanaged-short>
        public unsafe void ClearIndexing()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "scanIndex">No documentation.</param>
        /// <param name = "tableIndex">No documentation.</param>
        /// <param name = "acHuffmanTableRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICJpegFrameDecode::GetAcHuffmanTable([In] unsigned int scanIndex,[In] unsigned int tableIndex,[Out] DXGI_JPEG_AC_HUFFMAN_TABLE* pAcHuffmanTable)</unmanaged>
        /// <unmanaged-short>IWICJpegFrameDecode::GetAcHuffmanTable</unmanaged-short>
        public unsafe void GetAcHuffmanTable(System.Int32 scanIndex, System.Int32 tableIndex, out DXNET.DXGI.JpegAcHuffmanTable acHuffmanTableRef)
        {
            DXNET.DXGI.JpegAcHuffmanTable.__Native acHuffmanTableRef_ = default (DXNET.DXGI.JpegAcHuffmanTable.__Native);
            
            acHuffmanTableRef = default (DXNET.DXGI.JpegAcHuffmanTable);
            
            DXNET.Result __result__;
            
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, scanIndex, tableIndex, &acHuffmanTableRef_, (*(void ***)this._nativePointer)[6]);
            acHuffmanTableRef.__MarshalFrom(ref acHuffmanTableRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "scanIndex">No documentation.</param>
        /// <param name = "tableIndex">No documentation.</param>
        /// <param name = "dcHuffmanTableRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICJpegFrameDecode::GetDcHuffmanTable([In] unsigned int scanIndex,[In] unsigned int tableIndex,[Out] DXGI_JPEG_DC_HUFFMAN_TABLE* pDcHuffmanTable)</unmanaged>
        /// <unmanaged-short>IWICJpegFrameDecode::GetDcHuffmanTable</unmanaged-short>
        public unsafe void GetDcHuffmanTable(System.Int32 scanIndex, System.Int32 tableIndex, out DXNET.DXGI.JpegDeviceContextHuffmanTable dcHuffmanTableRef)
        {
            DXNET.DXGI.JpegDeviceContextHuffmanTable.__Native dcHuffmanTableRef_ = default (DXNET.DXGI.JpegDeviceContextHuffmanTable.__Native);
            dcHuffmanTableRef = default (DXNET.DXGI.JpegDeviceContextHuffmanTable);
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, scanIndex, tableIndex, &dcHuffmanTableRef_, (*(void ***)this._nativePointer)[7]);
            dcHuffmanTableRef.__MarshalFrom(ref dcHuffmanTableRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "scanIndex">No documentation.</param>
        /// <param name = "tableIndex">No documentation.</param>
        /// <param name = "quantizationTableRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICJpegFrameDecode::GetQuantizationTable([In] unsigned int scanIndex,[In] unsigned int tableIndex,[Out] DXGI_JPEG_QUANTIZATION_TABLE* pQuantizationTable)</unmanaged>
        /// <unmanaged-short>IWICJpegFrameDecode::GetQuantizationTable</unmanaged-short>
        public unsafe void GetQuantizationTable(System.Int32 scanIndex, System.Int32 tableIndex, out DXNET.DXGI.JpegQuantizationTable quantizationTableRef)
        {
            DXNET.DXGI.JpegQuantizationTable.__Native quantizationTableRef_ = default (DXNET.DXGI.JpegQuantizationTable.__Native);
            quantizationTableRef = default (DXNET.DXGI.JpegQuantizationTable);
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, scanIndex, tableIndex, &quantizationTableRef_, (*(void ***)this._nativePointer)[8]);
            quantizationTableRef.__MarshalFrom(ref quantizationTableRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "frameHeaderRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICJpegFrameDecode::GetFrameHeader([Out] WICJpegFrameHeader* pFrameHeader)</unmanaged>
        /// <unmanaged-short>IWICJpegFrameDecode::GetFrameHeader</unmanaged-short>
        internal unsafe void GetFrameHeader(out DXNET.WIC.JpegFrameHeader frameHeaderRef)
        {
            frameHeaderRef = default (DXNET.WIC.JpegFrameHeader);
            DXNET.Result __result__;
            fixed (void *frameHeaderRef_ = &frameHeaderRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, frameHeaderRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "scanIndex">No documentation.</param>
        /// <param name = "scanHeaderRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICJpegFrameDecode::GetScanHeader([In] unsigned int scanIndex,[Out] WICJpegScanHeader* pScanHeader)</unmanaged>
        /// <unmanaged-short>IWICJpegFrameDecode::GetScanHeader</unmanaged-short>
        public unsafe void GetScanHeader(System.Int32 scanIndex, out DXNET.WIC.JpegScanHeader scanHeaderRef)
        {
            scanHeaderRef = default (DXNET.WIC.JpegScanHeader);
            DXNET.Result __result__;
            fixed (void *scanHeaderRef_ = &scanHeaderRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, scanIndex, scanHeaderRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "scanIndex">No documentation.</param>
        /// <param name = "scanOffset">No documentation.</param>
        /// <param name = "scanData">No documentation.</param>
        /// <param name = "scanDataRef">No documentation.</param>
        /// <param name = "scanDataActualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICJpegFrameDecode::CopyScan([In] unsigned int scanIndex,[In] unsigned int scanOffset,[In] unsigned int cbScanData,[Out, Buffer] unsigned char* pbScanData,[Out] unsigned int* pcbScanDataActual)</unmanaged>
        /// <unmanaged-short>IWICJpegFrameDecode::CopyScan</unmanaged-short>
        public unsafe void CopyScan(System.Int32 scanIndex, System.Int32 scanOffset, System.Int32 scanData, System.Byte[] scanDataRef, out System.Int32 scanDataActualRef)
        {
            DXNET.Result __result__;
            fixed (void *scanDataActualRef_ = &scanDataActualRef)
                fixed (void *scanDataRef_ = scanDataRef)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, scanIndex, scanOffset, scanData, scanDataRef_, scanDataActualRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "streamOffset">No documentation.</param>
        /// <param name = "streamData">No documentation.</param>
        /// <param name = "streamDataRef">No documentation.</param>
        /// <param name = "streamDataActualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICJpegFrameDecode::CopyMinimalStream([In] unsigned int streamOffset,[In] unsigned int cbStreamData,[Out, Buffer] unsigned char* pbStreamData,[Out] unsigned int* pcbStreamDataActual)</unmanaged>
        /// <unmanaged-short>IWICJpegFrameDecode::CopyMinimalStream</unmanaged-short>
        public unsafe void CopyMinimalStream(System.Int32 streamOffset, System.Int32 streamData, System.Byte[] streamDataRef, out System.Int32 streamDataActualRef)
        {
            DXNET.Result __result__;
            fixed (void *streamDataActualRef_ = &streamDataActualRef)
                fixed (void *streamDataRef_ = streamDataRef)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, streamOffset, streamData, streamDataRef_, streamDataActualRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2F0C601F-D2C6-468C-ABFA-49495D983ED1")]
    public partial class JpegFrameEncode : DXNET.ComObject
    {
        public JpegFrameEncode(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator JpegFrameEncode(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new JpegFrameEncode(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "scanIndex">No documentation.</param>
        /// <param name = "tableIndex">No documentation.</param>
        /// <param name = "acHuffmanTableRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICJpegFrameEncode::GetAcHuffmanTable([In] unsigned int scanIndex,[In] unsigned int tableIndex,[Out] DXGI_JPEG_AC_HUFFMAN_TABLE* pAcHuffmanTable)</unmanaged>
        /// <unmanaged-short>IWICJpegFrameEncode::GetAcHuffmanTable</unmanaged-short>
        public unsafe void GetAcHuffmanTable(System.Int32 scanIndex, System.Int32 tableIndex, out DXNET.DXGI.JpegAcHuffmanTable acHuffmanTableRef)
        {
            DXNET.DXGI.JpegAcHuffmanTable.__Native acHuffmanTableRef_ = default (DXNET.DXGI.JpegAcHuffmanTable.__Native);
            acHuffmanTableRef = default (DXNET.DXGI.JpegAcHuffmanTable);
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, scanIndex, tableIndex, &acHuffmanTableRef_, (*(void ***)this._nativePointer)[3]);
            acHuffmanTableRef.__MarshalFrom(ref acHuffmanTableRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "scanIndex">No documentation.</param>
        /// <param name = "tableIndex">No documentation.</param>
        /// <param name = "dcHuffmanTableRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICJpegFrameEncode::GetDcHuffmanTable([In] unsigned int scanIndex,[In] unsigned int tableIndex,[Out] DXGI_JPEG_DC_HUFFMAN_TABLE* pDcHuffmanTable)</unmanaged>
        /// <unmanaged-short>IWICJpegFrameEncode::GetDcHuffmanTable</unmanaged-short>
        public unsafe void GetDcHuffmanTable(System.Int32 scanIndex, System.Int32 tableIndex, out DXNET.DXGI.JpegDeviceContextHuffmanTable dcHuffmanTableRef)
        {
            DXNET.DXGI.JpegDeviceContextHuffmanTable.__Native dcHuffmanTableRef_ = default (DXNET.DXGI.JpegDeviceContextHuffmanTable.__Native);
            dcHuffmanTableRef = default (DXNET.DXGI.JpegDeviceContextHuffmanTable);
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, scanIndex, tableIndex, &dcHuffmanTableRef_, (*(void ***)this._nativePointer)[4]);
            dcHuffmanTableRef.__MarshalFrom(ref dcHuffmanTableRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "scanIndex">No documentation.</param>
        /// <param name = "tableIndex">No documentation.</param>
        /// <param name = "quantizationTableRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICJpegFrameEncode::GetQuantizationTable([In] unsigned int scanIndex,[In] unsigned int tableIndex,[Out] DXGI_JPEG_QUANTIZATION_TABLE* pQuantizationTable)</unmanaged>
        /// <unmanaged-short>IWICJpegFrameEncode::GetQuantizationTable</unmanaged-short>
        public unsafe void GetQuantizationTable(System.Int32 scanIndex, System.Int32 tableIndex, out DXNET.DXGI.JpegQuantizationTable quantizationTableRef)
        {
            DXNET.DXGI.JpegQuantizationTable.__Native quantizationTableRef_ = default (DXNET.DXGI.JpegQuantizationTable.__Native);
            quantizationTableRef = default (DXNET.DXGI.JpegQuantizationTable);
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, scanIndex, tableIndex, &quantizationTableRef_, (*(void ***)this._nativePointer)[5]);
            quantizationTableRef.__MarshalFrom(ref quantizationTableRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "scanData">No documentation.</param>
        /// <param name = "scanDataRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICJpegFrameEncode::WriteScan([In] unsigned int cbScanData,[In, Buffer] const unsigned char* pbScanData)</unmanaged>
        /// <unmanaged-short>IWICJpegFrameEncode::WriteScan</unmanaged-short>
        public unsafe void WriteScan(System.Int32 scanData, System.Byte[] scanDataRef)
        {
            DXNET.Result __result__;
            fixed (void *scanDataRef_ = scanDataRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, scanData, scanDataRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("30989668-E1C9-4597-B395-458EEDB808DF")]
    public partial class MetadataQueryReader : DXNET.ComObject
    {
        public MetadataQueryReader(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MetadataQueryReader(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MetadataQueryReader(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetContainerFormat</unmanaged>
        /// <unmanaged-short>GetContainerFormat</unmanaged-short>
        public System.Guid ContainerFormat
        {
            get
            {
                GetContainerFormat(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "guidContainerFormatRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICMetadataQueryReader::GetContainerFormat([Out] GUID* pguidContainerFormat)</unmanaged>
        /// <unmanaged-short>IWICMetadataQueryReader::GetContainerFormat</unmanaged-short>
        internal unsafe void GetContainerFormat(out System.Guid guidContainerFormatRef)
        {
            guidContainerFormatRef = default (System.Guid);
            DXNET.Result __result__;
            fixed (void *guidContainerFormatRef_ = &guidContainerFormatRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, guidContainerFormatRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "cchMaxLength">No documentation.</param>
        /// <param name = "@namespace">No documentation.</param>
        /// <param name = "cchActualLengthRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICMetadataQueryReader::GetLocation([In] unsigned int cchMaxLength,[In] wchar_t* wzNamespace,[Out] unsigned int* pcchActualLength)</unmanaged>
        /// <unmanaged-short>IWICMetadataQueryReader::GetLocation</unmanaged-short>
        internal unsafe void GetLocation(System.Int32 cchMaxLength, System.IntPtr @namespace, out System.Int32 cchActualLengthRef)
        {
            DXNET.Result __result__;
            fixed (void *cchActualLengthRef_ = &cchActualLengthRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, cchMaxLength, (void *)@namespace, cchActualLengthRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "varValueRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICMetadataQueryReader::GetMetadataByName([In] const wchar_t* wzName,[In] PROPVARIANT* pvarValue)</unmanaged>
        /// <unmanaged-short>IWICMetadataQueryReader::GetMetadataByName</unmanaged-short>
        internal unsafe DXNET.Result GetMetadataByName(System.String name, System.IntPtr varValueRef)
        {
            DXNET.Result __result__;
            fixed (char *name_ = name)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, (void *)varValueRef, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICMetadataQueryReader::GetEnumerator([Out] IEnumString** ppIEnumString)</unmanaged>
        /// <unmanaged-short>IWICMetadataQueryReader::GetEnumerator</unmanaged-short>
        internal unsafe System.IntPtr GetEnumerator()
        {
            System.IntPtr enumStringOut;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &enumStringOut, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
            return enumStringOut;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("A721791A-0DEF-4d06-BD91-2118BF1DB10B")]
    public partial class MetadataQueryWriter : DXNET.WIC.MetadataQueryReader
    {
        public MetadataQueryWriter(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator MetadataQueryWriter(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new MetadataQueryWriter(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <param name = "varValueRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICMetadataQueryWriter::SetMetadataByName([In] const wchar_t* wzName,[In] const PROPVARIANT* pvarValue)</unmanaged>
        /// <unmanaged-short>IWICMetadataQueryWriter::SetMetadataByName</unmanaged-short>
        internal unsafe void SetMetadataByName(System.String name, System.IntPtr varValueRef)
        {
            DXNET.Result __result__;
            fixed (char *name_ = name)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, (void *)varValueRef, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "name">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICMetadataQueryWriter::RemoveMetadataByName([In] const wchar_t* wzName)</unmanaged>
        /// <unmanaged-short>IWICMetadataQueryWriter::RemoveMetadataByName</unmanaged-short>
        public unsafe void RemoveMetadataByName(System.String name)
        {
            DXNET.Result __result__;
            fixed (char *name_ = name)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("00000040-a8f2-4877-ba0a-fd2b6645fb94")]
    public partial class Palette : DXNET.ComObject
    {
        public Palette(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Palette(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Palette(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetType</unmanaged>
        /// <unmanaged-short>GetType</unmanaged-short>
        public DXNET.WIC.BitmapPaletteType TypeInfo
        {
            get
            {
                GetTypeInfo(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetColorCount</unmanaged>
        /// <unmanaged-short>GetColorCount</unmanaged-short>
        public System.Int32 ColorCount
        {
            get
            {
                GetColorCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>IsBlackWhite</unmanaged>
        /// <unmanaged-short>IsBlackWhite</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsBlackWhite
        {
            get
            {
                IsBlackWhite_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>IsGrayscale</unmanaged>
        /// <unmanaged-short>IsGrayscale</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsGrayscale
        {
            get
            {
                IsGrayscale_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ePaletteType">No documentation.</param>
        /// <param name = "fAddTransparentColor">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPalette::InitializePredefined([In] WICBitmapPaletteType ePaletteType,[In] BOOL fAddTransparentColor)</unmanaged>
        /// <unmanaged-short>IWICPalette::InitializePredefined</unmanaged-short>
        public unsafe void Initialize(DXNET.WIC.BitmapPaletteType ePaletteType, DXNET.Mathematics.Interop.RawBool fAddTransparentColor)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, unchecked ((System.Int32)ePaletteType), fAddTransparentColor, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "colorsRef">No documentation.</param>
        /// <param name = "count">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPalette::InitializeCustom([In, Buffer] unsigned int* pColors,[In] unsigned int cCount)</unmanaged>
        /// <unmanaged-short>IWICPalette::InitializeCustom</unmanaged-short>
        internal unsafe void Initialize(System.IntPtr colorsRef, System.Int32 count)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)colorsRef, count, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "surfaceRef">No documentation.</param>
        /// <param name = "count">No documentation.</param>
        /// <param name = "fAddTransparentColor">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPalette::InitializeFromBitmap([In, Optional] IWICBitmapSource* pISurface,[In] unsigned int cCount,[In] BOOL fAddTransparentColor)</unmanaged>
        /// <unmanaged-short>IWICPalette::InitializeFromBitmap</unmanaged-short>
        public unsafe void Initialize(DXNET.WIC.BitmapSource surfaceRef, System.Int32 count, DXNET.Mathematics.Interop.RawBool fAddTransparentColor)
        {
            System.IntPtr surfaceRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            surfaceRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(surfaceRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)surfaceRef_, count, fAddTransparentColor, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "paletteRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPalette::InitializeFromPalette([In, Optional] IWICPalette* pIPalette)</unmanaged>
        /// <unmanaged-short>IWICPalette::InitializeFromPalette</unmanaged-short>
        public unsafe void Initialize(DXNET.WIC.Palette paletteRef)
        {
            System.IntPtr paletteRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            paletteRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.Palette>(paletteRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)paletteRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ePaletteTypeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPalette::GetType([Out] WICBitmapPaletteType* pePaletteType)</unmanaged>
        /// <unmanaged-short>IWICPalette::GetType</unmanaged-short>
        internal unsafe void GetTypeInfo(out DXNET.WIC.BitmapPaletteType ePaletteTypeRef)
        {
            DXNET.Result __result__;
            fixed (void *ePaletteTypeRef_ = &ePaletteTypeRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, ePaletteTypeRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "countRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPalette::GetColorCount([Out] unsigned int* pcCount)</unmanaged>
        /// <unmanaged-short>IWICPalette::GetColorCount</unmanaged-short>
        internal unsafe void GetColorCount(out System.Int32 countRef)
        {
            DXNET.Result __result__;
            fixed (void *countRef_ = &countRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, countRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "count">No documentation.</param>
        /// <param name = "colorsRef">No documentation.</param>
        /// <param name = "actualColorsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPalette::GetColors([In] unsigned int cCount,[Out, Buffer] unsigned int* pColors,[Out] unsigned int* pcActualColors)</unmanaged>
        /// <unmanaged-short>IWICPalette::GetColors</unmanaged-short>
        internal unsafe void GetColors(System.Int32 count, System.IntPtr colorsRef, out System.Int32 actualColorsRef)
        {
            DXNET.Result __result__;
            fixed (void *actualColorsRef_ = &actualColorsRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, count, (void *)colorsRef, actualColorsRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fIsBlackWhiteRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPalette::IsBlackWhite([Out] BOOL* pfIsBlackWhite)</unmanaged>
        /// <unmanaged-short>IWICPalette::IsBlackWhite</unmanaged-short>
        internal unsafe void IsBlackWhite_(out DXNET.Mathematics.Interop.RawBool fIsBlackWhiteRef)
        {
            fIsBlackWhiteRef = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *fIsBlackWhiteRef_ = &fIsBlackWhiteRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, fIsBlackWhiteRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fIsGrayscaleRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPalette::IsGrayscale([Out] BOOL* pfIsGrayscale)</unmanaged>
        /// <unmanaged-short>IWICPalette::IsGrayscale</unmanaged-short>
        internal unsafe void IsGrayscale_(out DXNET.Mathematics.Interop.RawBool fIsGrayscaleRef)
        {
            fIsGrayscaleRef = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *fIsGrayscaleRef_ = &fIsGrayscaleRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, fIsGrayscaleRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fHasAlphaRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPalette::HasAlpha([Out] BOOL* pfHasAlpha)</unmanaged>
        /// <unmanaged-short>IWICPalette::HasAlpha</unmanaged-short>
        public unsafe void HasAlpha(out DXNET.Mathematics.Interop.RawBool fHasAlphaRef)
        {
            fHasAlphaRef = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *fHasAlphaRef_ = &fHasAlphaRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, fHasAlphaRef_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("E8EDA601-3D48-431a-AB44-69059BE88BBE")]
    public partial class PixelFormatInfo : DXNET.WIC.ComponentInfo
    {
        public PixelFormatInfo(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PixelFormatInfo(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PixelFormatInfo(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFormatGUID</unmanaged>
        /// <unmanaged-short>GetFormatGUID</unmanaged-short>
        public System.Guid FormatGUID
        {
            get
            {
                GetFormatGUID(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetColorContext</unmanaged>
        /// <unmanaged-short>GetColorContext</unmanaged-short>
        public DXNET.WIC.ColorContext ColorContext
        {
            get
            {
                GetColorContext(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetBitsPerPixel</unmanaged>
        /// <unmanaged-short>GetBitsPerPixel</unmanaged-short>
        public System.Int32 BitsPerPixel
        {
            get
            {
                GetBitsPerPixel(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetChannelCount</unmanaged>
        /// <unmanaged-short>GetChannelCount</unmanaged-short>
        public System.Int32 ChannelCount
        {
            get
            {
                GetChannelCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "formatRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPixelFormatInfo::GetFormatGUID([Out] GUID* pFormat)</unmanaged>
        /// <unmanaged-short>IWICPixelFormatInfo::GetFormatGUID</unmanaged-short>
        internal unsafe void GetFormatGUID(out System.Guid formatRef)
        {
            formatRef = default (System.Guid);
            DXNET.Result __result__;
            fixed (void *formatRef_ = &formatRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, formatRef_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "colorContextOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPixelFormatInfo::GetColorContext([Out] IWICColorContext** ppIColorContext)</unmanaged>
        /// <unmanaged-short>IWICPixelFormatInfo::GetColorContext</unmanaged-short>
        internal unsafe void GetColorContext(out DXNET.WIC.ColorContext colorContextOut)
        {
            System.IntPtr colorContextOut_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &colorContextOut_, (*(void ***)this._nativePointer)[12]);
            if (colorContextOut_ != System.IntPtr.Zero)
                colorContextOut = new DXNET.WIC.ColorContext(colorContextOut_);
            else
                colorContextOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bitsPerPixelRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPixelFormatInfo::GetBitsPerPixel([Out] unsigned int* puiBitsPerPixel)</unmanaged>
        /// <unmanaged-short>IWICPixelFormatInfo::GetBitsPerPixel</unmanaged-short>
        internal unsafe void GetBitsPerPixel(out System.Int32 bitsPerPixelRef)
        {
            DXNET.Result __result__;
            fixed (void *bitsPerPixelRef_ = &bitsPerPixelRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, bitsPerPixelRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "channelCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPixelFormatInfo::GetChannelCount([Out] unsigned int* puiChannelCount)</unmanaged>
        /// <unmanaged-short>IWICPixelFormatInfo::GetChannelCount</unmanaged-short>
        internal unsafe void GetChannelCount(out System.Int32 channelCountRef)
        {
            DXNET.Result __result__;
            fixed (void *channelCountRef_ = &channelCountRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, channelCountRef_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "channelIndex">No documentation.</param>
        /// <param name = "maskBuffer">No documentation.</param>
        /// <param name = "maskBufferRef">No documentation.</param>
        /// <param name = "actualRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPixelFormatInfo::GetChannelMask([In] unsigned int uiChannelIndex,[In] unsigned int cbMaskBuffer,[Out, Buffer, Optional] unsigned char* pbMaskBuffer,[Out] unsigned int* pcbActual)</unmanaged>
        /// <unmanaged-short>IWICPixelFormatInfo::GetChannelMask</unmanaged-short>
        internal unsafe void GetChannelMask(System.Int32 channelIndex, System.Int32 maskBuffer, System.Byte[] maskBufferRef, out System.Int32 actualRef)
        {
            DXNET.Result __result__;
            fixed (void *actualRef_ = &actualRef)
                fixed (void *maskBufferRef_ = maskBufferRef)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, channelIndex, maskBuffer, maskBufferRef_, actualRef_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("A9DB33A2-AF5F-43C7-B679-74F5984B5AA4")]
    public partial class PixelFormatInfo2 : DXNET.WIC.PixelFormatInfo
    {
        public PixelFormatInfo2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PixelFormatInfo2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PixelFormatInfo2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>SupportsTransparency</unmanaged>
        /// <unmanaged-short>SupportsTransparency</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsSupportingTransparency
        {
            get
            {
                IsSupportingTransparency_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetNumericRepresentation</unmanaged>
        /// <unmanaged-short>GetNumericRepresentation</unmanaged-short>
        public DXNET.WIC.PixelFormatNumericRepresentation NumericRepresentation
        {
            get
            {
                GetNumericRepresentation(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fSupportsTransparencyRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPixelFormatInfo2::SupportsTransparency([Out] BOOL* pfSupportsTransparency)</unmanaged>
        /// <unmanaged-short>IWICPixelFormatInfo2::SupportsTransparency</unmanaged-short>
        internal unsafe void IsSupportingTransparency_(out DXNET.Mathematics.Interop.RawBool fSupportsTransparencyRef)
        {
            fSupportsTransparencyRef = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *fSupportsTransparencyRef_ = &fSupportsTransparencyRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, fSupportsTransparencyRef_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "numericRepresentationRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPixelFormatInfo2::GetNumericRepresentation([Out] WICPixelFormatNumericRepresentation* pNumericRepresentation)</unmanaged>
        /// <unmanaged-short>IWICPixelFormatInfo2::GetNumericRepresentation</unmanaged-short>
        internal unsafe void GetNumericRepresentation(out DXNET.WIC.PixelFormatNumericRepresentation numericRepresentationRef)
        {
            DXNET.Result __result__;
            fixed (void *numericRepresentationRef_ = &numericRepresentationRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, numericRepresentationRef_, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("F928B7B8-2221-40C1-B72E-7E82F1974D1A")]
    public partial class PlanarBitmapFrameEncode : DXNET.ComObject
    {
        public PlanarBitmapFrameEncode(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PlanarBitmapFrameEncode(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PlanarBitmapFrameEncode(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lineCount">No documentation.</param>
        /// <param name = "planesRef">No documentation.</param>
        /// <param name = "planes">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPlanarBitmapFrameEncode::WritePixels([In] unsigned int lineCount,[In, Buffer] WICBitmapPlane* pPlanes,[In] unsigned int cPlanes)</unmanaged>
        /// <unmanaged-short>IWICPlanarBitmapFrameEncode::WritePixels</unmanaged-short>
        public unsafe void WritePixels(System.Int32 lineCount, DXNET.WIC.BitmapPlane[] planesRef, System.Int32 planes)
        {
            DXNET.Result __result__;
            fixed (void *planesRef_ = planesRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, lineCount, planesRef_, planes, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "planesOut">No documentation.</param>
        /// <param name = "planes">No documentation.</param>
        /// <param name = "rcSourceRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPlanarBitmapFrameEncode::WriteSource([In, Buffer] IWICBitmapSource** ppPlanes,[In] unsigned int cPlanes,[In, Optional] WICRect* prcSource)</unmanaged>
        /// <unmanaged-short>IWICPlanarBitmapFrameEncode::WriteSource</unmanaged-short>
        public unsafe void WriteSource(DXNET.WIC.BitmapSource[] planesOut, System.Int32 planes, DXNET.Mathematics.Interop.RawBox? rcSourceRef)
        {
            System.IntPtr*planesOut_;
            planesOut_ = (System.IntPtr*)0;
            if (planesOut != null)
            {
                System.IntPtr*_planesOut = stackalloc System.IntPtr[planesOut.Length];
                planesOut_ = _planesOut;
            }

            DXNET.Mathematics.Interop.RawBox rcSourceRef_;
            DXNET.Result __result__;
            if (planesOut != null)
                for (int i = 0; i < planesOut.Length; ++i)
                    (planesOut_)[i] = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(planesOut[i]);
            if (rcSourceRef != null)
                rcSourceRef_ = rcSourceRef.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)planesOut_, planes, rcSourceRef == null ? (void *)0 : &rcSourceRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "planesOut">No documentation.</param>
        /// <param name = "planes">No documentation.</param>
        /// <param name = "rcSourceRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPlanarBitmapFrameEncode::WriteSource([In, Buffer] IWICBitmapSource** ppPlanes,[In] unsigned int cPlanes,[In, Optional] WICRect* prcSource)</unmanaged>
        /// <unmanaged-short>IWICPlanarBitmapFrameEncode::WriteSource</unmanaged-short>
        public unsafe void WriteSource(DXNET.ComArray<DXNET.WIC.BitmapSource> planesOut, System.Int32 planes, DXNET.Mathematics.Interop.RawBox? rcSourceRef)
        {
            DXNET.Mathematics.Interop.RawBox rcSourceRef_;
            DXNET.Result __result__;
            if (rcSourceRef != null)
                rcSourceRef_ = rcSourceRef.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)(planesOut?.NativePointer ?? System.IntPtr.Zero), planes, rcSourceRef == null ? (void *)0 : &rcSourceRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "planesOut">No documentation.</param>
        /// <param name = "planes">No documentation.</param>
        /// <param name = "rcSourceRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPlanarBitmapFrameEncode::WriteSource([In, Buffer] IWICBitmapSource** ppPlanes,[In] unsigned int cPlanes,[In, Optional] WICRect* prcSource)</unmanaged>
        /// <unmanaged-short>IWICPlanarBitmapFrameEncode::WriteSource</unmanaged-short>
        private unsafe void WriteSource(System.IntPtr planesOut, System.Int32 planes, System.IntPtr rcSourceRef)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)planesOut, planes, (void *)rcSourceRef, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3AFF9CCE-BE95-4303-B927-E7D16FF4A613")]
    public partial class PlanarBitmapSourceTransform : DXNET.ComObject
    {
        public PlanarBitmapSourceTransform(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PlanarBitmapSourceTransform(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PlanarBitmapSourceTransform(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "widthRef">No documentation.</param>
        /// <param name = "heightRef">No documentation.</param>
        /// <param name = "dstTransform">No documentation.</param>
        /// <param name = "dstPlanarOptions">No documentation.</param>
        /// <param name = "guidDstFormatsRef">No documentation.</param>
        /// <param name = "planeDescriptionsRef">No documentation.</param>
        /// <param name = "planes">No documentation.</param>
        /// <param name = "fIsSupportedRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPlanarBitmapSourceTransform::DoesSupportTransform([InOut] unsigned int* puiWidth,[InOut] unsigned int* puiHeight,[In] WICBitmapTransformOptions dstTransform,[In] WICPlanarOptions dstPlanarOptions,[In, Buffer] const GUID* pguidDstFormats,[Out, Buffer] WICBitmapPlaneDescription* pPlaneDescriptions,[In] unsigned int cPlanes,[Out] BOOL* pfIsSupported)</unmanaged>
        /// <unmanaged-short>IWICPlanarBitmapSourceTransform::DoesSupportTransform</unmanaged-short>
        public unsafe void DoesSupportTransform(ref System.Int32 widthRef, ref System.Int32 heightRef, DXNET.WIC.BitmapTransformOptions dstTransform, DXNET.WIC.PlanarOptions dstPlanarOptions, System.Guid[] guidDstFormatsRef, DXNET.WIC.BitmapPlaneDescription[] planeDescriptionsRef, System.Int32 planes, out DXNET.Mathematics.Interop.RawBool fIsSupportedRef)
        {
            fIsSupportedRef = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *fIsSupportedRef_ = &fIsSupportedRef)
                fixed (void *planeDescriptionsRef_ = planeDescriptionsRef)
                    fixed (void *guidDstFormatsRef_ = guidDstFormatsRef)
                        fixed (void *heightRef_ = &heightRef)
                            fixed (void *widthRef_ = &widthRef)
                                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, widthRef_, heightRef_, unchecked ((System.Int32)dstTransform), unchecked ((System.Int32)dstPlanarOptions), guidDstFormatsRef_, planeDescriptionsRef_, planes, fIsSupportedRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "rcSourceRef">No documentation.</param>
        /// <param name = "width">No documentation.</param>
        /// <param name = "height">No documentation.</param>
        /// <param name = "dstTransform">No documentation.</param>
        /// <param name = "dstPlanarOptions">No documentation.</param>
        /// <param name = "dstPlanesRef">No documentation.</param>
        /// <param name = "planes">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPlanarBitmapSourceTransform::CopyPixels([In, Optional] const WICRect* prcSource,[In] unsigned int uiWidth,[In] unsigned int uiHeight,[In] WICBitmapTransformOptions dstTransform,[In] WICPlanarOptions dstPlanarOptions,[In, Buffer] const WICBitmapPlane* pDstPlanes,[In] unsigned int cPlanes)</unmanaged>
        /// <unmanaged-short>IWICPlanarBitmapSourceTransform::CopyPixels</unmanaged-short>
        public unsafe void CopyPixels(DXNET.Mathematics.Interop.RawBox? rcSourceRef, System.Int32 width, System.Int32 height, DXNET.WIC.BitmapTransformOptions dstTransform, DXNET.WIC.PlanarOptions dstPlanarOptions, DXNET.WIC.BitmapPlane[] dstPlanesRef, System.Int32 planes)
        {
            DXNET.Mathematics.Interop.RawBox rcSourceRef_;
            DXNET.Result __result__;
            if (rcSourceRef != null)
                rcSourceRef_ = rcSourceRef.Value;
            fixed (void *dstPlanesRef_ = dstPlanesRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, rcSourceRef == null ? (void *)0 : &rcSourceRef_, width, height, unchecked ((System.Int32)dstTransform), unchecked ((System.Int32)dstPlanarOptions), dstPlanesRef_, planes, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("BEBEE9CB-83B0-4DCC-8132-B0AAA55EAC96")]
    public partial class PlanarFormatConverter : DXNET.WIC.BitmapSource
    {
        public PlanarFormatConverter(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator PlanarFormatConverter(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new PlanarFormatConverter(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "planesOut">No documentation.</param>
        /// <param name = "planes">No documentation.</param>
        /// <param name = "dstFormat">No documentation.</param>
        /// <param name = "dither">No documentation.</param>
        /// <param name = "paletteRef">No documentation.</param>
        /// <param name = "alphaThresholdPercent">No documentation.</param>
        /// <param name = "paletteTranslate">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPlanarFormatConverter::Initialize([In, Buffer] IWICBitmapSource** ppPlanes,[In] unsigned int cPlanes,[In] const GUID&amp; dstFormat,[In] WICBitmapDitherType dither,[In, Optional] IWICPalette* pIPalette,[In] double alphaThresholdPercent,[In] WICBitmapPaletteType paletteTranslate)</unmanaged>
        /// <unmanaged-short>IWICPlanarFormatConverter::Initialize</unmanaged-short>
        public unsafe void Initialize(DXNET.WIC.BitmapSource[] planesOut, System.Int32 planes, System.Guid dstFormat, DXNET.WIC.BitmapDitherType dither, DXNET.WIC.Palette paletteRef, System.Double alphaThresholdPercent, DXNET.WIC.BitmapPaletteType paletteTranslate)
        {
            System.IntPtr*planesOut_;
            planesOut_ = (System.IntPtr*)0;
            if (planesOut != null)
            {
                System.IntPtr*_planesOut = stackalloc System.IntPtr[planesOut.Length];
                planesOut_ = _planesOut;
            }

            System.IntPtr paletteRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (planesOut != null)
                for (int i = 0; i < planesOut.Length; ++i)
                    (planesOut_)[i] = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.BitmapSource>(planesOut[i]);
            paletteRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.Palette>(paletteRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)planesOut_, planes, &dstFormat, unchecked ((System.Int32)dither), (void *)paletteRef_, alphaThresholdPercent, unchecked ((System.Int32)paletteTranslate), (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "srcPixelFormatsRef">No documentation.</param>
        /// <param name = "srcPlanes">No documentation.</param>
        /// <param name = "dstPixelFormat">No documentation.</param>
        /// <param name = "fCanConvertRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPlanarFormatConverter::CanConvert([In, Buffer] const GUID* pSrcPixelFormats,[In] unsigned int cSrcPlanes,[In] const GUID&amp; dstPixelFormat,[Out] BOOL* pfCanConvert)</unmanaged>
        /// <unmanaged-short>IWICPlanarFormatConverter::CanConvert</unmanaged-short>
        public unsafe void CanConvert(System.Guid[] srcPixelFormatsRef, System.Int32 srcPlanes, System.Guid dstPixelFormat, out DXNET.Mathematics.Interop.RawBool fCanConvertRef)
        {
            fCanConvertRef = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *fCanConvertRef_ = &fCanConvertRef)
                fixed (void *srcPixelFormatsRef_ = srcPixelFormatsRef)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, srcPixelFormatsRef_, srcPlanes, &dstPixelFormat, fCanConvertRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "planesOut">No documentation.</param>
        /// <param name = "planes">No documentation.</param>
        /// <param name = "dstFormat">No documentation.</param>
        /// <param name = "dither">No documentation.</param>
        /// <param name = "paletteRef">No documentation.</param>
        /// <param name = "alphaThresholdPercent">No documentation.</param>
        /// <param name = "paletteTranslate">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPlanarFormatConverter::Initialize([In, Buffer] IWICBitmapSource** ppPlanes,[In] unsigned int cPlanes,[In] const GUID&amp; dstFormat,[In] WICBitmapDitherType dither,[In, Optional] IWICPalette* pIPalette,[In] double alphaThresholdPercent,[In] WICBitmapPaletteType paletteTranslate)</unmanaged>
        /// <unmanaged-short>IWICPlanarFormatConverter::Initialize</unmanaged-short>
        public unsafe void Initialize(DXNET.ComArray<DXNET.WIC.BitmapSource> planesOut, System.Int32 planes, System.Guid dstFormat, DXNET.WIC.BitmapDitherType dither, DXNET.WIC.Palette paletteRef, System.Double alphaThresholdPercent, DXNET.WIC.BitmapPaletteType paletteTranslate)
        {
            System.IntPtr paletteRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            paletteRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.WIC.Palette>(paletteRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)(planesOut?.NativePointer ?? System.IntPtr.Zero), planes, &dstFormat, unchecked ((System.Int32)dither), (void *)paletteRef_, alphaThresholdPercent, unchecked ((System.Int32)paletteTranslate), (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "planesOut">No documentation.</param>
        /// <param name = "planes">No documentation.</param>
        /// <param name = "dstFormat">No documentation.</param>
        /// <param name = "dither">No documentation.</param>
        /// <param name = "paletteRef">No documentation.</param>
        /// <param name = "alphaThresholdPercent">No documentation.</param>
        /// <param name = "paletteTranslate">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICPlanarFormatConverter::Initialize([In, Buffer] IWICBitmapSource** ppPlanes,[In] unsigned int cPlanes,[In] const GUID&amp; dstFormat,[In] WICBitmapDitherType dither,[In, Optional] IWICPalette* pIPalette,[In] double alphaThresholdPercent,[In] WICBitmapPaletteType paletteTranslate)</unmanaged>
        /// <unmanaged-short>IWICPlanarFormatConverter::Initialize</unmanaged-short>
        private unsafe void Initialize(System.IntPtr planesOut, System.Int32 planes, System.IntPtr dstFormat, DXNET.WIC.BitmapDitherType dither, System.IntPtr paletteRef, System.Double alphaThresholdPercent, DXNET.WIC.BitmapPaletteType paletteTranslate)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)planesOut, planes, (void *)dstFormat, unchecked ((System.Int32)dither), (void *)paletteRef, alphaThresholdPercent, unchecked ((System.Int32)paletteTranslate), (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("4776F9CD-9517-45FA-BF24-E89C5EC5C60C")]
    internal partial class ProgressCallback : DXNET.ComObject
    {
        public ProgressCallback(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ProgressCallback(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ProgressCallback(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "frameNum">No documentation.</param>
        /// <param name = "operation">No documentation.</param>
        /// <param name = "dblProgress">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICProgressCallback::Notify([In] ULONG uFrameNum,[In] WICProgressOperation operation,[In] double dblProgress)</unmanaged>
        /// <unmanaged-short>IWICProgressCallback::Notify</unmanaged-short>
        public unsafe void Notify(System.Int32 frameNum, DXNET.WIC.ProgressOperation operation, System.Double dblProgress)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, frameNum, unchecked ((System.Int32)operation), dblProgress, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("DAAC296F-7AA5-4dbf-8D15-225C5976F891")]
    public partial class ProgressiveLevelControl : DXNET.ComObject
    {
        public ProgressiveLevelControl(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ProgressiveLevelControl(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ProgressiveLevelControl(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetLevelCount</unmanaged>
        /// <unmanaged-short>GetLevelCount</unmanaged-short>
        public System.Int32 LevelCount
        {
            get
            {
                GetLevelCount(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetCurrentLevel / SetCurrentLevel</unmanaged>
        /// <unmanaged-short>GetCurrentLevel</unmanaged-short>
        public System.Int32 CurrentLevel
        {
            get
            {
                GetCurrentLevel(out var __output__);
                return __output__;
            }

            set => SetCurrentLevel(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "levelsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICProgressiveLevelControl::GetLevelCount([Out] unsigned int* pcLevels)</unmanaged>
        /// <unmanaged-short>IWICProgressiveLevelControl::GetLevelCount</unmanaged-short>
        internal unsafe void GetLevelCount(out System.Int32 levelsRef)
        {
            DXNET.Result __result__;
            fixed (void *levelsRef_ = &levelsRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, levelsRef_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "nLevelRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICProgressiveLevelControl::GetCurrentLevel([Out] unsigned int* pnLevel)</unmanaged>
        /// <unmanaged-short>IWICProgressiveLevelControl::GetCurrentLevel</unmanaged-short>
        internal unsafe void GetCurrentLevel(out System.Int32 nLevelRef)
        {
            DXNET.Result __result__;
            fixed (void *nLevelRef_ = &nLevelRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, nLevelRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "nLevel">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICProgressiveLevelControl::SetCurrentLevel([In] unsigned int nLevel)</unmanaged>
        /// <unmanaged-short>IWICProgressiveLevelControl::SetCurrentLevel</unmanaged-short>
        internal unsafe void SetCurrentLevel(System.Int32 nLevel)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, nLevel, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("135FF860-22B7-4ddf-B0F6-218F4F299A43")]
    public partial class WICStream : DXNET.Win32.ComStream
    {
        public WICStream(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator WICStream(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new WICStream(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "streamRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICStream::InitializeFromIStream([In, Optional] IStream* pIStream)</unmanaged>
        /// <unmanaged-short>IWICStream::InitializeFromIStream</unmanaged-short>
        internal unsafe void InitializeFromIStream(DXNET.Win32.IStream streamRef)
        {
            System.IntPtr streamRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            streamRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.Win32.IStream>(streamRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)streamRef_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fileName">No documentation.</param>
        /// <param name = "desiredAccess">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICStream::InitializeFromFilename([In] const wchar_t* wzFileName,[In] DWORD dwDesiredAccess)</unmanaged>
        /// <unmanaged-short>IWICStream::InitializeFromFilename</unmanaged-short>
        internal unsafe void InitializeFromFilename(System.String fileName, System.Int32 desiredAccess)
        {
            DXNET.Result __result__;
            fixed (char *fileName_ = fileName)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fileName_, desiredAccess, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "bufferRef">No documentation.</param>
        /// <param name = "bufferSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICStream::InitializeFromMemory([In] unsigned char* pbBuffer,[In] DWORD cbBufferSize)</unmanaged>
        /// <unmanaged-short>IWICStream::InitializeFromMemory</unmanaged-short>
        internal unsafe void InitializeFromMemory(System.IntPtr bufferRef, System.Int32 bufferSize)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)bufferRef, bufferSize, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "streamRef">No documentation.</param>
        /// <param name = "ulOffset">No documentation.</param>
        /// <param name = "ulMaxSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IWICStream::InitializeFromIStreamRegion([In, Optional] IStream* pIStream,[In] ULARGE_INTEGER ulOffset,[In] ULARGE_INTEGER ulMaxSize)</unmanaged>
        /// <unmanaged-short>IWICStream::InitializeFromIStreamRegion</unmanaged-short>
        internal unsafe void InitializeFromIStreamRegion(DXNET.Win32.IStream streamRef, System.Int64 ulOffset, System.Int64 ulMaxSize)
        {
            System.IntPtr streamRef_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            streamRef_ = DXNET.CppObject.ToCallbackPtr<DXNET.Win32.IStream>(streamRef);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)streamRef_, ulOffset, ulMaxSize, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }
    }
}
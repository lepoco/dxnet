// <auto-generated/>

namespace DXNET.Direct2D1
{
    /// <summary>
    /// Functions
    /// </summary>
    static partial class D2D1
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "factoryType">No documentation.</param>
        /// <param name = "riid">No documentation.</param>
        /// <param name = "factoryOptionsRef">No documentation.</param>
        /// <param name = "iFactoryOut">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT D2D1CreateFactory([In] D2D1_FACTORY_TYPE factoryType,[In] const GUID&amp; riid,[In, Optional] const D2D1_FACTORY_OPTIONS* pFactoryOptions,[Out] void** ppIFactory)</unmanaged>
        /// <unmanaged-short>D2D1CreateFactory</unmanaged-short>
        public static unsafe void CreateFactory(DXNET.Direct2D1.FactoryType factoryType, System.Guid riid, DXNET.Direct2D1.FactoryOptions? factoryOptionsRef, out System.IntPtr iFactoryOut)
        {
            DXNET.Direct2D1.FactoryOptions factoryOptionsRef_;
            DXNET.Result __result__;
            if (factoryOptionsRef != null)
                factoryOptionsRef_ = factoryOptionsRef.Value;
            fixed (void *iFactoryOut_ = &iFactoryOut)
                __result__ = D2D1CreateFactory_(unchecked ((System.Int32)factoryType), &riid, factoryOptionsRef == null ? (void *)0 : &factoryOptionsRef_, iFactoryOut_);
            __result__.CheckError();
        }

        [System.Runtime.InteropServices.DllImportAttribute("d2d1.dll", EntryPoint = "D2D1CreateFactory", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern int D2D1CreateFactory_(int param0, void *param1, void *param2, void *param3);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "angle">No documentation.</param>
        /// <param name = "center">No documentation.</param>
        /// <param name = "matrix">No documentation.</param>
        /// <unmanaged>void D2D1MakeRotateMatrix([In] float angle,[In] D2D_POINT_2F center,[Out] D2D_MATRIX_3X2_F* matrix)</unmanaged>
        /// <unmanaged-short>D2D1MakeRotateMatrix</unmanaged-short>
        public static unsafe void MakeRotateMatrix(System.Single angle, DXNET.Mathematics.Interop.RawVector2 center, out DXNET.Mathematics.Interop.RawMatrix3x2 matrix)
        {
            matrix = default (DXNET.Mathematics.Interop.RawMatrix3x2);
            fixed (void *matrix_ = &matrix)
                D2D1MakeRotateMatrix_(angle, center, matrix_);
        }

        [System.Runtime.InteropServices.DllImportAttribute("d2d1.dll", EntryPoint = "D2D1MakeRotateMatrix", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern void D2D1MakeRotateMatrix_(float param0, DXNET.Mathematics.Interop.RawVector2 param1, void *param2);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "angleX">No documentation.</param>
        /// <param name = "angleY">No documentation.</param>
        /// <param name = "center">No documentation.</param>
        /// <param name = "matrix">No documentation.</param>
        /// <unmanaged>void D2D1MakeSkewMatrix([In] float angleX,[In] float angleY,[In] D2D_POINT_2F center,[Out] D2D_MATRIX_3X2_F* matrix)</unmanaged>
        /// <unmanaged-short>D2D1MakeSkewMatrix</unmanaged-short>
        public static unsafe void MakeSkewMatrix(System.Single angleX, System.Single angleY, DXNET.Mathematics.Interop.RawVector2 center, out DXNET.Mathematics.Interop.RawMatrix3x2 matrix)
        {
            matrix = default (DXNET.Mathematics.Interop.RawMatrix3x2);
            fixed (void *matrix_ = &matrix)
                D2D1MakeSkewMatrix_(angleX, angleY, center, matrix_);
        }

        [System.Runtime.InteropServices.DllImportAttribute("d2d1.dll", EntryPoint = "D2D1MakeSkewMatrix", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern void D2D1MakeSkewMatrix_(float param0, float param1, DXNET.Mathematics.Interop.RawVector2 param2, void *param3);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "matrix">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL D2D1IsMatrixInvertible([In] const D2D_MATRIX_3X2_F* matrix)</unmanaged>
        /// <unmanaged-short>D2D1IsMatrixInvertible</unmanaged-short>
        public static unsafe DXNET.Mathematics.Interop.RawBool IsMatrixInvertible(ref DXNET.Mathematics.Interop.RawMatrix3x2 matrix)
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            fixed (void *matrix_ = &matrix)
                __result__ = D2D1IsMatrixInvertible_(matrix_);
            return __result__;
        }

        [System.Runtime.InteropServices.DllImportAttribute("d2d1.dll", EntryPoint = "D2D1IsMatrixInvertible", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern DXNET.Mathematics.Interop.RawBool D2D1IsMatrixInvertible_(void *param0);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "matrix">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL D2D1InvertMatrix([InOut] D2D_MATRIX_3X2_F* matrix)</unmanaged>
        /// <unmanaged-short>D2D1InvertMatrix</unmanaged-short>
        public static unsafe DXNET.Mathematics.Interop.RawBool InvertMatrix(ref DXNET.Mathematics.Interop.RawMatrix3x2 matrix)
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            fixed (void *matrix_ = &matrix)
                __result__ = D2D1InvertMatrix_(matrix_);
            return __result__;
        }

        [System.Runtime.InteropServices.DllImportAttribute("d2d1.dll", EntryPoint = "D2D1InvertMatrix", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern DXNET.Mathematics.Interop.RawBool D2D1InvertMatrix_(void *param0);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dxgiDevice">No documentation.</param>
        /// <param name = "creationProperties">No documentation.</param>
        /// <param name = "d2dDevice">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT D2D1CreateDevice([In] IDXGIDevice* dxgiDevice,[In, Optional] const D2D1_CREATION_PROPERTIES* creationProperties,[Out, Fast] ID2D1Device** d2dDevice)</unmanaged>
        /// <unmanaged-short>D2D1CreateDevice</unmanaged-short>
        public static unsafe void CreateDevice(DXNET.DXGI.Device dxgiDevice, DXNET.Direct2D1.CreationProperties? creationProperties, DXNET.Direct2D1.Device d2dDevice)
        {
            System.IntPtr dxgiDevice_ = System.IntPtr.Zero;
            DXNET.Direct2D1.CreationProperties creationProperties_;
            System.IntPtr d2dDevice_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            dxgiDevice_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Device>(dxgiDevice);
            if (creationProperties != null)
                creationProperties_ = creationProperties.Value;
            __result__ = D2D1CreateDevice_((void *)dxgiDevice_, creationProperties == null ? (void *)0 : &creationProperties_, &d2dDevice_);
            (d2dDevice).NativePointer = d2dDevice_;
            __result__.CheckError();
        }

        [System.Runtime.InteropServices.DllImportAttribute("d2d1.dll", EntryPoint = "D2D1CreateDevice", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern int D2D1CreateDevice_(void *param0, void *param1, void *param2);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dxgiSurface">No documentation.</param>
        /// <param name = "creationProperties">No documentation.</param>
        /// <param name = "d2dDeviceContext">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT D2D1CreateDeviceContext([In] IDXGISurface* dxgiSurface,[In, Optional] const D2D1_CREATION_PROPERTIES* creationProperties,[Out, Fast] ID2D1DeviceContext** d2dDeviceContext)</unmanaged>
        /// <unmanaged-short>D2D1CreateDeviceContext</unmanaged-short>
        public static unsafe void CreateDeviceContext(DXNET.DXGI.Surface dxgiSurface, DXNET.Direct2D1.CreationProperties? creationProperties, DXNET.Direct2D1.DeviceContext d2dDeviceContext)
        {
            System.IntPtr dxgiSurface_ = System.IntPtr.Zero;
            DXNET.Direct2D1.CreationProperties creationProperties_;
            System.IntPtr d2dDeviceContext_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            dxgiSurface_ = DXNET.CppObject.ToCallbackPtr<DXNET.DXGI.Surface>(dxgiSurface);
            if (creationProperties != null)
                creationProperties_ = creationProperties.Value;
            __result__ = D2D1CreateDeviceContext_((void *)dxgiSurface_, creationProperties == null ? (void *)0 : &creationProperties_, &d2dDeviceContext_);
            (d2dDeviceContext).NativePointer = d2dDeviceContext_;
            __result__.CheckError();
        }

        [System.Runtime.InteropServices.DllImportAttribute("d2d1.dll", EntryPoint = "D2D1CreateDeviceContext", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern int D2D1CreateDeviceContext_(void *param0, void *param1, void *param2);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "sourceColorSpace">No documentation.</param>
        /// <param name = "destinationColorSpace">No documentation.</param>
        /// <param name = "color">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>D2D_COLOR_F D2D1ConvertColorSpace([In] D2D1_COLOR_SPACE sourceColorSpace,[In] D2D1_COLOR_SPACE destinationColorSpace,[In] const D2D_COLOR_F* color)</unmanaged>
        /// <unmanaged-short>D2D1ConvertColorSpace</unmanaged-short>
        public static unsafe DXNET.Mathematics.Interop.RawColor4 ConvertColorSpace(DXNET.Direct2D1.ColorSpace sourceColorSpace, DXNET.Direct2D1.ColorSpace destinationColorSpace, DXNET.Mathematics.Interop.RawColor4 color)
        {
            DXNET.Mathematics.Interop.RawColor4 __result__;
            D2D1ConvertColorSpace_(&__result__, unchecked ((System.Int32)sourceColorSpace), unchecked ((System.Int32)destinationColorSpace), &color);
            return __result__;
        }

        [System.Runtime.InteropServices.DllImportAttribute("d2d1.dll", EntryPoint = "D2D1ConvertColorSpace", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern void *D2D1ConvertColorSpace_(void *param0, int param1, int param2, void *param3);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "angle">No documentation.</param>
        /// <param name = "s">No documentation.</param>
        /// <param name = "c">No documentation.</param>
        /// <unmanaged>void D2D1SinCos([In] float angle,[Out] float* s,[Out] float* c)</unmanaged>
        /// <unmanaged-short>D2D1SinCos</unmanaged-short>
        public static unsafe void SinCos(System.Single angle, out System.Single s, out System.Single c)
        {
            fixed (void *c_ = &c)
                fixed (void *s_ = &s)
                    D2D1SinCos_(angle, s_, c_);
        }

        [System.Runtime.InteropServices.DllImportAttribute("d2d1.dll", EntryPoint = "D2D1SinCos", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern void D2D1SinCos_(float param0, void *param1, void *param2);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "angle">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float D2D1Tan([In] float angle)</unmanaged>
        /// <unmanaged-short>D2D1Tan</unmanaged-short>
        public static unsafe System.Single Tan(System.Single angle)
        {
            System.Single __result__;
            __result__ = D2D1Tan_(angle);
            return __result__;
        }

        [System.Runtime.InteropServices.DllImportAttribute("d2d1.dll", EntryPoint = "D2D1Tan", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern float D2D1Tan_(float param0);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "x">No documentation.</param>
        /// <param name = "y">No documentation.</param>
        /// <param name = "z">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float D2D1Vec3Length([In] float x,[In] float y,[In] float z)</unmanaged>
        /// <unmanaged-short>D2D1Vec3Length</unmanaged-short>
        public static unsafe System.Single Vec3Length(System.Single x, System.Single y, System.Single z)
        {
            System.Single __result__;
            __result__ = D2D1Vec3Length_(x, y, z);
            return __result__;
        }

        [System.Runtime.InteropServices.DllImportAttribute("d2d1.dll", EntryPoint = "D2D1Vec3Length", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern float D2D1Vec3Length_(float param0, float param1, float param2);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "matrix">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float D2D1ComputeMaximumScaleFactor([In] const D2D_MATRIX_3X2_F* matrix)</unmanaged>
        /// <unmanaged-short>D2D1ComputeMaximumScaleFactor</unmanaged-short>
        public static unsafe System.Single ComputeMaximumScaleFactor(ref DXNET.Mathematics.Interop.RawMatrix3x2 matrix)
        {
            System.Single __result__;
            fixed (void *matrix_ = &matrix)
                __result__ = D2D1ComputeMaximumScaleFactor_(matrix_);
            return __result__;
        }

        [System.Runtime.InteropServices.DllImportAttribute("d2d1.dll", EntryPoint = "D2D1ComputeMaximumScaleFactor", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern float D2D1ComputeMaximumScaleFactor_(void *param0);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "point0Ref">No documentation.</param>
        /// <param name = "point1Ref">No documentation.</param>
        /// <param name = "point2Ref">No documentation.</param>
        /// <param name = "point3Ref">No documentation.</param>
        /// <param name = "point4Ref">No documentation.</param>
        /// <param name = "point5Ref">No documentation.</param>
        /// <param name = "point6Ref">No documentation.</param>
        /// <param name = "point7Ref">No documentation.</param>
        /// <param name = "point8Ref">No documentation.</param>
        /// <param name = "point9Ref">No documentation.</param>
        /// <param name = "point10Ref">No documentation.</param>
        /// <param name = "point11Ref">No documentation.</param>
        /// <param name = "tensorPoint11Ref">No documentation.</param>
        /// <param name = "tensorPoint12Ref">No documentation.</param>
        /// <param name = "tensorPoint21Ref">No documentation.</param>
        /// <param name = "tensorPoint22Ref">No documentation.</param>
        /// <unmanaged>void D2D1GetGradientMeshInteriorPointsFromCoonsPatch([In] const D2D_POINT_2F* pPoint0,[In] const D2D_POINT_2F* pPoint1,[In] const D2D_POINT_2F* pPoint2,[In] const D2D_POINT_2F* pPoint3,[In] const D2D_POINT_2F* pPoint4,[In] const D2D_POINT_2F* pPoint5,[In] const D2D_POINT_2F* pPoint6,[In] const D2D_POINT_2F* pPoint7,[In] const D2D_POINT_2F* pPoint8,[In] const D2D_POINT_2F* pPoint9,[In] const D2D_POINT_2F* pPoint10,[In] const D2D_POINT_2F* pPoint11,[Out] D2D_POINT_2F* pTensorPoint11,[Out] D2D_POINT_2F* pTensorPoint12,[Out] D2D_POINT_2F* pTensorPoint21,[Out] D2D_POINT_2F* pTensorPoint22)</unmanaged>
        /// <unmanaged-short>D2D1GetGradientMeshInteriorPointsFromCoonsPatch</unmanaged-short>
        public static unsafe void GetGradientMeshInteriorPointsFromCoonsPatch(DXNET.Mathematics.Interop.RawVector2 point0Ref, DXNET.Mathematics.Interop.RawVector2 point1Ref, DXNET.Mathematics.Interop.RawVector2 point2Ref, DXNET.Mathematics.Interop.RawVector2 point3Ref, DXNET.Mathematics.Interop.RawVector2 point4Ref, DXNET.Mathematics.Interop.RawVector2 point5Ref, DXNET.Mathematics.Interop.RawVector2 point6Ref, DXNET.Mathematics.Interop.RawVector2 point7Ref, DXNET.Mathematics.Interop.RawVector2 point8Ref, DXNET.Mathematics.Interop.RawVector2 point9Ref, DXNET.Mathematics.Interop.RawVector2 point10Ref, DXNET.Mathematics.Interop.RawVector2 point11Ref, out DXNET.Mathematics.Interop.RawVector2 tensorPoint11Ref, out DXNET.Mathematics.Interop.RawVector2 tensorPoint12Ref, out DXNET.Mathematics.Interop.RawVector2 tensorPoint21Ref, out DXNET.Mathematics.Interop.RawVector2 tensorPoint22Ref)
        {
            tensorPoint11Ref = default (DXNET.Mathematics.Interop.RawVector2);
            tensorPoint12Ref = default (DXNET.Mathematics.Interop.RawVector2);
            tensorPoint21Ref = default (DXNET.Mathematics.Interop.RawVector2);
            tensorPoint22Ref = default (DXNET.Mathematics.Interop.RawVector2);
            fixed (void *tensorPoint22Ref_ = &tensorPoint22Ref)
                fixed (void *tensorPoint21Ref_ = &tensorPoint21Ref)
                    fixed (void *tensorPoint12Ref_ = &tensorPoint12Ref)
                        fixed (void *tensorPoint11Ref_ = &tensorPoint11Ref)
                            D2D1GetGradientMeshInteriorPointsFromCoonsPatch_(&point0Ref, &point1Ref, &point2Ref, &point3Ref, &point4Ref, &point5Ref, &point6Ref, &point7Ref, &point8Ref, &point9Ref, &point10Ref, &point11Ref, tensorPoint11Ref_, tensorPoint12Ref_, tensorPoint21Ref_, tensorPoint22Ref_);
        }

        [System.Runtime.InteropServices.DllImportAttribute("d2d1.dll", EntryPoint = "D2D1GetGradientMeshInteriorPointsFromCoonsPatch", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern void D2D1GetGradientMeshInteriorPointsFromCoonsPatch_(void *param0, void *param1, void *param2, void *param3, void *param4, void *param5, void *param6, void *param7, void *param8, void *param9, void *param10, void *param11, void *param12, void *param13, void *param14, void *param15);
    }

    /// <summary>
    /// Functions
    /// </summary>
    public partial class ResultCode
    {
                ///<summary>Constant WrongState</summary>
        ///<unmanaged>D2DERR_WRONG_STATE</unmanaged>
        public static readonly DXNET.ResultDescriptor WrongState = new DXNET.ResultDescriptor(unchecked ((int)2291728385UL), "DXNET.Direct2D1", "D2DERR_WRONG_STATE", "WrongState");
                ///<summary>Constant NotInitializeD</summary>
        ///<unmanaged>D2DERR_NOT_INITIALIZED</unmanaged>
        public static readonly DXNET.ResultDescriptor NotInitializeD = new DXNET.ResultDescriptor(unchecked ((int)2291728386UL), "DXNET.Direct2D1", "D2DERR_NOT_INITIALIZED", "NotInitializeD");
                ///<summary>Constant UnsupportedOperation</summary>
        ///<unmanaged>D2DERR_UNSUPPORTED_OPERATION</unmanaged>
        public static readonly DXNET.ResultDescriptor UnsupportedOperation = new DXNET.ResultDescriptor(unchecked ((int)2291728387UL), "DXNET.Direct2D1", "D2DERR_UNSUPPORTED_OPERATION", "UnsupportedOperation");
                ///<summary>Constant ScannerFailed</summary>
        ///<unmanaged>D2DERR_SCANNER_FAILED</unmanaged>
        public static readonly DXNET.ResultDescriptor ScannerFailed = new DXNET.ResultDescriptor(unchecked ((int)2291728388UL), "DXNET.Direct2D1", "D2DERR_SCANNER_FAILED", "ScannerFailed");
                ///<summary>Constant ScreenAccessDenied</summary>
        ///<unmanaged>D2DERR_SCREEN_ACCESS_DENIED</unmanaged>
        public static readonly DXNET.ResultDescriptor ScreenAccessDenied = new DXNET.ResultDescriptor(unchecked ((int)2291728389UL), "DXNET.Direct2D1", "D2DERR_SCREEN_ACCESS_DENIED", "ScreenAccessDenied");
                ///<summary>Constant DisplayStateInvalid</summary>
        ///<unmanaged>D2DERR_DISPLAY_STATE_INVALID</unmanaged>
        public static readonly DXNET.ResultDescriptor DisplayStateInvalid = new DXNET.ResultDescriptor(unchecked ((int)2291728390UL), "DXNET.Direct2D1", "D2DERR_DISPLAY_STATE_INVALID", "DisplayStateInvalid");
                ///<summary>Constant ZeroVector</summary>
        ///<unmanaged>D2DERR_ZERO_VECTOR</unmanaged>
        public static readonly DXNET.ResultDescriptor ZeroVector = new DXNET.ResultDescriptor(unchecked ((int)2291728391UL), "DXNET.Direct2D1", "D2DERR_ZERO_VECTOR", "ZeroVector");
                ///<summary>Constant InternalError</summary>
        ///<unmanaged>D2DERR_INTERNAL_ERROR</unmanaged>
        public static readonly DXNET.ResultDescriptor InternalError = new DXNET.ResultDescriptor(unchecked ((int)2291728392UL), "DXNET.Direct2D1", "D2DERR_INTERNAL_ERROR", "InternalError");
                ///<summary>Constant DisplayFormatNotSupported</summary>
        ///<unmanaged>D2DERR_DISPLAY_FORMAT_NOT_SUPPORTED</unmanaged>
        public static readonly DXNET.ResultDescriptor DisplayFormatNotSupported = new DXNET.ResultDescriptor(unchecked ((int)2291728393UL), "DXNET.Direct2D1", "D2DERR_DISPLAY_FORMAT_NOT_SUPPORTED", "DisplayFormatNotSupported");
                ///<summary>Constant InvalidCall</summary>
        ///<unmanaged>D2DERR_INVALID_CALL</unmanaged>
        public static readonly DXNET.ResultDescriptor InvalidCall = new DXNET.ResultDescriptor(unchecked ((int)2291728394UL), "DXNET.Direct2D1", "D2DERR_INVALID_CALL", "InvalidCall");
                ///<summary>Constant NoHardwareDevice</summary>
        ///<unmanaged>D2DERR_NO_HARDWARE_DEVICE</unmanaged>
        public static readonly DXNET.ResultDescriptor NoHardwareDevice = new DXNET.ResultDescriptor(unchecked ((int)2291728395UL), "DXNET.Direct2D1", "D2DERR_NO_HARDWARE_DEVICE", "NoHardwareDevice");
                ///<summary>Constant RecreateTarget</summary>
        ///<unmanaged>D2DERR_RECREATE_TARGET</unmanaged>
        public static readonly DXNET.ResultDescriptor RecreateTarget = new DXNET.ResultDescriptor(unchecked ((int)2291728396UL), "DXNET.Direct2D1", "D2DERR_RECREATE_TARGET", "RecreateTarget");
                ///<summary>Constant TooManyShaderElements</summary>
        ///<unmanaged>D2DERR_TOO_MANY_SHADER_ELEMENTS</unmanaged>
        public static readonly DXNET.ResultDescriptor TooManyShaderElements = new DXNET.ResultDescriptor(unchecked ((int)2291728397UL), "DXNET.Direct2D1", "D2DERR_TOO_MANY_SHADER_ELEMENTS", "TooManyShaderElements");
                ///<summary>Constant ShaderCompileFailed</summary>
        ///<unmanaged>D2DERR_SHADER_COMPILE_FAILED</unmanaged>
        public static readonly DXNET.ResultDescriptor ShaderCompileFailed = new DXNET.ResultDescriptor(unchecked ((int)2291728398UL), "DXNET.Direct2D1", "D2DERR_SHADER_COMPILE_FAILED", "ShaderCompileFailed");
                ///<summary>Constant MaximumTextureSizeExceeded</summary>
        ///<unmanaged>D2DERR_MAX_TEXTURE_SIZE_EXCEEDED</unmanaged>
        public static readonly DXNET.ResultDescriptor MaximumTextureSizeExceeded = new DXNET.ResultDescriptor(unchecked ((int)2291728399UL), "DXNET.Direct2D1", "D2DERR_MAX_TEXTURE_SIZE_EXCEEDED", "MaximumTextureSizeExceeded");
                ///<summary>Constant UnsupportedVersion</summary>
        ///<unmanaged>D2DERR_UNSUPPORTED_VERSION</unmanaged>
        public static readonly DXNET.ResultDescriptor UnsupportedVersion = new DXNET.ResultDescriptor(unchecked ((int)2291728400UL), "DXNET.Direct2D1", "D2DERR_UNSUPPORTED_VERSION", "UnsupportedVersion");
                ///<summary>Constant BadNumber</summary>
        ///<unmanaged>D2DERR_BAD_NUMBER</unmanaged>
        public static readonly DXNET.ResultDescriptor BadNumber = new DXNET.ResultDescriptor(unchecked ((int)2291728401UL), "DXNET.Direct2D1", "D2DERR_BAD_NUMBER", "BadNumber");
                ///<summary>Constant WrongFactory</summary>
        ///<unmanaged>D2DERR_WRONG_FACTORY</unmanaged>
        public static readonly DXNET.ResultDescriptor WrongFactory = new DXNET.ResultDescriptor(unchecked ((int)2291728402UL), "DXNET.Direct2D1", "D2DERR_WRONG_FACTORY", "WrongFactory");
                ///<summary>Constant LayerAlreadyInUse</summary>
        ///<unmanaged>D2DERR_LAYER_ALREADY_IN_USE</unmanaged>
        public static readonly DXNET.ResultDescriptor LayerAlreadyInUse = new DXNET.ResultDescriptor(unchecked ((int)2291728403UL), "DXNET.Direct2D1", "D2DERR_LAYER_ALREADY_IN_USE", "LayerAlreadyInUse");
                ///<summary>Constant PopCallDidNotMatchPush</summary>
        ///<unmanaged>D2DERR_POP_CALL_DID_NOT_MATCH_PUSH</unmanaged>
        public static readonly DXNET.ResultDescriptor PopCallDidNotMatchPush = new DXNET.ResultDescriptor(unchecked ((int)2291728404UL), "DXNET.Direct2D1", "D2DERR_POP_CALL_DID_NOT_MATCH_PUSH", "PopCallDidNotMatchPush");
                ///<summary>Constant WrongResourceDomain</summary>
        ///<unmanaged>D2DERR_WRONG_RESOURCE_DOMAIN</unmanaged>
        public static readonly DXNET.ResultDescriptor WrongResourceDomain = new DXNET.ResultDescriptor(unchecked ((int)2291728405UL), "DXNET.Direct2D1", "D2DERR_WRONG_RESOURCE_DOMAIN", "WrongResourceDomain");
                ///<summary>Constant PushPopUnbalanced</summary>
        ///<unmanaged>D2DERR_PUSH_POP_UNBALANCED</unmanaged>
        public static readonly DXNET.ResultDescriptor PushPopUnbalanced = new DXNET.ResultDescriptor(unchecked ((int)2291728406UL), "DXNET.Direct2D1", "D2DERR_PUSH_POP_UNBALANCED", "PushPopUnbalanced");
                ///<summary>Constant RenderTargetHasLayerOrCliprect</summary>
        ///<unmanaged>D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT</unmanaged>
        public static readonly DXNET.ResultDescriptor RenderTargetHasLayerOrCliprect = new DXNET.ResultDescriptor(unchecked ((int)2291728407UL), "DXNET.Direct2D1", "D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT", "RenderTargetHasLayerOrCliprect");
                ///<summary>Constant IncompatibleBrushTypes</summary>
        ///<unmanaged>D2DERR_INCOMPATIBLE_BRUSH_TYPES</unmanaged>
        public static readonly DXNET.ResultDescriptor IncompatibleBrushTypes = new DXNET.ResultDescriptor(unchecked ((int)2291728408UL), "DXNET.Direct2D1", "D2DERR_INCOMPATIBLE_BRUSH_TYPES", "IncompatibleBrushTypes");
                ///<summary>Constant Win32Error</summary>
        ///<unmanaged>D2DERR_WIN32_ERROR</unmanaged>
        public static readonly DXNET.ResultDescriptor Win32Error = new DXNET.ResultDescriptor(unchecked ((int)2291728409UL), "DXNET.Direct2D1", "D2DERR_WIN32_ERROR", "Win32Error");
                ///<summary>Constant TargetNotGdiCompatible</summary>
        ///<unmanaged>D2DERR_TARGET_NOT_GDI_COMPATIBLE</unmanaged>
        public static readonly DXNET.ResultDescriptor TargetNotGdiCompatible = new DXNET.ResultDescriptor(unchecked ((int)2291728410UL), "DXNET.Direct2D1", "D2DERR_TARGET_NOT_GDI_COMPATIBLE", "TargetNotGdiCompatible");
                ///<summary>Constant TextEffectIsWrongType</summary>
        ///<unmanaged>D2DERR_TEXT_EFFECT_IS_WRONG_TYPE</unmanaged>
        public static readonly DXNET.ResultDescriptor TextEffectIsWrongType = new DXNET.ResultDescriptor(unchecked ((int)2291728411UL), "DXNET.Direct2D1", "D2DERR_TEXT_EFFECT_IS_WRONG_TYPE", "TextEffectIsWrongType");
                ///<summary>Constant TextRendererNotReleased</summary>
        ///<unmanaged>D2DERR_TEXT_RENDERER_NOT_RELEASED</unmanaged>
        public static readonly DXNET.ResultDescriptor TextRendererNotReleased = new DXNET.ResultDescriptor(unchecked ((int)2291728412UL), "DXNET.Direct2D1", "D2DERR_TEXT_RENDERER_NOT_RELEASED", "TextRendererNotReleased");
                ///<summary>Constant ExceedsMaximumBitmapSize</summary>
        ///<unmanaged>D2DERR_EXCEEDS_MAX_BITMAP_SIZE</unmanaged>
        public static readonly DXNET.ResultDescriptor ExceedsMaximumBitmapSize = new DXNET.ResultDescriptor(unchecked ((int)2291728413UL), "DXNET.Direct2D1", "D2DERR_EXCEEDS_MAX_BITMAP_SIZE", "ExceedsMaximumBitmapSize");
                ///<summary>Constant InvalidGraphConfiguration</summary>
        ///<unmanaged>D2DERR_INVALID_GRAPH_CONFIGURATION</unmanaged>
        public static readonly DXNET.ResultDescriptor InvalidGraphConfiguration = new DXNET.ResultDescriptor(unchecked ((int)2291728414UL), "DXNET.Direct2D1", "D2DERR_INVALID_GRAPH_CONFIGURATION", "InvalidGraphConfiguration");
                ///<summary>Constant InvalidInternalGraphConfiguration</summary>
        ///<unmanaged>D2DERR_INVALID_INTERNAL_GRAPH_CONFIGURATION</unmanaged>
        public static readonly DXNET.ResultDescriptor InvalidInternalGraphConfiguration = new DXNET.ResultDescriptor(unchecked ((int)2291728415UL), "DXNET.Direct2D1", "D2DERR_INVALID_INTERNAL_GRAPH_CONFIGURATION", "InvalidInternalGraphConfiguration");
                ///<summary>Constant CyclicGraph</summary>
        ///<unmanaged>D2DERR_CYCLIC_GRAPH</unmanaged>
        public static readonly DXNET.ResultDescriptor CyclicGraph = new DXNET.ResultDescriptor(unchecked ((int)2291728416UL), "DXNET.Direct2D1", "D2DERR_CYCLIC_GRAPH", "CyclicGraph");
                ///<summary>Constant BitmapCannotDraw</summary>
        ///<unmanaged>D2DERR_BITMAP_CANNOT_DRAW</unmanaged>
        public static readonly DXNET.ResultDescriptor BitmapCannotDraw = new DXNET.ResultDescriptor(unchecked ((int)2291728417UL), "DXNET.Direct2D1", "D2DERR_BITMAP_CANNOT_DRAW", "BitmapCannotDraw");
                ///<summary>Constant OutstandingBitmapReferences</summary>
        ///<unmanaged>D2DERR_OUTSTANDING_BITMAP_REFERENCES</unmanaged>
        public static readonly DXNET.ResultDescriptor OutstandingBitmapReferences = new DXNET.ResultDescriptor(unchecked ((int)2291728418UL), "DXNET.Direct2D1", "D2DERR_OUTSTANDING_BITMAP_REFERENCES", "OutstandingBitmapReferences");
                ///<summary>Constant OriginalTargetNotBound</summary>
        ///<unmanaged>D2DERR_ORIGINAL_TARGET_NOT_BOUND</unmanaged>
        public static readonly DXNET.ResultDescriptor OriginalTargetNotBound = new DXNET.ResultDescriptor(unchecked ((int)2291728419UL), "DXNET.Direct2D1", "D2DERR_ORIGINAL_TARGET_NOT_BOUND", "OriginalTargetNotBound");
                ///<summary>Constant InvalidTarget</summary>
        ///<unmanaged>D2DERR_INVALID_TARGET</unmanaged>
        public static readonly DXNET.ResultDescriptor InvalidTarget = new DXNET.ResultDescriptor(unchecked ((int)2291728420UL), "DXNET.Direct2D1", "D2DERR_INVALID_TARGET", "InvalidTarget");
                ///<summary>Constant BitmapBoundAsTarget</summary>
        ///<unmanaged>D2DERR_BITMAP_BOUND_AS_TARGET</unmanaged>
        public static readonly DXNET.ResultDescriptor BitmapBoundAsTarget = new DXNET.ResultDescriptor(unchecked ((int)2291728421UL), "DXNET.Direct2D1", "D2DERR_BITMAP_BOUND_AS_TARGET", "BitmapBoundAsTarget");
                ///<summary>Constant InsufficientDeviceCapabilities</summary>
        ///<unmanaged>D2DERR_INSUFFICIENT_DEVICE_CAPABILITIES</unmanaged>
        public static readonly DXNET.ResultDescriptor InsufficientDeviceCapabilities = new DXNET.ResultDescriptor(unchecked ((int)2291728422UL), "DXNET.Direct2D1", "D2DERR_INSUFFICIENT_DEVICE_CAPABILITIES", "InsufficientDeviceCapabilities");
                ///<summary>Constant IntermediateTooLarge</summary>
        ///<unmanaged>D2DERR_INTERMEDIATE_TOO_LARGE</unmanaged>
        public static readonly DXNET.ResultDescriptor IntermediateTooLarge = new DXNET.ResultDescriptor(unchecked ((int)2291728423UL), "DXNET.Direct2D1", "D2DERR_INTERMEDIATE_TOO_LARGE", "IntermediateTooLarge");
                ///<summary>Constant EffectIsNotRegistered</summary>
        ///<unmanaged>D2DERR_EFFECT_IS_NOT_REGISTERED</unmanaged>
        public static readonly DXNET.ResultDescriptor EffectIsNotRegistered = new DXNET.ResultDescriptor(unchecked ((int)2291728424UL), "DXNET.Direct2D1", "D2DERR_EFFECT_IS_NOT_REGISTERED", "EffectIsNotRegistered");
                ///<summary>Constant InvalidProperty</summary>
        ///<unmanaged>D2DERR_INVALID_PROPERTY</unmanaged>
        public static readonly DXNET.ResultDescriptor InvalidProperty = new DXNET.ResultDescriptor(unchecked ((int)2291728425UL), "DXNET.Direct2D1", "D2DERR_INVALID_PROPERTY", "InvalidProperty");
                ///<summary>Constant NoSubProperties</summary>
        ///<unmanaged>D2DERR_NO_SUBPROPERTIES</unmanaged>
        public static readonly DXNET.ResultDescriptor NoSubProperties = new DXNET.ResultDescriptor(unchecked ((int)2291728426UL), "DXNET.Direct2D1", "D2DERR_NO_SUBPROPERTIES", "NoSubProperties");
                ///<summary>Constant PrintJobClosed</summary>
        ///<unmanaged>D2DERR_PRINT_JOB_CLOSED</unmanaged>
        public static readonly DXNET.ResultDescriptor PrintJobClosed = new DXNET.ResultDescriptor(unchecked ((int)2291728427UL), "DXNET.Direct2D1", "D2DERR_PRINT_JOB_CLOSED", "PrintJobClosed");
                ///<summary>Constant PrintFormatNotSupported</summary>
        ///<unmanaged>D2DERR_PRINT_FORMAT_NOT_SUPPORTED</unmanaged>
        public static readonly DXNET.ResultDescriptor PrintFormatNotSupported = new DXNET.ResultDescriptor(unchecked ((int)2291728428UL), "DXNET.Direct2D1", "D2DERR_PRINT_FORMAT_NOT_SUPPORTED", "PrintFormatNotSupported");
                ///<summary>Constant TooManyTransformInputs</summary>
        ///<unmanaged>D2DERR_TOO_MANY_TRANSFORM_INPUTS</unmanaged>
        public static readonly DXNET.ResultDescriptor TooManyTransformInputs = new DXNET.ResultDescriptor(unchecked ((int)2291728429UL), "DXNET.Direct2D1", "D2DERR_TOO_MANY_TRANSFORM_INPUTS", "TooManyTransformInputs");
                ///<summary>Constant InvalidGlyphImage</summary>
        ///<unmanaged>D2DERR_INVALID_GLYPH_IMAGE</unmanaged>
        public static readonly DXNET.ResultDescriptor InvalidGlyphImage = new DXNET.ResultDescriptor(unchecked ((int)2291728430UL), "DXNET.Direct2D1", "D2DERR_INVALID_GLYPH_IMAGE", "InvalidGlyphImage");
                ///<summary>Constant UnsupportedPixelFormat</summary>
        ///<unmanaged>D2DERR_UNSUPPORTED_PIXEL_FORMAT</unmanaged>
        public static readonly DXNET.ResultDescriptor UnsupportedPixelFormat = new DXNET.ResultDescriptor(unchecked ((int)2291675008UL), "DXNET.Direct2D1", "D2DERR_UNSUPPORTED_PIXEL_FORMAT", "UnsupportedPixelFormat");
                ///<summary>Constant InsufficientBuffer</summary>
        ///<unmanaged>D2DERR_INSUFFICIENT_BUFFER</unmanaged>
        public static readonly DXNET.ResultDescriptor InsufficientBuffer = new DXNET.ResultDescriptor(unchecked ((int)122L), "DXNET.Direct2D1", "D2DERR_INSUFFICIENT_BUFFER", "InsufficientBuffer");
                ///<summary>Constant FileNotFound</summary>
        ///<unmanaged>D2DERR_FILE_NOT_FOUND</unmanaged>
        public static readonly DXNET.ResultDescriptor FileNotFound = new DXNET.ResultDescriptor(unchecked ((int)2L), "DXNET.Direct2D1", "D2DERR_FILE_NOT_FOUND", "FileNotFound");
    }
}
// <auto-generated/>

namespace DXNET.DirectWrite
{
    [System.Runtime.InteropServices.GuidAttribute("CE25F8FD-863B-4D13-9651-C1F88DC73FE2")]
    public partial class AsyncResult : DXNET.ComObject
    {
        public AsyncResult(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator AsyncResult(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new AsyncResult(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetWaitHandle</unmanaged>
        /// <unmanaged-short>GetWaitHandle</unmanaged-short>
        public System.IntPtr WaitHandle
        {
            get => GetWaitHandle();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetResult</unmanaged>
        /// <unmanaged-short>GetResult</unmanaged-short>
        public DXNET.Result Result
        {
            get => GetResult();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>void* IDWriteAsyncResult::GetWaitHandle()</unmanaged>
        /// <unmanaged-short>IDWriteAsyncResult::GetWaitHandle</unmanaged-short>
        internal unsafe System.IntPtr GetWaitHandle()
        {
            System.IntPtr __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteAsyncResult::GetResult()</unmanaged>
        /// <unmanaged-short>IDWriteAsyncResult::GetResult</unmanaged-short>
        internal unsafe DXNET.Result GetResult()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5e5a32a3-8dff-4773-9ff6-0696eab77267")]
    public partial class BitmapRenderTarget : DXNET.ComObject
    {
        public BitmapRenderTarget(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapRenderTarget(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapRenderTarget(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMemoryDC</unmanaged>
        /// <unmanaged-short>GetMemoryDC</unmanaged-short>
        public System.IntPtr MemoryDC
        {
            get => GetMemoryDC();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPixelsPerDip / SetPixelsPerDip</unmanaged>
        /// <unmanaged-short>GetPixelsPerDip</unmanaged-short>
        public System.Single PixelsPerDip
        {
            get => GetPixelsPerDip();
            set => SetPixelsPerDip(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetCurrentTransform / SetCurrentTransform</unmanaged>
        /// <unmanaged-short>GetCurrentTransform</unmanaged-short>
        public DXNET.Mathematics.Interop.RawMatrix3x2 CurrentTransform
        {
            get
            {
                GetCurrentTransform(out var __output__);
                return __output__;
            }

            set => SetCurrentTransform(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSize</unmanaged>
        /// <unmanaged-short>GetSize</unmanaged-short>
        public DXNET.Size2 Size
        {
            get
            {
                GetSize(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "baselineOriginX">No documentation.</param>
        /// <param name = "baselineOriginY">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <param name = "glyphRun">No documentation.</param>
        /// <param name = "renderingParams">No documentation.</param>
        /// <param name = "textColor">No documentation.</param>
        /// <param name = "blackBoxRect">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteBitmapRenderTarget::DrawGlyphRun([In] float baselineOriginX,[In] float baselineOriginY,[In] DWRITE_MEASURING_MODE measuringMode,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] IDWriteRenderingParams* renderingParams,[In] COLORREF textColor,[Out, Optional] RECT* blackBoxRect)</unmanaged>
        /// <unmanaged-short>IDWriteBitmapRenderTarget::DrawGlyphRun</unmanaged-short>
        private unsafe void DrawGlyphRun(System.Single baselineOriginX, System.Single baselineOriginY, DXNET.Direct2D1.MeasuringMode measuringMode, DXNET.DirectWrite.GlyphRun glyphRun, DXNET.DirectWrite.RenderingParams renderingParams, System.Int32 textColor, out DXNET.Mathematics.Interop.RawRectangle blackBoxRect)
        {
            DXNET.DirectWrite.GlyphRun.__Native glyphRun_ = default (DXNET.DirectWrite.GlyphRun.__Native);
            System.IntPtr renderingParams_ = System.IntPtr.Zero;
            blackBoxRect = default (DXNET.Mathematics.Interop.RawRectangle);
            DXNET.Result __result__;
            glyphRun.__MarshalTo(ref glyphRun_);
            renderingParams_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.RenderingParams>(renderingParams);
            fixed (void *blackBoxRect_ = &blackBoxRect)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, baselineOriginX, baselineOriginY, unchecked ((System.Int32)measuringMode), &glyphRun_, (void *)renderingParams_, textColor, blackBoxRect_, (*(void ***)this._nativePointer)[3]);
            glyphRun.__MarshalFree(ref glyphRun_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HDC IDWriteBitmapRenderTarget::GetMemoryDC()</unmanaged>
        /// <unmanaged-short>IDWriteBitmapRenderTarget::GetMemoryDC</unmanaged-short>
        internal unsafe System.IntPtr GetMemoryDC()
        {
            System.IntPtr __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float IDWriteBitmapRenderTarget::GetPixelsPerDip()</unmanaged>
        /// <unmanaged-short>IDWriteBitmapRenderTarget::GetPixelsPerDip</unmanaged-short>
        internal unsafe System.Single GetPixelsPerDip()
        {
            System.Single __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallfloat(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "pixelsPerDip">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteBitmapRenderTarget::SetPixelsPerDip([In] float pixelsPerDip)</unmanaged>
        /// <unmanaged-short>IDWriteBitmapRenderTarget::SetPixelsPerDip</unmanaged-short>
        internal unsafe void SetPixelsPerDip(System.Single pixelsPerDip)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, pixelsPerDip, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "transform">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteBitmapRenderTarget::GetCurrentTransform([Out] DWRITE_MATRIX* transform)</unmanaged>
        /// <unmanaged-short>IDWriteBitmapRenderTarget::GetCurrentTransform</unmanaged-short>
        internal unsafe void GetCurrentTransform(out DXNET.Mathematics.Interop.RawMatrix3x2 transform)
        {
            transform = default (DXNET.Mathematics.Interop.RawMatrix3x2);
            DXNET.Result __result__;
            fixed (void *transform_ = &transform)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, transform_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "transform">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteBitmapRenderTarget::SetCurrentTransform([In, Optional] const DWRITE_MATRIX* transform)</unmanaged>
        /// <unmanaged-short>IDWriteBitmapRenderTarget::SetCurrentTransform</unmanaged-short>
        internal unsafe void SetCurrentTransform(DXNET.Mathematics.Interop.RawMatrix3x2? transform)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 transform_;
            DXNET.Result __result__;
            if (transform != null)
                transform_ = transform.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, transform == null ? (void *)0 : &transform_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "size">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteBitmapRenderTarget::GetSize([Out] SIZE* size)</unmanaged>
        /// <unmanaged-short>IDWriteBitmapRenderTarget::GetSize</unmanaged-short>
        internal unsafe void GetSize(out DXNET.Size2 size)
        {
            size = default (DXNET.Size2);
            DXNET.Result __result__;
            fixed (void *size_ = &size)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, size_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "width">No documentation.</param>
        /// <param name = "height">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteBitmapRenderTarget::Resize([In] unsigned int width,[In] unsigned int height)</unmanaged>
        /// <unmanaged-short>IDWriteBitmapRenderTarget::Resize</unmanaged-short>
        public unsafe void Resize(System.Int32 width, System.Int32 height)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, width, height, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("791e8298-3ef3-4230-9880-c9bdecc42064")]
    public partial class BitmapRenderTarget1 : DXNET.DirectWrite.BitmapRenderTarget
    {
        public BitmapRenderTarget1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator BitmapRenderTarget1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new BitmapRenderTarget1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetTextAntialiasMode / SetTextAntialiasMode</unmanaged>
        /// <unmanaged-short>GetTextAntialiasMode</unmanaged-short>
        public DXNET.DirectWrite.TextAntialiasMode TextAntialiasMode
        {
            get => GetTextAntialiasMode();
            set => SetTextAntialiasMode(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_TEXT_ANTIALIAS_MODE IDWriteBitmapRenderTarget1::GetTextAntialiasMode()</unmanaged>
        /// <unmanaged-short>IDWriteBitmapRenderTarget1::GetTextAntialiasMode</unmanaged-short>
        internal unsafe DXNET.DirectWrite.TextAntialiasMode GetTextAntialiasMode()
        {
            DXNET.DirectWrite.TextAntialiasMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteTextAntialiasMode(this._nativePointer, (*(void ***)this._nativePointer)[11]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "antialiasMode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteBitmapRenderTarget1::SetTextAntialiasMode([In] DWRITE_TEXT_ANTIALIAS_MODE antialiasMode)</unmanaged>
        /// <unmanaged-short>IDWriteBitmapRenderTarget1::SetTextAntialiasMode</unmanaged-short>
        internal unsafe void SetTextAntialiasMode(DXNET.DirectWrite.TextAntialiasMode antialiasMode)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)antialiasMode), (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("d31fbe17-f157-41a2-8d24-cb779e0560e8")]
    public partial class ColorGlyphRunEnumerator : DXNET.ComObject
    {
        public ColorGlyphRunEnumerator(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ColorGlyphRunEnumerator(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ColorGlyphRunEnumerator(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hasRun">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteColorGlyphRunEnumerator::MoveNext([Out] BOOL* hasRun)</unmanaged>
        /// <unmanaged-short>IDWriteColorGlyphRunEnumerator::MoveNext</unmanaged-short>
        public unsafe void MoveNext(out DXNET.Mathematics.Interop.RawBool hasRun)
        {
            hasRun = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *hasRun_ = &hasRun)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, hasRun_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "colorGlyphRun">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteColorGlyphRunEnumerator::GetCurrentRun([Out] const void** colorGlyphRun)</unmanaged>
        /// <unmanaged-short>IDWriteColorGlyphRunEnumerator::GetCurrentRun</unmanaged-short>
        internal unsafe void GetCurrentRun(out System.IntPtr colorGlyphRun)
        {
            DXNET.Result __result__;
            fixed (void *colorGlyphRun_ = &colorGlyphRun)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, colorGlyphRun_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7C5F86DA-C7A1-4F05-B8E1-55A179FE5A35")]
    public partial class ColorGlyphRunEnumerator1 : DXNET.DirectWrite.ColorGlyphRunEnumerator
    {
        public ColorGlyphRunEnumerator1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ColorGlyphRunEnumerator1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ColorGlyphRunEnumerator1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "colorGlyphRun">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteColorGlyphRunEnumerator1::GetCurrentRun([Out] const void** colorGlyphRun)</unmanaged>
        /// <unmanaged-short>IDWriteColorGlyphRunEnumerator1::GetCurrentRun</unmanaged-short>
        internal unsafe void GetCurrentRun(out System.IntPtr colorGlyphRun)
        {
            DXNET.Result __result__;
            fixed (void *colorGlyphRun_ = &colorGlyphRun)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, colorGlyphRun_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("b859ee5a-d838-4b5b-a2e8-1adc7d93db48")]
    public partial class Factory : DXNET.ComObject
    {
        public Factory(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetGdiInterop</unmanaged>
        /// <unmanaged-short>GetGdiInterop</unmanaged-short>
        public DXNET.DirectWrite.GdiInterop GdiInterop
        {
            get
            {
                GetGdiInterop(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "checkForUpdates">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::GetSystemFontCollection([Out] IDWriteFontCollection** fontCollection,[In] BOOL checkForUpdates)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::GetSystemFontCollection</unmanaged-short>
        public unsafe DXNET.DirectWrite.FontCollection GetSystemFontCollection(DXNET.Mathematics.Interop.RawBool checkForUpdates)
        {
            DXNET.DirectWrite.FontCollection fontCollection;
            System.IntPtr fontCollection_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, &fontCollection_, checkForUpdates, (*(void ***)this._nativePointer)[3]);
            if (fontCollection_ != System.IntPtr.Zero)
                fontCollection = new DXNET.DirectWrite.FontCollection(fontCollection_);
            else
                fontCollection = null;
            __result__.CheckError();
            return fontCollection;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "collectionLoader">No documentation.</param>
        /// <param name = "collectionKey">No documentation.</param>
        /// <param name = "collectionKeySize">No documentation.</param>
        /// <param name = "fontCollection">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateCustomFontCollection([In] IDWriteFontCollectionLoader* collectionLoader,[In, Buffer] const void* collectionKey,[In] unsigned int collectionKeySize,[Out, Fast] IDWriteFontCollection** fontCollection)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateCustomFontCollection</unmanaged-short>
        internal unsafe void CreateCustomFontCollection(DXNET.DirectWrite.FontCollectionLoader collectionLoader, System.IntPtr collectionKey, System.Int32 collectionKeySize, DXNET.DirectWrite.FontCollection fontCollection)
        {
            System.IntPtr collectionLoader_ = System.IntPtr.Zero;
            System.IntPtr fontCollection_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            collectionLoader_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontCollectionLoader>(collectionLoader);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)collectionLoader_, (void *)collectionKey, collectionKeySize, &fontCollection_, (*(void ***)this._nativePointer)[4]);
            (fontCollection).NativePointer = fontCollection_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontCollectionLoader">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::RegisterFontCollectionLoader([In] IDWriteFontCollectionLoader* fontCollectionLoader)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::RegisterFontCollectionLoader</unmanaged-short>
        internal unsafe void RegisterFontCollectionLoader_(DXNET.DirectWrite.FontCollectionLoader fontCollectionLoader)
        {
            System.IntPtr fontCollectionLoader_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontCollectionLoader_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontCollectionLoader>(fontCollectionLoader);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontCollectionLoader_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontCollectionLoader">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::UnregisterFontCollectionLoader([In] IDWriteFontCollectionLoader* fontCollectionLoader)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::UnregisterFontCollectionLoader</unmanaged-short>
        internal unsafe void UnregisterFontCollectionLoader_(DXNET.DirectWrite.FontCollectionLoader fontCollectionLoader)
        {
            System.IntPtr fontCollectionLoader_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontCollectionLoader_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontCollectionLoader>(fontCollectionLoader);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontCollectionLoader_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "filePath">No documentation.</param>
        /// <param name = "lastWriteTime">No documentation.</param>
        /// <param name = "fontFile">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateFontFileReference([In] const wchar_t* filePath,[In, Optional] const FILETIME* lastWriteTime,[Out, Fast] IDWriteFontFile** fontFile)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateFontFileReference</unmanaged-short>
        internal unsafe void CreateFontFileReference(System.String filePath, System.Int64? lastWriteTime, DXNET.DirectWrite.FontFile fontFile)
        {
            System.Int64 lastWriteTime_;
            System.IntPtr fontFile_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (lastWriteTime != null)
                lastWriteTime_ = lastWriteTime.Value;
            fixed (char *filePath_ = filePath)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)filePath_, lastWriteTime == null ? (void *)0 : &lastWriteTime_, &fontFile_, (*(void ***)this._nativePointer)[7]);
            (fontFile).NativePointer = fontFile_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFileReferenceKey">No documentation.</param>
        /// <param name = "fontFileReferenceKeySize">No documentation.</param>
        /// <param name = "fontFileLoader">No documentation.</param>
        /// <param name = "fontFile">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateCustomFontFileReference([In, Buffer] const void* fontFileReferenceKey,[In] unsigned int fontFileReferenceKeySize,[In] IDWriteFontFileLoader* fontFileLoader,[Out, Fast] IDWriteFontFile** fontFile)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateCustomFontFileReference</unmanaged-short>
        internal unsafe void CreateCustomFontFileReference(System.IntPtr fontFileReferenceKey, System.Int32 fontFileReferenceKeySize, DXNET.DirectWrite.FontFileLoader fontFileLoader, DXNET.DirectWrite.FontFile fontFile)
        {
            System.IntPtr fontFileLoader_ = System.IntPtr.Zero;
            System.IntPtr fontFile_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFileLoader_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFileLoader>(fontFileLoader);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFileReferenceKey, fontFileReferenceKeySize, (void *)fontFileLoader_, &fontFile_, (*(void ***)this._nativePointer)[8]);
            (fontFile).NativePointer = fontFile_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFaceType">No documentation.</param>
        /// <param name = "numberOfFiles">No documentation.</param>
        /// <param name = "fontFiles">No documentation.</param>
        /// <param name = "faceIndex">No documentation.</param>
        /// <param name = "fontFaceSimulationFlags">No documentation.</param>
        /// <param name = "fontFace">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateFontFace([In] DWRITE_FONT_FACE_TYPE fontFaceType,[In] unsigned int numberOfFiles,[In, Buffer] const IDWriteFontFile** fontFiles,[In] unsigned int faceIndex,[In] DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags,[Out, Fast] IDWriteFontFace** fontFace)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateFontFace</unmanaged-short>
        internal unsafe void CreateFontFace(DXNET.DirectWrite.FontFaceType fontFaceType, System.Int32 numberOfFiles, DXNET.DirectWrite.FontFile[] fontFiles, System.Int32 faceIndex, DXNET.DirectWrite.FontSimulations fontFaceSimulationFlags, DXNET.DirectWrite.FontFace fontFace)
        {
            System.IntPtr*fontFiles_;
            fontFiles_ = (System.IntPtr*)0;
            if (fontFiles != null)
            {
                System.IntPtr*_fontFiles = stackalloc System.IntPtr[fontFiles.Length];
                fontFiles_ = _fontFiles;
            }

            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (fontFiles != null)
                for (int i = 0; i < fontFiles.Length; ++i)
                    (fontFiles_)[i] = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFile>(fontFiles[i]);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)fontFaceType), numberOfFiles, (void *)fontFiles_, faceIndex, unchecked ((System.Int32)fontFaceSimulationFlags), &fontFace_, (*(void ***)this._nativePointer)[9]);
            (fontFace).NativePointer = fontFace_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "renderingParams">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateRenderingParams([Out, Fast] IDWriteRenderingParams** renderingParams)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateRenderingParams</unmanaged-short>
        internal unsafe void CreateRenderingParams(DXNET.DirectWrite.RenderingParams renderingParams)
        {
            System.IntPtr renderingParams_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &renderingParams_, (*(void ***)this._nativePointer)[10]);
            (renderingParams).NativePointer = renderingParams_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "monitor">No documentation.</param>
        /// <param name = "renderingParams">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateMonitorRenderingParams([In] HMONITOR monitor,[Out, Fast] IDWriteRenderingParams** renderingParams)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateMonitorRenderingParams</unmanaged-short>
        internal unsafe void CreateMonitorRenderingParams(System.IntPtr monitor, DXNET.DirectWrite.RenderingParams renderingParams)
        {
            System.IntPtr renderingParams_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)monitor, &renderingParams_, (*(void ***)this._nativePointer)[11]);
            (renderingParams).NativePointer = renderingParams_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gamma">No documentation.</param>
        /// <param name = "enhancedContrast">No documentation.</param>
        /// <param name = "clearTypeLevel">No documentation.</param>
        /// <param name = "pixelGeometry">No documentation.</param>
        /// <param name = "renderingMode">No documentation.</param>
        /// <param name = "renderingParams">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateCustomRenderingParams([In] float gamma,[In] float enhancedContrast,[In] float clearTypeLevel,[In] DWRITE_PIXEL_GEOMETRY pixelGeometry,[In] DWRITE_RENDERING_MODE renderingMode,[Out, Fast] IDWriteRenderingParams** renderingParams)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateCustomRenderingParams</unmanaged-short>
        internal unsafe void CreateCustomRenderingParams(System.Single gamma, System.Single enhancedContrast, System.Single clearTypeLevel, DXNET.DirectWrite.PixelGeometry pixelGeometry, DXNET.DirectWrite.RenderingMode renderingMode, DXNET.DirectWrite.RenderingParams renderingParams)
        {
            System.IntPtr renderingParams_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, gamma, enhancedContrast, clearTypeLevel, unchecked ((System.Int32)pixelGeometry), unchecked ((System.Int32)renderingMode), &renderingParams_, (*(void ***)this._nativePointer)[12]);
            (renderingParams).NativePointer = renderingParams_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFileLoader">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::RegisterFontFileLoader([In] IDWriteFontFileLoader* fontFileLoader)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::RegisterFontFileLoader</unmanaged-short>
        internal unsafe void RegisterFontFileLoader_(DXNET.DirectWrite.FontFileLoader fontFileLoader)
        {
            System.IntPtr fontFileLoader_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFileLoader_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFileLoader>(fontFileLoader);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFileLoader_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFileLoader">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::UnregisterFontFileLoader([In] IDWriteFontFileLoader* fontFileLoader)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::UnregisterFontFileLoader</unmanaged-short>
        internal unsafe void UnregisterFontFileLoader_(DXNET.DirectWrite.FontFileLoader fontFileLoader)
        {
            System.IntPtr fontFileLoader_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFileLoader_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFileLoader>(fontFileLoader);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFileLoader_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFamilyName">No documentation.</param>
        /// <param name = "fontCollection">No documentation.</param>
        /// <param name = "fontWeight">No documentation.</param>
        /// <param name = "fontStyle">No documentation.</param>
        /// <param name = "fontStretch">No documentation.</param>
        /// <param name = "fontSize">No documentation.</param>
        /// <param name = "localeName">No documentation.</param>
        /// <param name = "textFormat">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateTextFormat([In] const wchar_t* fontFamilyName,[In, Optional] IDWriteFontCollection* fontCollection,[In] DWRITE_FONT_WEIGHT fontWeight,[In] DWRITE_FONT_STYLE fontStyle,[In] DWRITE_FONT_STRETCH fontStretch,[In] float fontSize,[In] const wchar_t* localeName,[Out, Fast] IDWriteTextFormat** textFormat)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateTextFormat</unmanaged-short>
        internal unsafe void CreateTextFormat(System.String fontFamilyName, DXNET.DirectWrite.FontCollection fontCollection, DXNET.DirectWrite.FontWeight fontWeight, DXNET.DirectWrite.FontStyle fontStyle, DXNET.DirectWrite.FontStretch fontStretch, System.Single fontSize, System.String localeName, DXNET.DirectWrite.TextFormat textFormat)
        {
            System.IntPtr fontCollection_ = System.IntPtr.Zero;
            System.IntPtr textFormat_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontCollection_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontCollection>(fontCollection);
            fixed (char *localeName_ = localeName)
                fixed (char *fontFamilyName_ = fontFamilyName)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFamilyName_, (void *)fontCollection_, unchecked ((System.Int32)fontWeight), unchecked ((System.Int32)fontStyle), unchecked ((System.Int32)fontStretch), fontSize, (void *)localeName_, &textFormat_, (*(void ***)this._nativePointer)[15]);
            (textFormat).NativePointer = textFormat_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "typography">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateTypography([Out, Fast] IDWriteTypography** typography)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateTypography</unmanaged-short>
        internal unsafe void CreateTypography(DXNET.DirectWrite.Typography typography)
        {
            System.IntPtr typography_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &typography_, (*(void ***)this._nativePointer)[16]);
            (typography).NativePointer = typography_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gdiInterop">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::GetGdiInterop([Out] IDWriteGdiInterop** gdiInterop)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::GetGdiInterop</unmanaged-short>
        internal unsafe void GetGdiInterop(out DXNET.DirectWrite.GdiInterop gdiInterop)
        {
            System.IntPtr gdiInterop_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &gdiInterop_, (*(void ***)this._nativePointer)[17]);
            if (gdiInterop_ != System.IntPtr.Zero)
                gdiInterop = new DXNET.DirectWrite.GdiInterop(gdiInterop_);
            else
                gdiInterop = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "text">No documentation.</param>
        /// <param name = "stringLength">No documentation.</param>
        /// <param name = "textFormat">No documentation.</param>
        /// <param name = "maxWidth">No documentation.</param>
        /// <param name = "maxHeight">No documentation.</param>
        /// <param name = "textLayout">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateTextLayout([In, Buffer] const wchar_t* string,[In] unsigned int stringLength,[In] IDWriteTextFormat* textFormat,[In] float maxWidth,[In] float maxHeight,[Out, Fast] IDWriteTextLayout** textLayout)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateTextLayout</unmanaged-short>
        internal unsafe void CreateTextLayout(System.String text, System.Int32 stringLength, DXNET.DirectWrite.TextFormat textFormat, System.Single maxWidth, System.Single maxHeight, DXNET.DirectWrite.TextLayout textLayout)
        {
            System.IntPtr textFormat_ = System.IntPtr.Zero;
            System.IntPtr textLayout_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            textFormat_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextFormat>(textFormat);
            fixed (char *text_ = text)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)text_, stringLength, (void *)textFormat_, maxWidth, maxHeight, &textLayout_, (*(void ***)this._nativePointer)[18]);
            (textLayout).NativePointer = textLayout_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "text">No documentation.</param>
        /// <param name = "stringLength">No documentation.</param>
        /// <param name = "textFormat">No documentation.</param>
        /// <param name = "layoutWidth">No documentation.</param>
        /// <param name = "layoutHeight">No documentation.</param>
        /// <param name = "pixelsPerDip">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <param name = "useGdiNatural">No documentation.</param>
        /// <param name = "textLayout">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateGdiCompatibleTextLayout([In, Buffer] const wchar_t* string,[In] unsigned int stringLength,[In] IDWriteTextFormat* textFormat,[In] float layoutWidth,[In] float layoutHeight,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[In] BOOL useGdiNatural,[Out, Fast] IDWriteTextLayout** textLayout)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateGdiCompatibleTextLayout</unmanaged-short>
        internal unsafe void CreateGdiCompatibleTextLayout(System.String text, System.Int32 stringLength, DXNET.DirectWrite.TextFormat textFormat, System.Single layoutWidth, System.Single layoutHeight, System.Single pixelsPerDip, DXNET.Mathematics.Interop.RawMatrix3x2? transform, DXNET.Mathematics.Interop.RawBool useGdiNatural, DXNET.DirectWrite.TextLayout textLayout)
        {
            System.IntPtr textFormat_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawMatrix3x2 transform_;
            System.IntPtr textLayout_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            textFormat_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextFormat>(textFormat);
            if (transform != null)
                transform_ = transform.Value;
            fixed (char *text_ = text)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)text_, stringLength, (void *)textFormat_, layoutWidth, layoutHeight, pixelsPerDip, transform == null ? (void *)0 : &transform_, useGdiNatural, &textLayout_, (*(void ***)this._nativePointer)[19]);
            (textLayout).NativePointer = textLayout_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textFormat">No documentation.</param>
        /// <param name = "trimmingSign">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateEllipsisTrimmingSign([In] IDWriteTextFormat* textFormat,[Out, Fast] IDWriteInlineObject** trimmingSign)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateEllipsisTrimmingSign</unmanaged-short>
        internal unsafe void CreateEllipsisTrimmingSign(DXNET.DirectWrite.TextFormat textFormat, DXNET.DirectWrite.InlineObjectNative trimmingSign)
        {
            System.IntPtr textFormat_ = System.IntPtr.Zero;
            System.IntPtr trimmingSign_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            textFormat_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextFormat>(textFormat);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)textFormat_, &trimmingSign_, (*(void ***)this._nativePointer)[20]);
            (trimmingSign).NativePointer = trimmingSign_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textAnalyzer">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateTextAnalyzer([Out, Fast] IDWriteTextAnalyzer** textAnalyzer)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateTextAnalyzer</unmanaged-short>
        internal unsafe void CreateTextAnalyzer(DXNET.DirectWrite.TextAnalyzer textAnalyzer)
        {
            System.IntPtr textAnalyzer_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &textAnalyzer_, (*(void ***)this._nativePointer)[21]);
            (textAnalyzer).NativePointer = textAnalyzer_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "substitutionMethod">No documentation.</param>
        /// <param name = "localeName">No documentation.</param>
        /// <param name = "ignoreUserOverride">No documentation.</param>
        /// <param name = "numberSubstitution">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateNumberSubstitution([In] DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod,[In] const wchar_t* localeName,[In] BOOL ignoreUserOverride,[Out, Fast] IDWriteNumberSubstitution** numberSubstitution)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateNumberSubstitution</unmanaged-short>
        internal unsafe void CreateNumberSubstitution(DXNET.DirectWrite.NumberSubstitutionMethod substitutionMethod, System.String localeName, DXNET.Mathematics.Interop.RawBool ignoreUserOverride, DXNET.DirectWrite.NumberSubstitution numberSubstitution)
        {
            System.IntPtr numberSubstitution_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (char *localeName_ = localeName)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, unchecked ((System.Int32)substitutionMethod), (void *)localeName_, ignoreUserOverride, &numberSubstitution_, (*(void ***)this._nativePointer)[22]);
            (numberSubstitution).NativePointer = numberSubstitution_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphRun">No documentation.</param>
        /// <param name = "pixelsPerDip">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <param name = "renderingMode">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <param name = "baselineOriginX">No documentation.</param>
        /// <param name = "baselineOriginY">No documentation.</param>
        /// <param name = "glyphRunAnalysis">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateGlyphRunAnalysis([In] const DWRITE_GLYPH_RUN* glyphRun,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[In] DWRITE_RENDERING_MODE renderingMode,[In] DWRITE_MEASURING_MODE measuringMode,[In] float baselineOriginX,[In] float baselineOriginY,[Out, Fast] IDWriteGlyphRunAnalysis** glyphRunAnalysis)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateGlyphRunAnalysis</unmanaged-short>
        internal unsafe void CreateGlyphRunAnalysis(DXNET.DirectWrite.GlyphRun glyphRun, System.Single pixelsPerDip, DXNET.Mathematics.Interop.RawMatrix3x2? transform, DXNET.DirectWrite.RenderingMode renderingMode, DXNET.Direct2D1.MeasuringMode measuringMode, System.Single baselineOriginX, System.Single baselineOriginY, DXNET.DirectWrite.GlyphRunAnalysis glyphRunAnalysis)
        {
            DXNET.DirectWrite.GlyphRun.__Native glyphRun_ = default (DXNET.DirectWrite.GlyphRun.__Native);
            DXNET.Mathematics.Interop.RawMatrix3x2 transform_;
            System.IntPtr glyphRunAnalysis_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            glyphRun.__MarshalTo(ref glyphRun_);
            if (transform != null)
                transform_ = transform.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &glyphRun_, pixelsPerDip, transform == null ? (void *)0 : &transform_, unchecked ((System.Int32)renderingMode), unchecked ((System.Int32)measuringMode), baselineOriginX, baselineOriginY, &glyphRunAnalysis_, (*(void ***)this._nativePointer)[23]);
            (glyphRunAnalysis).NativePointer = glyphRunAnalysis_;
            glyphRun.__MarshalFree(ref glyphRun_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFaceType">No documentation.</param>
        /// <param name = "numberOfFiles">No documentation.</param>
        /// <param name = "fontFiles">No documentation.</param>
        /// <param name = "faceIndex">No documentation.</param>
        /// <param name = "fontFaceSimulationFlags">No documentation.</param>
        /// <param name = "fontFace">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateFontFace([In] DWRITE_FONT_FACE_TYPE fontFaceType,[In] unsigned int numberOfFiles,[In, Buffer] const IDWriteFontFile** fontFiles,[In] unsigned int faceIndex,[In] DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags,[Out, Fast] IDWriteFontFace** fontFace)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateFontFace</unmanaged-short>
        internal unsafe void CreateFontFace(DXNET.DirectWrite.FontFaceType fontFaceType, System.Int32 numberOfFiles, DXNET.ComArray<DXNET.DirectWrite.FontFile> fontFiles, System.Int32 faceIndex, DXNET.DirectWrite.FontSimulations fontFaceSimulationFlags, DXNET.DirectWrite.FontFace fontFace)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)fontFaceType), numberOfFiles, (void *)(fontFiles?.NativePointer ?? System.IntPtr.Zero), faceIndex, unchecked ((System.Int32)fontFaceSimulationFlags), &fontFace_, (*(void ***)this._nativePointer)[9]);
            (fontFace).NativePointer = fontFace_;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFaceType">No documentation.</param>
        /// <param name = "numberOfFiles">No documentation.</param>
        /// <param name = "fontFiles">No documentation.</param>
        /// <param name = "faceIndex">No documentation.</param>
        /// <param name = "fontFaceSimulationFlags">No documentation.</param>
        /// <param name = "fontFace">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory::CreateFontFace([In] DWRITE_FONT_FACE_TYPE fontFaceType,[In] unsigned int numberOfFiles,[In, Buffer] const IDWriteFontFile** fontFiles,[In] unsigned int faceIndex,[In] DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags,[Out, Fast] IDWriteFontFace** fontFace)</unmanaged>
        /// <unmanaged-short>IDWriteFactory::CreateFontFace</unmanaged-short>
        private unsafe void CreateFontFace(DXNET.DirectWrite.FontFaceType fontFaceType, System.Int32 numberOfFiles, System.IntPtr fontFiles, System.Int32 faceIndex, DXNET.DirectWrite.FontSimulations fontFaceSimulationFlags, System.IntPtr fontFace)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)fontFaceType), numberOfFiles, (void *)fontFiles, faceIndex, unchecked ((System.Int32)fontFaceSimulationFlags), (void *)fontFace, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("30572f99-dac6-41db-a16e-0486307e606a")]
    public partial class Factory1 : DXNET.DirectWrite.Factory
    {
        public Factory1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontCollection">No documentation.</param>
        /// <param name = "checkForUpdates">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory1::GetEudcFontCollection([Out] IDWriteFontCollection** fontCollection,[In] BOOL checkForUpdates)</unmanaged>
        /// <unmanaged-short>IDWriteFactory1::GetEudcFontCollection</unmanaged-short>
        public unsafe void GetEudcFontCollection(out DXNET.DirectWrite.FontCollection fontCollection, DXNET.Mathematics.Interop.RawBool checkForUpdates)
        {
            System.IntPtr fontCollection_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, &fontCollection_, checkForUpdates, (*(void ***)this._nativePointer)[24]);
            if (fontCollection_ != System.IntPtr.Zero)
                fontCollection = new DXNET.DirectWrite.FontCollection(fontCollection_);
            else
                fontCollection = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gamma">No documentation.</param>
        /// <param name = "enhancedContrast">No documentation.</param>
        /// <param name = "enhancedContrastGrayscale">No documentation.</param>
        /// <param name = "clearTypeLevel">No documentation.</param>
        /// <param name = "pixelGeometry">No documentation.</param>
        /// <param name = "renderingMode">No documentation.</param>
        /// <param name = "renderingParams">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory1::CreateCustomRenderingParams([In] float gamma,[In] float enhancedContrast,[In] float enhancedContrastGrayscale,[In] float clearTypeLevel,[In] DWRITE_PIXEL_GEOMETRY pixelGeometry,[In] DWRITE_RENDERING_MODE renderingMode,[Out] IDWriteRenderingParams1** renderingParams)</unmanaged>
        /// <unmanaged-short>IDWriteFactory1::CreateCustomRenderingParams</unmanaged-short>
        public unsafe void CreateCustomRenderingParams(System.Single gamma, System.Single enhancedContrast, System.Single enhancedContrastGrayscale, System.Single clearTypeLevel, DXNET.DirectWrite.PixelGeometry pixelGeometry, DXNET.DirectWrite.RenderingMode renderingMode, out DXNET.DirectWrite.RenderingParams1 renderingParams)
        {
            System.IntPtr renderingParams_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, gamma, enhancedContrast, enhancedContrastGrayscale, clearTypeLevel, unchecked ((System.Int32)pixelGeometry), unchecked ((System.Int32)renderingMode), &renderingParams_, (*(void ***)this._nativePointer)[25]);
            if (renderingParams_ != System.IntPtr.Zero)
                renderingParams = new DXNET.DirectWrite.RenderingParams1(renderingParams_);
            else
                renderingParams = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("0439fc60-ca44-4994-8dee-3a9af7b732ec")]
    public partial class Factory2 : DXNET.DirectWrite.Factory1
    {
        public Factory2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSystemFontFallback</unmanaged>
        /// <unmanaged-short>GetSystemFontFallback</unmanaged-short>
        public DXNET.DirectWrite.FontFallback SystemFontFallback
        {
            get
            {
                GetSystemFontFallback(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFallback">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory2::GetSystemFontFallback([Out] IDWriteFontFallback** fontFallback)</unmanaged>
        /// <unmanaged-short>IDWriteFactory2::GetSystemFontFallback</unmanaged-short>
        internal unsafe void GetSystemFontFallback(out DXNET.DirectWrite.FontFallback fontFallback)
        {
            System.IntPtr fontFallback_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontFallback_, (*(void ***)this._nativePointer)[26]);
            if (fontFallback_ != System.IntPtr.Zero)
                fontFallback = new DXNET.DirectWrite.FontFallback(fontFallback_);
            else
                fontFallback = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFallbackBuilder">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory2::CreateFontFallbackBuilder([Out] IDWriteFontFallbackBuilder** fontFallbackBuilder)</unmanaged>
        /// <unmanaged-short>IDWriteFactory2::CreateFontFallbackBuilder</unmanaged-short>
        public unsafe void CreateFontFallbackBuilder(out DXNET.DirectWrite.FontFallbackBuilder fontFallbackBuilder)
        {
            System.IntPtr fontFallbackBuilder_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontFallbackBuilder_, (*(void ***)this._nativePointer)[27]);
            if (fontFallbackBuilder_ != System.IntPtr.Zero)
                fontFallbackBuilder = new DXNET.DirectWrite.FontFallbackBuilder(fontFallbackBuilder_);
            else
                fontFallbackBuilder = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "baselineOriginX">No documentation.</param>
        /// <param name = "baselineOriginY">No documentation.</param>
        /// <param name = "glyphRun">No documentation.</param>
        /// <param name = "glyphRunDescription">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <param name = "worldToDeviceTransform">No documentation.</param>
        /// <param name = "colorPaletteIndex">No documentation.</param>
        /// <param name = "colorLayers">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory2::TranslateColorGlyphRun([In] float baselineOriginX,[In] float baselineOriginY,[In] const DWRITE_GLYPH_RUN* glyphRun,[In, Optional] const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,[In] DWRITE_MEASURING_MODE measuringMode,[In, Optional] const DWRITE_MATRIX* worldToDeviceTransform,[In] unsigned int colorPaletteIndex,[Out] IDWriteColorGlyphRunEnumerator** colorLayers)</unmanaged>
        /// <unmanaged-short>IDWriteFactory2::TranslateColorGlyphRun</unmanaged-short>
        public unsafe DXNET.Result TryTranslateColorGlyphRun(System.Single baselineOriginX, System.Single baselineOriginY, DXNET.DirectWrite.GlyphRun glyphRun, DXNET.DirectWrite.GlyphRunDescription glyphRunDescription, DXNET.Direct2D1.MeasuringMode measuringMode, DXNET.Mathematics.Interop.RawMatrix3x2? worldToDeviceTransform, System.Int32 colorPaletteIndex, out DXNET.DirectWrite.ColorGlyphRunEnumerator colorLayers)
        {
            DXNET.DirectWrite.GlyphRun.__Native glyphRun_ = default (DXNET.DirectWrite.GlyphRun.__Native);
            DXNET.DirectWrite.GlyphRunDescription.__Native glyphRunDescription_ = default (DXNET.DirectWrite.GlyphRunDescription.__Native);
            DXNET.Mathematics.Interop.RawMatrix3x2 worldToDeviceTransform_;
            System.IntPtr colorLayers_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            glyphRun.__MarshalTo(ref glyphRun_);
            if (glyphRunDescription != null)
                glyphRunDescription.__MarshalTo(ref glyphRunDescription_);
            if (worldToDeviceTransform != null)
                worldToDeviceTransform_ = worldToDeviceTransform.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, baselineOriginX, baselineOriginY, &glyphRun_, glyphRunDescription == null ? (void *)0 : &glyphRunDescription_, unchecked ((System.Int32)measuringMode), worldToDeviceTransform == null ? (void *)0 : &worldToDeviceTransform_, colorPaletteIndex, &colorLayers_, (*(void ***)this._nativePointer)[28]);
            if (colorLayers_ != System.IntPtr.Zero)
                colorLayers = new DXNET.DirectWrite.ColorGlyphRunEnumerator(colorLayers_);
            else
                colorLayers = null;
            glyphRun.__MarshalFree(ref glyphRun_);
            if (glyphRunDescription != null)
                glyphRunDescription.__MarshalFree(ref glyphRunDescription_);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gamma">No documentation.</param>
        /// <param name = "enhancedContrast">No documentation.</param>
        /// <param name = "grayscaleEnhancedContrast">No documentation.</param>
        /// <param name = "clearTypeLevel">No documentation.</param>
        /// <param name = "pixelGeometry">No documentation.</param>
        /// <param name = "renderingMode">No documentation.</param>
        /// <param name = "gridFitMode">No documentation.</param>
        /// <param name = "renderingParams">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory2::CreateCustomRenderingParams([In] float gamma,[In] float enhancedContrast,[In] float grayscaleEnhancedContrast,[In] float clearTypeLevel,[In] DWRITE_PIXEL_GEOMETRY pixelGeometry,[In] DWRITE_RENDERING_MODE renderingMode,[In] DWRITE_GRID_FIT_MODE gridFitMode,[Out] IDWriteRenderingParams2** renderingParams)</unmanaged>
        /// <unmanaged-short>IDWriteFactory2::CreateCustomRenderingParams</unmanaged-short>
        public unsafe void CreateCustomRenderingParams(System.Single gamma, System.Single enhancedContrast, System.Single grayscaleEnhancedContrast, System.Single clearTypeLevel, DXNET.DirectWrite.PixelGeometry pixelGeometry, DXNET.DirectWrite.RenderingMode renderingMode, DXNET.DirectWrite.GridFitMode gridFitMode, out DXNET.DirectWrite.RenderingParams2 renderingParams)
        {
            System.IntPtr renderingParams_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, unchecked ((System.Int32)pixelGeometry), unchecked ((System.Int32)renderingMode), unchecked ((System.Int32)gridFitMode), &renderingParams_, (*(void ***)this._nativePointer)[29]);
            if (renderingParams_ != System.IntPtr.Zero)
                renderingParams = new DXNET.DirectWrite.RenderingParams2(renderingParams_);
            else
                renderingParams = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphRun">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <param name = "renderingMode">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <param name = "gridFitMode">No documentation.</param>
        /// <param name = "antialiasMode">No documentation.</param>
        /// <param name = "baselineOriginX">No documentation.</param>
        /// <param name = "baselineOriginY">No documentation.</param>
        /// <param name = "glyphRunAnalysis">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory2::CreateGlyphRunAnalysis([In] const DWRITE_GLYPH_RUN* glyphRun,[In, Optional] const DWRITE_MATRIX* transform,[In] DWRITE_RENDERING_MODE renderingMode,[In] DWRITE_MEASURING_MODE measuringMode,[In] DWRITE_GRID_FIT_MODE gridFitMode,[In] DWRITE_TEXT_ANTIALIAS_MODE antialiasMode,[In] float baselineOriginX,[In] float baselineOriginY,[Out] IDWriteGlyphRunAnalysis** glyphRunAnalysis)</unmanaged>
        /// <unmanaged-short>IDWriteFactory2::CreateGlyphRunAnalysis</unmanaged-short>
        public unsafe void CreateGlyphRunAnalysis(DXNET.DirectWrite.GlyphRun glyphRun, DXNET.Mathematics.Interop.RawMatrix3x2? transform, DXNET.DirectWrite.RenderingMode renderingMode, DXNET.Direct2D1.MeasuringMode measuringMode, DXNET.DirectWrite.GridFitMode gridFitMode, DXNET.DirectWrite.TextAntialiasMode antialiasMode, System.Single baselineOriginX, System.Single baselineOriginY, out DXNET.DirectWrite.GlyphRunAnalysis glyphRunAnalysis)
        {
            DXNET.DirectWrite.GlyphRun.__Native glyphRun_ = default (DXNET.DirectWrite.GlyphRun.__Native);
            DXNET.Mathematics.Interop.RawMatrix3x2 transform_;
            System.IntPtr glyphRunAnalysis_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            glyphRun.__MarshalTo(ref glyphRun_);
            if (transform != null)
                transform_ = transform.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &glyphRun_, transform == null ? (void *)0 : &transform_, unchecked ((System.Int32)renderingMode), unchecked ((System.Int32)measuringMode), unchecked ((System.Int32)gridFitMode), unchecked ((System.Int32)antialiasMode), baselineOriginX, baselineOriginY, &glyphRunAnalysis_, (*(void ***)this._nativePointer)[30]);
            if (glyphRunAnalysis_ != System.IntPtr.Zero)
                glyphRunAnalysis = new DXNET.DirectWrite.GlyphRunAnalysis(glyphRunAnalysis_);
            else
                glyphRunAnalysis = null;
            glyphRun.__MarshalFree(ref glyphRun_);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("9A1B41C3-D3BB-466A-87FC-FE67556A3B65")]
    public partial class Factory3 : DXNET.DirectWrite.Factory2
    {
        public Factory3(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory3(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory3(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSystemFontSet</unmanaged>
        /// <unmanaged-short>GetSystemFontSet</unmanaged-short>
        public DXNET.DirectWrite.FontSet SystemFontSet
        {
            get
            {
                GetSystemFontSet(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontDownloadQueue</unmanaged>
        /// <unmanaged-short>GetFontDownloadQueue</unmanaged-short>
        public DXNET.DirectWrite.FontDownloadQueue FontDownloadQueue
        {
            get
            {
                GetFontDownloadQueue(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphRun">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <param name = "renderingMode">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <param name = "gridFitMode">No documentation.</param>
        /// <param name = "antialiasMode">No documentation.</param>
        /// <param name = "baselineOriginX">No documentation.</param>
        /// <param name = "baselineOriginY">No documentation.</param>
        /// <param name = "glyphRunAnalysis">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory3::CreateGlyphRunAnalysis([In] const DWRITE_GLYPH_RUN* glyphRun,[In, Optional] const DWRITE_MATRIX* transform,[In] DWRITE_RENDERING_MODE1 renderingMode,[In] DWRITE_MEASURING_MODE measuringMode,[In] DWRITE_GRID_FIT_MODE gridFitMode,[In] DWRITE_TEXT_ANTIALIAS_MODE antialiasMode,[In] float baselineOriginX,[In] float baselineOriginY,[Out] IDWriteGlyphRunAnalysis** glyphRunAnalysis)</unmanaged>
        /// <unmanaged-short>IDWriteFactory3::CreateGlyphRunAnalysis</unmanaged-short>
        public unsafe void CreateGlyphRunAnalysis(DXNET.DirectWrite.GlyphRun glyphRun, DXNET.Mathematics.Interop.RawMatrix3x2? transform, DXNET.DirectWrite.RenderingMode1 renderingMode, DXNET.Direct2D1.MeasuringMode measuringMode, DXNET.DirectWrite.GridFitMode gridFitMode, DXNET.DirectWrite.TextAntialiasMode antialiasMode, System.Single baselineOriginX, System.Single baselineOriginY, out DXNET.DirectWrite.GlyphRunAnalysis glyphRunAnalysis)
        {
            DXNET.DirectWrite.GlyphRun.__Native glyphRun_ = default (DXNET.DirectWrite.GlyphRun.__Native);
            DXNET.Mathematics.Interop.RawMatrix3x2 transform_;
            System.IntPtr glyphRunAnalysis_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            glyphRun.__MarshalTo(ref glyphRun_);
            if (transform != null)
                transform_ = transform.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &glyphRun_, transform == null ? (void *)0 : &transform_, unchecked ((System.Int32)renderingMode), unchecked ((System.Int32)measuringMode), unchecked ((System.Int32)gridFitMode), unchecked ((System.Int32)antialiasMode), baselineOriginX, baselineOriginY, &glyphRunAnalysis_, (*(void ***)this._nativePointer)[31]);
            if (glyphRunAnalysis_ != System.IntPtr.Zero)
                glyphRunAnalysis = new DXNET.DirectWrite.GlyphRunAnalysis(glyphRunAnalysis_);
            else
                glyphRunAnalysis = null;
            glyphRun.__MarshalFree(ref glyphRun_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "gamma">No documentation.</param>
        /// <param name = "enhancedContrast">No documentation.</param>
        /// <param name = "grayscaleEnhancedContrast">No documentation.</param>
        /// <param name = "clearTypeLevel">No documentation.</param>
        /// <param name = "pixelGeometry">No documentation.</param>
        /// <param name = "renderingMode">No documentation.</param>
        /// <param name = "gridFitMode">No documentation.</param>
        /// <param name = "renderingParams">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory3::CreateCustomRenderingParams([In] float gamma,[In] float enhancedContrast,[In] float grayscaleEnhancedContrast,[In] float clearTypeLevel,[In] DWRITE_PIXEL_GEOMETRY pixelGeometry,[In] DWRITE_RENDERING_MODE1 renderingMode,[In] DWRITE_GRID_FIT_MODE gridFitMode,[Out] IDWriteRenderingParams3** renderingParams)</unmanaged>
        /// <unmanaged-short>IDWriteFactory3::CreateCustomRenderingParams</unmanaged-short>
        public unsafe void CreateCustomRenderingParams(System.Single gamma, System.Single enhancedContrast, System.Single grayscaleEnhancedContrast, System.Single clearTypeLevel, DXNET.DirectWrite.PixelGeometry pixelGeometry, DXNET.DirectWrite.RenderingMode1 renderingMode, DXNET.DirectWrite.GridFitMode gridFitMode, out DXNET.DirectWrite.RenderingParams3 renderingParams)
        {
            System.IntPtr renderingParams_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, gamma, enhancedContrast, grayscaleEnhancedContrast, clearTypeLevel, unchecked ((System.Int32)pixelGeometry), unchecked ((System.Int32)renderingMode), unchecked ((System.Int32)gridFitMode), &renderingParams_, (*(void ***)this._nativePointer)[32]);
            if (renderingParams_ != System.IntPtr.Zero)
                renderingParams = new DXNET.DirectWrite.RenderingParams3(renderingParams_);
            else
                renderingParams = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFile">No documentation.</param>
        /// <param name = "faceIndex">No documentation.</param>
        /// <param name = "fontSimulations">No documentation.</param>
        /// <param name = "fontFaceReference">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory3::CreateFontFaceReference([In] IDWriteFontFile* fontFile,[In] unsigned int faceIndex,[In] DWRITE_FONT_SIMULATIONS fontSimulations,[Out] IDWriteFontFaceReference** fontFaceReference)</unmanaged>
        /// <unmanaged-short>IDWriteFactory3::CreateFontFaceReference</unmanaged-short>
        public unsafe void CreateFontFaceReference(DXNET.DirectWrite.FontFile fontFile, System.Int32 faceIndex, DXNET.DirectWrite.FontSimulations fontSimulations, out DXNET.DirectWrite.FontFaceReference fontFaceReference)
        {
            System.IntPtr fontFile_ = System.IntPtr.Zero;
            System.IntPtr fontFaceReference_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFile_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFile>(fontFile);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFile_, faceIndex, unchecked ((System.Int32)fontSimulations), &fontFaceReference_, (*(void ***)this._nativePointer)[33]);
            if (fontFaceReference_ != System.IntPtr.Zero)
                fontFaceReference = new DXNET.DirectWrite.FontFaceReference(fontFaceReference_);
            else
                fontFaceReference = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "filePath">No documentation.</param>
        /// <param name = "lastWriteTime">No documentation.</param>
        /// <param name = "faceIndex">No documentation.</param>
        /// <param name = "fontSimulations">No documentation.</param>
        /// <param name = "fontFaceReference">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory3::CreateFontFaceReference([In] const wchar_t* filePath,[In, Optional] const FILETIME* lastWriteTime,[In] unsigned int faceIndex,[In] DWRITE_FONT_SIMULATIONS fontSimulations,[Out] IDWriteFontFaceReference** fontFaceReference)</unmanaged>
        /// <unmanaged-short>IDWriteFactory3::CreateFontFaceReference</unmanaged-short>
        public unsafe void CreateFontFaceReference(System.String filePath, System.Int64? lastWriteTime, System.Int32 faceIndex, DXNET.DirectWrite.FontSimulations fontSimulations, out DXNET.DirectWrite.FontFaceReference fontFaceReference)
        {
            System.Int64 lastWriteTime_;
            System.IntPtr fontFaceReference_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (lastWriteTime != null)
                lastWriteTime_ = lastWriteTime.Value;
            fixed (char *filePath_ = filePath)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)filePath_, lastWriteTime == null ? (void *)0 : &lastWriteTime_, faceIndex, unchecked ((System.Int32)fontSimulations), &fontFaceReference_, (*(void ***)this._nativePointer)[34]);
            if (fontFaceReference_ != System.IntPtr.Zero)
                fontFaceReference = new DXNET.DirectWrite.FontFaceReference(fontFaceReference_);
            else
                fontFaceReference = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontSet">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory3::GetSystemFontSet([Out] IDWriteFontSet** fontSet)</unmanaged>
        /// <unmanaged-short>IDWriteFactory3::GetSystemFontSet</unmanaged-short>
        internal unsafe void GetSystemFontSet(out DXNET.DirectWrite.FontSet fontSet)
        {
            System.IntPtr fontSet_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontSet_, (*(void ***)this._nativePointer)[35]);
            if (fontSet_ != System.IntPtr.Zero)
                fontSet = new DXNET.DirectWrite.FontSet(fontSet_);
            else
                fontSet = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontSetBuilder">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory3::CreateFontSetBuilder([Out] IDWriteFontSetBuilder** fontSetBuilder)</unmanaged>
        /// <unmanaged-short>IDWriteFactory3::CreateFontSetBuilder</unmanaged-short>
        public unsafe void CreateFontSetBuilder(out DXNET.DirectWrite.FontSetBuilder fontSetBuilder)
        {
            System.IntPtr fontSetBuilder_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontSetBuilder_, (*(void ***)this._nativePointer)[36]);
            if (fontSetBuilder_ != System.IntPtr.Zero)
                fontSetBuilder = new DXNET.DirectWrite.FontSetBuilder(fontSetBuilder_);
            else
                fontSetBuilder = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontSet">No documentation.</param>
        /// <param name = "fontCollection">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory3::CreateFontCollectionFromFontSet([In] IDWriteFontSet* fontSet,[Out] IDWriteFontCollection1** fontCollection)</unmanaged>
        /// <unmanaged-short>IDWriteFactory3::CreateFontCollectionFromFontSet</unmanaged-short>
        public unsafe void CreateFontCollectionFromFontSet(DXNET.DirectWrite.FontSet fontSet, out DXNET.DirectWrite.FontCollection1 fontCollection)
        {
            System.IntPtr fontSet_ = System.IntPtr.Zero;
            System.IntPtr fontCollection_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontSet_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontSet>(fontSet);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontSet_, &fontCollection_, (*(void ***)this._nativePointer)[37]);
            if (fontCollection_ != System.IntPtr.Zero)
                fontCollection = new DXNET.DirectWrite.FontCollection1(fontCollection_);
            else
                fontCollection = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "includeDownloadableFonts">No documentation.</param>
        /// <param name = "fontCollection">No documentation.</param>
        /// <param name = "checkForUpdates">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory3::GetSystemFontCollection([In] BOOL includeDownloadableFonts,[Out] IDWriteFontCollection1** fontCollection,[In] BOOL checkForUpdates)</unmanaged>
        /// <unmanaged-short>IDWriteFactory3::GetSystemFontCollection</unmanaged-short>
        public unsafe void GetSystemFontCollection(DXNET.Mathematics.Interop.RawBool includeDownloadableFonts, out DXNET.DirectWrite.FontCollection1 fontCollection, DXNET.Mathematics.Interop.RawBool checkForUpdates)
        {
            System.IntPtr fontCollection_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, includeDownloadableFonts, &fontCollection_, checkForUpdates, (*(void ***)this._nativePointer)[38]);
            if (fontCollection_ != System.IntPtr.Zero)
                fontCollection = new DXNET.DirectWrite.FontCollection1(fontCollection_);
            else
                fontCollection = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontDownloadQueue">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory3::GetFontDownloadQueue([Out] IDWriteFontDownloadQueue** fontDownloadQueue)</unmanaged>
        /// <unmanaged-short>IDWriteFactory3::GetFontDownloadQueue</unmanaged-short>
        internal unsafe void GetFontDownloadQueue(out DXNET.DirectWrite.FontDownloadQueue fontDownloadQueue)
        {
            System.IntPtr fontDownloadQueue_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontDownloadQueue_, (*(void ***)this._nativePointer)[39]);
            if (fontDownloadQueue_ != System.IntPtr.Zero)
                fontDownloadQueue = new DXNET.DirectWrite.FontDownloadQueue(fontDownloadQueue_);
            else
                fontDownloadQueue = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("4B0B5BD3-0797-4549-8AC5-FE915CC53856")]
    public partial class Factory4 : DXNET.DirectWrite.Factory3
    {
        public Factory4(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory4(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory4(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "baselineOrigin">No documentation.</param>
        /// <param name = "glyphRun">No documentation.</param>
        /// <param name = "glyphRunDescription">No documentation.</param>
        /// <param name = "desiredGlyphImageFormats">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <param name = "worldAndDpiTransform">No documentation.</param>
        /// <param name = "colorPaletteIndex">No documentation.</param>
        /// <param name = "colorLayers">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory4::TranslateColorGlyphRun([In] D2D_POINT_2F baselineOrigin,[In] const DWRITE_GLYPH_RUN* glyphRun,[In, Optional] const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,[In] DWRITE_GLYPH_IMAGE_FORMATS desiredGlyphImageFormats,[In] DWRITE_MEASURING_MODE measuringMode,[In, Optional] const DWRITE_MATRIX* worldAndDpiTransform,[In] unsigned int colorPaletteIndex,[Out] IDWriteColorGlyphRunEnumerator1** colorLayers)</unmanaged>
        /// <unmanaged-short>IDWriteFactory4::TranslateColorGlyphRun</unmanaged-short>
        public unsafe void TranslateColorGlyphRun(DXNET.Mathematics.Interop.RawVector2 baselineOrigin, DXNET.DirectWrite.GlyphRun glyphRun, DXNET.DirectWrite.GlyphRunDescription glyphRunDescription, DXNET.Direct2D1.GlyphImageFormatS desiredGlyphImageFormats, DXNET.Direct2D1.MeasuringMode measuringMode, DXNET.Mathematics.Interop.RawMatrix3x2? worldAndDpiTransform, System.Int32 colorPaletteIndex, out DXNET.DirectWrite.ColorGlyphRunEnumerator1 colorLayers)
        {
            DXNET.DirectWrite.GlyphRun.__Native glyphRun_ = default (DXNET.DirectWrite.GlyphRun.__Native);
            DXNET.DirectWrite.GlyphRunDescription.__Native glyphRunDescription_ = default (DXNET.DirectWrite.GlyphRunDescription.__Native);
            DXNET.Mathematics.Interop.RawMatrix3x2 worldAndDpiTransform_;
            System.IntPtr colorLayers_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            glyphRun.__MarshalTo(ref glyphRun_);
            if (glyphRunDescription != null)
                glyphRunDescription.__MarshalTo(ref glyphRunDescription_);
            if (worldAndDpiTransform != null)
                worldAndDpiTransform_ = worldAndDpiTransform.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, baselineOrigin, &glyphRun_, glyphRunDescription == null ? (void *)0 : &glyphRunDescription_, unchecked ((System.Int32)desiredGlyphImageFormats), unchecked ((System.Int32)measuringMode), worldAndDpiTransform == null ? (void *)0 : &worldAndDpiTransform_, colorPaletteIndex, &colorLayers_, (*(void ***)this._nativePointer)[40]);
            if (colorLayers_ != System.IntPtr.Zero)
                colorLayers = new DXNET.DirectWrite.ColorGlyphRunEnumerator1(colorLayers_);
            else
                colorLayers = null;
            glyphRun.__MarshalFree(ref glyphRun_);
            if (glyphRunDescription != null)
                glyphRunDescription.__MarshalFree(ref glyphRunDescription_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphRun">No documentation.</param>
        /// <param name = "baselineOrigin">No documentation.</param>
        /// <param name = "glyphOrigins">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory4::ComputeGlyphOrigins([In] const DWRITE_GLYPH_RUN* glyphRun,[In] D2D_POINT_2F baselineOrigin,[Out, Buffer] D2D_POINT_2F* glyphOrigins)</unmanaged>
        /// <unmanaged-short>IDWriteFactory4::ComputeGlyphOrigins</unmanaged-short>
        public unsafe void ComputeGlyphOrigins(DXNET.DirectWrite.GlyphRun glyphRun, DXNET.Mathematics.Interop.RawVector2 baselineOrigin, DXNET.Mathematics.Interop.RawVector2[] glyphOrigins)
        {
            DXNET.DirectWrite.GlyphRun.__Native glyphRun_ = default (DXNET.DirectWrite.GlyphRun.__Native);
            DXNET.Result __result__;
            glyphRun.__MarshalTo(ref glyphRun_);
            fixed (void *glyphOrigins_ = glyphOrigins)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, &glyphRun_, baselineOrigin, glyphOrigins_, (*(void ***)this._nativePointer)[41]);
            glyphRun.__MarshalFree(ref glyphRun_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphRun">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <param name = "baselineOrigin">No documentation.</param>
        /// <param name = "worldAndDpiTransform">No documentation.</param>
        /// <param name = "glyphOrigins">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory4::ComputeGlyphOrigins([In] const DWRITE_GLYPH_RUN* glyphRun,[In] DWRITE_MEASURING_MODE measuringMode,[In] D2D_POINT_2F baselineOrigin,[In, Optional] const DWRITE_MATRIX* worldAndDpiTransform,[Out, Buffer] D2D_POINT_2F* glyphOrigins)</unmanaged>
        /// <unmanaged-short>IDWriteFactory4::ComputeGlyphOrigins</unmanaged-short>
        public unsafe void ComputeGlyphOrigins(DXNET.DirectWrite.GlyphRun glyphRun, DXNET.Direct2D1.MeasuringMode measuringMode, DXNET.Mathematics.Interop.RawVector2 baselineOrigin, DXNET.Mathematics.Interop.RawMatrix3x2? worldAndDpiTransform, DXNET.Mathematics.Interop.RawVector2[] glyphOrigins)
        {
            DXNET.DirectWrite.GlyphRun.__Native glyphRun_ = default (DXNET.DirectWrite.GlyphRun.__Native);
            DXNET.Mathematics.Interop.RawMatrix3x2 worldAndDpiTransform_;
            DXNET.Result __result__;
            glyphRun.__MarshalTo(ref glyphRun_);
            if (worldAndDpiTransform != null)
                worldAndDpiTransform_ = worldAndDpiTransform.Value;
            fixed (void *glyphOrigins_ = glyphOrigins)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, &glyphRun_, unchecked ((System.Int32)measuringMode), baselineOrigin, worldAndDpiTransform == null ? (void *)0 : &worldAndDpiTransform_, glyphOrigins_, (*(void ***)this._nativePointer)[42]);
            glyphRun.__MarshalFree(ref glyphRun_);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("958DB99A-BE2A-4F09-AF7D-65189803D1D3")]
    public partial class Factory5 : DXNET.DirectWrite.Factory4
    {
        public Factory5(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Factory5(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Factory5(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontSetBuilder">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory5::CreateFontSetBuilder([Out] IDWriteFontSetBuilder1** fontSetBuilder)</unmanaged>
        /// <unmanaged-short>IDWriteFactory5::CreateFontSetBuilder</unmanaged-short>
        public unsafe void CreateFontSetBuilder(out DXNET.DirectWrite.FontSetBuilder1 fontSetBuilder)
        {
            System.IntPtr fontSetBuilder_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontSetBuilder_, (*(void ***)this._nativePointer)[43]);
            if (fontSetBuilder_ != System.IntPtr.Zero)
                fontSetBuilder = new DXNET.DirectWrite.FontSetBuilder1(fontSetBuilder_);
            else
                fontSetBuilder = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "newLoader">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory5::CreateInMemoryFontFileLoader([Out] IDWriteInMemoryFontFileLoader** newLoader)</unmanaged>
        /// <unmanaged-short>IDWriteFactory5::CreateInMemoryFontFileLoader</unmanaged-short>
        public unsafe void CreateInMemoryFontFileLoader(out DXNET.DirectWrite.InMemoryFontFileLoader newLoader)
        {
            System.IntPtr newLoader_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &newLoader_, (*(void ***)this._nativePointer)[44]);
            if (newLoader_ != System.IntPtr.Zero)
                newLoader = new DXNET.DirectWrite.InMemoryFontFileLoader(newLoader_);
            else
                newLoader = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "referrerUrl">No documentation.</param>
        /// <param name = "extraHeaders">No documentation.</param>
        /// <param name = "newLoader">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory5::CreateHttpFontFileLoader([In, Optional] const wchar_t* referrerUrl,[In, Optional] const wchar_t* extraHeaders,[Out] IDWriteRemoteFontFileLoader** newLoader)</unmanaged>
        /// <unmanaged-short>IDWriteFactory5::CreateHttpFontFileLoader</unmanaged-short>
        public unsafe void CreateHttpFontFileLoader(System.String referrerUrl, System.String extraHeaders, out DXNET.DirectWrite.RemoteFontFileLoader newLoader)
        {
            System.IntPtr newLoader_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (char *extraHeaders_ = extraHeaders)
                fixed (char *referrerUrl_ = referrerUrl)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)referrerUrl_, (void *)extraHeaders_, &newLoader_, (*(void ***)this._nativePointer)[45]);
            if (newLoader_ != System.IntPtr.Zero)
                newLoader = new DXNET.DirectWrite.RemoteFontFileLoader(newLoader_);
            else
                newLoader = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fileData">No documentation.</param>
        /// <param name = "fileDataSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_CONTAINER_TYPE IDWriteFactory5::AnalyzeContainerType([In, Buffer] const void* fileData,[In] unsigned int fileDataSize)</unmanaged>
        /// <unmanaged-short>IDWriteFactory5::AnalyzeContainerType</unmanaged-short>
        public unsafe DXNET.DirectWrite.ContainerType AnalyzeContainerType(System.IntPtr fileData, System.Int32 fileDataSize)
        {
            DXNET.DirectWrite.ContainerType __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteContainerType(this._nativePointer, (void *)fileData, fileDataSize, (*(void ***)this._nativePointer)[46]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "containerType">No documentation.</param>
        /// <param name = "fileData">No documentation.</param>
        /// <param name = "fileDataSize">No documentation.</param>
        /// <param name = "unpackedFontStream">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFactory5::UnpackFontFile([In] DWRITE_CONTAINER_TYPE containerType,[In, Buffer] const void* fileData,[In] unsigned int fileDataSize,[Out] IDWriteFontFileStream** unpackedFontStream)</unmanaged>
        /// <unmanaged-short>IDWriteFactory5::UnpackFontFile</unmanaged-short>
        public unsafe void UnpackFontFile(DXNET.DirectWrite.ContainerType containerType, System.IntPtr fileData, System.Int32 fileDataSize, out DXNET.DirectWrite.FontFileStream unpackedFontStream)
        {
            System.IntPtr unpackedFontStream_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)containerType), (void *)fileData, fileDataSize, &unpackedFontStream_, (*(void ***)this._nativePointer)[47]);
            if (unpackedFontStream_ != System.IntPtr.Zero)
                unpackedFontStream = new DXNET.DirectWrite.FontFileStreamNative(unpackedFontStream_);
            else
                unpackedFontStream = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("acd16696-8c14-4f5d-877e-fe3fc1d32737")]
    public partial class Font : DXNET.ComObject
    {
        public Font(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Font(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Font(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontFamily</unmanaged>
        /// <unmanaged-short>GetFontFamily</unmanaged-short>
        public DXNET.DirectWrite.FontFamily FontFamily
        {
            get
            {
                GetFontFamily(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetWeight</unmanaged>
        /// <unmanaged-short>GetWeight</unmanaged-short>
        public DXNET.DirectWrite.FontWeight Weight
        {
            get => GetWeight();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStretch</unmanaged>
        /// <unmanaged-short>GetStretch</unmanaged-short>
        public DXNET.DirectWrite.FontStretch Stretch
        {
            get => GetStretch();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStyle</unmanaged>
        /// <unmanaged-short>GetStyle</unmanaged-short>
        public DXNET.DirectWrite.FontStyle Style
        {
            get => GetStyle();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>IsSymbolFont</unmanaged>
        /// <unmanaged-short>IsSymbolFont</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsSymbolFont
        {
            get => IsSymbolFont_();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFaceNames</unmanaged>
        /// <unmanaged-short>GetFaceNames</unmanaged-short>
        public DXNET.DirectWrite.LocalizedStrings FaceNames
        {
            get
            {
                GetFaceNames(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSimulations</unmanaged>
        /// <unmanaged-short>GetSimulations</unmanaged-short>
        public DXNET.DirectWrite.FontSimulations Simulations
        {
            get => GetSimulations();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMetrics</unmanaged>
        /// <unmanaged-short>GetMetrics</unmanaged-short>
        public DXNET.DirectWrite.FontMetrics Metrics
        {
            get
            {
                GetMetrics(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFamily">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFont::GetFontFamily([Out] IDWriteFontFamily** fontFamily)</unmanaged>
        /// <unmanaged-short>IDWriteFont::GetFontFamily</unmanaged-short>
        internal unsafe void GetFontFamily(out DXNET.DirectWrite.FontFamily fontFamily)
        {
            System.IntPtr fontFamily_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontFamily_, (*(void ***)this._nativePointer)[3]);
            if (fontFamily_ != System.IntPtr.Zero)
                fontFamily = new DXNET.DirectWrite.FontFamily(fontFamily_);
            else
                fontFamily = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_FONT_WEIGHT IDWriteFont::GetWeight()</unmanaged>
        /// <unmanaged-short>IDWriteFont::GetWeight</unmanaged-short>
        internal unsafe DXNET.DirectWrite.FontWeight GetWeight()
        {
            DXNET.DirectWrite.FontWeight __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteFontWeight(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_FONT_STRETCH IDWriteFont::GetStretch()</unmanaged>
        /// <unmanaged-short>IDWriteFont::GetStretch</unmanaged-short>
        internal unsafe DXNET.DirectWrite.FontStretch GetStretch()
        {
            DXNET.DirectWrite.FontStretch __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteFontStretch(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_FONT_STYLE IDWriteFont::GetStyle()</unmanaged>
        /// <unmanaged-short>IDWriteFont::GetStyle</unmanaged-short>
        internal unsafe DXNET.DirectWrite.FontStyle GetStyle()
        {
            DXNET.DirectWrite.FontStyle __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteFontStyle(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteFont::IsSymbolFont()</unmanaged>
        /// <unmanaged-short>IDWriteFont::IsSymbolFont</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool IsSymbolFont_()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "names">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFont::GetFaceNames([Out] IDWriteLocalizedStrings** names)</unmanaged>
        /// <unmanaged-short>IDWriteFont::GetFaceNames</unmanaged-short>
        internal unsafe void GetFaceNames(out DXNET.DirectWrite.LocalizedStrings names)
        {
            System.IntPtr names_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &names_, (*(void ***)this._nativePointer)[8]);
            if (names_ != System.IntPtr.Zero)
                names = new DXNET.DirectWrite.LocalizedStrings(names_);
            else
                names = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "informationalStringID">No documentation.</param>
        /// <param name = "informationalStrings">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFont::GetInformationalStrings([In] DWRITE_INFORMATIONAL_STRING_ID informationalStringID,[Out, Optional] IDWriteLocalizedStrings** informationalStrings,[Out] BOOL* exists)</unmanaged>
        /// <unmanaged-short>IDWriteFont::GetInformationalStrings</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool GetInformationalStrings(DXNET.DirectWrite.InformationalStringId informationalStringID, out DXNET.DirectWrite.LocalizedStrings informationalStrings)
        {
            System.IntPtr informationalStrings_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawBool exists;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)informationalStringID), &informationalStrings_, &exists, (*(void ***)this._nativePointer)[9]);
            if (informationalStrings_ != System.IntPtr.Zero)
                informationalStrings = new DXNET.DirectWrite.LocalizedStrings(informationalStrings_);
            else
                informationalStrings = null;
            __result__.CheckError();
            return exists;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_FONT_SIMULATIONS IDWriteFont::GetSimulations()</unmanaged>
        /// <unmanaged-short>IDWriteFont::GetSimulations</unmanaged-short>
        internal unsafe DXNET.DirectWrite.FontSimulations GetSimulations()
        {
            DXNET.DirectWrite.FontSimulations __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteFontSimulations(this._nativePointer, (*(void ***)this._nativePointer)[10]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontMetrics">No documentation.</param>
        /// <unmanaged>void IDWriteFont::GetMetrics([Out] DWRITE_FONT_METRICS* fontMetrics)</unmanaged>
        /// <unmanaged-short>IDWriteFont::GetMetrics</unmanaged-short>
        internal unsafe void GetMetrics(out DXNET.DirectWrite.FontMetrics fontMetrics)
        {
            fontMetrics = default (DXNET.DirectWrite.FontMetrics);
            fixed (void *fontMetrics_ = &fontMetrics)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, fontMetrics_, (*(void ***)this._nativePointer)[11]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "unicodeValue">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFont::HasCharacter([In] unsigned int unicodeValue,[Out] BOOL* exists)</unmanaged>
        /// <unmanaged-short>IDWriteFont::HasCharacter</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool HasCharacter(System.Int32 unicodeValue)
        {
            DXNET.Mathematics.Interop.RawBool exists;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unicodeValue, &exists, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
            return exists;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFace">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFont::CreateFontFace([Out, Fast] IDWriteFontFace** fontFace)</unmanaged>
        /// <unmanaged-short>IDWriteFont::CreateFontFace</unmanaged-short>
        internal unsafe void CreateFontFace(DXNET.DirectWrite.FontFace fontFace)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontFace_, (*(void ***)this._nativePointer)[13]);
            (fontFace).NativePointer = fontFace_;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("acd16696-8c14-4f5d-877e-fe3fc1d32738")]
    public partial class Font1 : DXNET.DirectWrite.Font
    {
        public Font1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Font1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Font1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMetrics</unmanaged>
        /// <unmanaged-short>GetMetrics</unmanaged-short>
        public DXNET.DirectWrite.FontMetrics1 Metrics
        {
            get
            {
                GetMetrics(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPanose</unmanaged>
        /// <unmanaged-short>GetPanose</unmanaged-short>
        public DXNET.DirectWrite.Panose Panose
        {
            get
            {
                GetPanose(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>IsMonospacedFont</unmanaged>
        /// <unmanaged-short>IsMonospacedFont</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsMonospacedFont
        {
            get => IsMonospacedFont_();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontMetrics">No documentation.</param>
        /// <unmanaged>void IDWriteFont1::GetMetrics([Out] DWRITE_FONT_METRICS1* fontMetrics)</unmanaged>
        /// <unmanaged-short>IDWriteFont1::GetMetrics</unmanaged-short>
        internal unsafe void GetMetrics(out DXNET.DirectWrite.FontMetrics1 fontMetrics)
        {
            fontMetrics = default (DXNET.DirectWrite.FontMetrics1);
            fixed (void *fontMetrics_ = &fontMetrics)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, fontMetrics_, (*(void ***)this._nativePointer)[14]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "anoseRef">No documentation.</param>
        /// <unmanaged>void IDWriteFont1::GetPanose([Out] DWRITE_PANOSE* panose)</unmanaged>
        /// <unmanaged-short>IDWriteFont1::GetPanose</unmanaged-short>
        internal unsafe void GetPanose(out DXNET.DirectWrite.Panose anoseRef)
        {
            DXNET.DirectWrite.Panose.__Native anoseRef_ = default (DXNET.DirectWrite.Panose.__Native);
            anoseRef = default (DXNET.DirectWrite.Panose);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &anoseRef_, (*(void ***)this._nativePointer)[15]);
            anoseRef.__MarshalFrom(ref anoseRef_);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "maxRangeCount">No documentation.</param>
        /// <param name = "unicodeRanges">No documentation.</param>
        /// <param name = "actualRangeCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFont1::GetUnicodeRanges([In] unsigned int maxRangeCount,[Out, Buffer, Optional] DWRITE_UNICODE_RANGE* unicodeRanges,[Out] unsigned int* actualRangeCount)</unmanaged>
        /// <unmanaged-short>IDWriteFont1::GetUnicodeRanges</unmanaged-short>
        public unsafe void GetUnicodeRanges(System.Int32 maxRangeCount, DXNET.DirectWrite.UnicodeRange[] unicodeRanges, out System.Int32 actualRangeCount)
        {
            DXNET.Result __result__;
            fixed (void *actualRangeCount_ = &actualRangeCount)
                fixed (void *unicodeRanges_ = unicodeRanges)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, maxRangeCount, unicodeRanges_, actualRangeCount_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteFont1::IsMonospacedFont()</unmanaged>
        /// <unmanaged-short>IDWriteFont1::IsMonospacedFont</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool IsMonospacedFont_()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[17]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("29748ed6-8c9c-4a6a-be0b-d912e8538944")]
    public partial class Font2 : DXNET.DirectWrite.Font1
    {
        public Font2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Font2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Font2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>IsColorFont</unmanaged>
        /// <unmanaged-short>IsColorFont</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsColorFont
        {
            get => IsColorFont_();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteFont2::IsColorFont()</unmanaged>
        /// <unmanaged-short>IDWriteFont2::IsColorFont</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool IsColorFont_()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[18]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("29748ED6-8C9C-4A6A-BE0B-D912E8538944")]
    public partial class Font3 : DXNET.DirectWrite.Font2
    {
        public Font3(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Font3(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Font3(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontFaceReference</unmanaged>
        /// <unmanaged-short>GetFontFaceReference</unmanaged-short>
        public DXNET.DirectWrite.FontFaceReference FontFaceReference
        {
            get
            {
                GetFontFaceReference(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetLocality</unmanaged>
        /// <unmanaged-short>GetLocality</unmanaged-short>
        public DXNET.DirectWrite.Locality Locality
        {
            get => GetLocality();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFace">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFont3::CreateFontFace([Out] IDWriteFontFace3** fontFace)</unmanaged>
        /// <unmanaged-short>IDWriteFont3::CreateFontFace</unmanaged-short>
        public unsafe void CreateFontFace(out DXNET.DirectWrite.FontFace3 fontFace)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontFace_, (*(void ***)this._nativePointer)[19]);
            if (fontFace_ != System.IntPtr.Zero)
                fontFace = new DXNET.DirectWrite.FontFace3(fontFace_);
            else
                fontFace = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "font">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteFont3::Equals([In] IDWriteFont* font)</unmanaged>
        /// <unmanaged-short>IDWriteFont3::Equals</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool Equals(DXNET.DirectWrite.Font font)
        {
            System.IntPtr font_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawBool __result__;
            font_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.Font>(font);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (void *)font_, (*(void ***)this._nativePointer)[20]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFaceReference">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFont3::GetFontFaceReference([Out] IDWriteFontFaceReference** fontFaceReference)</unmanaged>
        /// <unmanaged-short>IDWriteFont3::GetFontFaceReference</unmanaged-short>
        internal unsafe void GetFontFaceReference(out DXNET.DirectWrite.FontFaceReference fontFaceReference)
        {
            System.IntPtr fontFaceReference_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontFaceReference_, (*(void ***)this._nativePointer)[21]);
            if (fontFaceReference_ != System.IntPtr.Zero)
                fontFaceReference = new DXNET.DirectWrite.FontFaceReference(fontFaceReference_);
            else
                fontFaceReference = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "unicodeValue">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteFont3::HasCharacter([In] unsigned int unicodeValue)</unmanaged>
        /// <unmanaged-short>IDWriteFont3::HasCharacter</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool HasCharacter(System.Int32 unicodeValue)
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, unicodeValue, (*(void ***)this._nativePointer)[22]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_LOCALITY IDWriteFont3::GetLocality()</unmanaged>
        /// <unmanaged-short>IDWriteFont3::GetLocality</unmanaged-short>
        internal unsafe DXNET.DirectWrite.Locality GetLocality()
        {
            DXNET.DirectWrite.Locality __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteLocality(this._nativePointer, (*(void ***)this._nativePointer)[23]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a84cee02-3eea-4eee-a827-87c1a02a0fcc")]
    public partial class FontCollection : DXNET.ComObject
    {
        public FontCollection(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontCollection(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontCollection(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontFamilyCount</unmanaged>
        /// <unmanaged-short>GetFontFamilyCount</unmanaged-short>
        public System.Int32 FontFamilyCount
        {
            get => GetFontFamilyCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDWriteFontCollection::GetFontFamilyCount()</unmanaged>
        /// <unmanaged-short>IDWriteFontCollection::GetFontFamilyCount</unmanaged-short>
        internal unsafe System.Int32 GetFontFamilyCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontCollection::GetFontFamily([In] unsigned int index,[Out] IDWriteFontFamily** fontFamily)</unmanaged>
        /// <unmanaged-short>IDWriteFontCollection::GetFontFamily</unmanaged-short>
        public unsafe DXNET.DirectWrite.FontFamily GetFontFamily(System.Int32 index)
        {
            DXNET.DirectWrite.FontFamily fontFamily;
            System.IntPtr fontFamily_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, &fontFamily_, (*(void ***)this._nativePointer)[4]);
            if (fontFamily_ != System.IntPtr.Zero)
                fontFamily = new DXNET.DirectWrite.FontFamily(fontFamily_);
            else
                fontFamily = null;
            __result__.CheckError();
            return fontFamily;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "familyName">No documentation.</param>
        /// <param name = "index">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontCollection::FindFamilyName([In] const wchar_t* familyName,[Out] unsigned int* index,[Out] BOOL* exists)</unmanaged>
        /// <unmanaged-short>IDWriteFontCollection::FindFamilyName</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool FindFamilyName(System.String familyName, out System.Int32 index)
        {
            DXNET.Mathematics.Interop.RawBool exists;
            DXNET.Result __result__;
            fixed (void *index_ = &index)
                fixed (char *familyName_ = familyName)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)familyName_, index_, &exists, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
            return exists;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFace">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontCollection::GetFontFromFontFace([In] IDWriteFontFace* fontFace,[Out] IDWriteFont** font)</unmanaged>
        /// <unmanaged-short>IDWriteFontCollection::GetFontFromFontFace</unmanaged-short>
        public unsafe DXNET.DirectWrite.Font GetFontFromFontFace(DXNET.DirectWrite.FontFace fontFace)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.DirectWrite.Font font;
            System.IntPtr font_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFace_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFace>(fontFace);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFace_, &font_, (*(void ***)this._nativePointer)[6]);
            if (font_ != System.IntPtr.Zero)
                font = new DXNET.DirectWrite.Font(font_);
            else
                font = null;
            __result__.CheckError();
            return font;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("53585141-D9F8-4095-8321-D73CF6BD116C")]
    public partial class FontCollection1 : DXNET.DirectWrite.FontCollection
    {
        public FontCollection1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontCollection1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontCollection1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontSet</unmanaged>
        /// <unmanaged-short>GetFontSet</unmanaged-short>
        public DXNET.DirectWrite.FontSet FontSet
        {
            get
            {
                GetFontSet(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontSet">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontCollection1::GetFontSet([Out] IDWriteFontSet** fontSet)</unmanaged>
        /// <unmanaged-short>IDWriteFontCollection1::GetFontSet</unmanaged-short>
        internal unsafe void GetFontSet(out DXNET.DirectWrite.FontSet fontSet)
        {
            System.IntPtr fontSet_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontSet_, (*(void ***)this._nativePointer)[7]);
            if (fontSet_ != System.IntPtr.Zero)
                fontSet = new DXNET.DirectWrite.FontSet(fontSet_);
            else
                fontSet = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "fontFamily">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontCollection1::GetFontFamily([In] unsigned int index,[Out] IDWriteFontFamily1** fontFamily)</unmanaged>
        /// <unmanaged-short>IDWriteFontCollection1::GetFontFamily</unmanaged-short>
        public unsafe void GetFontFamily(System.Int32 index, out DXNET.DirectWrite.FontFamily1 fontFamily)
        {
            System.IntPtr fontFamily_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, &fontFamily_, (*(void ***)this._nativePointer)[8]);
            if (fontFamily_ != System.IntPtr.Zero)
                fontFamily = new DXNET.DirectWrite.FontFamily1(fontFamily_);
            else
                fontFamily = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("cca920e4-52f0-492b-bfa8-29c72ee0a468")]
    public partial interface FontCollectionLoader : DXNET.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("B06FE5B9-43EC-4393-881B-DBE4DC72FDA7")]
    public partial class FontDownloadListener : DXNET.ComObject
    {
        public FontDownloadListener(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontDownloadListener(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontDownloadListener(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "downloadQueue">No documentation.</param>
        /// <param name = "context">No documentation.</param>
        /// <param name = "downloadResult">No documentation.</param>
        /// <unmanaged>void IDWriteFontDownloadListener::DownloadCompleted([In] IDWriteFontDownloadQueue* downloadQueue,[In, Optional] IUnknown* context,[In] HRESULT downloadResult)</unmanaged>
        /// <unmanaged-short>IDWriteFontDownloadListener::DownloadCompleted</unmanaged-short>
        public unsafe void DownloadCompleted(DXNET.DirectWrite.FontDownloadQueue downloadQueue, DXNET.IUnknown context, DXNET.Result downloadResult)
        {
            System.IntPtr downloadQueue_ = System.IntPtr.Zero;
            System.IntPtr context_ = System.IntPtr.Zero;
            downloadQueue_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontDownloadQueue>(downloadQueue);
            context_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(context);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid0(this._nativePointer, (void *)downloadQueue_, (void *)context_, downloadResult, (*(void ***)this._nativePointer)[3]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("B71E6052-5AEA-4FA3-832E-F60D431F7E91")]
    public partial class FontDownloadQueue : DXNET.ComObject
    {
        public FontDownloadQueue(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontDownloadQueue(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontDownloadQueue(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>IsEmpty</unmanaged>
        /// <unmanaged-short>IsEmpty</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsEmpty
        {
            get => IsEmpty_();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetGenerationCount</unmanaged>
        /// <unmanaged-short>GetGenerationCount</unmanaged-short>
        public System.Int64 GenerationCount
        {
            get => GetGenerationCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "listener">No documentation.</param>
        /// <param name = "token">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontDownloadQueue::AddListener([In] IDWriteFontDownloadListener* listener,[Out] unsigned int* token)</unmanaged>
        /// <unmanaged-short>IDWriteFontDownloadQueue::AddListener</unmanaged-short>
        public unsafe void AddListener(DXNET.DirectWrite.FontDownloadListener listener, out System.Int32 token)
        {
            System.IntPtr listener_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            listener_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontDownloadListener>(listener);
            fixed (void *token_ = &token)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)listener_, token_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "token">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontDownloadQueue::RemoveListener([In] unsigned int token)</unmanaged>
        /// <unmanaged-short>IDWriteFontDownloadQueue::RemoveListener</unmanaged-short>
        public unsafe void RemoveListener(System.Int32 token)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, token, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteFontDownloadQueue::IsEmpty()</unmanaged>
        /// <unmanaged-short>IDWriteFontDownloadQueue::IsEmpty</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool IsEmpty_()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "context">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontDownloadQueue::BeginDownload([In, Optional] IUnknown* context)</unmanaged>
        /// <unmanaged-short>IDWriteFontDownloadQueue::BeginDownload</unmanaged-short>
        public unsafe void BeginDownload(DXNET.IUnknown context)
        {
            System.IntPtr context_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            context_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(context);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)context_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontDownloadQueue::CancelDownload()</unmanaged>
        /// <unmanaged-short>IDWriteFontDownloadQueue::CancelDownload</unmanaged-short>
        public unsafe void CancelDownload()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned longlong IDWriteFontDownloadQueue::GetGenerationCount()</unmanaged>
        /// <unmanaged-short>IDWriteFontDownloadQueue::GetGenerationCount</unmanaged-short>
        internal unsafe System.Int64 GetGenerationCount()
        {
            System.Int64 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCalllong(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5f49804d-7024-4d43-bfa9-d25984f53849")]
    public partial class FontFace : DXNET.ComObject
    {
        public FontFace(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontFace(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontFace(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetType</unmanaged>
        /// <unmanaged-short>GetType</unmanaged-short>
        public DXNET.DirectWrite.FontFaceType FaceType
        {
            get => GetFaceType();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetIndex</unmanaged>
        /// <unmanaged-short>GetIndex</unmanaged-short>
        public System.Int32 Index
        {
            get => GetIndex();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSimulations</unmanaged>
        /// <unmanaged-short>GetSimulations</unmanaged-short>
        public DXNET.DirectWrite.FontSimulations Simulations
        {
            get => GetSimulations();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>IsSymbolFont</unmanaged>
        /// <unmanaged-short>IsSymbolFont</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsSymbolFont
        {
            get => IsSymbolFont_();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMetrics</unmanaged>
        /// <unmanaged-short>GetMetrics</unmanaged-short>
        public DXNET.DirectWrite.FontMetrics Metrics
        {
            get
            {
                GetMetrics(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetGlyphCount</unmanaged>
        /// <unmanaged-short>GetGlyphCount</unmanaged-short>
        public System.Int16 GlyphCount
        {
            get => GetGlyphCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_FONT_FACE_TYPE IDWriteFontFace::GetType()</unmanaged>
        /// <unmanaged-short>IDWriteFontFace::GetType</unmanaged-short>
        internal unsafe DXNET.DirectWrite.FontFaceType GetFaceType()
        {
            DXNET.DirectWrite.FontFaceType __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteFontFaceType(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "numberOfFiles">No documentation.</param>
        /// <param name = "fontFiles">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace::GetFiles([InOut] unsigned int* numberOfFiles,[Out, Buffer, Optional] IDWriteFontFile** fontFiles)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace::GetFiles</unmanaged-short>
        internal unsafe void GetFiles(ref System.Int32 numberOfFiles, DXNET.DirectWrite.FontFile[] fontFiles)
        {
            System.IntPtr*fontFiles_;
            fontFiles_ = (System.IntPtr*)0;
            if (fontFiles != null)
            {
                System.IntPtr*_fontFiles = stackalloc System.IntPtr[fontFiles.Length];
                fontFiles_ = _fontFiles;
            }

            DXNET.Result __result__;
            fixed (void *numberOfFiles_ = &numberOfFiles)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, numberOfFiles_, (void *)fontFiles_, (*(void ***)this._nativePointer)[4]);
            if (fontFiles != null)
                for (int i = 0; i < fontFiles.Length; ++i)
                    if ((fontFiles_)[i] != System.IntPtr.Zero)
                        fontFiles[i] = new DXNET.DirectWrite.FontFile((fontFiles_)[i]);
                    else
                        fontFiles[i] = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDWriteFontFace::GetIndex()</unmanaged>
        /// <unmanaged-short>IDWriteFontFace::GetIndex</unmanaged-short>
        internal unsafe System.Int32 GetIndex()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_FONT_SIMULATIONS IDWriteFontFace::GetSimulations()</unmanaged>
        /// <unmanaged-short>IDWriteFontFace::GetSimulations</unmanaged-short>
        internal unsafe DXNET.DirectWrite.FontSimulations GetSimulations()
        {
            DXNET.DirectWrite.FontSimulations __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteFontSimulations(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteFontFace::IsSymbolFont()</unmanaged>
        /// <unmanaged-short>IDWriteFontFace::IsSymbolFont</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool IsSymbolFont_()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFaceMetrics">No documentation.</param>
        /// <unmanaged>void IDWriteFontFace::GetMetrics([Out] DWRITE_FONT_METRICS* fontFaceMetrics)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace::GetMetrics</unmanaged-short>
        internal unsafe void GetMetrics(out DXNET.DirectWrite.FontMetrics fontFaceMetrics)
        {
            fontFaceMetrics = default (DXNET.DirectWrite.FontMetrics);
            fixed (void *fontFaceMetrics_ = &fontFaceMetrics)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, fontFaceMetrics_, (*(void ***)this._nativePointer)[8]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned short IDWriteFontFace::GetGlyphCount()</unmanaged>
        /// <unmanaged-short>IDWriteFontFace::GetGlyphCount</unmanaged-short>
        internal unsafe System.Int16 GetGlyphCount()
        {
            System.Int16 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallshort(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphIndices">No documentation.</param>
        /// <param name = "glyphCount">No documentation.</param>
        /// <param name = "glyphMetrics">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace::GetDesignGlyphMetrics([In, Buffer] const unsigned short* glyphIndices,[In] unsigned int glyphCount,[Out, Buffer] DWRITE_GLYPH_METRICS* glyphMetrics,[In] BOOL isSideways)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace::GetDesignGlyphMetrics</unmanaged-short>
        internal unsafe void GetDesignGlyphMetrics(System.Int16[] glyphIndices, System.Int32 glyphCount, DXNET.DirectWrite.GlyphMetrics[] glyphMetrics, DXNET.Mathematics.Interop.RawBool isSideways)
        {
            DXNET.Result __result__;
            fixed (void *glyphMetrics_ = glyphMetrics)
                fixed (void *glyphIndices_ = glyphIndices)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, glyphIndices_, glyphCount, glyphMetrics_, isSideways, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "codePoints">No documentation.</param>
        /// <param name = "codePointCount">No documentation.</param>
        /// <param name = "glyphIndices">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace::GetGlyphIndicesW([In, Buffer] const unsigned int* codePoints,[In] unsigned int codePointCount,[Out, Buffer] unsigned short* glyphIndices)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace::GetGlyphIndicesW</unmanaged-short>
        internal unsafe void GetGlyphIndices(System.Int32[] codePoints, System.Int32 codePointCount, System.Int16[] glyphIndices)
        {
            DXNET.Result __result__;
            fixed (void *glyphIndices_ = glyphIndices)
                fixed (void *codePoints_ = codePoints)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, codePoints_, codePointCount, glyphIndices_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "openTypeTableTag">No documentation.</param>
        /// <param name = "tableData">No documentation.</param>
        /// <param name = "tableSize">No documentation.</param>
        /// <param name = "tableContext">No documentation.</param>
        /// <param name = "exists">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace::TryGetFontTable([In] unsigned int openTypeTableTag,[Out, Buffer] const void** tableData,[Out] unsigned int* tableSize,[Out] void** tableContext,[Out] BOOL* exists)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace::TryGetFontTable</unmanaged-short>
        internal unsafe void TryGetFontTable(System.Int32 openTypeTableTag, System.IntPtr tableData, out System.Int32 tableSize, out System.IntPtr tableContext, out DXNET.Mathematics.Interop.RawBool exists)
        {
            exists = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *exists_ = &exists)
                fixed (void *tableContext_ = &tableContext)
                    fixed (void *tableSize_ = &tableSize)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, openTypeTableTag, (void *)tableData, tableSize_, tableContext_, exists_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "tableContext">No documentation.</param>
        /// <unmanaged>void IDWriteFontFace::ReleaseFontTable([In] void* tableContext)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace::ReleaseFontTable</unmanaged-short>
        public unsafe void ReleaseFontTable(System.IntPtr tableContext)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)tableContext, (*(void ***)this._nativePointer)[13]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "emSize">No documentation.</param>
        /// <param name = "glyphIndices">No documentation.</param>
        /// <param name = "glyphAdvances">No documentation.</param>
        /// <param name = "glyphOffsets">No documentation.</param>
        /// <param name = "glyphCount">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <param name = "isRightToLeft">No documentation.</param>
        /// <param name = "geometrySink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace::GetGlyphRunOutline([In] float emSize,[In, Buffer] const unsigned short* glyphIndices,[In, Buffer, Optional] const float* glyphAdvances,[In, Buffer, Optional] const DWRITE_GLYPH_OFFSET* glyphOffsets,[In] unsigned int glyphCount,[In] BOOL isSideways,[In] BOOL isRightToLeft,[In] ID2D1SimplifiedGeometrySink* geometrySink)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace::GetGlyphRunOutline</unmanaged-short>
        public unsafe void GetGlyphRunOutline(System.Single emSize, System.Int16[] glyphIndices, System.Single[] glyphAdvances, DXNET.DirectWrite.GlyphOffset[] glyphOffsets, System.Int32 glyphCount, DXNET.Mathematics.Interop.RawBool isSideways, DXNET.Mathematics.Interop.RawBool isRightToLeft, DXNET.Direct2D1.SimplifiedGeometrySink geometrySink)
        {
            System.IntPtr geometrySink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            geometrySink_ = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.SimplifiedGeometrySink>(geometrySink);
            fixed (void *glyphOffsets_ = glyphOffsets)
                fixed (void *glyphAdvances_ = glyphAdvances)
                    fixed (void *glyphIndices_ = glyphIndices)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, emSize, glyphIndices_, glyphAdvances_, glyphOffsets_, glyphCount, isSideways, isRightToLeft, (void *)geometrySink_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "emSize">No documentation.</param>
        /// <param name = "pixelsPerDip">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <param name = "renderingParams">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace::GetRecommendedRenderingMode([In] float emSize,[In] float pixelsPerDip,[In] DWRITE_MEASURING_MODE measuringMode,[In] IDWriteRenderingParams* renderingParams,[Out] DWRITE_RENDERING_MODE* renderingMode)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace::GetRecommendedRenderingMode</unmanaged-short>
        public unsafe DXNET.DirectWrite.RenderingMode GetRecommendedRenderingMode(System.Single emSize, System.Single pixelsPerDip, DXNET.Direct2D1.MeasuringMode measuringMode, DXNET.DirectWrite.RenderingParams renderingParams)
        {
            System.IntPtr renderingParams_ = System.IntPtr.Zero;
            DXNET.DirectWrite.RenderingMode renderingMode;
            DXNET.Result __result__;
            renderingParams_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.RenderingParams>(renderingParams);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, emSize, pixelsPerDip, unchecked ((System.Int32)measuringMode), (void *)renderingParams_, &renderingMode, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
            return renderingMode;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "emSize">No documentation.</param>
        /// <param name = "pixelsPerDip">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace::GetGdiCompatibleMetrics([In] float emSize,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[Out] DWRITE_FONT_METRICS* fontFaceMetrics)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace::GetGdiCompatibleMetrics</unmanaged-short>
        public unsafe DXNET.DirectWrite.FontMetrics GetGdiCompatibleMetrics(System.Single emSize, System.Single pixelsPerDip, DXNET.Mathematics.Interop.RawMatrix3x2? transform)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 transform_;
            DXNET.DirectWrite.FontMetrics fontFaceMetrics;
            DXNET.Result __result__;
            if (transform != null)
                transform_ = transform.Value;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, emSize, pixelsPerDip, transform == null ? (void *)0 : &transform_, &fontFaceMetrics, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
            return fontFaceMetrics;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "emSize">No documentation.</param>
        /// <param name = "pixelsPerDip">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <param name = "useGdiNatural">No documentation.</param>
        /// <param name = "glyphIndices">No documentation.</param>
        /// <param name = "glyphCount">No documentation.</param>
        /// <param name = "glyphMetrics">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace::GetGdiCompatibleGlyphMetrics([In] float emSize,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[In] BOOL useGdiNatural,[In, Buffer] const unsigned short* glyphIndices,[In] unsigned int glyphCount,[Out, Buffer] DWRITE_GLYPH_METRICS* glyphMetrics,[In] BOOL isSideways)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace::GetGdiCompatibleGlyphMetrics</unmanaged-short>
        internal unsafe void GetGdiCompatibleGlyphMetrics(System.Single emSize, System.Single pixelsPerDip, DXNET.Mathematics.Interop.RawMatrix3x2? transform, DXNET.Mathematics.Interop.RawBool useGdiNatural, System.Int16[] glyphIndices, System.Int32 glyphCount, DXNET.DirectWrite.GlyphMetrics[] glyphMetrics, DXNET.Mathematics.Interop.RawBool isSideways)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 transform_;
            DXNET.Result __result__;
            if (transform != null)
                transform_ = transform.Value;
            fixed (void *glyphMetrics_ = glyphMetrics)
                fixed (void *glyphIndices_ = glyphIndices)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, emSize, pixelsPerDip, transform == null ? (void *)0 : &transform_, useGdiNatural, glyphIndices_, glyphCount, glyphMetrics_, isSideways, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a71efdb4-9fdb-4838-ad90-cfc3be8c3daf")]
    public partial class FontFace1 : DXNET.DirectWrite.FontFace
    {
        public FontFace1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontFace1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontFace1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMetrics</unmanaged>
        /// <unmanaged-short>GetMetrics</unmanaged-short>
        public DXNET.DirectWrite.FontMetrics1 Metrics
        {
            get
            {
                GetMetrics(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetCaretMetrics</unmanaged>
        /// <unmanaged-short>GetCaretMetrics</unmanaged-short>
        public DXNET.DirectWrite.CaretMetrics CaretMetrics
        {
            get
            {
                GetCaretMetrics(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>IsMonospacedFont</unmanaged>
        /// <unmanaged-short>IsMonospacedFont</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsMonospacedFont
        {
            get => IsMonospacedFont_();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontMetrics">No documentation.</param>
        /// <unmanaged>void IDWriteFontFace1::GetMetrics([Out] DWRITE_FONT_METRICS1* fontMetrics)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace1::GetMetrics</unmanaged-short>
        internal unsafe void GetMetrics(out DXNET.DirectWrite.FontMetrics1 fontMetrics)
        {
            fontMetrics = default (DXNET.DirectWrite.FontMetrics1);
            fixed (void *fontMetrics_ = &fontMetrics)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, fontMetrics_, (*(void ***)this._nativePointer)[18]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "emSize">No documentation.</param>
        /// <param name = "pixelsPerDip">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <param name = "fontMetrics">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace1::GetGdiCompatibleMetrics([In] float emSize,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[Out] DWRITE_FONT_METRICS1* fontMetrics)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace1::GetGdiCompatibleMetrics</unmanaged-short>
        public unsafe void GetGdiCompatibleMetrics(System.Single emSize, System.Single pixelsPerDip, DXNET.Mathematics.Interop.RawMatrix3x2? transform, out DXNET.DirectWrite.FontMetrics1 fontMetrics)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 transform_;
            fontMetrics = default (DXNET.DirectWrite.FontMetrics1);
            DXNET.Result __result__;
            if (transform != null)
                transform_ = transform.Value;
            fixed (void *fontMetrics_ = &fontMetrics)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, emSize, pixelsPerDip, transform == null ? (void *)0 : &transform_, fontMetrics_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "caretMetrics">No documentation.</param>
        /// <unmanaged>void IDWriteFontFace1::GetCaretMetrics([Out] DWRITE_CARET_METRICS* caretMetrics)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace1::GetCaretMetrics</unmanaged-short>
        internal unsafe void GetCaretMetrics(out DXNET.DirectWrite.CaretMetrics caretMetrics)
        {
            caretMetrics = default (DXNET.DirectWrite.CaretMetrics);
            fixed (void *caretMetrics_ = &caretMetrics)
                DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, caretMetrics_, (*(void ***)this._nativePointer)[20]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "maxRangeCount">No documentation.</param>
        /// <param name = "unicodeRanges">No documentation.</param>
        /// <param name = "actualRangeCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace1::GetUnicodeRanges([In] unsigned int maxRangeCount,[Out, Buffer, Optional] DWRITE_UNICODE_RANGE* unicodeRanges,[Out] unsigned int* actualRangeCount)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace1::GetUnicodeRanges</unmanaged-short>
        public unsafe void GetUnicodeRanges(System.Int32 maxRangeCount, DXNET.DirectWrite.UnicodeRange[] unicodeRanges, out System.Int32 actualRangeCount)
        {
            DXNET.Result __result__;
            fixed (void *actualRangeCount_ = &actualRangeCount)
                fixed (void *unicodeRanges_ = unicodeRanges)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, maxRangeCount, unicodeRanges_, actualRangeCount_, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteFontFace1::IsMonospacedFont()</unmanaged>
        /// <unmanaged-short>IDWriteFontFace1::IsMonospacedFont</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool IsMonospacedFont_()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[22]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphCount">No documentation.</param>
        /// <param name = "glyphIndices">No documentation.</param>
        /// <param name = "glyphAdvances">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace1::GetDesignGlyphAdvances([In] unsigned int glyphCount,[In, Buffer] const unsigned short* glyphIndices,[Out, Buffer] int* glyphAdvances,[In] BOOL isSideways)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace1::GetDesignGlyphAdvances</unmanaged-short>
        public unsafe void GetDesignGlyphAdvances(System.Int32 glyphCount, System.Int16[] glyphIndices, System.Int32[] glyphAdvances, DXNET.Mathematics.Interop.RawBool isSideways)
        {
            DXNET.Result __result__;
            fixed (void *glyphAdvances_ = glyphAdvances)
                fixed (void *glyphIndices_ = glyphIndices)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, glyphCount, glyphIndices_, glyphAdvances_, isSideways, (*(void ***)this._nativePointer)[23]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "emSize">No documentation.</param>
        /// <param name = "pixelsPerDip">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <param name = "useGdiNatural">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <param name = "glyphCount">No documentation.</param>
        /// <param name = "glyphIndices">No documentation.</param>
        /// <param name = "glyphAdvances">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace1::GetGdiCompatibleGlyphAdvances([In] float emSize,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[In] BOOL useGdiNatural,[In] BOOL isSideways,[In] unsigned int glyphCount,[In, Buffer] const unsigned short* glyphIndices,[Out, Buffer] int* glyphAdvances)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace1::GetGdiCompatibleGlyphAdvances</unmanaged-short>
        public unsafe void GetGdiCompatibleGlyphAdvances(System.Single emSize, System.Single pixelsPerDip, DXNET.Mathematics.Interop.RawMatrix3x2? transform, DXNET.Mathematics.Interop.RawBool useGdiNatural, DXNET.Mathematics.Interop.RawBool isSideways, System.Int32 glyphCount, System.Int16[] glyphIndices, System.Int32[] glyphAdvances)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 transform_;
            DXNET.Result __result__;
            if (transform != null)
                transform_ = transform.Value;
            fixed (void *glyphAdvances_ = glyphAdvances)
                fixed (void *glyphIndices_ = glyphIndices)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, emSize, pixelsPerDip, transform == null ? (void *)0 : &transform_, useGdiNatural, isSideways, glyphCount, glyphIndices_, glyphAdvances_, (*(void ***)this._nativePointer)[24]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphCount">No documentation.</param>
        /// <param name = "glyphIndices">No documentation.</param>
        /// <param name = "glyphAdvanceAdjustments">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace1::GetKerningPairAdjustments([In] unsigned int glyphCount,[In, Buffer] const unsigned short* glyphIndices,[Out, Buffer] int* glyphAdvanceAdjustments)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace1::GetKerningPairAdjustments</unmanaged-short>
        public unsafe void GetKerningPairAdjustments(System.Int32 glyphCount, System.Int16[] glyphIndices, System.Int32[] glyphAdvanceAdjustments)
        {
            DXNET.Result __result__;
            fixed (void *glyphAdvanceAdjustments_ = glyphAdvanceAdjustments)
                fixed (void *glyphIndices_ = glyphIndices)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, glyphCount, glyphIndices_, glyphAdvanceAdjustments_, (*(void ***)this._nativePointer)[25]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteFontFace1::HasKerningPairs()</unmanaged>
        /// <unmanaged-short>IDWriteFontFace1::HasKerningPairs</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool HasKerningPairs()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[26]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontEmSize">No documentation.</param>
        /// <param name = "dpiX">No documentation.</param>
        /// <param name = "dpiY">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <param name = "outlineThreshold">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <param name = "renderingMode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace1::GetRecommendedRenderingMode([In] float fontEmSize,[In] float dpiX,[In] float dpiY,[In, Optional] const DWRITE_MATRIX* transform,[In] BOOL isSideways,[In] DWRITE_OUTLINE_THRESHOLD outlineThreshold,[In] DWRITE_MEASURING_MODE measuringMode,[Out] DWRITE_RENDERING_MODE* renderingMode)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace1::GetRecommendedRenderingMode</unmanaged-short>
        public unsafe void GetRecommendedRenderingMode(System.Single fontEmSize, System.Single dpiX, System.Single dpiY, DXNET.Mathematics.Interop.RawMatrix3x2? transform, DXNET.Mathematics.Interop.RawBool isSideways, DXNET.DirectWrite.OutlineThreshold outlineThreshold, DXNET.Direct2D1.MeasuringMode measuringMode, out DXNET.DirectWrite.RenderingMode renderingMode)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 transform_;
            DXNET.Result __result__;
            if (transform != null)
                transform_ = transform.Value;
            fixed (void *renderingMode_ = &renderingMode)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, fontEmSize, dpiX, dpiY, transform == null ? (void *)0 : &transform_, isSideways, unchecked ((System.Int32)outlineThreshold), unchecked ((System.Int32)measuringMode), renderingMode_, (*(void ***)this._nativePointer)[27]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphCount">No documentation.</param>
        /// <param name = "nominalGlyphIndices">No documentation.</param>
        /// <param name = "verticalGlyphIndices">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace1::GetVerticalGlyphVariants([In] unsigned int glyphCount,[In, Buffer] const unsigned short* nominalGlyphIndices,[Out, Buffer] unsigned short* verticalGlyphIndices)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace1::GetVerticalGlyphVariants</unmanaged-short>
        public unsafe void GetVerticalGlyphVariants(System.Int32 glyphCount, System.Int16[] nominalGlyphIndices, System.Int16[] verticalGlyphIndices)
        {
            DXNET.Result __result__;
            fixed (void *verticalGlyphIndices_ = verticalGlyphIndices)
                fixed (void *nominalGlyphIndices_ = nominalGlyphIndices)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, glyphCount, nominalGlyphIndices_, verticalGlyphIndices_, (*(void ***)this._nativePointer)[28]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteFontFace1::HasVerticalGlyphVariants()</unmanaged>
        /// <unmanaged-short>IDWriteFontFace1::HasVerticalGlyphVariants</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool HasVerticalGlyphVariants()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[29]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("d8b768ff-64bc-4e66-982b-ec8e87f693f7")]
    public partial class FontFace2 : DXNET.DirectWrite.FontFace1
    {
        public FontFace2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontFace2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontFace2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>IsColorFont</unmanaged>
        /// <unmanaged-short>IsColorFont</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsColorFont
        {
            get => IsColorFont_();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetColorPaletteCount</unmanaged>
        /// <unmanaged-short>GetColorPaletteCount</unmanaged-short>
        public System.Int32 ColorPaletteCount
        {
            get => GetColorPaletteCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPaletteEntryCount</unmanaged>
        /// <unmanaged-short>GetPaletteEntryCount</unmanaged-short>
        public System.Int32 PaletteEntryCount
        {
            get => GetPaletteEntryCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteFontFace2::IsColorFont()</unmanaged>
        /// <unmanaged-short>IDWriteFontFace2::IsColorFont</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool IsColorFont_()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[30]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDWriteFontFace2::GetColorPaletteCount()</unmanaged>
        /// <unmanaged-short>IDWriteFontFace2::GetColorPaletteCount</unmanaged-short>
        internal unsafe System.Int32 GetColorPaletteCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[31]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDWriteFontFace2::GetPaletteEntryCount()</unmanaged>
        /// <unmanaged-short>IDWriteFontFace2::GetPaletteEntryCount</unmanaged-short>
        internal unsafe System.Int32 GetPaletteEntryCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[32]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "colorPaletteIndex">No documentation.</param>
        /// <param name = "firstEntryIndex">No documentation.</param>
        /// <param name = "entryCount">No documentation.</param>
        /// <param name = "aletteEntriesRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace2::GetPaletteEntries([In] unsigned int colorPaletteIndex,[In] unsigned int firstEntryIndex,[In] unsigned int entryCount,[Out, Buffer] D3DCOLORVALUE* paletteEntries)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace2::GetPaletteEntries</unmanaged-short>
        public unsafe void GetPaletteEntries(System.Int32 colorPaletteIndex, System.Int32 firstEntryIndex, System.Int32 entryCount, DXNET.Mathematics.Interop.RawColor4[] aletteEntriesRef)
        {
            DXNET.Result __result__;
            fixed (void *aletteEntriesRef_ = aletteEntriesRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, colorPaletteIndex, firstEntryIndex, entryCount, aletteEntriesRef_, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontEmSize">No documentation.</param>
        /// <param name = "dpiX">No documentation.</param>
        /// <param name = "dpiY">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <param name = "outlineThreshold">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <param name = "renderingParams">No documentation.</param>
        /// <param name = "renderingMode">No documentation.</param>
        /// <param name = "gridFitMode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace2::GetRecommendedRenderingMode([In] float fontEmSize,[In] float dpiX,[In] float dpiY,[In, Optional] const DWRITE_MATRIX* transform,[In] BOOL isSideways,[In] DWRITE_OUTLINE_THRESHOLD outlineThreshold,[In] DWRITE_MEASURING_MODE measuringMode,[In, Optional] IDWriteRenderingParams* renderingParams,[Out] DWRITE_RENDERING_MODE* renderingMode,[Out] DWRITE_GRID_FIT_MODE* gridFitMode)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace2::GetRecommendedRenderingMode</unmanaged-short>
        public unsafe void GetRecommendedRenderingMode(System.Single fontEmSize, System.Single dpiX, System.Single dpiY, DXNET.Mathematics.Interop.RawMatrix3x2? transform, DXNET.Mathematics.Interop.RawBool isSideways, DXNET.DirectWrite.OutlineThreshold outlineThreshold, DXNET.Direct2D1.MeasuringMode measuringMode, DXNET.DirectWrite.RenderingParams renderingParams, out DXNET.DirectWrite.RenderingMode renderingMode, out DXNET.DirectWrite.GridFitMode gridFitMode)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 transform_;
            System.IntPtr renderingParams_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (transform != null)
                transform_ = transform.Value;
            renderingParams_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.RenderingParams>(renderingParams);
            fixed (void *gridFitMode_ = &gridFitMode)
                fixed (void *renderingMode_ = &renderingMode)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, fontEmSize, dpiX, dpiY, transform == null ? (void *)0 : &transform_, isSideways, unchecked ((System.Int32)outlineThreshold), unchecked ((System.Int32)measuringMode), (void *)renderingParams_, renderingMode_, gridFitMode_, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("D37D7598-09BE-4222-A236-2081341CC1F2")]
    public partial class FontFace3 : DXNET.DirectWrite.FontFace2
    {
        public FontFace3(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontFace3(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontFace3(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontFaceReference</unmanaged>
        /// <unmanaged-short>GetFontFaceReference</unmanaged-short>
        public DXNET.DirectWrite.FontFaceReference FontFaceReference
        {
            get
            {
                GetFontFaceReference(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPanose</unmanaged>
        /// <unmanaged-short>GetPanose</unmanaged-short>
        public DXNET.DirectWrite.Panose Panose
        {
            get
            {
                GetPanose(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetWeight</unmanaged>
        /// <unmanaged-short>GetWeight</unmanaged-short>
        public DXNET.DirectWrite.FontWeight Weight
        {
            get => GetWeight();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStretch</unmanaged>
        /// <unmanaged-short>GetStretch</unmanaged-short>
        public DXNET.DirectWrite.FontStretch Stretch
        {
            get => GetStretch();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetStyle</unmanaged>
        /// <unmanaged-short>GetStyle</unmanaged-short>
        public DXNET.DirectWrite.FontStyle Style
        {
            get => GetStyle();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFamilyNames</unmanaged>
        /// <unmanaged-short>GetFamilyNames</unmanaged-short>
        public DXNET.DirectWrite.LocalizedStrings FamilyNames
        {
            get
            {
                GetFamilyNames(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFaceNames</unmanaged>
        /// <unmanaged-short>GetFaceNames</unmanaged-short>
        public DXNET.DirectWrite.LocalizedStrings FaceNames
        {
            get
            {
                GetFaceNames(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFaceReference">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace3::GetFontFaceReference([Out] IDWriteFontFaceReference** fontFaceReference)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace3::GetFontFaceReference</unmanaged-short>
        internal unsafe void GetFontFaceReference(out DXNET.DirectWrite.FontFaceReference fontFaceReference)
        {
            System.IntPtr fontFaceReference_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontFaceReference_, (*(void ***)this._nativePointer)[35]);
            if (fontFaceReference_ != System.IntPtr.Zero)
                fontFaceReference = new DXNET.DirectWrite.FontFaceReference(fontFaceReference_);
            else
                fontFaceReference = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "anoseRef">No documentation.</param>
        /// <unmanaged>void IDWriteFontFace3::GetPanose([Out] DWRITE_PANOSE* panose)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace3::GetPanose</unmanaged-short>
        internal unsafe void GetPanose(out DXNET.DirectWrite.Panose anoseRef)
        {
            DXNET.DirectWrite.Panose.__Native anoseRef_ = default (DXNET.DirectWrite.Panose.__Native);
            anoseRef = default (DXNET.DirectWrite.Panose);
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, &anoseRef_, (*(void ***)this._nativePointer)[36]);
            anoseRef.__MarshalFrom(ref anoseRef_);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_FONT_WEIGHT IDWriteFontFace3::GetWeight()</unmanaged>
        /// <unmanaged-short>IDWriteFontFace3::GetWeight</unmanaged-short>
        internal unsafe DXNET.DirectWrite.FontWeight GetWeight()
        {
            DXNET.DirectWrite.FontWeight __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteFontWeight(this._nativePointer, (*(void ***)this._nativePointer)[37]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_FONT_STRETCH IDWriteFontFace3::GetStretch()</unmanaged>
        /// <unmanaged-short>IDWriteFontFace3::GetStretch</unmanaged-short>
        internal unsafe DXNET.DirectWrite.FontStretch GetStretch()
        {
            DXNET.DirectWrite.FontStretch __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteFontStretch(this._nativePointer, (*(void ***)this._nativePointer)[38]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_FONT_STYLE IDWriteFontFace3::GetStyle()</unmanaged>
        /// <unmanaged-short>IDWriteFontFace3::GetStyle</unmanaged-short>
        internal unsafe DXNET.DirectWrite.FontStyle GetStyle()
        {
            DXNET.DirectWrite.FontStyle __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteFontStyle(this._nativePointer, (*(void ***)this._nativePointer)[39]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "names">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace3::GetFamilyNames([Out] IDWriteLocalizedStrings** names)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace3::GetFamilyNames</unmanaged-short>
        internal unsafe void GetFamilyNames(out DXNET.DirectWrite.LocalizedStrings names)
        {
            System.IntPtr names_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &names_, (*(void ***)this._nativePointer)[40]);
            if (names_ != System.IntPtr.Zero)
                names = new DXNET.DirectWrite.LocalizedStrings(names_);
            else
                names = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "names">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace3::GetFaceNames([Out] IDWriteLocalizedStrings** names)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace3::GetFaceNames</unmanaged-short>
        internal unsafe void GetFaceNames(out DXNET.DirectWrite.LocalizedStrings names)
        {
            System.IntPtr names_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &names_, (*(void ***)this._nativePointer)[41]);
            if (names_ != System.IntPtr.Zero)
                names = new DXNET.DirectWrite.LocalizedStrings(names_);
            else
                names = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "informationalStringID">No documentation.</param>
        /// <param name = "informationalStrings">No documentation.</param>
        /// <param name = "exists">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace3::GetInformationalStrings([In] DWRITE_INFORMATIONAL_STRING_ID informationalStringID,[Out, Optional] IDWriteLocalizedStrings** informationalStrings,[Out] BOOL* exists)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace3::GetInformationalStrings</unmanaged-short>
        public unsafe void GetInformationalStrings(DXNET.DirectWrite.InformationalStringId informationalStringID, out DXNET.DirectWrite.LocalizedStrings informationalStrings, out DXNET.Mathematics.Interop.RawBool exists)
        {
            System.IntPtr informationalStrings_ = System.IntPtr.Zero;
            exists = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *exists_ = &exists)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)informationalStringID), &informationalStrings_, exists_, (*(void ***)this._nativePointer)[42]);
            if (informationalStrings_ != System.IntPtr.Zero)
                informationalStrings = new DXNET.DirectWrite.LocalizedStrings(informationalStrings_);
            else
                informationalStrings = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "unicodeValue">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteFontFace3::HasCharacter([In] unsigned int unicodeValue)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace3::HasCharacter</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool HasCharacter(System.Int32 unicodeValue)
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, unicodeValue, (*(void ***)this._nativePointer)[43]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontEmSize">No documentation.</param>
        /// <param name = "dpiX">No documentation.</param>
        /// <param name = "dpiY">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <param name = "outlineThreshold">No documentation.</param>
        /// <param name = "measuringMode">No documentation.</param>
        /// <param name = "renderingParams">No documentation.</param>
        /// <param name = "renderingMode">No documentation.</param>
        /// <param name = "gridFitMode">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace3::GetRecommendedRenderingMode([In] float fontEmSize,[In] float dpiX,[In] float dpiY,[In, Optional] const DWRITE_MATRIX* transform,[In] BOOL isSideways,[In] DWRITE_OUTLINE_THRESHOLD outlineThreshold,[In] DWRITE_MEASURING_MODE measuringMode,[In, Optional] IDWriteRenderingParams* renderingParams,[Out] DWRITE_RENDERING_MODE1* renderingMode,[Out] DWRITE_GRID_FIT_MODE* gridFitMode)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace3::GetRecommendedRenderingMode</unmanaged-short>
        public unsafe void GetRecommendedRenderingMode(System.Single fontEmSize, System.Single dpiX, System.Single dpiY, DXNET.Mathematics.Interop.RawMatrix3x2? transform, DXNET.Mathematics.Interop.RawBool isSideways, DXNET.DirectWrite.OutlineThreshold outlineThreshold, DXNET.Direct2D1.MeasuringMode measuringMode, DXNET.DirectWrite.RenderingParams renderingParams, out DXNET.DirectWrite.RenderingMode1 renderingMode, out DXNET.DirectWrite.GridFitMode gridFitMode)
        {
            DXNET.Mathematics.Interop.RawMatrix3x2 transform_;
            System.IntPtr renderingParams_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            if (transform != null)
                transform_ = transform.Value;
            renderingParams_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.RenderingParams>(renderingParams);
            fixed (void *gridFitMode_ = &gridFitMode)
                fixed (void *renderingMode_ = &renderingMode)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, fontEmSize, dpiX, dpiY, transform == null ? (void *)0 : &transform_, isSideways, unchecked ((System.Int32)outlineThreshold), unchecked ((System.Int32)measuringMode), (void *)renderingParams_, renderingMode_, gridFitMode_, (*(void ***)this._nativePointer)[44]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "unicodeValue">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteFontFace3::IsCharacterLocal([In] unsigned int unicodeValue)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace3::IsCharacterLocal</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool IsCharacterLocal(System.Int32 unicodeValue)
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, unicodeValue, (*(void ***)this._nativePointer)[45]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphId">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteFontFace3::IsGlyphLocal([In] unsigned short glyphId)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace3::IsGlyphLocal</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool IsGlyphLocal(System.Int16 glyphId)
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, glyphId, (*(void ***)this._nativePointer)[46]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "characters">No documentation.</param>
        /// <param name = "characterCount">No documentation.</param>
        /// <param name = "enqueueIfNotLocal">No documentation.</param>
        /// <param name = "isLocal">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace3::AreCharactersLocal([In, Buffer] const wchar_t* characters,[In] unsigned int characterCount,[In] BOOL enqueueIfNotLocal,[Out] BOOL* isLocal)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace3::AreCharactersLocal</unmanaged-short>
        public unsafe void AreCharactersLocal(System.String characters, System.Int32 characterCount, DXNET.Mathematics.Interop.RawBool enqueueIfNotLocal, out DXNET.Mathematics.Interop.RawBool isLocal)
        {
            isLocal = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *isLocal_ = &isLocal)
                fixed (char *characters_ = characters)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)characters_, characterCount, enqueueIfNotLocal, isLocal_, (*(void ***)this._nativePointer)[47]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphIndices">No documentation.</param>
        /// <param name = "glyphCount">No documentation.</param>
        /// <param name = "enqueueIfNotLocal">No documentation.</param>
        /// <param name = "isLocal">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace3::AreGlyphsLocal([In, Buffer] const unsigned short* glyphIndices,[In] unsigned int glyphCount,[In] BOOL enqueueIfNotLocal,[Out] BOOL* isLocal)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace3::AreGlyphsLocal</unmanaged-short>
        public unsafe void AreGlyphsLocal(System.Int16[] glyphIndices, System.Int32 glyphCount, DXNET.Mathematics.Interop.RawBool enqueueIfNotLocal, out DXNET.Mathematics.Interop.RawBool isLocal)
        {
            isLocal = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *isLocal_ = &isLocal)
                fixed (void *glyphIndices_ = glyphIndices)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, glyphIndices_, glyphCount, enqueueIfNotLocal, isLocal_, (*(void ***)this._nativePointer)[48]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("27F2A904-4EB8-441D-9678-0563F53E3E2F")]
    public partial class FontFace4 : DXNET.DirectWrite.FontFace3
    {
        public FontFace4(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontFace4(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontFace4(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphId">No documentation.</param>
        /// <param name = "pixelsPerEmFirst">No documentation.</param>
        /// <param name = "pixelsPerEmLast">No documentation.</param>
        /// <param name = "glyphImageFormats">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace4::GetGlyphImageFormats([In] unsigned short glyphId,[In] unsigned int pixelsPerEmFirst,[In] unsigned int pixelsPerEmLast,[Out] DWRITE_GLYPH_IMAGE_FORMATS* glyphImageFormats)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace4::GetGlyphImageFormats</unmanaged-short>
        public unsafe void GetGlyphImageFormats(System.Int16 glyphId, System.Int32 pixelsPerEmFirst, System.Int32 pixelsPerEmLast, out DXNET.Direct2D1.GlyphImageFormatS glyphImageFormats)
        {
            DXNET.Result __result__;
            fixed (void *glyphImageFormats_ = &glyphImageFormats)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, glyphId, pixelsPerEmFirst, pixelsPerEmLast, glyphImageFormats_, (*(void ***)this._nativePointer)[49]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS IDWriteFontFace4::GetGlyphImageFormats()</unmanaged>
        /// <unmanaged-short>IDWriteFontFace4::GetGlyphImageFormats</unmanaged-short>
        public unsafe DXNET.Direct2D1.GlyphImageFormatS GetGlyphImageFormats()
        {
            DXNET.Direct2D1.GlyphImageFormatS __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirect2D1GlyphImageFormatS(this._nativePointer, (*(void ***)this._nativePointer)[50]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphId">No documentation.</param>
        /// <param name = "pixelsPerEm">No documentation.</param>
        /// <param name = "glyphImageFormat">No documentation.</param>
        /// <param name = "glyphData">No documentation.</param>
        /// <param name = "glyphDataContext">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFace4::GetGlyphImageData([In] unsigned short glyphId,[In] unsigned int pixelsPerEm,[In] DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat,[Out] DWRITE_GLYPH_IMAGE_DATA* glyphData,[Out, Optional] void** glyphDataContext)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace4::GetGlyphImageData</unmanaged-short>
        public unsafe void GetGlyphImageData(System.Int16 glyphId, System.Int32 pixelsPerEm, DXNET.Direct2D1.GlyphImageFormatS glyphImageFormat, out DXNET.DirectWrite.GlyphImageData glyphData, out System.IntPtr glyphDataContext)
        {
            glyphData = default (DXNET.DirectWrite.GlyphImageData);
            DXNET.Result __result__;
            fixed (void *glyphDataContext_ = &glyphDataContext)
                fixed (void *glyphData_ = &glyphData)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, glyphId, pixelsPerEm, unchecked ((System.Int32)glyphImageFormat), glyphData_, glyphDataContext_, (*(void ***)this._nativePointer)[51]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphDataContext">No documentation.</param>
        /// <unmanaged>void IDWriteFontFace4::ReleaseGlyphImageData([In] void* glyphDataContext)</unmanaged>
        /// <unmanaged-short>IDWriteFontFace4::ReleaseGlyphImageData</unmanaged-short>
        public unsafe void ReleaseGlyphImageData(System.IntPtr glyphDataContext)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)glyphDataContext, (*(void ***)this._nativePointer)[52]);
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5E7FA7CA-DDE3-424C-89F0-9FCD6FED58CD")]
    public partial class FontFaceReference : DXNET.ComObject
    {
        public FontFaceReference(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontFaceReference(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontFaceReference(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontFaceIndex</unmanaged>
        /// <unmanaged-short>GetFontFaceIndex</unmanaged-short>
        public System.Int32 FontFaceIndex
        {
            get => GetFontFaceIndex();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetSimulations</unmanaged>
        /// <unmanaged-short>GetSimulations</unmanaged-short>
        public DXNET.DirectWrite.FontSimulations Simulations
        {
            get => GetSimulations();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontFile</unmanaged>
        /// <unmanaged-short>GetFontFile</unmanaged-short>
        public DXNET.DirectWrite.FontFile FontFile
        {
            get
            {
                GetFontFile(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetLocalFileSize</unmanaged>
        /// <unmanaged-short>GetLocalFileSize</unmanaged-short>
        public System.Int64 LocalFileSize
        {
            get => GetLocalFileSize();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFileSize</unmanaged>
        /// <unmanaged-short>GetFileSize</unmanaged-short>
        public System.Int64 FileSize
        {
            get => GetFileSize();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFileTime</unmanaged>
        /// <unmanaged-short>GetFileTime</unmanaged-short>
        public System.Int64 FileTime
        {
            get
            {
                GetFileTime(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetLocality</unmanaged>
        /// <unmanaged-short>GetLocality</unmanaged-short>
        public DXNET.DirectWrite.Locality Locality
        {
            get => GetLocality();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFace">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFaceReference::CreateFontFace([Out] IDWriteFontFace3** fontFace)</unmanaged>
        /// <unmanaged-short>IDWriteFontFaceReference::CreateFontFace</unmanaged-short>
        public unsafe void CreateFontFace(out DXNET.DirectWrite.FontFace3 fontFace)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontFace_, (*(void ***)this._nativePointer)[3]);
            if (fontFace_ != System.IntPtr.Zero)
                fontFace = new DXNET.DirectWrite.FontFace3(fontFace_);
            else
                fontFace = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFaceSimulationFlags">No documentation.</param>
        /// <param name = "fontFace">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFaceReference::CreateFontFaceWithSimulations([In] DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags,[Out] IDWriteFontFace3** fontFace)</unmanaged>
        /// <unmanaged-short>IDWriteFontFaceReference::CreateFontFaceWithSimulations</unmanaged-short>
        public unsafe void CreateFontFaceWithSimulations(DXNET.DirectWrite.FontSimulations fontFaceSimulationFlags, out DXNET.DirectWrite.FontFace3 fontFace)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)fontFaceSimulationFlags), &fontFace_, (*(void ***)this._nativePointer)[4]);
            if (fontFace_ != System.IntPtr.Zero)
                fontFace = new DXNET.DirectWrite.FontFace3(fontFace_);
            else
                fontFace = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFaceReference">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteFontFaceReference::Equals([In] IDWriteFontFaceReference* fontFaceReference)</unmanaged>
        /// <unmanaged-short>IDWriteFontFaceReference::Equals</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool Equals(DXNET.DirectWrite.FontFaceReference fontFaceReference)
        {
            System.IntPtr fontFaceReference_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawBool __result__;
            fontFaceReference_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFaceReference>(fontFaceReference);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (void *)fontFaceReference_, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDWriteFontFaceReference::GetFontFaceIndex()</unmanaged>
        /// <unmanaged-short>IDWriteFontFaceReference::GetFontFaceIndex</unmanaged-short>
        internal unsafe System.Int32 GetFontFaceIndex()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_FONT_SIMULATIONS IDWriteFontFaceReference::GetSimulations()</unmanaged>
        /// <unmanaged-short>IDWriteFontFaceReference::GetSimulations</unmanaged-short>
        internal unsafe DXNET.DirectWrite.FontSimulations GetSimulations()
        {
            DXNET.DirectWrite.FontSimulations __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteFontSimulations(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFile">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFaceReference::GetFontFile([Out] IDWriteFontFile** fontFile)</unmanaged>
        /// <unmanaged-short>IDWriteFontFaceReference::GetFontFile</unmanaged-short>
        internal unsafe void GetFontFile(out DXNET.DirectWrite.FontFile fontFile)
        {
            System.IntPtr fontFile_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontFile_, (*(void ***)this._nativePointer)[8]);
            if (fontFile_ != System.IntPtr.Zero)
                fontFile = new DXNET.DirectWrite.FontFile(fontFile_);
            else
                fontFile = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned longlong IDWriteFontFaceReference::GetLocalFileSize()</unmanaged>
        /// <unmanaged-short>IDWriteFontFaceReference::GetLocalFileSize</unmanaged-short>
        internal unsafe System.Int64 GetLocalFileSize()
        {
            System.Int64 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCalllong(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned longlong IDWriteFontFaceReference::GetFileSize()</unmanaged>
        /// <unmanaged-short>IDWriteFontFaceReference::GetFileSize</unmanaged-short>
        internal unsafe System.Int64 GetFileSize()
        {
            System.Int64 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCalllong(this._nativePointer, (*(void ***)this._nativePointer)[10]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lastWriteTime">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFaceReference::GetFileTime([Out] FILETIME* lastWriteTime)</unmanaged>
        /// <unmanaged-short>IDWriteFontFaceReference::GetFileTime</unmanaged-short>
        internal unsafe void GetFileTime(out System.Int64 lastWriteTime)
        {
            DXNET.Result __result__;
            fixed (void *lastWriteTime_ = &lastWriteTime)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, lastWriteTime_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_LOCALITY IDWriteFontFaceReference::GetLocality()</unmanaged>
        /// <unmanaged-short>IDWriteFontFaceReference::GetLocality</unmanaged-short>
        internal unsafe DXNET.DirectWrite.Locality GetLocality()
        {
            DXNET.DirectWrite.Locality __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteLocality(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFaceReference::EnqueueFontDownloadRequest()</unmanaged>
        /// <unmanaged-short>IDWriteFontFaceReference::EnqueueFontDownloadRequest</unmanaged-short>
        public unsafe void EnqueueFontDownloadRequest()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "characters">No documentation.</param>
        /// <param name = "characterCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFaceReference::EnqueueCharacterDownloadRequest([In, Buffer] const wchar_t* characters,[In] unsigned int characterCount)</unmanaged>
        /// <unmanaged-short>IDWriteFontFaceReference::EnqueueCharacterDownloadRequest</unmanaged-short>
        public unsafe void EnqueueCharacterDownloadRequest(System.String characters, System.Int32 characterCount)
        {
            DXNET.Result __result__;
            fixed (char *characters_ = characters)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)characters_, characterCount, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphIndices">No documentation.</param>
        /// <param name = "glyphCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFaceReference::EnqueueGlyphDownloadRequest([In, Buffer] const unsigned short* glyphIndices,[In] unsigned int glyphCount)</unmanaged>
        /// <unmanaged-short>IDWriteFontFaceReference::EnqueueGlyphDownloadRequest</unmanaged-short>
        public unsafe void EnqueueGlyphDownloadRequest(System.Int16[] glyphIndices, System.Int32 glyphCount)
        {
            DXNET.Result __result__;
            fixed (void *glyphIndices_ = glyphIndices)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, glyphIndices_, glyphCount, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fileOffset">No documentation.</param>
        /// <param name = "fragmentSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFaceReference::EnqueueFileFragmentDownloadRequest([In] unsigned longlong fileOffset,[In] unsigned longlong fragmentSize)</unmanaged>
        /// <unmanaged-short>IDWriteFontFaceReference::EnqueueFileFragmentDownloadRequest</unmanaged-short>
        public unsafe void EnqueueFileFragmentDownloadRequest(System.Int64 fileOffset, System.Int64 fragmentSize)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, fileOffset, fragmentSize, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("EFA008F9-F7A1-48BF-B05C-F224713CC0FF")]
    public partial class FontFallback : DXNET.ComObject
    {
        public FontFallback(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontFallback(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontFallback(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "analysisSource">No documentation.</param>
        /// <param name = "textPosition">No documentation.</param>
        /// <param name = "textLength">No documentation.</param>
        /// <param name = "baseFontCollection">No documentation.</param>
        /// <param name = "baseFamilyName">No documentation.</param>
        /// <param name = "baseWeight">No documentation.</param>
        /// <param name = "baseStyle">No documentation.</param>
        /// <param name = "baseStretch">No documentation.</param>
        /// <param name = "mappedLength">No documentation.</param>
        /// <param name = "mappedFont">No documentation.</param>
        /// <param name = "scale">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFallback::MapCharacters([In] IDWriteTextAnalysisSource* analysisSource,[In] unsigned int textPosition,[In] unsigned int textLength,[In, Optional] IDWriteFontCollection* baseFontCollection,[In, Optional] const wchar_t* baseFamilyName,[In] DWRITE_FONT_WEIGHT baseWeight,[In] DWRITE_FONT_STYLE baseStyle,[In] DWRITE_FONT_STRETCH baseStretch,[Out] unsigned int* mappedLength,[Out, Optional] IDWriteFont** mappedFont,[Out] float* scale)</unmanaged>
        /// <unmanaged-short>IDWriteFontFallback::MapCharacters</unmanaged-short>
        public unsafe void MapCharacters(DXNET.DirectWrite.TextAnalysisSource analysisSource, System.Int32 textPosition, System.Int32 textLength, DXNET.DirectWrite.FontCollection baseFontCollection, System.String baseFamilyName, DXNET.DirectWrite.FontWeight baseWeight, DXNET.DirectWrite.FontStyle baseStyle, DXNET.DirectWrite.FontStretch baseStretch, out System.Int32 mappedLength, out DXNET.DirectWrite.Font mappedFont, out System.Single scale)
        {
            System.IntPtr analysisSource_ = System.IntPtr.Zero;
            System.IntPtr baseFontCollection_ = System.IntPtr.Zero;
            System.IntPtr mappedFont_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            analysisSource_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextAnalysisSource>(analysisSource);
            baseFontCollection_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontCollection>(baseFontCollection);
            fixed (void *scale_ = &scale)
                fixed (void *mappedLength_ = &mappedLength)
                    fixed (char *baseFamilyName_ = baseFamilyName)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)analysisSource_, textPosition, textLength, (void *)baseFontCollection_, (void *)baseFamilyName_, unchecked ((System.Int32)baseWeight), unchecked ((System.Int32)baseStyle), unchecked ((System.Int32)baseStretch), mappedLength_, &mappedFont_, scale_, (*(void ***)this._nativePointer)[3]);
            if (mappedFont_ != System.IntPtr.Zero)
                mappedFont = new DXNET.DirectWrite.Font(mappedFont_);
            else
                mappedFont = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("FD882D06-8ABA-4FB8-B849-8BE8B73E14DE")]
    public partial class FontFallbackBuilder : DXNET.ComObject
    {
        public FontFallbackBuilder(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontFallbackBuilder(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontFallbackBuilder(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ranges">No documentation.</param>
        /// <param name = "rangesCount">No documentation.</param>
        /// <param name = "targetFamilyNames">No documentation.</param>
        /// <param name = "targetFamilyNamesCount">No documentation.</param>
        /// <param name = "fontCollection">No documentation.</param>
        /// <param name = "localeName">No documentation.</param>
        /// <param name = "baseFamilyName">No documentation.</param>
        /// <param name = "scale">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFallbackBuilder::AddMapping([In, Buffer] const DWRITE_UNICODE_RANGE* ranges,[In] unsigned int rangesCount,[In, Buffer] const wchar_t** targetFamilyNames,[In] unsigned int targetFamilyNamesCount,[In, Optional] IDWriteFontCollection* fontCollection,[In, Optional] const wchar_t* localeName,[In, Optional] const wchar_t* baseFamilyName,[In] float scale)</unmanaged>
        /// <unmanaged-short>IDWriteFontFallbackBuilder::AddMapping</unmanaged-short>
        public unsafe void AddMapping(DXNET.DirectWrite.UnicodeRange[] ranges, System.Int32 rangesCount, System.String targetFamilyNames, System.Int32 targetFamilyNamesCount, DXNET.DirectWrite.FontCollection fontCollection, System.String localeName, System.String baseFamilyName, System.Single scale)
        {
            System.IntPtr fontCollection_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontCollection_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontCollection>(fontCollection);
            fixed (char *baseFamilyName_ = baseFamilyName)
                fixed (char *localeName_ = localeName)
                    fixed (char *targetFamilyNames_ = targetFamilyNames)
                        fixed (void *ranges_ = ranges)
                            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, ranges_, rangesCount, (void *)targetFamilyNames_, targetFamilyNamesCount, (void *)fontCollection_, (void *)localeName_, (void *)baseFamilyName_, scale, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFallback">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFallbackBuilder::AddMappings([In] IDWriteFontFallback* fontFallback)</unmanaged>
        /// <unmanaged-short>IDWriteFontFallbackBuilder::AddMappings</unmanaged-short>
        public unsafe void AddMappings(DXNET.DirectWrite.FontFallback fontFallback)
        {
            System.IntPtr fontFallback_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFallback_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFallback>(fontFallback);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFallback_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFallback">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFallbackBuilder::CreateFontFallback([Out] IDWriteFontFallback** fontFallback)</unmanaged>
        /// <unmanaged-short>IDWriteFontFallbackBuilder::CreateFontFallback</unmanaged-short>
        public unsafe void CreateFontFallback(out DXNET.DirectWrite.FontFallback fontFallback)
        {
            System.IntPtr fontFallback_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontFallback_, (*(void ***)this._nativePointer)[5]);
            if (fontFallback_ != System.IntPtr.Zero)
                fontFallback = new DXNET.DirectWrite.FontFallback(fontFallback_);
            else
                fontFallback = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("da20d8ef-812a-4c43-9802-62ec4abd7add")]
    public partial class FontFamily : DXNET.DirectWrite.FontList
    {
        public FontFamily(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontFamily(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontFamily(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFamilyNames</unmanaged>
        /// <unmanaged-short>GetFamilyNames</unmanaged-short>
        public DXNET.DirectWrite.LocalizedStrings FamilyNames
        {
            get
            {
                GetFamilyNames(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "names">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFamily::GetFamilyNames([Out] IDWriteLocalizedStrings** names)</unmanaged>
        /// <unmanaged-short>IDWriteFontFamily::GetFamilyNames</unmanaged-short>
        internal unsafe void GetFamilyNames(out DXNET.DirectWrite.LocalizedStrings names)
        {
            System.IntPtr names_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &names_, (*(void ***)this._nativePointer)[6]);
            if (names_ != System.IntPtr.Zero)
                names = new DXNET.DirectWrite.LocalizedStrings(names_);
            else
                names = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "weight">No documentation.</param>
        /// <param name = "stretch">No documentation.</param>
        /// <param name = "style">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFamily::GetFirstMatchingFont([In] DWRITE_FONT_WEIGHT weight,[In] DWRITE_FONT_STRETCH stretch,[In] DWRITE_FONT_STYLE style,[Out] IDWriteFont** matchingFont)</unmanaged>
        /// <unmanaged-short>IDWriteFontFamily::GetFirstMatchingFont</unmanaged-short>
        public unsafe DXNET.DirectWrite.Font GetFirstMatchingFont(DXNET.DirectWrite.FontWeight weight, DXNET.DirectWrite.FontStretch stretch, DXNET.DirectWrite.FontStyle style)
        {
            DXNET.DirectWrite.Font matchingFont;
            System.IntPtr matchingFont_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)weight), unchecked ((System.Int32)stretch), unchecked ((System.Int32)style), &matchingFont_, (*(void ***)this._nativePointer)[7]);
            if (matchingFont_ != System.IntPtr.Zero)
                matchingFont = new DXNET.DirectWrite.Font(matchingFont_);
            else
                matchingFont = null;
            __result__.CheckError();
            return matchingFont;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "weight">No documentation.</param>
        /// <param name = "stretch">No documentation.</param>
        /// <param name = "style">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFamily::GetMatchingFonts([In] DWRITE_FONT_WEIGHT weight,[In] DWRITE_FONT_STRETCH stretch,[In] DWRITE_FONT_STYLE style,[Out] IDWriteFontList** matchingFonts)</unmanaged>
        /// <unmanaged-short>IDWriteFontFamily::GetMatchingFonts</unmanaged-short>
        public unsafe DXNET.DirectWrite.FontList GetMatchingFonts(DXNET.DirectWrite.FontWeight weight, DXNET.DirectWrite.FontStretch stretch, DXNET.DirectWrite.FontStyle style)
        {
            DXNET.DirectWrite.FontList matchingFonts;
            System.IntPtr matchingFonts_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)weight), unchecked ((System.Int32)stretch), unchecked ((System.Int32)style), &matchingFonts_, (*(void ***)this._nativePointer)[8]);
            if (matchingFonts_ != System.IntPtr.Zero)
                matchingFonts = new DXNET.DirectWrite.FontList(matchingFonts_);
            else
                matchingFonts = null;
            __result__.CheckError();
            return matchingFonts;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("DA20D8EF-812A-4C43-9802-62EC4ABD7ADF")]
    public partial class FontFamily1 : DXNET.DirectWrite.FontFamily
    {
        public FontFamily1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontFamily1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontFamily1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "listIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_LOCALITY IDWriteFontFamily1::GetFontLocality([In] unsigned int listIndex)</unmanaged>
        /// <unmanaged-short>IDWriteFontFamily1::GetFontLocality</unmanaged-short>
        public unsafe DXNET.DirectWrite.Locality GetFontLocality(System.Int32 listIndex)
        {
            DXNET.DirectWrite.Locality __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteLocality(this._nativePointer, listIndex, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "listIndex">No documentation.</param>
        /// <param name = "font">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFamily1::GetFont([In] unsigned int listIndex,[Out] IDWriteFont3** font)</unmanaged>
        /// <unmanaged-short>IDWriteFontFamily1::GetFont</unmanaged-short>
        public unsafe void GetFont(System.Int32 listIndex, out DXNET.DirectWrite.Font3 font)
        {
            System.IntPtr font_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, listIndex, &font_, (*(void ***)this._nativePointer)[10]);
            if (font_ != System.IntPtr.Zero)
                font = new DXNET.DirectWrite.Font3(font_);
            else
                font = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "listIndex">No documentation.</param>
        /// <param name = "fontFaceReference">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFamily1::GetFontFaceReference([In] unsigned int listIndex,[Out] IDWriteFontFaceReference** fontFaceReference)</unmanaged>
        /// <unmanaged-short>IDWriteFontFamily1::GetFontFaceReference</unmanaged-short>
        public unsafe void GetFontFaceReference(System.Int32 listIndex, out DXNET.DirectWrite.FontFaceReference fontFaceReference)
        {
            System.IntPtr fontFaceReference_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, listIndex, &fontFaceReference_, (*(void ***)this._nativePointer)[11]);
            if (fontFaceReference_ != System.IntPtr.Zero)
                fontFaceReference = new DXNET.DirectWrite.FontFaceReference(fontFaceReference_);
            else
                fontFaceReference = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("739d886a-cef5-47dc-8769-1a8b41bebbb0")]
    public partial class FontFile : DXNET.ComObject
    {
        public FontFile(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontFile(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontFile(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFileReferenceKey">No documentation.</param>
        /// <param name = "fontFileReferenceKeySize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFile::GetReferenceKey([Out, Buffer] const void** fontFileReferenceKey,[Out] unsigned int* fontFileReferenceKeySize)</unmanaged>
        /// <unmanaged-short>IDWriteFontFile::GetReferenceKey</unmanaged-short>
        internal unsafe void GetReferenceKey(System.IntPtr fontFileReferenceKey, out System.Int32 fontFileReferenceKeySize)
        {
            DXNET.Result __result__;
            fixed (void *fontFileReferenceKeySize_ = &fontFileReferenceKeySize)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFileReferenceKey, fontFileReferenceKeySize_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFileLoader">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFile::GetLoader([Out] IDWriteFontFileLoader** fontFileLoader)</unmanaged>
        /// <unmanaged-short>IDWriteFontFile::GetLoader</unmanaged-short>
        internal unsafe void GetLoader(out DXNET.DirectWrite.FontFileLoader fontFileLoader)
        {
            System.IntPtr fontFileLoader_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontFileLoader_, (*(void ***)this._nativePointer)[4]);
            if (fontFileLoader_ != System.IntPtr.Zero)
                fontFileLoader = new DXNET.DirectWrite.FontFileLoaderNative(fontFileLoader_);
            else
                fontFileLoader = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "isSupportedFontType">No documentation.</param>
        /// <param name = "fontFileType">No documentation.</param>
        /// <param name = "fontFaceType">No documentation.</param>
        /// <param name = "numberOfFaces">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFile::Analyze([Out] BOOL* isSupportedFontType,[Out] DWRITE_FONT_FILE_TYPE* fontFileType,[Out, Optional] DWRITE_FONT_FACE_TYPE* fontFaceType,[Out] unsigned int* numberOfFaces)</unmanaged>
        /// <unmanaged-short>IDWriteFontFile::Analyze</unmanaged-short>
        public unsafe void Analyze(out DXNET.Mathematics.Interop.RawBool isSupportedFontType, out DXNET.DirectWrite.FontFileType fontFileType, out DXNET.DirectWrite.FontFaceType fontFaceType, out System.Int32 numberOfFaces)
        {
            isSupportedFontType = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *numberOfFaces_ = &numberOfFaces)
                fixed (void *fontFaceType_ = &fontFaceType)
                    fixed (void *fontFileType_ = &fontFileType)
                        fixed (void *isSupportedFontType_ = &isSupportedFontType)
                            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, isSupportedFontType_, fontFileType_, fontFaceType_, numberOfFaces_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("72755049-5ff7-435d-8348-4be97cfa6c7c")]
    public partial interface FontFileEnumerator : DXNET.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("727cad4e-d6af-4c9e-8a08-d695b11caa49")]
    public partial interface FontFileLoader : DXNET.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("727cad4e-d6af-4c9e-8a08-d695b11caa49")]
    public partial class FontFileLoaderNative : DXNET.ComObject, DXNET.DirectWrite.FontFileLoader
    {
        public FontFileLoaderNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontFileLoaderNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontFileLoaderNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFileReferenceKey">No documentation.</param>
        /// <param name = "fontFileReferenceKeySize">No documentation.</param>
        /// <param name = "fontFileStream">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFileLoader::CreateStreamFromKey([In, Buffer] const void* fontFileReferenceKey,[In] unsigned int fontFileReferenceKeySize,[Out] IDWriteFontFileStream** fontFileStream)</unmanaged>
        /// <unmanaged-short>IDWriteFontFileLoader::CreateStreamFromKey</unmanaged-short>
        internal unsafe void CreateStreamFromKey_(System.IntPtr fontFileReferenceKey, System.Int32 fontFileReferenceKeySize, out DXNET.DirectWrite.FontFileStream fontFileStream)
        {
            System.IntPtr fontFileStream_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFileReferenceKey, fontFileReferenceKeySize, &fontFileStream_, (*(void ***)this._nativePointer)[3]);
            if (fontFileStream_ != System.IntPtr.Zero)
                fontFileStream = new DXNET.DirectWrite.FontFileStreamNative(fontFileStream_);
            else
                fontFileStream = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0")]
    public partial interface FontFileStream : DXNET.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0")]
    public partial class FontFileStreamNative : DXNET.ComObject, DXNET.DirectWrite.FontFileStream
    {
        public FontFileStreamNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontFileStreamNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontFileStreamNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFileSize</unmanaged>
        /// <unmanaged-short>GetFileSize</unmanaged-short>
        public System.Int64 FileSize_
        {
            get
            {
                GetFileSize_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetLastWriteTime</unmanaged>
        /// <unmanaged-short>GetLastWriteTime</unmanaged-short>
        public System.Int64 LastWriteTime_
        {
            get
            {
                GetLastWriteTime_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fragmentStart">No documentation.</param>
        /// <param name = "fileOffset">No documentation.</param>
        /// <param name = "fragmentSize">No documentation.</param>
        /// <param name = "fragmentContext">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFileStream::ReadFileFragment([Out] const void** fragmentStart,[In] unsigned longlong fileOffset,[In] unsigned longlong fragmentSize,[Out] void** fragmentContext)</unmanaged>
        /// <unmanaged-short>IDWriteFontFileStream::ReadFileFragment</unmanaged-short>
        internal unsafe void ReadFileFragment_(out System.IntPtr fragmentStart, System.Int64 fileOffset, System.Int64 fragmentSize, out System.IntPtr fragmentContext)
        {
            DXNET.Result __result__;
            fixed (void *fragmentContext_ = &fragmentContext)
                fixed (void *fragmentStart_ = &fragmentStart)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, fragmentStart_, fileOffset, fragmentSize, fragmentContext_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fragmentContext">No documentation.</param>
        /// <unmanaged>void IDWriteFontFileStream::ReleaseFileFragment([In] void* fragmentContext)</unmanaged>
        /// <unmanaged-short>IDWriteFontFileStream::ReleaseFileFragment</unmanaged-short>
        internal unsafe void ReleaseFileFragment_(System.IntPtr fragmentContext)
        {
            DXNET.Direct2D1.LocalInterop.CalliStdCallvoid(this._nativePointer, (void *)fragmentContext, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fileSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFileStream::GetFileSize([Out] unsigned longlong* fileSize)</unmanaged>
        /// <unmanaged-short>IDWriteFontFileStream::GetFileSize</unmanaged-short>
        internal unsafe void GetFileSize_(out System.Int64 fileSize)
        {
            DXNET.Result __result__;
            fixed (void *fileSize_ = &fileSize)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, fileSize_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lastWriteTime">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontFileStream::GetLastWriteTime([Out] unsigned longlong* lastWriteTime)</unmanaged>
        /// <unmanaged-short>IDWriteFontFileStream::GetLastWriteTime</unmanaged-short>
        internal unsafe void GetLastWriteTime_(out System.Int64 lastWriteTime)
        {
            DXNET.Result __result__;
            fixed (void *lastWriteTime_ = &lastWriteTime)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, lastWriteTime_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("1a0d8438-1d97-4ec1-aef9-a2fb86ed6acb")]
    public partial class FontList : DXNET.ComObject
    {
        public FontList(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontList(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontList(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontCollection</unmanaged>
        /// <unmanaged-short>GetFontCollection</unmanaged-short>
        public DXNET.DirectWrite.FontCollection FontCollection
        {
            get
            {
                GetFontCollection(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontCount</unmanaged>
        /// <unmanaged-short>GetFontCount</unmanaged-short>
        public System.Int32 FontCount
        {
            get => GetFontCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontCollection">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontList::GetFontCollection([Out] IDWriteFontCollection** fontCollection)</unmanaged>
        /// <unmanaged-short>IDWriteFontList::GetFontCollection</unmanaged-short>
        internal unsafe void GetFontCollection(out DXNET.DirectWrite.FontCollection fontCollection)
        {
            System.IntPtr fontCollection_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontCollection_, (*(void ***)this._nativePointer)[3]);
            if (fontCollection_ != System.IntPtr.Zero)
                fontCollection = new DXNET.DirectWrite.FontCollection(fontCollection_);
            else
                fontCollection = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDWriteFontList::GetFontCount()</unmanaged>
        /// <unmanaged-short>IDWriteFontList::GetFontCount</unmanaged-short>
        internal unsafe System.Int32 GetFontCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontList::GetFont([In] unsigned int index,[Out] IDWriteFont** font)</unmanaged>
        /// <unmanaged-short>IDWriteFontList::GetFont</unmanaged-short>
        public unsafe DXNET.DirectWrite.Font GetFont(System.Int32 index)
        {
            DXNET.DirectWrite.Font font;
            System.IntPtr font_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, &font_, (*(void ***)this._nativePointer)[5]);
            if (font_ != System.IntPtr.Zero)
                font = new DXNET.DirectWrite.Font(font_);
            else
                font = null;
            __result__.CheckError();
            return font;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("DA20D8EF-812A-4C43-9802-62EC4ABD7ADE")]
    public partial class FontList1 : DXNET.DirectWrite.FontList
    {
        public FontList1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontList1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontList1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "listIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_LOCALITY IDWriteFontList1::GetFontLocality([In] unsigned int listIndex)</unmanaged>
        /// <unmanaged-short>IDWriteFontList1::GetFontLocality</unmanaged-short>
        public unsafe DXNET.DirectWrite.Locality GetFontLocality(System.Int32 listIndex)
        {
            DXNET.DirectWrite.Locality __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteLocality(this._nativePointer, listIndex, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "listIndex">No documentation.</param>
        /// <param name = "font">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontList1::GetFont([In] unsigned int listIndex,[Out] IDWriteFont3** font)</unmanaged>
        /// <unmanaged-short>IDWriteFontList1::GetFont</unmanaged-short>
        public unsafe void GetFont(System.Int32 listIndex, out DXNET.DirectWrite.Font3 font)
        {
            System.IntPtr font_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, listIndex, &font_, (*(void ***)this._nativePointer)[7]);
            if (font_ != System.IntPtr.Zero)
                font = new DXNET.DirectWrite.Font3(font_);
            else
                font = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "listIndex">No documentation.</param>
        /// <param name = "fontFaceReference">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontList1::GetFontFaceReference([In] unsigned int listIndex,[Out] IDWriteFontFaceReference** fontFaceReference)</unmanaged>
        /// <unmanaged-short>IDWriteFontList1::GetFontFaceReference</unmanaged-short>
        public unsafe void GetFontFaceReference(System.Int32 listIndex, out DXNET.DirectWrite.FontFaceReference fontFaceReference)
        {
            System.IntPtr fontFaceReference_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, listIndex, &fontFaceReference_, (*(void ***)this._nativePointer)[8]);
            if (fontFaceReference_ != System.IntPtr.Zero)
                fontFaceReference = new DXNET.DirectWrite.FontFaceReference(fontFaceReference_);
            else
                fontFaceReference = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("53585141-D9F8-4095-8321-D73CF6BD116B")]
    public partial class FontSet : DXNET.ComObject
    {
        public FontSet(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontSet(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontSet(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontCount</unmanaged>
        /// <unmanaged-short>GetFontCount</unmanaged-short>
        public System.Int32 FontCount
        {
            get => GetFontCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDWriteFontSet::GetFontCount()</unmanaged>
        /// <unmanaged-short>IDWriteFontSet::GetFontCount</unmanaged-short>
        internal unsafe System.Int32 GetFontCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "listIndex">No documentation.</param>
        /// <param name = "fontFaceReference">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontSet::GetFontFaceReference([In] unsigned int listIndex,[Out] IDWriteFontFaceReference** fontFaceReference)</unmanaged>
        /// <unmanaged-short>IDWriteFontSet::GetFontFaceReference</unmanaged-short>
        public unsafe void GetFontFaceReference(System.Int32 listIndex, out DXNET.DirectWrite.FontFaceReference fontFaceReference)
        {
            System.IntPtr fontFaceReference_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, listIndex, &fontFaceReference_, (*(void ***)this._nativePointer)[4]);
            if (fontFaceReference_ != System.IntPtr.Zero)
                fontFaceReference = new DXNET.DirectWrite.FontFaceReference(fontFaceReference_);
            else
                fontFaceReference = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFaceReference">No documentation.</param>
        /// <param name = "listIndex">No documentation.</param>
        /// <param name = "exists">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontSet::FindFontFaceReference([In] IDWriteFontFaceReference* fontFaceReference,[Out] unsigned int* listIndex,[Out] BOOL* exists)</unmanaged>
        /// <unmanaged-short>IDWriteFontSet::FindFontFaceReference</unmanaged-short>
        public unsafe void FindFontFaceReference(DXNET.DirectWrite.FontFaceReference fontFaceReference, out System.Int32 listIndex, out DXNET.Mathematics.Interop.RawBool exists)
        {
            System.IntPtr fontFaceReference_ = System.IntPtr.Zero;
            exists = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fontFaceReference_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFaceReference>(fontFaceReference);
            fixed (void *exists_ = &exists)
                fixed (void *listIndex_ = &listIndex)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFaceReference_, listIndex_, exists_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFace">No documentation.</param>
        /// <param name = "listIndex">No documentation.</param>
        /// <param name = "exists">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontSet::FindFontFace([In] IDWriteFontFace* fontFace,[Out] unsigned int* listIndex,[Out] BOOL* exists)</unmanaged>
        /// <unmanaged-short>IDWriteFontSet::FindFontFace</unmanaged-short>
        public unsafe void FindFontFace(DXNET.DirectWrite.FontFace fontFace, out System.Int32 listIndex, out DXNET.Mathematics.Interop.RawBool exists)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            exists = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fontFace_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFace>(fontFace);
            fixed (void *exists_ = &exists)
                fixed (void *listIndex_ = &listIndex)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFace_, listIndex_, exists_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "propertyID">No documentation.</param>
        /// <param name = "values">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontSet::GetPropertyValues([In] DWRITE_FONT_PROPERTY_ID propertyID,[Out] IDWriteStringList** values)</unmanaged>
        /// <unmanaged-short>IDWriteFontSet::GetPropertyValues</unmanaged-short>
        public unsafe void GetPropertyValues(DXNET.DirectWrite.FontPropertyId propertyID, out DXNET.DirectWrite.StringList values)
        {
            System.IntPtr values_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)propertyID), &values_, (*(void ***)this._nativePointer)[7]);
            if (values_ != System.IntPtr.Zero)
                values = new DXNET.DirectWrite.StringList(values_);
            else
                values = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "propertyID">No documentation.</param>
        /// <param name = "referredLocaleNamesRef">No documentation.</param>
        /// <param name = "values">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontSet::GetPropertyValues([In] DWRITE_FONT_PROPERTY_ID propertyID,[In] const wchar_t* preferredLocaleNames,[Out] IDWriteStringList** values)</unmanaged>
        /// <unmanaged-short>IDWriteFontSet::GetPropertyValues</unmanaged-short>
        public unsafe void GetPropertyValues(DXNET.DirectWrite.FontPropertyId propertyID, System.String referredLocaleNamesRef, out DXNET.DirectWrite.StringList values)
        {
            System.IntPtr values_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (char *referredLocaleNamesRef_ = referredLocaleNamesRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)propertyID), (void *)referredLocaleNamesRef_, &values_, (*(void ***)this._nativePointer)[8]);
            if (values_ != System.IntPtr.Zero)
                values = new DXNET.DirectWrite.StringList(values_);
            else
                values = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "listIndex">No documentation.</param>
        /// <param name = "propertyId">No documentation.</param>
        /// <param name = "exists">No documentation.</param>
        /// <param name = "values">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontSet::GetPropertyValues([In] unsigned int listIndex,[In] DWRITE_FONT_PROPERTY_ID propertyId,[Out] BOOL* exists,[Out, Optional] IDWriteLocalizedStrings** values)</unmanaged>
        /// <unmanaged-short>IDWriteFontSet::GetPropertyValues</unmanaged-short>
        public unsafe void GetPropertyValues(System.Int32 listIndex, DXNET.DirectWrite.FontPropertyId propertyId, out DXNET.Mathematics.Interop.RawBool exists, out DXNET.DirectWrite.LocalizedStrings values)
        {
            exists = default (DXNET.Mathematics.Interop.RawBool);
            System.IntPtr values_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *exists_ = &exists)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, listIndex, unchecked ((System.Int32)propertyId), exists_, &values_, (*(void ***)this._nativePointer)[9]);
            if (values_ != System.IntPtr.Zero)
                values = new DXNET.DirectWrite.LocalizedStrings(values_);
            else
                values = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ropertyRef">No documentation.</param>
        /// <param name = "ropertyOccurrenceCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontSet::GetPropertyOccurrenceCount([In] const DWRITE_FONT_PROPERTY* property,[Out] unsigned int* propertyOccurrenceCount)</unmanaged>
        /// <unmanaged-short>IDWriteFontSet::GetPropertyOccurrenceCount</unmanaged-short>
        public unsafe void GetPropertyOccurrenceCount(ref DXNET.DirectWrite.FontProperty ropertyRef, out System.Int32 ropertyOccurrenceCountRef)
        {
            DXNET.DirectWrite.FontProperty.__Native ropertyRef_ = default (DXNET.DirectWrite.FontProperty.__Native);
            DXNET.Result __result__;
            ropertyRef.__MarshalTo(ref ropertyRef_);
            fixed (void *ropertyOccurrenceCountRef_ = &ropertyOccurrenceCountRef)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &ropertyRef_, ropertyOccurrenceCountRef_, (*(void ***)this._nativePointer)[10]);
            ropertyRef.__MarshalFree(ref ropertyRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "familyName">No documentation.</param>
        /// <param name = "fontWeight">No documentation.</param>
        /// <param name = "fontStretch">No documentation.</param>
        /// <param name = "fontStyle">No documentation.</param>
        /// <param name = "filteredSet">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontSet::GetMatchingFonts([In] const wchar_t* familyName,[In] DWRITE_FONT_WEIGHT fontWeight,[In] DWRITE_FONT_STRETCH fontStretch,[In] DWRITE_FONT_STYLE fontStyle,[Out] IDWriteFontSet** filteredSet)</unmanaged>
        /// <unmanaged-short>IDWriteFontSet::GetMatchingFonts</unmanaged-short>
        public unsafe void GetMatchingFonts(System.String familyName, DXNET.DirectWrite.FontWeight fontWeight, DXNET.DirectWrite.FontStretch fontStretch, DXNET.DirectWrite.FontStyle fontStyle, out DXNET.DirectWrite.FontSet filteredSet)
        {
            System.IntPtr filteredSet_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (char *familyName_ = familyName)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)familyName_, unchecked ((System.Int32)fontWeight), unchecked ((System.Int32)fontStretch), unchecked ((System.Int32)fontStyle), &filteredSet_, (*(void ***)this._nativePointer)[11]);
            if (filteredSet_ != System.IntPtr.Zero)
                filteredSet = new DXNET.DirectWrite.FontSet(filteredSet_);
            else
                filteredSet = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "ropertiesRef">No documentation.</param>
        /// <param name = "propertyCount">No documentation.</param>
        /// <param name = "filteredSet">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontSet::GetMatchingFonts([In, Buffer] const DWRITE_FONT_PROPERTY* properties,[In] unsigned int propertyCount,[Out] IDWriteFontSet** filteredSet)</unmanaged>
        /// <unmanaged-short>IDWriteFontSet::GetMatchingFonts</unmanaged-short>
        public unsafe void GetMatchingFonts(DXNET.DirectWrite.FontProperty[] ropertiesRef, System.Int32 propertyCount, out DXNET.DirectWrite.FontSet filteredSet)
        {
            DXNET.DirectWrite.FontProperty.__Native[] ropertiesRef_ = new DXNET.DirectWrite.FontProperty.__Native[ropertiesRef.Length];
            System.IntPtr filteredSet_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            for (int i = 0; i < ropertiesRef.Length; ++i)
                ropertiesRef[i].__MarshalTo(ref (ropertiesRef_)[i]);
            fixed (void *_ropertiesRef = ropertiesRef_)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, _ropertiesRef, propertyCount, &filteredSet_, (*(void ***)this._nativePointer)[12]);
            if (filteredSet_ != System.IntPtr.Zero)
                filteredSet = new DXNET.DirectWrite.FontSet(filteredSet_);
            else
                filteredSet = null;
            for (int i = 0; i < ropertiesRef.Length; ++i)
                ropertiesRef[i].__MarshalFree(ref (ropertiesRef_)[i]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2F642AFE-9C68-4F40-B8BE-457401AFCB3D")]
    public partial class FontSetBuilder : DXNET.ComObject
    {
        public FontSetBuilder(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontSetBuilder(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontSetBuilder(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFaceReference">No documentation.</param>
        /// <param name = "ropertiesRef">No documentation.</param>
        /// <param name = "propertyCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontSetBuilder::AddFontFaceReference([In] IDWriteFontFaceReference* fontFaceReference,[In, Buffer] const DWRITE_FONT_PROPERTY* properties,[In] unsigned int propertyCount)</unmanaged>
        /// <unmanaged-short>IDWriteFontSetBuilder::AddFontFaceReference</unmanaged-short>
        public unsafe void AddFontFaceReference(DXNET.DirectWrite.FontFaceReference fontFaceReference, DXNET.DirectWrite.FontProperty[] ropertiesRef, System.Int32 propertyCount)
        {
            System.IntPtr fontFaceReference_ = System.IntPtr.Zero;
            DXNET.DirectWrite.FontProperty.__Native[] ropertiesRef_ = new DXNET.DirectWrite.FontProperty.__Native[ropertiesRef.Length];
            DXNET.Result __result__;
            fontFaceReference_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFaceReference>(fontFaceReference);
            for (int i = 0; i < ropertiesRef.Length; ++i)
                ropertiesRef[i].__MarshalTo(ref (ropertiesRef_)[i]);
            fixed (void *_ropertiesRef = ropertiesRef_)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFaceReference_, _ropertiesRef, propertyCount, (*(void ***)this._nativePointer)[3]);
            for (int i = 0; i < ropertiesRef.Length; ++i)
                ropertiesRef[i].__MarshalFree(ref (ropertiesRef_)[i]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFaceReference">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontSetBuilder::AddFontFaceReference([In] IDWriteFontFaceReference* fontFaceReference)</unmanaged>
        /// <unmanaged-short>IDWriteFontSetBuilder::AddFontFaceReference</unmanaged-short>
        public unsafe void AddFontFaceReference(DXNET.DirectWrite.FontFaceReference fontFaceReference)
        {
            System.IntPtr fontFaceReference_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFaceReference_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFaceReference>(fontFaceReference);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFaceReference_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontSet">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontSetBuilder::AddFontSet([In] IDWriteFontSet* fontSet)</unmanaged>
        /// <unmanaged-short>IDWriteFontSetBuilder::AddFontSet</unmanaged-short>
        public unsafe void AddFontSet(DXNET.DirectWrite.FontSet fontSet)
        {
            System.IntPtr fontSet_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontSet_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontSet>(fontSet);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontSet_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontSet">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontSetBuilder::CreateFontSet([Out] IDWriteFontSet** fontSet)</unmanaged>
        /// <unmanaged-short>IDWriteFontSetBuilder::CreateFontSet</unmanaged-short>
        public unsafe void CreateFontSet(out DXNET.DirectWrite.FontSet fontSet)
        {
            System.IntPtr fontSet_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontSet_, (*(void ***)this._nativePointer)[6]);
            if (fontSet_ != System.IntPtr.Zero)
                fontSet = new DXNET.DirectWrite.FontSet(fontSet_);
            else
                fontSet = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3FF7715F-3CDC-4DC6-9B72-EC5621DCCAFD")]
    public partial class FontSetBuilder1 : DXNET.DirectWrite.FontSetBuilder
    {
        public FontSetBuilder1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FontSetBuilder1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FontSetBuilder1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFile">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteFontSetBuilder1::AddFontFile([In] IDWriteFontFile* fontFile)</unmanaged>
        /// <unmanaged-short>IDWriteFontSetBuilder1::AddFontFile</unmanaged-short>
        public unsafe void AddFontFile(DXNET.DirectWrite.FontFile fontFile)
        {
            System.IntPtr fontFile_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFile_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFile>(fontFile);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFile_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("1edd9491-9853-4299-898f-6432983b6f3a")]
    public partial class GdiInterop : DXNET.ComObject
    {
        public GdiInterop(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator GdiInterop(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new GdiInterop(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "logFont">No documentation.</param>
        /// <param name = "font">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteGdiInterop::CreateFontFromLOGFONT([In] const void* logFont,[Out] IDWriteFont** font)</unmanaged>
        /// <unmanaged-short>IDWriteGdiInterop::CreateFontFromLOGFONT</unmanaged-short>
        internal unsafe void CreateFontFromLOGFONT(System.IntPtr logFont, out DXNET.DirectWrite.Font font)
        {
            System.IntPtr font_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)logFont, &font_, (*(void ***)this._nativePointer)[3]);
            if (font_ != System.IntPtr.Zero)
                font = new DXNET.DirectWrite.Font(font_);
            else
                font = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "font">No documentation.</param>
        /// <param name = "logFont">No documentation.</param>
        /// <param name = "isSystemFont">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteGdiInterop::ConvertFontToLOGFONT([In] IDWriteFont* font,[In] void* logFont,[Out] BOOL* isSystemFont)</unmanaged>
        /// <unmanaged-short>IDWriteGdiInterop::ConvertFontToLOGFONT</unmanaged-short>
        internal unsafe void ConvertFontToLOGFONT(DXNET.DirectWrite.Font font, System.IntPtr logFont, out DXNET.Mathematics.Interop.RawBool isSystemFont)
        {
            System.IntPtr font_ = System.IntPtr.Zero;
            isSystemFont = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            font_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.Font>(font);
            fixed (void *isSystemFont_ = &isSystemFont)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)font_, (void *)logFont, isSystemFont_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "font">No documentation.</param>
        /// <param name = "logFont">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteGdiInterop::ConvertFontFaceToLOGFONT([In] IDWriteFontFace* font,[In] void* logFont)</unmanaged>
        /// <unmanaged-short>IDWriteGdiInterop::ConvertFontFaceToLOGFONT</unmanaged-short>
        internal unsafe void ConvertFontFaceToLOGFONT(DXNET.DirectWrite.FontFace font, System.IntPtr logFont)
        {
            System.IntPtr font_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            font_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFace>(font);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)font_, (void *)logFont, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hdc">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteGdiInterop::CreateFontFaceFromHdc([In] HDC hdc,[Out] IDWriteFontFace** fontFace)</unmanaged>
        /// <unmanaged-short>IDWriteGdiInterop::CreateFontFaceFromHdc</unmanaged-short>
        public unsafe DXNET.DirectWrite.FontFace CreateFontFaceFromHdc(System.IntPtr hdc)
        {
            DXNET.DirectWrite.FontFace fontFace;
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hdc, &fontFace_, (*(void ***)this._nativePointer)[6]);
            if (fontFace_ != System.IntPtr.Zero)
                fontFace = new DXNET.DirectWrite.FontFace(fontFace_);
            else
                fontFace = null;
            __result__.CheckError();
            return fontFace;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hdc">No documentation.</param>
        /// <param name = "width">No documentation.</param>
        /// <param name = "height">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteGdiInterop::CreateBitmapRenderTarget([In, Optional] HDC hdc,[In] unsigned int width,[In] unsigned int height,[Out] IDWriteBitmapRenderTarget** renderTarget)</unmanaged>
        /// <unmanaged-short>IDWriteGdiInterop::CreateBitmapRenderTarget</unmanaged-short>
        public unsafe DXNET.DirectWrite.BitmapRenderTarget CreateBitmapRenderTarget(System.IntPtr hdc, System.Int32 width, System.Int32 height)
        {
            DXNET.DirectWrite.BitmapRenderTarget renderTarget;
            System.IntPtr renderTarget_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)hdc, width, height, &renderTarget_, (*(void ***)this._nativePointer)[7]);
            if (renderTarget_ != System.IntPtr.Zero)
                renderTarget = new DXNET.DirectWrite.BitmapRenderTarget(renderTarget_);
            else
                renderTarget = null;
            __result__.CheckError();
            return renderTarget;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("4556BE70-3ABD-4F70-90BE-421780A6F515")]
    public partial class GdiInterop1 : DXNET.DirectWrite.GdiInterop
    {
        public GdiInterop1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator GdiInterop1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new GdiInterop1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "logFont">No documentation.</param>
        /// <param name = "fontCollection">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteGdiInterop1::CreateFontFromLOGFONT([In] const void* logFont,[In, Optional] IDWriteFontCollection* fontCollection,[Out] IDWriteFont** font)</unmanaged>
        /// <unmanaged-short>IDWriteGdiInterop1::CreateFontFromLOGFONT</unmanaged-short>
        internal unsafe DXNET.DirectWrite.Font CreateFontFromLOGFONT(System.IntPtr logFont, DXNET.DirectWrite.FontCollection fontCollection)
        {
            System.IntPtr fontCollection_ = System.IntPtr.Zero;
            DXNET.DirectWrite.Font font;
            System.IntPtr font_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontCollection_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontCollection>(fontCollection);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)logFont, (void *)fontCollection_, &font_, (*(void ***)this._nativePointer)[8]);
            if (font_ != System.IntPtr.Zero)
                font = new DXNET.DirectWrite.Font(font_);
            else
                font = null;
            __result__.CheckError();
            return font;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFace">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteGdiInterop1::GetFontSignature([In] IDWriteFontFace* fontFace,[Out] FONTSIGNATURE* fontSignature)</unmanaged>
        /// <unmanaged-short>IDWriteGdiInterop1::GetFontSignature</unmanaged-short>
        public unsafe DXNET.DirectWrite.GdiInterop.FontSignature GetFontSignature(DXNET.DirectWrite.FontFace fontFace)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.DirectWrite.GdiInterop.FontSignature fontSignature;
            DXNET.Result __result__;
            fontFace_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFace>(fontFace);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFace_, &fontSignature, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
            return fontSignature;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "font">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteGdiInterop1::GetFontSignature([In] IDWriteFont* font,[Out] FONTSIGNATURE* fontSignature)</unmanaged>
        /// <unmanaged-short>IDWriteGdiInterop1::GetFontSignature</unmanaged-short>
        public unsafe DXNET.DirectWrite.GdiInterop.FontSignature GetFontSignature(DXNET.DirectWrite.Font font)
        {
            System.IntPtr font_ = System.IntPtr.Zero;
            DXNET.DirectWrite.GdiInterop.FontSignature fontSignature;
            DXNET.Result __result__;
            font_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.Font>(font);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)font_, &fontSignature, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
            return fontSignature;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "logFont">No documentation.</param>
        /// <param name = "fontSet">No documentation.</param>
        /// <param name = "filteredSet">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteGdiInterop1::GetMatchingFontsByLOGFONT([In] const void* logFont,[In] IDWriteFontSet* fontSet,[Out] IDWriteFontSet** filteredSet)</unmanaged>
        /// <unmanaged-short>IDWriteGdiInterop1::GetMatchingFontsByLOGFONT</unmanaged-short>
        internal unsafe void GetMatchingFontsByLOGFONT(System.IntPtr logFont, DXNET.DirectWrite.FontSet fontSet, out DXNET.DirectWrite.FontSet filteredSet)
        {
            System.IntPtr fontSet_ = System.IntPtr.Zero;
            System.IntPtr filteredSet_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontSet_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontSet>(fontSet);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)logFont, (void *)fontSet_, &filteredSet_, (*(void ***)this._nativePointer)[11]);
            if (filteredSet_ != System.IntPtr.Zero)
                filteredSet = new DXNET.DirectWrite.FontSet(filteredSet_);
            else
                filteredSet = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7d97dbf7-e085-42d4-81e3-6a883bded118")]
    public partial class GlyphRunAnalysis : DXNET.ComObject
    {
        public GlyphRunAnalysis(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator GlyphRunAnalysis(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new GlyphRunAnalysis(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textureType">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteGlyphRunAnalysis::GetAlphaTextureBounds([In] DWRITE_TEXTURE_TYPE textureType,[Out] RECT* textureBounds)</unmanaged>
        /// <unmanaged-short>IDWriteGlyphRunAnalysis::GetAlphaTextureBounds</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawRectangle GetAlphaTextureBounds(DXNET.DirectWrite.TextureType textureType)
        {
            DXNET.Mathematics.Interop.RawRectangle textureBounds;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)textureType), &textureBounds, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
            return textureBounds;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textureType">No documentation.</param>
        /// <param name = "textureBounds">No documentation.</param>
        /// <param name = "alphaValues">No documentation.</param>
        /// <param name = "bufferSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteGlyphRunAnalysis::CreateAlphaTexture([In] DWRITE_TEXTURE_TYPE textureType,[In] const RECT* textureBounds,[Out, Buffer] unsigned char* alphaValues,[In] unsigned int bufferSize)</unmanaged>
        /// <unmanaged-short>IDWriteGlyphRunAnalysis::CreateAlphaTexture</unmanaged-short>
        public unsafe void CreateAlphaTexture(DXNET.DirectWrite.TextureType textureType, DXNET.Mathematics.Interop.RawRectangle textureBounds, System.Byte[] alphaValues, System.Int32 bufferSize)
        {
            DXNET.Result __result__;
            fixed (void *alphaValues_ = alphaValues)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)textureType), &textureBounds, alphaValues_, bufferSize, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "renderingParams">No documentation.</param>
        /// <param name = "blendGamma">No documentation.</param>
        /// <param name = "blendEnhancedContrast">No documentation.</param>
        /// <param name = "blendClearTypeLevel">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteGlyphRunAnalysis::GetAlphaBlendParams([In] IDWriteRenderingParams* renderingParams,[Out] float* blendGamma,[Out] float* blendEnhancedContrast,[Out] float* blendClearTypeLevel)</unmanaged>
        /// <unmanaged-short>IDWriteGlyphRunAnalysis::GetAlphaBlendParams</unmanaged-short>
        public unsafe void GetAlphaBlendParams(DXNET.DirectWrite.RenderingParams renderingParams, out System.Single blendGamma, out System.Single blendEnhancedContrast, out System.Single blendClearTypeLevel)
        {
            System.IntPtr renderingParams_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            renderingParams_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.RenderingParams>(renderingParams);
            fixed (void *blendClearTypeLevel_ = &blendClearTypeLevel)
                fixed (void *blendEnhancedContrast_ = &blendEnhancedContrast)
                    fixed (void *blendGamma_ = &blendGamma)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)renderingParams_, blendGamma_, blendEnhancedContrast_, blendClearTypeLevel_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("8339FDE3-106F-47ab-8373-1C6295EB10B3")]
    public partial interface InlineObject : DXNET.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("8339FDE3-106F-47ab-8373-1C6295EB10B3")]
    public partial class InlineObjectNative : DXNET.ComObject, DXNET.DirectWrite.InlineObject
    {
        public InlineObjectNative(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator InlineObjectNative(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new InlineObjectNative(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMetrics</unmanaged>
        /// <unmanaged-short>GetMetrics</unmanaged-short>
        public DXNET.DirectWrite.InlineObjectMetrics Metrics_
        {
            get
            {
                GetMetrics_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetOverhangMetrics</unmanaged>
        /// <unmanaged-short>GetOverhangMetrics</unmanaged-short>
        public DXNET.DirectWrite.OverhangMetrics OverhangMetrics_
        {
            get
            {
                GetOverhangMetrics_(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "clientDrawingContext">No documentation.</param>
        /// <param name = "renderer">No documentation.</param>
        /// <param name = "originX">No documentation.</param>
        /// <param name = "originY">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <param name = "isRightToLeft">No documentation.</param>
        /// <param name = "clientDrawingEffect">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteInlineObject::Draw([In, Optional] void* clientDrawingContext,[In] IDWriteTextRenderer* renderer,[In] float originX,[In] float originY,[In] BOOL isSideways,[In] BOOL isRightToLeft,[In, Optional] IUnknown* clientDrawingEffect)</unmanaged>
        /// <unmanaged-short>IDWriteInlineObject::Draw</unmanaged-short>
        internal unsafe void Draw_(System.IntPtr clientDrawingContext, DXNET.DirectWrite.TextRenderer renderer, System.Single originX, System.Single originY, DXNET.Mathematics.Interop.RawBool isSideways, DXNET.Mathematics.Interop.RawBool isRightToLeft, System.IntPtr clientDrawingEffect)
        {
            System.IntPtr renderer_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            renderer_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextRenderer>(renderer);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)clientDrawingContext, (void *)renderer_, originX, originY, isSideways, isRightToLeft, (void *)clientDrawingEffect, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "metrics">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteInlineObject::GetMetrics([Out] DWRITE_INLINE_OBJECT_METRICS* metrics)</unmanaged>
        /// <unmanaged-short>IDWriteInlineObject::GetMetrics</unmanaged-short>
        internal unsafe void GetMetrics_(out DXNET.DirectWrite.InlineObjectMetrics metrics)
        {
            metrics = default (DXNET.DirectWrite.InlineObjectMetrics);
            DXNET.Result __result__;
            fixed (void *metrics_ = &metrics)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, metrics_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "overhangs">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteInlineObject::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)</unmanaged>
        /// <unmanaged-short>IDWriteInlineObject::GetOverhangMetrics</unmanaged-short>
        internal unsafe void GetOverhangMetrics_(out DXNET.DirectWrite.OverhangMetrics overhangs)
        {
            overhangs = default (DXNET.DirectWrite.OverhangMetrics);
            DXNET.Result __result__;
            fixed (void *overhangs_ = &overhangs)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, overhangs_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "breakConditionBefore">No documentation.</param>
        /// <param name = "breakConditionAfter">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteInlineObject::GetBreakConditions([Out] DWRITE_BREAK_CONDITION* breakConditionBefore,[Out] DWRITE_BREAK_CONDITION* breakConditionAfter)</unmanaged>
        /// <unmanaged-short>IDWriteInlineObject::GetBreakConditions</unmanaged-short>
        internal unsafe void GetBreakConditions_(out DXNET.DirectWrite.BreakCondition breakConditionBefore, out DXNET.DirectWrite.BreakCondition breakConditionAfter)
        {
            DXNET.Result __result__;
            fixed (void *breakConditionAfter_ = &breakConditionAfter)
                fixed (void *breakConditionBefore_ = &breakConditionBefore)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, breakConditionBefore_, breakConditionAfter_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("DC102F47-A12D-4B1C-822D-9E117E33043F")]
    public partial class InMemoryFontFileLoader : DXNET.DirectWrite.FontFileLoaderNative
    {
        public InMemoryFontFileLoader(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator InMemoryFontFileLoader(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new InMemoryFontFileLoader(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFileCount</unmanaged>
        /// <unmanaged-short>GetFileCount</unmanaged-short>
        public System.Int32 FileCount
        {
            get => GetFileCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "factory">No documentation.</param>
        /// <param name = "fontData">No documentation.</param>
        /// <param name = "fontDataSize">No documentation.</param>
        /// <param name = "ownerObject">No documentation.</param>
        /// <param name = "fontFile">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteInMemoryFontFileLoader::CreateInMemoryFontFileReference([In] IDWriteFactory* factory,[In, Buffer] const void* fontData,[In] unsigned int fontDataSize,[In, Optional] IUnknown* ownerObject,[Out] IDWriteFontFile** fontFile)</unmanaged>
        /// <unmanaged-short>IDWriteInMemoryFontFileLoader::CreateInMemoryFontFileReference</unmanaged-short>
        public unsafe void CreateInMemoryFontFileReference(DXNET.DirectWrite.Factory factory, System.IntPtr fontData, System.Int32 fontDataSize, DXNET.IUnknown ownerObject, out DXNET.DirectWrite.FontFile fontFile)
        {
            System.IntPtr factory_ = System.IntPtr.Zero;
            System.IntPtr ownerObject_ = System.IntPtr.Zero;
            System.IntPtr fontFile_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            factory_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.Factory>(factory);
            ownerObject_ = DXNET.CppObject.ToCallbackPtr<DXNET.IUnknown>(ownerObject);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)factory_, (void *)fontData, fontDataSize, (void *)ownerObject_, &fontFile_, (*(void ***)this._nativePointer)[4]);
            if (fontFile_ != System.IntPtr.Zero)
                fontFile = new DXNET.DirectWrite.FontFile(fontFile_);
            else
                fontFile = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDWriteInMemoryFontFileLoader::GetFileCount()</unmanaged>
        /// <unmanaged-short>IDWriteInMemoryFontFileLoader::GetFileCount</unmanaged-short>
        internal unsafe System.Int32 GetFileCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("b2d9f3ec-c9fe-4a11-a2ec-d86208f7c0a2")]
    public partial class LocalFontFileLoader : DXNET.DirectWrite.FontFileLoaderNative
    {
        public LocalFontFileLoader(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator LocalFontFileLoader(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new LocalFontFileLoader(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFileReferenceKey">No documentation.</param>
        /// <param name = "fontFileReferenceKeySize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteLocalFontFileLoader::GetFilePathLengthFromKey([In, Buffer] const void* fontFileReferenceKey,[In] unsigned int fontFileReferenceKeySize,[Out] unsigned int* filePathLength)</unmanaged>
        /// <unmanaged-short>IDWriteLocalFontFileLoader::GetFilePathLengthFromKey</unmanaged-short>
        internal unsafe System.Int32 GetFilePathLengthFromKey(System.IntPtr fontFileReferenceKey, System.Int32 fontFileReferenceKeySize)
        {
            System.Int32 filePathLength;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFileReferenceKey, fontFileReferenceKeySize, &filePathLength, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
            return filePathLength;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFileReferenceKey">No documentation.</param>
        /// <param name = "fontFileReferenceKeySize">No documentation.</param>
        /// <param name = "filePath">No documentation.</param>
        /// <param name = "filePathSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteLocalFontFileLoader::GetFilePathFromKey([In, Buffer] const void* fontFileReferenceKey,[In] unsigned int fontFileReferenceKeySize,[Out, Buffer] wchar_t* filePath,[In] unsigned int filePathSize)</unmanaged>
        /// <unmanaged-short>IDWriteLocalFontFileLoader::GetFilePathFromKey</unmanaged-short>
        internal unsafe void GetFilePathFromKey(System.IntPtr fontFileReferenceKey, System.Int32 fontFileReferenceKeySize, System.IntPtr filePath, System.Int32 filePathSize)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFileReferenceKey, fontFileReferenceKeySize, (void *)filePath, filePathSize, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFileReferenceKey">No documentation.</param>
        /// <param name = "fontFileReferenceKeySize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteLocalFontFileLoader::GetLastWriteTimeFromKey([In, Buffer] const void* fontFileReferenceKey,[In] unsigned int fontFileReferenceKeySize,[Out] FILETIME* lastWriteTime)</unmanaged>
        /// <unmanaged-short>IDWriteLocalFontFileLoader::GetLastWriteTimeFromKey</unmanaged-short>
        internal unsafe System.Int64 GetLastWriteTimeFromKey(System.IntPtr fontFileReferenceKey, System.Int32 fontFileReferenceKeySize)
        {
            System.Int64 lastWriteTime;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFileReferenceKey, fontFileReferenceKeySize, &lastWriteTime, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
            return lastWriteTime;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("08256209-099a-4b34-b86d-c22b110e7771")]
    public partial class LocalizedStrings : DXNET.ComObject
    {
        public LocalizedStrings(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator LocalizedStrings(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new LocalizedStrings(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetCount</unmanaged>
        /// <unmanaged-short>GetCount</unmanaged-short>
        public System.Int32 Count
        {
            get => GetCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDWriteLocalizedStrings::GetCount()</unmanaged>
        /// <unmanaged-short>IDWriteLocalizedStrings::GetCount</unmanaged-short>
        internal unsafe System.Int32 GetCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "localeName">No documentation.</param>
        /// <param name = "index">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteLocalizedStrings::FindLocaleName([In] const wchar_t* localeName,[Out] unsigned int* index,[Out] BOOL* exists)</unmanaged>
        /// <unmanaged-short>IDWriteLocalizedStrings::FindLocaleName</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool FindLocaleName(System.String localeName, out System.Int32 index)
        {
            DXNET.Mathematics.Interop.RawBool exists;
            DXNET.Result __result__;
            fixed (void *index_ = &index)
                fixed (char *localeName_ = localeName)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)localeName_, index_, &exists, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
            return exists;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "length">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteLocalizedStrings::GetLocaleNameLength([In] unsigned int index,[Out] unsigned int* length)</unmanaged>
        /// <unmanaged-short>IDWriteLocalizedStrings::GetLocaleNameLength</unmanaged-short>
        internal unsafe void GetLocaleNameLength(System.Int32 index, out System.Int32 length)
        {
            DXNET.Result __result__;
            fixed (void *length_ = &length)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, length_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "localeName">No documentation.</param>
        /// <param name = "size">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteLocalizedStrings::GetLocaleName([In] unsigned int index,[Out, Buffer] wchar_t* localeName,[In] unsigned int size)</unmanaged>
        /// <unmanaged-short>IDWriteLocalizedStrings::GetLocaleName</unmanaged-short>
        internal unsafe void GetLocaleName(System.Int32 index, System.IntPtr localeName, System.Int32 size)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, (void *)localeName, size, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "length">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteLocalizedStrings::GetStringLength([In] unsigned int index,[Out] unsigned int* length)</unmanaged>
        /// <unmanaged-short>IDWriteLocalizedStrings::GetStringLength</unmanaged-short>
        internal unsafe void GetStringLength(System.Int32 index, out System.Int32 length)
        {
            DXNET.Result __result__;
            fixed (void *length_ = &length)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, length_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "index">No documentation.</param>
        /// <param name = "stringBuffer">No documentation.</param>
        /// <param name = "size">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteLocalizedStrings::GetString([In] unsigned int index,[Out, Buffer] wchar_t* stringBuffer,[In] unsigned int size)</unmanaged>
        /// <unmanaged-short>IDWriteLocalizedStrings::GetString</unmanaged-short>
        internal unsafe void GetString(System.Int32 index, System.IntPtr stringBuffer, System.Int32 size)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, index, (void *)stringBuffer, size, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("14885CC9-BAB0-4f90-B6ED-5C366A2CD03D")]
    public partial class NumberSubstitution : DXNET.ComObject
    {
        public NumberSubstitution(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator NumberSubstitution(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new NumberSubstitution(nativePtr);
    }

    [System.Runtime.InteropServices.GuidAttribute("eaf3a2da-ecf4-4d24-b644-b34f6842024b")]
    public partial interface PixelSnapping : DXNET.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("68648C83-6EDE-46C0-AB46-20083A887FDE")]
    public partial class RemoteFontFileLoader : DXNET.DirectWrite.FontFileLoaderNative
    {
        public RemoteFontFileLoader(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RemoteFontFileLoader(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RemoteFontFileLoader(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFileReferenceKey">No documentation.</param>
        /// <param name = "fontFileReferenceKeySize">No documentation.</param>
        /// <param name = "fontFileStream">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteRemoteFontFileLoader::CreateRemoteStreamFromKey([In, Buffer] const void* fontFileReferenceKey,[In] unsigned int fontFileReferenceKeySize,[Out] IDWriteRemoteFontFileStream** fontFileStream)</unmanaged>
        /// <unmanaged-short>IDWriteRemoteFontFileLoader::CreateRemoteStreamFromKey</unmanaged-short>
        public unsafe void CreateRemoteStreamFromKey(System.IntPtr fontFileReferenceKey, System.Int32 fontFileReferenceKeySize, out DXNET.DirectWrite.RemoteFontFileStream fontFileStream)
        {
            System.IntPtr fontFileStream_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFileReferenceKey, fontFileReferenceKeySize, &fontFileStream_, (*(void ***)this._nativePointer)[4]);
            if (fontFileStream_ != System.IntPtr.Zero)
                fontFileStream = new DXNET.DirectWrite.RemoteFontFileStream(fontFileStream_);
            else
                fontFileStream = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFileReferenceKey">No documentation.</param>
        /// <param name = "fontFileReferenceKeySize">No documentation.</param>
        /// <param name = "locality">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteRemoteFontFileLoader::GetLocalityFromKey([In, Buffer] const void* fontFileReferenceKey,[In] unsigned int fontFileReferenceKeySize,[Out] DWRITE_LOCALITY* locality)</unmanaged>
        /// <unmanaged-short>IDWriteRemoteFontFileLoader::GetLocalityFromKey</unmanaged-short>
        public unsafe void GetLocalityFromKey(System.IntPtr fontFileReferenceKey, System.Int32 fontFileReferenceKeySize, out DXNET.DirectWrite.Locality locality)
        {
            DXNET.Result __result__;
            fixed (void *locality_ = &locality)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFileReferenceKey, fontFileReferenceKeySize, locality_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "factory">No documentation.</param>
        /// <param name = "baseUrl">No documentation.</param>
        /// <param name = "fontFileUrl">No documentation.</param>
        /// <param name = "fontFile">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteRemoteFontFileLoader::CreateFontFileReferenceFromUrl([In] IDWriteFactory* factory,[In, Optional] const wchar_t* baseUrl,[In] const wchar_t* fontFileUrl,[Out] IDWriteFontFile** fontFile)</unmanaged>
        /// <unmanaged-short>IDWriteRemoteFontFileLoader::CreateFontFileReferenceFromUrl</unmanaged-short>
        public unsafe void CreateFontFileReferenceFromUrl(DXNET.DirectWrite.Factory factory, System.String baseUrl, System.String fontFileUrl, out DXNET.DirectWrite.FontFile fontFile)
        {
            System.IntPtr factory_ = System.IntPtr.Zero;
            System.IntPtr fontFile_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            factory_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.Factory>(factory);
            fixed (char *fontFileUrl_ = fontFileUrl)
                fixed (char *baseUrl_ = baseUrl)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)factory_, (void *)baseUrl_, (void *)fontFileUrl_, &fontFile_, (*(void ***)this._nativePointer)[6]);
            if (fontFile_ != System.IntPtr.Zero)
                fontFile = new DXNET.DirectWrite.FontFile(fontFile_);
            else
                fontFile = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("4DB3757A-2C72-4ED9-B2B6-1ABABE1AFF9C")]
    public partial class RemoteFontFileStream : DXNET.DirectWrite.FontFileStreamNative
    {
        public RemoteFontFileStream(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RemoteFontFileStream(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RemoteFontFileStream(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetLocalFileSize</unmanaged>
        /// <unmanaged-short>GetLocalFileSize</unmanaged-short>
        public System.Int64 LocalFileSize
        {
            get
            {
                GetLocalFileSize(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetLocality</unmanaged>
        /// <unmanaged-short>GetLocality</unmanaged-short>
        public DXNET.DirectWrite.Locality Locality
        {
            get => GetLocality();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "localFileSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteRemoteFontFileStream::GetLocalFileSize([Out] unsigned longlong* localFileSize)</unmanaged>
        /// <unmanaged-short>IDWriteRemoteFontFileStream::GetLocalFileSize</unmanaged-short>
        internal unsafe void GetLocalFileSize(out System.Int64 localFileSize)
        {
            DXNET.Result __result__;
            fixed (void *localFileSize_ = &localFileSize)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, localFileSize_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fileOffset">No documentation.</param>
        /// <param name = "fragmentSize">No documentation.</param>
        /// <param name = "isLocal">No documentation.</param>
        /// <param name = "artialSizeRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteRemoteFontFileStream::GetFileFragmentLocality([In] unsigned longlong fileOffset,[In] unsigned longlong fragmentSize,[Out] BOOL* isLocal,[In] unsigned longlong* partialSize)</unmanaged>
        /// <unmanaged-short>IDWriteRemoteFontFileStream::GetFileFragmentLocality</unmanaged-short>
        public unsafe void GetFileFragmentLocality(System.Int64 fileOffset, System.Int64 fragmentSize, out DXNET.Mathematics.Interop.RawBool isLocal, System.Int64 artialSizeRef)
        {
            isLocal = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fixed (void *isLocal_ = &isLocal)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, fileOffset, fragmentSize, isLocal_, &artialSizeRef, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_LOCALITY IDWriteRemoteFontFileStream::GetLocality()</unmanaged>
        /// <unmanaged-short>IDWriteRemoteFontFileStream::GetLocality</unmanaged-short>
        internal unsafe DXNET.DirectWrite.Locality GetLocality()
        {
            DXNET.DirectWrite.Locality __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteLocality(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "downloadOperationID">No documentation.</param>
        /// <param name = "fileFragments">No documentation.</param>
        /// <param name = "fragmentCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteRemoteFontFileStream::BeginDownload([In] const GUID* downloadOperationID,[In, Buffer] const DWRITE_FILE_FRAGMENT* fileFragments,[In] unsigned int fragmentCount,[Out, Optional] IDWriteAsyncResult** asyncResult)</unmanaged>
        /// <unmanaged-short>IDWriteRemoteFontFileStream::BeginDownload</unmanaged-short>
        public unsafe DXNET.DirectWrite.AsyncResult BeginDownload(System.Guid downloadOperationID, DXNET.DirectWrite.FileFragment[] fileFragments, System.Int32 fragmentCount)
        {
            DXNET.DirectWrite.AsyncResult asyncResult;
            System.IntPtr asyncResult_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *fileFragments_ = fileFragments)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &downloadOperationID, fileFragments_, fragmentCount, &asyncResult_, (*(void ***)this._nativePointer)[10]);
            if (asyncResult_ != System.IntPtr.Zero)
                asyncResult = new DXNET.DirectWrite.AsyncResult(asyncResult_);
            else
                asyncResult = null;
            __result__.CheckError();
            return asyncResult;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2f0da53a-2add-47cd-82ee-d9ec34688e75")]
    public partial class RenderingParams : DXNET.ComObject
    {
        public RenderingParams(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RenderingParams(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RenderingParams(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetGamma</unmanaged>
        /// <unmanaged-short>GetGamma</unmanaged-short>
        public System.Single Gamma
        {
            get => GetGamma();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetEnhancedContrast</unmanaged>
        /// <unmanaged-short>GetEnhancedContrast</unmanaged-short>
        public System.Single EnhancedContrast
        {
            get => GetEnhancedContrast();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetClearTypeLevel</unmanaged>
        /// <unmanaged-short>GetClearTypeLevel</unmanaged-short>
        public System.Single ClearTypeLevel
        {
            get => GetClearTypeLevel();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetPixelGeometry</unmanaged>
        /// <unmanaged-short>GetPixelGeometry</unmanaged-short>
        public DXNET.DirectWrite.PixelGeometry PixelGeometry
        {
            get => GetPixelGeometry();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetRenderingMode</unmanaged>
        /// <unmanaged-short>GetRenderingMode</unmanaged-short>
        public DXNET.DirectWrite.RenderingMode RenderingMode
        {
            get => GetRenderingMode();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float IDWriteRenderingParams::GetGamma()</unmanaged>
        /// <unmanaged-short>IDWriteRenderingParams::GetGamma</unmanaged-short>
        internal unsafe System.Single GetGamma()
        {
            System.Single __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallfloat(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float IDWriteRenderingParams::GetEnhancedContrast()</unmanaged>
        /// <unmanaged-short>IDWriteRenderingParams::GetEnhancedContrast</unmanaged-short>
        internal unsafe System.Single GetEnhancedContrast()
        {
            System.Single __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallfloat(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float IDWriteRenderingParams::GetClearTypeLevel()</unmanaged>
        /// <unmanaged-short>IDWriteRenderingParams::GetClearTypeLevel</unmanaged-short>
        internal unsafe System.Single GetClearTypeLevel()
        {
            System.Single __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallfloat(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_PIXEL_GEOMETRY IDWriteRenderingParams::GetPixelGeometry()</unmanaged>
        /// <unmanaged-short>IDWriteRenderingParams::GetPixelGeometry</unmanaged-short>
        internal unsafe DXNET.DirectWrite.PixelGeometry GetPixelGeometry()
        {
            DXNET.DirectWrite.PixelGeometry __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWritePixelGeometry(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_RENDERING_MODE IDWriteRenderingParams::GetRenderingMode()</unmanaged>
        /// <unmanaged-short>IDWriteRenderingParams::GetRenderingMode</unmanaged-short>
        internal unsafe DXNET.DirectWrite.RenderingMode GetRenderingMode()
        {
            DXNET.DirectWrite.RenderingMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteRenderingMode(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("94413cf4-a6fc-4248-8b50-6674348fcad3")]
    public partial class RenderingParams1 : DXNET.DirectWrite.RenderingParams
    {
        public RenderingParams1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RenderingParams1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RenderingParams1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetGrayscaleEnhancedContrast</unmanaged>
        /// <unmanaged-short>GetGrayscaleEnhancedContrast</unmanaged-short>
        public System.Single GrayscaleEnhancedContrast
        {
            get => GetGrayscaleEnhancedContrast();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float IDWriteRenderingParams1::GetGrayscaleEnhancedContrast()</unmanaged>
        /// <unmanaged-short>IDWriteRenderingParams1::GetGrayscaleEnhancedContrast</unmanaged-short>
        internal unsafe System.Single GetGrayscaleEnhancedContrast()
        {
            System.Single __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallfloat(this._nativePointer, (*(void ***)this._nativePointer)[8]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("F9D711C3-9777-40AE-87E8-3E5AF9BF0948")]
    public partial class RenderingParams2 : DXNET.DirectWrite.RenderingParams1
    {
        public RenderingParams2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RenderingParams2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RenderingParams2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetGridFitMode</unmanaged>
        /// <unmanaged-short>GetGridFitMode</unmanaged-short>
        public DXNET.DirectWrite.GridFitMode GridFitMode
        {
            get => GetGridFitMode();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_GRID_FIT_MODE IDWriteRenderingParams2::GetGridFitMode()</unmanaged>
        /// <unmanaged-short>IDWriteRenderingParams2::GetGridFitMode</unmanaged-short>
        internal unsafe DXNET.DirectWrite.GridFitMode GetGridFitMode()
        {
            DXNET.DirectWrite.GridFitMode __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteGridFitMode(this._nativePointer, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("B7924BAA-391B-412A-8C5C-E44CC2D867DC")]
    public partial class RenderingParams3 : DXNET.DirectWrite.RenderingParams2
    {
        public RenderingParams3(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator RenderingParams3(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new RenderingParams3(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetRenderingMode1</unmanaged>
        /// <unmanaged-short>GetRenderingMode1</unmanaged-short>
        public DXNET.DirectWrite.RenderingMode1 RenderingMode1
        {
            get => GetRenderingMode1();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_RENDERING_MODE1 IDWriteRenderingParams3::GetRenderingMode1()</unmanaged>
        /// <unmanaged-short>IDWriteRenderingParams3::GetRenderingMode1</unmanaged-short>
        internal unsafe DXNET.DirectWrite.RenderingMode1 GetRenderingMode1()
        {
            DXNET.DirectWrite.RenderingMode1 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteRenderingMode1(this._nativePointer, (*(void ***)this._nativePointer)[10]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("CFEE3140-1157-47CA-8B85-31BFCF3F2D0E")]
    public partial class StringList : DXNET.ComObject
    {
        public StringList(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator StringList(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new StringList(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetCount</unmanaged>
        /// <unmanaged-short>GetCount</unmanaged-short>
        public System.Int32 Count
        {
            get => GetCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDWriteStringList::GetCount()</unmanaged>
        /// <unmanaged-short>IDWriteStringList::GetCount</unmanaged-short>
        internal unsafe System.Int32 GetCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "listIndex">No documentation.</param>
        /// <param name = "length">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteStringList::GetLocaleNameLength([In] unsigned int listIndex,[Out] unsigned int* length)</unmanaged>
        /// <unmanaged-short>IDWriteStringList::GetLocaleNameLength</unmanaged-short>
        public unsafe void GetLocaleNameLength(System.Int32 listIndex, out System.Int32 length)
        {
            DXNET.Result __result__;
            fixed (void *length_ = &length)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, listIndex, length_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "listIndex">No documentation.</param>
        /// <param name = "localeName">No documentation.</param>
        /// <param name = "size">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteStringList::GetLocaleName([In] unsigned int listIndex,[Out, Buffer] wchar_t* localeName,[In] unsigned int size)</unmanaged>
        /// <unmanaged-short>IDWriteStringList::GetLocaleName</unmanaged-short>
        public unsafe void GetLocaleName(System.Int32 listIndex, System.IntPtr localeName, System.Int32 size)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, listIndex, (void *)localeName, size, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "listIndex">No documentation.</param>
        /// <param name = "length">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteStringList::GetStringLength([In] unsigned int listIndex,[Out] unsigned int* length)</unmanaged>
        /// <unmanaged-short>IDWriteStringList::GetStringLength</unmanaged-short>
        public unsafe void GetStringLength(System.Int32 listIndex, out System.Int32 length)
        {
            DXNET.Result __result__;
            fixed (void *length_ = &length)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, listIndex, length_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "listIndex">No documentation.</param>
        /// <param name = "stringBuffer">No documentation.</param>
        /// <param name = "stringBufferSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteStringList::GetString([In] unsigned int listIndex,[Out, Buffer] wchar_t* stringBuffer,[In] unsigned int stringBufferSize)</unmanaged>
        /// <unmanaged-short>IDWriteStringList::GetString</unmanaged-short>
        public unsafe void GetString(System.Int32 listIndex, System.IntPtr stringBuffer, System.Int32 stringBufferSize)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, listIndex, (void *)stringBuffer, stringBufferSize, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5810cd44-0ca0-4701-b3fa-bec5182ae4f6")]
    public partial interface TextAnalysisSink : DXNET.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("B0D941A0-85E7-4D8B-9FD3-5CED9934482A")]
    public partial interface TextAnalysisSink1 : DXNET.DirectWrite.TextAnalysisSink
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("688e1a58-5094-47c8-adc8-fbcea60ae92b")]
    public partial interface TextAnalysisSource : DXNET.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("639CFAD8-0FB4-4B21-A58A-067920120009")]
    public partial interface TextAnalysisSource1 : DXNET.DirectWrite.TextAnalysisSource
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("b7e6163e-7f46-43b4-84b3-e4e6249c365d")]
    public partial class TextAnalyzer : DXNET.ComObject
    {
        public TextAnalyzer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TextAnalyzer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TextAnalyzer(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "analysisSource">No documentation.</param>
        /// <param name = "textPosition">No documentation.</param>
        /// <param name = "textLength">No documentation.</param>
        /// <param name = "analysisSink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeScript([In] IDWriteTextAnalysisSource* analysisSource,[In] unsigned int textPosition,[In] unsigned int textLength,[In] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer::AnalyzeScript</unmanaged-short>
        public unsafe void AnalyzeScript(DXNET.DirectWrite.TextAnalysisSource analysisSource, System.Int32 textPosition, System.Int32 textLength, DXNET.DirectWrite.TextAnalysisSink analysisSink)
        {
            System.IntPtr analysisSource_ = System.IntPtr.Zero;
            System.IntPtr analysisSink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            analysisSource_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextAnalysisSource>(analysisSource);
            analysisSink_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextAnalysisSink>(analysisSink);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)analysisSource_, textPosition, textLength, (void *)analysisSink_, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "analysisSource">No documentation.</param>
        /// <param name = "textPosition">No documentation.</param>
        /// <param name = "textLength">No documentation.</param>
        /// <param name = "analysisSink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeBidi([In] IDWriteTextAnalysisSource* analysisSource,[In] unsigned int textPosition,[In] unsigned int textLength,[In] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer::AnalyzeBidi</unmanaged-short>
        public unsafe void AnalyzeBidi(DXNET.DirectWrite.TextAnalysisSource analysisSource, System.Int32 textPosition, System.Int32 textLength, DXNET.DirectWrite.TextAnalysisSink analysisSink)
        {
            System.IntPtr analysisSource_ = System.IntPtr.Zero;
            System.IntPtr analysisSink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            analysisSource_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextAnalysisSource>(analysisSource);
            analysisSink_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextAnalysisSink>(analysisSink);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)analysisSource_, textPosition, textLength, (void *)analysisSink_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "analysisSource">No documentation.</param>
        /// <param name = "textPosition">No documentation.</param>
        /// <param name = "textLength">No documentation.</param>
        /// <param name = "analysisSink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeNumberSubstitution([In] IDWriteTextAnalysisSource* analysisSource,[In] unsigned int textPosition,[In] unsigned int textLength,[In] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer::AnalyzeNumberSubstitution</unmanaged-short>
        public unsafe void AnalyzeNumberSubstitution(DXNET.DirectWrite.TextAnalysisSource analysisSource, System.Int32 textPosition, System.Int32 textLength, DXNET.DirectWrite.TextAnalysisSink analysisSink)
        {
            System.IntPtr analysisSource_ = System.IntPtr.Zero;
            System.IntPtr analysisSink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            analysisSource_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextAnalysisSource>(analysisSource);
            analysisSink_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextAnalysisSink>(analysisSink);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)analysisSource_, textPosition, textLength, (void *)analysisSink_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "analysisSource">No documentation.</param>
        /// <param name = "textPosition">No documentation.</param>
        /// <param name = "textLength">No documentation.</param>
        /// <param name = "analysisSink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer::AnalyzeLineBreakpoints([In] IDWriteTextAnalysisSource* analysisSource,[In] unsigned int textPosition,[In] unsigned int textLength,[In] IDWriteTextAnalysisSink* analysisSink)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer::AnalyzeLineBreakpoints</unmanaged-short>
        public unsafe void AnalyzeLineBreakpoints(DXNET.DirectWrite.TextAnalysisSource analysisSource, System.Int32 textPosition, System.Int32 textLength, DXNET.DirectWrite.TextAnalysisSink analysisSink)
        {
            System.IntPtr analysisSource_ = System.IntPtr.Zero;
            System.IntPtr analysisSink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            analysisSource_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextAnalysisSource>(analysisSource);
            analysisSink_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextAnalysisSink>(analysisSink);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)analysisSource_, textPosition, textLength, (void *)analysisSink_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textString">No documentation.</param>
        /// <param name = "textLength">No documentation.</param>
        /// <param name = "fontFace">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <param name = "isRightToLeft">No documentation.</param>
        /// <param name = "scriptAnalysis">No documentation.</param>
        /// <param name = "localeName">No documentation.</param>
        /// <param name = "numberSubstitution">No documentation.</param>
        /// <param name = "features">No documentation.</param>
        /// <param name = "featureRangeLengths">No documentation.</param>
        /// <param name = "featureRanges">No documentation.</param>
        /// <param name = "maxGlyphCount">No documentation.</param>
        /// <param name = "clusterMap">No documentation.</param>
        /// <param name = "textProps">No documentation.</param>
        /// <param name = "glyphIndices">No documentation.</param>
        /// <param name = "glyphProps">No documentation.</param>
        /// <param name = "actualGlyphCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer::GetGlyphs([In, Buffer] const wchar_t* textString,[In] unsigned int textLength,[In] IDWriteFontFace* fontFace,[In] BOOL isSideways,[In] BOOL isRightToLeft,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis,[In, Optional] const wchar_t* localeName,[In, Optional] IDWriteNumberSubstitution* numberSubstitution,[In, Optional] const void** features,[In, Buffer, Optional] const unsigned int* featureRangeLengths,[In] unsigned int featureRanges,[In] unsigned int maxGlyphCount,[Out, Buffer] unsigned short* clusterMap,[Out, Buffer] DWRITE_SHAPING_TEXT_PROPERTIES* textProps,[Out, Buffer] unsigned short* glyphIndices,[Out, Buffer] DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps,[Out] unsigned int* actualGlyphCount)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer::GetGlyphs</unmanaged-short>
        internal unsafe void GetGlyphs(System.String textString, System.Int32 textLength, DXNET.DirectWrite.FontFace fontFace, DXNET.Mathematics.Interop.RawBool isSideways, DXNET.Mathematics.Interop.RawBool isRightToLeft, DXNET.DirectWrite.ScriptAnalysis scriptAnalysis, System.String localeName, DXNET.DirectWrite.NumberSubstitution numberSubstitution, System.IntPtr features, System.Int32[] featureRangeLengths, System.Int32 featureRanges, System.Int32 maxGlyphCount, System.Int16[] clusterMap, DXNET.DirectWrite.ShapingTextProperties[] textProps, System.Int16[] glyphIndices, DXNET.DirectWrite.ShapingGlyphProperties[] glyphProps, out System.Int32 actualGlyphCount)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            System.IntPtr numberSubstitution_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFace_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFace>(fontFace);
            numberSubstitution_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.NumberSubstitution>(numberSubstitution);
            fixed (void *actualGlyphCount_ = &actualGlyphCount)
                fixed (void *glyphProps_ = glyphProps)
                    fixed (void *glyphIndices_ = glyphIndices)
                        fixed (void *textProps_ = textProps)
                            fixed (void *clusterMap_ = clusterMap)
                                fixed (void *featureRangeLengths_ = featureRangeLengths)
                                    fixed (char *localeName_ = localeName)
                                        fixed (char *textString_ = textString)
                                            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)textString_, textLength, (void *)fontFace_, isSideways, isRightToLeft, &scriptAnalysis, (void *)localeName_, (void *)numberSubstitution_, (void *)features, featureRangeLengths_, featureRanges, maxGlyphCount, clusterMap_, textProps_, glyphIndices_, glyphProps_, actualGlyphCount_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textString">No documentation.</param>
        /// <param name = "clusterMap">No documentation.</param>
        /// <param name = "textProps">No documentation.</param>
        /// <param name = "textLength">No documentation.</param>
        /// <param name = "glyphIndices">No documentation.</param>
        /// <param name = "glyphProps">No documentation.</param>
        /// <param name = "glyphCount">No documentation.</param>
        /// <param name = "fontFace">No documentation.</param>
        /// <param name = "fontEmSize">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <param name = "isRightToLeft">No documentation.</param>
        /// <param name = "scriptAnalysis">No documentation.</param>
        /// <param name = "localeName">No documentation.</param>
        /// <param name = "features">No documentation.</param>
        /// <param name = "featureRangeLengths">No documentation.</param>
        /// <param name = "featureRanges">No documentation.</param>
        /// <param name = "glyphAdvances">No documentation.</param>
        /// <param name = "glyphOffsets">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer::GetGlyphPlacements([In, Buffer] const wchar_t* textString,[In, Buffer] const unsigned short* clusterMap,[Out, Buffer] DWRITE_SHAPING_TEXT_PROPERTIES* textProps,[In] unsigned int textLength,[In, Buffer] const unsigned short* glyphIndices,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps,[In] unsigned int glyphCount,[In] IDWriteFontFace* fontFace,[In] float fontEmSize,[In] BOOL isSideways,[In] BOOL isRightToLeft,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis,[In, Optional] const wchar_t* localeName,[In, Optional] const void** features,[In, Buffer, Optional] const unsigned int* featureRangeLengths,[In] unsigned int featureRanges,[Out, Buffer] float* glyphAdvances,[Out, Buffer] DWRITE_GLYPH_OFFSET* glyphOffsets)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer::GetGlyphPlacements</unmanaged-short>
        internal unsafe void GetGlyphPlacements(System.String textString, System.Int16[] clusterMap, DXNET.DirectWrite.ShapingTextProperties[] textProps, System.Int32 textLength, System.Int16[] glyphIndices, DXNET.DirectWrite.ShapingGlyphProperties[] glyphProps, System.Int32 glyphCount, DXNET.DirectWrite.FontFace fontFace, System.Single fontEmSize, DXNET.Mathematics.Interop.RawBool isSideways, DXNET.Mathematics.Interop.RawBool isRightToLeft, DXNET.DirectWrite.ScriptAnalysis scriptAnalysis, System.String localeName, System.IntPtr features, System.Int32[] featureRangeLengths, System.Int32 featureRanges, System.Single[] glyphAdvances, DXNET.DirectWrite.GlyphOffset[] glyphOffsets)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFace_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFace>(fontFace);
            fixed (void *glyphOffsets_ = glyphOffsets)
                fixed (void *glyphAdvances_ = glyphAdvances)
                    fixed (void *featureRangeLengths_ = featureRangeLengths)
                        fixed (char *localeName_ = localeName)
                            fixed (void *glyphProps_ = glyphProps)
                                fixed (void *glyphIndices_ = glyphIndices)
                                    fixed (void *textProps_ = textProps)
                                        fixed (void *clusterMap_ = clusterMap)
                                            fixed (char *textString_ = textString)
                                                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)textString_, clusterMap_, textProps_, textLength, glyphIndices_, glyphProps_, glyphCount, (void *)fontFace_, fontEmSize, isSideways, isRightToLeft, &scriptAnalysis, (void *)localeName_, (void *)features, featureRangeLengths_, featureRanges, glyphAdvances_, glyphOffsets_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textString">No documentation.</param>
        /// <param name = "clusterMap">No documentation.</param>
        /// <param name = "textProps">No documentation.</param>
        /// <param name = "textLength">No documentation.</param>
        /// <param name = "glyphIndices">No documentation.</param>
        /// <param name = "glyphProps">No documentation.</param>
        /// <param name = "glyphCount">No documentation.</param>
        /// <param name = "fontFace">No documentation.</param>
        /// <param name = "fontEmSize">No documentation.</param>
        /// <param name = "pixelsPerDip">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <param name = "useGdiNatural">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <param name = "isRightToLeft">No documentation.</param>
        /// <param name = "scriptAnalysis">No documentation.</param>
        /// <param name = "localeName">No documentation.</param>
        /// <param name = "features">No documentation.</param>
        /// <param name = "featureRangeLengths">No documentation.</param>
        /// <param name = "featureRanges">No documentation.</param>
        /// <param name = "glyphAdvances">No documentation.</param>
        /// <param name = "glyphOffsets">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer::GetGdiCompatibleGlyphPlacements([In, Buffer] const wchar_t* textString,[In, Buffer] const unsigned short* clusterMap,[In, Buffer] DWRITE_SHAPING_TEXT_PROPERTIES* textProps,[In] unsigned int textLength,[In, Buffer] const unsigned short* glyphIndices,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps,[In] unsigned int glyphCount,[In] IDWriteFontFace* fontFace,[In] float fontEmSize,[In] float pixelsPerDip,[In, Optional] const DWRITE_MATRIX* transform,[In] BOOL useGdiNatural,[In] BOOL isSideways,[In] BOOL isRightToLeft,[In] const DWRITE_SCRIPT_ANALYSIS* scriptAnalysis,[In, Optional] const wchar_t* localeName,[In, Optional] const void** features,[In, Buffer, Optional] const unsigned int* featureRangeLengths,[In] unsigned int featureRanges,[Out, Buffer] float* glyphAdvances,[Out, Buffer] DWRITE_GLYPH_OFFSET* glyphOffsets)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer::GetGdiCompatibleGlyphPlacements</unmanaged-short>
        internal unsafe void GetGdiCompatibleGlyphPlacements(System.String textString, System.Int16[] clusterMap, DXNET.DirectWrite.ShapingTextProperties[] textProps, System.Int32 textLength, System.Int16[] glyphIndices, DXNET.DirectWrite.ShapingGlyphProperties[] glyphProps, System.Int32 glyphCount, DXNET.DirectWrite.FontFace fontFace, System.Single fontEmSize, System.Single pixelsPerDip, DXNET.Mathematics.Interop.RawMatrix3x2? transform, DXNET.Mathematics.Interop.RawBool useGdiNatural, DXNET.Mathematics.Interop.RawBool isSideways, DXNET.Mathematics.Interop.RawBool isRightToLeft, DXNET.DirectWrite.ScriptAnalysis scriptAnalysis, System.String localeName, System.IntPtr features, System.Int32[] featureRangeLengths, System.Int32 featureRanges, System.Single[] glyphAdvances, DXNET.DirectWrite.GlyphOffset[] glyphOffsets)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.Mathematics.Interop.RawMatrix3x2 transform_;
            DXNET.Result __result__;
            fontFace_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFace>(fontFace);
            if (transform != null)
                transform_ = transform.Value;
            fixed (void *glyphOffsets_ = glyphOffsets)
                fixed (void *glyphAdvances_ = glyphAdvances)
                    fixed (void *featureRangeLengths_ = featureRangeLengths)
                        fixed (char *localeName_ = localeName)
                            fixed (void *glyphProps_ = glyphProps)
                                fixed (void *glyphIndices_ = glyphIndices)
                                    fixed (void *textProps_ = textProps)
                                        fixed (void *clusterMap_ = clusterMap)
                                            fixed (char *textString_ = textString)
                                                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)textString_, clusterMap_, textProps_, textLength, glyphIndices_, glyphProps_, glyphCount, (void *)fontFace_, fontEmSize, pixelsPerDip, transform == null ? (void *)0 : &transform_, useGdiNatural, isSideways, isRightToLeft, &scriptAnalysis, (void *)localeName_, (void *)features, featureRangeLengths_, featureRanges, glyphAdvances_, glyphOffsets_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("80DAD800-E21F-4E83-96CE-BFCCE500DB7C")]
    public partial class TextAnalyzer1 : DXNET.DirectWrite.TextAnalyzer
    {
        public TextAnalyzer1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TextAnalyzer1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TextAnalyzer1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "leadingSpacing">No documentation.</param>
        /// <param name = "trailingSpacing">No documentation.</param>
        /// <param name = "minimumAdvanceWidth">No documentation.</param>
        /// <param name = "textLength">No documentation.</param>
        /// <param name = "glyphCount">No documentation.</param>
        /// <param name = "clusterMap">No documentation.</param>
        /// <param name = "glyphAdvances">No documentation.</param>
        /// <param name = "glyphOffsets">No documentation.</param>
        /// <param name = "glyphProperties">No documentation.</param>
        /// <param name = "modifiedGlyphAdvances">No documentation.</param>
        /// <param name = "modifiedGlyphOffsets">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer1::ApplyCharacterSpacing([In] float leadingSpacing,[In] float trailingSpacing,[In] float minimumAdvanceWidth,[In] unsigned int textLength,[In] unsigned int glyphCount,[In, Buffer] const unsigned short* clusterMap,[In, Buffer] const float* glyphAdvances,[In, Buffer] const DWRITE_GLYPH_OFFSET* glyphOffsets,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties,[Out, Buffer] float* modifiedGlyphAdvances,[Out, Buffer] DWRITE_GLYPH_OFFSET* modifiedGlyphOffsets)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer1::ApplyCharacterSpacing</unmanaged-short>
        public unsafe void ApplyCharacterSpacing(System.Single leadingSpacing, System.Single trailingSpacing, System.Single minimumAdvanceWidth, System.Int32 textLength, System.Int32 glyphCount, System.Int16[] clusterMap, System.Single[] glyphAdvances, DXNET.DirectWrite.GlyphOffset[] glyphOffsets, DXNET.DirectWrite.ShapingGlyphProperties[] glyphProperties, System.Single[] modifiedGlyphAdvances, DXNET.DirectWrite.GlyphOffset[] modifiedGlyphOffsets)
        {
            DXNET.Result __result__;
            fixed (void *modifiedGlyphOffsets_ = modifiedGlyphOffsets)
                fixed (void *modifiedGlyphAdvances_ = modifiedGlyphAdvances)
                    fixed (void *glyphProperties_ = glyphProperties)
                        fixed (void *glyphOffsets_ = glyphOffsets)
                            fixed (void *glyphAdvances_ = glyphAdvances)
                                fixed (void *clusterMap_ = clusterMap)
                                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textLength, glyphCount, clusterMap_, glyphAdvances_, glyphOffsets_, glyphProperties_, modifiedGlyphAdvances_, modifiedGlyphOffsets_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFace">No documentation.</param>
        /// <param name = "baseline">No documentation.</param>
        /// <param name = "isVertical">No documentation.</param>
        /// <param name = "isSimulationAllowed">No documentation.</param>
        /// <param name = "scriptAnalysis">No documentation.</param>
        /// <param name = "localeName">No documentation.</param>
        /// <param name = "baselineCoordinate">No documentation.</param>
        /// <param name = "exists">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer1::GetBaseline([In] IDWriteFontFace* fontFace,[In] DWRITE_BASELINE baseline,[In] BOOL isVertical,[In] BOOL isSimulationAllowed,[In] DWRITE_SCRIPT_ANALYSIS scriptAnalysis,[In, Optional] const wchar_t* localeName,[Out] int* baselineCoordinate,[Out] BOOL* exists)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer1::GetBaseline</unmanaged-short>
        public unsafe void GetBaseline(DXNET.DirectWrite.FontFace fontFace, DXNET.DirectWrite.Baseline baseline, DXNET.Mathematics.Interop.RawBool isVertical, DXNET.Mathematics.Interop.RawBool isSimulationAllowed, DXNET.DirectWrite.ScriptAnalysis scriptAnalysis, System.String localeName, out System.Int32 baselineCoordinate, out DXNET.Mathematics.Interop.RawBool exists)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            exists = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fontFace_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFace>(fontFace);
            fixed (void *exists_ = &exists)
                fixed (void *baselineCoordinate_ = &baselineCoordinate)
                    fixed (char *localeName_ = localeName)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)fontFace_, unchecked ((System.Int32)baseline), isVertical, isSimulationAllowed, scriptAnalysis, (void *)localeName_, baselineCoordinate_, exists_, (*(void ***)this._nativePointer)[11]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "analysisSource">No documentation.</param>
        /// <param name = "textPosition">No documentation.</param>
        /// <param name = "textLength">No documentation.</param>
        /// <param name = "analysisSink">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer1::AnalyzeVerticalGlyphOrientation([In] IDWriteTextAnalysisSource1* analysisSource,[In] unsigned int textPosition,[In] unsigned int textLength,[In] IDWriteTextAnalysisSink1* analysisSink)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer1::AnalyzeVerticalGlyphOrientation</unmanaged-short>
        public unsafe void AnalyzeVerticalGlyphOrientation(DXNET.DirectWrite.TextAnalysisSource1 analysisSource, System.Int32 textPosition, System.Int32 textLength, DXNET.DirectWrite.TextAnalysisSink1 analysisSink)
        {
            System.IntPtr analysisSource_ = System.IntPtr.Zero;
            System.IntPtr analysisSink_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            analysisSource_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextAnalysisSource1>(analysisSource);
            analysisSink_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextAnalysisSink1>(analysisSink);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)analysisSource_, textPosition, textLength, (void *)analysisSink_, (*(void ***)this._nativePointer)[12]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphOrientationAngle">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer1::GetGlyphOrientationTransform([In] DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle,[In] BOOL isSideways,[Out] DWRITE_MATRIX* transform)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer1::GetGlyphOrientationTransform</unmanaged-short>
        public unsafe void GetGlyphOrientationTransform(DXNET.DirectWrite.GlyphOrientationAngle glyphOrientationAngle, DXNET.Mathematics.Interop.RawBool isSideways, out DXNET.Mathematics.Interop.RawMatrix3x2 transform)
        {
            transform = default (DXNET.Mathematics.Interop.RawMatrix3x2);
            DXNET.Result __result__;
            fixed (void *transform_ = &transform)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, unchecked ((System.Int32)glyphOrientationAngle), isSideways, transform_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "scriptAnalysis">No documentation.</param>
        /// <param name = "scriptProperties">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer1::GetScriptProperties([In] DWRITE_SCRIPT_ANALYSIS scriptAnalysis,[Out] DWRITE_SCRIPT_PROPERTIES* scriptProperties)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer1::GetScriptProperties</unmanaged-short>
        public unsafe void GetScriptProperties(DXNET.DirectWrite.ScriptAnalysis scriptAnalysis, out DXNET.DirectWrite.ScriptProperties scriptProperties)
        {
            scriptProperties = default (DXNET.DirectWrite.ScriptProperties);
            DXNET.Result __result__;
            fixed (void *scriptProperties_ = &scriptProperties)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, scriptAnalysis, scriptProperties_, (*(void ***)this._nativePointer)[14]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textString">No documentation.</param>
        /// <param name = "textLength">No documentation.</param>
        /// <param name = "fontFace">No documentation.</param>
        /// <param name = "isTextSimple">No documentation.</param>
        /// <param name = "textLengthRead">No documentation.</param>
        /// <param name = "glyphIndices">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer1::GetTextComplexity([In, Buffer] const wchar_t* textString,[In] unsigned int textLength,[In] IDWriteFontFace* fontFace,[Out] BOOL* isTextSimple,[In] unsigned int* textLengthRead,[Out, Buffer, Optional] unsigned short* glyphIndices)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer1::GetTextComplexity</unmanaged-short>
        public unsafe void GetTextComplexity(System.String textString, System.Int32 textLength, DXNET.DirectWrite.FontFace fontFace, out DXNET.Mathematics.Interop.RawBool isTextSimple, System.Int32 textLengthRead, System.Int16[] glyphIndices)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            isTextSimple = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.Result __result__;
            fontFace_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFace>(fontFace);
            fixed (void *glyphIndices_ = glyphIndices)
                fixed (void *isTextSimple_ = &isTextSimple)
                    fixed (char *textString_ = textString)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)textString_, textLength, (void *)fontFace_, isTextSimple_, &textLengthRead, glyphIndices_, (*(void ***)this._nativePointer)[15]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFace">No documentation.</param>
        /// <param name = "fontEmSize">No documentation.</param>
        /// <param name = "scriptAnalysis">No documentation.</param>
        /// <param name = "textLength">No documentation.</param>
        /// <param name = "glyphCount">No documentation.</param>
        /// <param name = "textString">No documentation.</param>
        /// <param name = "clusterMap">No documentation.</param>
        /// <param name = "glyphProperties">No documentation.</param>
        /// <param name = "justificationOpportunities">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer1::GetJustificationOpportunities([In, Optional] IDWriteFontFace* fontFace,[In] float fontEmSize,[In] DWRITE_SCRIPT_ANALYSIS scriptAnalysis,[In] unsigned int textLength,[In] unsigned int glyphCount,[In, Buffer] const wchar_t* textString,[In, Buffer] const unsigned short* clusterMap,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties,[Out, Buffer] DWRITE_JUSTIFICATION_OPPORTUNITY* justificationOpportunities)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer1::GetJustificationOpportunities</unmanaged-short>
        public unsafe void GetJustificationOpportunities(DXNET.DirectWrite.FontFace fontFace, System.Single fontEmSize, DXNET.DirectWrite.ScriptAnalysis scriptAnalysis, System.Int32 textLength, System.Int32 glyphCount, System.String textString, System.Int16[] clusterMap, DXNET.DirectWrite.ShapingGlyphProperties[] glyphProperties, DXNET.DirectWrite.JustificationOpportunity[] justificationOpportunities)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFace_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFace>(fontFace);
            fixed (void *justificationOpportunities_ = justificationOpportunities)
                fixed (void *glyphProperties_ = glyphProperties)
                    fixed (void *clusterMap_ = clusterMap)
                        fixed (char *textString_ = textString)
                            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)fontFace_, fontEmSize, scriptAnalysis, textLength, glyphCount, (void *)textString_, clusterMap_, glyphProperties_, justificationOpportunities_, (*(void ***)this._nativePointer)[16]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lineWidth">No documentation.</param>
        /// <param name = "glyphCount">No documentation.</param>
        /// <param name = "justificationOpportunities">No documentation.</param>
        /// <param name = "glyphAdvances">No documentation.</param>
        /// <param name = "glyphOffsets">No documentation.</param>
        /// <param name = "justifiedGlyphAdvances">No documentation.</param>
        /// <param name = "justifiedGlyphOffsets">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer1::JustifyGlyphAdvances([In] float lineWidth,[In] unsigned int glyphCount,[In, Buffer] const DWRITE_JUSTIFICATION_OPPORTUNITY* justificationOpportunities,[In, Buffer] const float* glyphAdvances,[In, Buffer] const DWRITE_GLYPH_OFFSET* glyphOffsets,[Out, Buffer] float* justifiedGlyphAdvances,[Out, Buffer, Optional] DWRITE_GLYPH_OFFSET* justifiedGlyphOffsets)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer1::JustifyGlyphAdvances</unmanaged-short>
        public unsafe void JustifyGlyphAdvances(System.Single lineWidth, System.Int32 glyphCount, DXNET.DirectWrite.JustificationOpportunity[] justificationOpportunities, System.Single[] glyphAdvances, DXNET.DirectWrite.GlyphOffset[] glyphOffsets, System.Single[] justifiedGlyphAdvances, DXNET.DirectWrite.GlyphOffset[] justifiedGlyphOffsets)
        {
            DXNET.Result __result__;
            fixed (void *justifiedGlyphOffsets_ = justifiedGlyphOffsets)
                fixed (void *justifiedGlyphAdvances_ = justifiedGlyphAdvances)
                    fixed (void *glyphOffsets_ = glyphOffsets)
                        fixed (void *glyphAdvances_ = glyphAdvances)
                            fixed (void *justificationOpportunities_ = justificationOpportunities)
                                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, lineWidth, glyphCount, justificationOpportunities_, glyphAdvances_, glyphOffsets_, justifiedGlyphAdvances_, justifiedGlyphOffsets_, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFace">No documentation.</param>
        /// <param name = "fontEmSize">No documentation.</param>
        /// <param name = "scriptAnalysis">No documentation.</param>
        /// <param name = "textLength">No documentation.</param>
        /// <param name = "glyphCount">No documentation.</param>
        /// <param name = "maxGlyphCount">No documentation.</param>
        /// <param name = "clusterMap">No documentation.</param>
        /// <param name = "glyphIndices">No documentation.</param>
        /// <param name = "glyphAdvances">No documentation.</param>
        /// <param name = "justifiedGlyphAdvances">No documentation.</param>
        /// <param name = "justifiedGlyphOffsets">No documentation.</param>
        /// <param name = "glyphProperties">No documentation.</param>
        /// <param name = "actualGlyphCount">No documentation.</param>
        /// <param name = "modifiedClusterMap">No documentation.</param>
        /// <param name = "modifiedGlyphIndices">No documentation.</param>
        /// <param name = "modifiedGlyphAdvances">No documentation.</param>
        /// <param name = "modifiedGlyphOffsets">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer1::GetJustifiedGlyphs([In, Optional] IDWriteFontFace* fontFace,[In] float fontEmSize,[In] DWRITE_SCRIPT_ANALYSIS scriptAnalysis,[In] unsigned int textLength,[In] unsigned int glyphCount,[In] unsigned int maxGlyphCount,[In, Buffer, Optional] const unsigned short* clusterMap,[In, Buffer] const unsigned short* glyphIndices,[In, Buffer] const float* glyphAdvances,[In, Buffer] const float* justifiedGlyphAdvances,[In, Buffer] const DWRITE_GLYPH_OFFSET* justifiedGlyphOffsets,[In, Buffer] const DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProperties,[In] unsigned int* actualGlyphCount,[Out, Buffer, Optional] unsigned short* modifiedClusterMap,[Out, Buffer] unsigned short* modifiedGlyphIndices,[Out, Buffer] float* modifiedGlyphAdvances,[Out, Buffer] DWRITE_GLYPH_OFFSET* modifiedGlyphOffsets)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer1::GetJustifiedGlyphs</unmanaged-short>
        public unsafe void GetJustifiedGlyphs(DXNET.DirectWrite.FontFace fontFace, System.Single fontEmSize, DXNET.DirectWrite.ScriptAnalysis scriptAnalysis, System.Int32 textLength, System.Int32 glyphCount, System.Int32 maxGlyphCount, System.Int16[] clusterMap, System.Int16[] glyphIndices, System.Single[] glyphAdvances, System.Single[] justifiedGlyphAdvances, DXNET.DirectWrite.GlyphOffset[] justifiedGlyphOffsets, DXNET.DirectWrite.ShapingGlyphProperties[] glyphProperties, System.Int32 actualGlyphCount, System.Int16[] modifiedClusterMap, System.Int16[] modifiedGlyphIndices, System.Single[] modifiedGlyphAdvances, DXNET.DirectWrite.GlyphOffset[] modifiedGlyphOffsets)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFace_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFace>(fontFace);
            fixed (void *modifiedGlyphOffsets_ = modifiedGlyphOffsets)
                fixed (void *modifiedGlyphAdvances_ = modifiedGlyphAdvances)
                    fixed (void *modifiedGlyphIndices_ = modifiedGlyphIndices)
                        fixed (void *modifiedClusterMap_ = modifiedClusterMap)
                            fixed (void *glyphProperties_ = glyphProperties)
                                fixed (void *justifiedGlyphOffsets_ = justifiedGlyphOffsets)
                                    fixed (void *justifiedGlyphAdvances_ = justifiedGlyphAdvances)
                                        fixed (void *glyphAdvances_ = glyphAdvances)
                                            fixed (void *glyphIndices_ = glyphIndices)
                                                fixed (void *clusterMap_ = clusterMap)
                                                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)fontFace_, fontEmSize, scriptAnalysis, textLength, glyphCount, maxGlyphCount, clusterMap_, glyphIndices_, glyphAdvances_, justifiedGlyphAdvances_, justifiedGlyphOffsets_, glyphProperties_, &actualGlyphCount, modifiedClusterMap_, modifiedGlyphIndices_, modifiedGlyphAdvances_, modifiedGlyphOffsets_, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("553A9FF3-5693-4DF7-B52B-74806F7F2EB9")]
    public partial class TextAnalyzer2 : DXNET.DirectWrite.TextAnalyzer1
    {
        public TextAnalyzer2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TextAnalyzer2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TextAnalyzer2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphOrientationAngle">No documentation.</param>
        /// <param name = "isSideways">No documentation.</param>
        /// <param name = "originX">No documentation.</param>
        /// <param name = "originY">No documentation.</param>
        /// <param name = "transform">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer2::GetGlyphOrientationTransform([In] DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle,[In] BOOL isSideways,[In] float originX,[In] float originY,[Out] DWRITE_MATRIX* transform)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer2::GetGlyphOrientationTransform</unmanaged-short>
        public unsafe void GetGlyphOrientationTransform(DXNET.DirectWrite.GlyphOrientationAngle glyphOrientationAngle, DXNET.Mathematics.Interop.RawBool isSideways, System.Single originX, System.Single originY, out DXNET.Mathematics.Interop.RawMatrix3x2 transform)
        {
            transform = default (DXNET.Mathematics.Interop.RawMatrix3x2);
            DXNET.Result __result__;
            fixed (void *transform_ = &transform)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, unchecked ((System.Int32)glyphOrientationAngle), isSideways, originX, originY, transform_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFace">No documentation.</param>
        /// <param name = "scriptAnalysis">No documentation.</param>
        /// <param name = "localeName">No documentation.</param>
        /// <param name = "maxTagCount">No documentation.</param>
        /// <param name = "actualTagCount">No documentation.</param>
        /// <param name = "tags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer2::GetTypographicFeatures([In] IDWriteFontFace* fontFace,[In] DWRITE_SCRIPT_ANALYSIS scriptAnalysis,[In, Optional] const wchar_t* localeName,[In] unsigned int maxTagCount,[Out] unsigned int* actualTagCount,[Out, Buffer] DWRITE_FONT_FEATURE_TAG* tags)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer2::GetTypographicFeatures</unmanaged-short>
        public unsafe void GetTypographicFeatures(DXNET.DirectWrite.FontFace fontFace, DXNET.DirectWrite.ScriptAnalysis scriptAnalysis, System.String localeName, System.Int32 maxTagCount, out System.Int32 actualTagCount, DXNET.DirectWrite.FontFeatureTag[] tags)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFace_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFace>(fontFace);
            fixed (void *tags_ = tags)
                fixed (void *actualTagCount_ = &actualTagCount)
                    fixed (char *localeName_ = localeName)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)fontFace_, scriptAnalysis, (void *)localeName_, maxTagCount, actualTagCount_, tags_, (*(void ***)this._nativePointer)[20]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFace">No documentation.</param>
        /// <param name = "scriptAnalysis">No documentation.</param>
        /// <param name = "localeName">No documentation.</param>
        /// <param name = "featureTag">No documentation.</param>
        /// <param name = "glyphCount">No documentation.</param>
        /// <param name = "glyphIndices">No documentation.</param>
        /// <param name = "featureApplies">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextAnalyzer2::CheckTypographicFeature([In] IDWriteFontFace* fontFace,[In] DWRITE_SCRIPT_ANALYSIS scriptAnalysis,[In, Optional] const wchar_t* localeName,[In] DWRITE_FONT_FEATURE_TAG featureTag,[In] unsigned int glyphCount,[In, Buffer] const unsigned short* glyphIndices,[Out, Buffer] unsigned char* featureApplies)</unmanaged>
        /// <unmanaged-short>IDWriteTextAnalyzer2::CheckTypographicFeature</unmanaged-short>
        public unsafe void CheckTypographicFeature(DXNET.DirectWrite.FontFace fontFace, DXNET.DirectWrite.ScriptAnalysis scriptAnalysis, System.String localeName, DXNET.DirectWrite.FontFeatureTag featureTag, System.Int32 glyphCount, System.Int16[] glyphIndices, System.Byte[] featureApplies)
        {
            System.IntPtr fontFace_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFace_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFace>(fontFace);
            fixed (void *featureApplies_ = featureApplies)
                fixed (void *glyphIndices_ = glyphIndices)
                    fixed (char *localeName_ = localeName)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)fontFace_, scriptAnalysis, (void *)localeName_, unchecked ((System.Int32)featureTag), glyphCount, glyphIndices_, featureApplies_, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("9c906818-31d7-4fd3-a151-7c5e225db55a")]
    public partial class TextFormat : DXNET.ComObject
    {
        public TextFormat(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TextFormat(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TextFormat(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetTextAlignment / SetTextAlignment</unmanaged>
        /// <unmanaged-short>GetTextAlignment</unmanaged-short>
        public DXNET.DirectWrite.TextAlignment TextAlignment
        {
            get => GetTextAlignment();
            set => SetTextAlignment(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetParagraphAlignment / SetParagraphAlignment</unmanaged>
        /// <unmanaged-short>GetParagraphAlignment</unmanaged-short>
        public DXNET.DirectWrite.ParagraphAlignment ParagraphAlignment
        {
            get => GetParagraphAlignment();
            set => SetParagraphAlignment(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetWordWrapping / SetWordWrapping</unmanaged>
        /// <unmanaged-short>GetWordWrapping</unmanaged-short>
        public DXNET.DirectWrite.WordWrapping WordWrapping
        {
            get => GetWordWrapping();
            set => SetWordWrapping(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetReadingDirection / SetReadingDirection</unmanaged>
        /// <unmanaged-short>GetReadingDirection</unmanaged-short>
        public DXNET.DirectWrite.ReadingDirection ReadingDirection
        {
            get => GetReadingDirection();
            set => SetReadingDirection(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFlowDirection / SetFlowDirection</unmanaged>
        /// <unmanaged-short>GetFlowDirection</unmanaged-short>
        public DXNET.DirectWrite.FlowDirection FlowDirection
        {
            get => GetFlowDirection();
            set => SetFlowDirection(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetIncrementalTabStop / SetIncrementalTabStop</unmanaged>
        /// <unmanaged-short>GetIncrementalTabStop</unmanaged-short>
        public System.Single IncrementalTabStop
        {
            get => GetIncrementalTabStop();
            set => SetIncrementalTabStop(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontCollection</unmanaged>
        /// <unmanaged-short>GetFontCollection</unmanaged-short>
        public DXNET.DirectWrite.FontCollection FontCollection
        {
            get
            {
                GetFontCollection(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontWeight</unmanaged>
        /// <unmanaged-short>GetFontWeight</unmanaged-short>
        public DXNET.DirectWrite.FontWeight FontWeight
        {
            get => GetFontWeight();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontStyle</unmanaged>
        /// <unmanaged-short>GetFontStyle</unmanaged-short>
        public DXNET.DirectWrite.FontStyle FontStyle
        {
            get => GetFontStyle();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontStretch</unmanaged>
        /// <unmanaged-short>GetFontStretch</unmanaged-short>
        public DXNET.DirectWrite.FontStretch FontStretch
        {
            get => GetFontStretch();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontSize</unmanaged>
        /// <unmanaged-short>GetFontSize</unmanaged-short>
        public System.Single FontSize
        {
            get => GetFontSize();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textAlignment">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat::SetTextAlignment([In] DWRITE_TEXT_ALIGNMENT textAlignment)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::SetTextAlignment</unmanaged-short>
        internal unsafe void SetTextAlignment(DXNET.DirectWrite.TextAlignment textAlignment)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)textAlignment), (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "paragraphAlignment">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat::SetParagraphAlignment([In] DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::SetParagraphAlignment</unmanaged-short>
        internal unsafe void SetParagraphAlignment(DXNET.DirectWrite.ParagraphAlignment paragraphAlignment)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)paragraphAlignment), (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "wordWrapping">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat::SetWordWrapping([In] DWRITE_WORD_WRAPPING wordWrapping)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::SetWordWrapping</unmanaged-short>
        internal unsafe void SetWordWrapping(DXNET.DirectWrite.WordWrapping wordWrapping)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)wordWrapping), (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "readingDirection">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat::SetReadingDirection([In] DWRITE_READING_DIRECTION readingDirection)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::SetReadingDirection</unmanaged-short>
        internal unsafe void SetReadingDirection(DXNET.DirectWrite.ReadingDirection readingDirection)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)readingDirection), (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "flowDirection">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat::SetFlowDirection([In] DWRITE_FLOW_DIRECTION flowDirection)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::SetFlowDirection</unmanaged-short>
        internal unsafe void SetFlowDirection(DXNET.DirectWrite.FlowDirection flowDirection)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)flowDirection), (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "incrementalTabStop">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat::SetIncrementalTabStop([In] float incrementalTabStop)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::SetIncrementalTabStop</unmanaged-short>
        internal unsafe void SetIncrementalTabStop(System.Single incrementalTabStop)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, incrementalTabStop, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "trimmingOptions">No documentation.</param>
        /// <param name = "trimmingSign">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat::SetTrimming([In] const DWRITE_TRIMMING* trimmingOptions,[In, Optional] IDWriteInlineObject* trimmingSign)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::SetTrimming</unmanaged-short>
        public unsafe void SetTrimming(DXNET.DirectWrite.Trimming trimmingOptions, DXNET.DirectWrite.InlineObject trimmingSign)
        {
            System.IntPtr trimmingSign_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            trimmingSign_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.InlineObject>(trimmingSign);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &trimmingOptions, (void *)trimmingSign_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lineSpacingMethod">No documentation.</param>
        /// <param name = "lineSpacing">No documentation.</param>
        /// <param name = "baseline">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat::SetLineSpacing([In] DWRITE_LINE_SPACING_METHOD lineSpacingMethod,[In] float lineSpacing,[In] float baseline)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::SetLineSpacing</unmanaged-short>
        public unsafe void SetLineSpacing(DXNET.DirectWrite.LineSpacingMethod lineSpacingMethod, System.Single lineSpacing, System.Single baseline)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)lineSpacingMethod), lineSpacing, baseline, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_TEXT_ALIGNMENT IDWriteTextFormat::GetTextAlignment()</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetTextAlignment</unmanaged-short>
        internal unsafe DXNET.DirectWrite.TextAlignment GetTextAlignment()
        {
            DXNET.DirectWrite.TextAlignment __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteTextAlignment(this._nativePointer, (*(void ***)this._nativePointer)[11]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT IDWriteTextFormat::GetParagraphAlignment()</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetParagraphAlignment</unmanaged-short>
        internal unsafe DXNET.DirectWrite.ParagraphAlignment GetParagraphAlignment()
        {
            DXNET.DirectWrite.ParagraphAlignment __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteParagraphAlignment(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_WORD_WRAPPING IDWriteTextFormat::GetWordWrapping()</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetWordWrapping</unmanaged-short>
        internal unsafe DXNET.DirectWrite.WordWrapping GetWordWrapping()
        {
            DXNET.DirectWrite.WordWrapping __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteWordWrapping(this._nativePointer, (*(void ***)this._nativePointer)[13]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_READING_DIRECTION IDWriteTextFormat::GetReadingDirection()</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetReadingDirection</unmanaged-short>
        internal unsafe DXNET.DirectWrite.ReadingDirection GetReadingDirection()
        {
            DXNET.DirectWrite.ReadingDirection __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteReadingDirection(this._nativePointer, (*(void ***)this._nativePointer)[14]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_FLOW_DIRECTION IDWriteTextFormat::GetFlowDirection()</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetFlowDirection</unmanaged-short>
        internal unsafe DXNET.DirectWrite.FlowDirection GetFlowDirection()
        {
            DXNET.DirectWrite.FlowDirection __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteFlowDirection(this._nativePointer, (*(void ***)this._nativePointer)[15]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float IDWriteTextFormat::GetIncrementalTabStop()</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetIncrementalTabStop</unmanaged-short>
        internal unsafe System.Single GetIncrementalTabStop()
        {
            System.Single __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallfloat(this._nativePointer, (*(void ***)this._nativePointer)[16]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "trimmingOptions">No documentation.</param>
        /// <param name = "trimmingSign">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat::GetTrimming([Out] DWRITE_TRIMMING* trimmingOptions,[Out] IDWriteInlineObject** trimmingSign)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetTrimming</unmanaged-short>
        public unsafe void GetTrimming(out DXNET.DirectWrite.Trimming trimmingOptions, out DXNET.DirectWrite.InlineObject trimmingSign)
        {
            trimmingOptions = default (DXNET.DirectWrite.Trimming);
            System.IntPtr trimmingSign_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fixed (void *trimmingOptions_ = &trimmingOptions)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, trimmingOptions_, &trimmingSign_, (*(void ***)this._nativePointer)[17]);
            if (trimmingSign_ != System.IntPtr.Zero)
                trimmingSign = new DXNET.DirectWrite.InlineObjectNative(trimmingSign_);
            else
                trimmingSign = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lineSpacingMethod">No documentation.</param>
        /// <param name = "lineSpacing">No documentation.</param>
        /// <param name = "baseline">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat::GetLineSpacing([Out] DWRITE_LINE_SPACING_METHOD* lineSpacingMethod,[Out] float* lineSpacing,[Out] float* baseline)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetLineSpacing</unmanaged-short>
        public unsafe void GetLineSpacing(out DXNET.DirectWrite.LineSpacingMethod lineSpacingMethod, out System.Single lineSpacing, out System.Single baseline)
        {
            DXNET.Result __result__;
            fixed (void *baseline_ = &baseline)
                fixed (void *lineSpacing_ = &lineSpacing)
                    fixed (void *lineSpacingMethod_ = &lineSpacingMethod)
                        __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, lineSpacingMethod_, lineSpacing_, baseline_, (*(void ***)this._nativePointer)[18]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontCollection">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat::GetFontCollection([Out] IDWriteFontCollection** fontCollection)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetFontCollection</unmanaged-short>
        internal unsafe void GetFontCollection(out DXNET.DirectWrite.FontCollection fontCollection)
        {
            System.IntPtr fontCollection_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontCollection_, (*(void ***)this._nativePointer)[19]);
            if (fontCollection_ != System.IntPtr.Zero)
                fontCollection = new DXNET.DirectWrite.FontCollection(fontCollection_);
            else
                fontCollection = null;
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDWriteTextFormat::GetFontFamilyNameLength()</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetFontFamilyNameLength</unmanaged-short>
        internal unsafe System.Int32 GetFontFamilyNameLength()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[20]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFamilyName">No documentation.</param>
        /// <param name = "nameSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat::GetFontFamilyName([Out, Buffer] wchar_t* fontFamilyName,[In] unsigned int nameSize)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetFontFamilyName</unmanaged-short>
        internal unsafe void GetFontFamilyName(System.IntPtr fontFamilyName, System.Int32 nameSize)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFamilyName, nameSize, (*(void ***)this._nativePointer)[21]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_FONT_WEIGHT IDWriteTextFormat::GetFontWeight()</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetFontWeight</unmanaged-short>
        internal unsafe DXNET.DirectWrite.FontWeight GetFontWeight()
        {
            DXNET.DirectWrite.FontWeight __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteFontWeight(this._nativePointer, (*(void ***)this._nativePointer)[22]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_FONT_STYLE IDWriteTextFormat::GetFontStyle()</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetFontStyle</unmanaged-short>
        internal unsafe DXNET.DirectWrite.FontStyle GetFontStyle()
        {
            DXNET.DirectWrite.FontStyle __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteFontStyle(this._nativePointer, (*(void ***)this._nativePointer)[23]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_FONT_STRETCH IDWriteTextFormat::GetFontStretch()</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetFontStretch</unmanaged-short>
        internal unsafe DXNET.DirectWrite.FontStretch GetFontStretch()
        {
            DXNET.DirectWrite.FontStretch __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteFontStretch(this._nativePointer, (*(void ***)this._nativePointer)[24]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float IDWriteTextFormat::GetFontSize()</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetFontSize</unmanaged-short>
        internal unsafe System.Single GetFontSize()
        {
            System.Single __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallfloat(this._nativePointer, (*(void ***)this._nativePointer)[25]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDWriteTextFormat::GetLocaleNameLength()</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetLocaleNameLength</unmanaged-short>
        internal unsafe System.Int32 GetLocaleNameLength()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[26]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "localeName">No documentation.</param>
        /// <param name = "nameSize">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat::GetLocaleName([Out, Buffer] wchar_t* localeName,[In] unsigned int nameSize)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat::GetLocaleName</unmanaged-short>
        internal unsafe void GetLocaleName(System.IntPtr localeName, System.Int32 nameSize)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)localeName, nameSize, (*(void ***)this._nativePointer)[27]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5F174B49-0D8B-4CFB-8BCA-F1CCE9D06C67")]
    public partial class TextFormat1 : DXNET.DirectWrite.TextFormat
    {
        public TextFormat1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TextFormat1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TextFormat1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetVerticalGlyphOrientation / SetVerticalGlyphOrientation</unmanaged>
        /// <unmanaged-short>GetVerticalGlyphOrientation</unmanaged-short>
        public DXNET.DirectWrite.VerticalGlyphOrientation VerticalGlyphOrientation
        {
            get => GetVerticalGlyphOrientation();
            set => SetVerticalGlyphOrientation(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetLastLineWrapping / SetLastLineWrapping</unmanaged>
        /// <unmanaged-short>GetLastLineWrapping</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool LastLineWrapping
        {
            get => GetLastLineWrapping();
            set => SetLastLineWrapping(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetOpticalAlignment / SetOpticalAlignment</unmanaged>
        /// <unmanaged-short>GetOpticalAlignment</unmanaged-short>
        public DXNET.DirectWrite.OptimizationIcalAlignment OpticalAlignment
        {
            get => GetOpticalAlignment();
            set => SetOpticalAlignment(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontFallback / SetFontFallback</unmanaged>
        /// <unmanaged-short>GetFontFallback</unmanaged-short>
        public DXNET.DirectWrite.FontFallback FontFallback
        {
            get
            {
                GetFontFallback(out var __output__);
                return __output__;
            }

            set => SetFontFallback(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphOrientation">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat1::SetVerticalGlyphOrientation([In] DWRITE_VERTICAL_GLYPH_ORIENTATION glyphOrientation)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat1::SetVerticalGlyphOrientation</unmanaged-short>
        internal unsafe void SetVerticalGlyphOrientation(DXNET.DirectWrite.VerticalGlyphOrientation glyphOrientation)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)glyphOrientation), (*(void ***)this._nativePointer)[28]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_VERTICAL_GLYPH_ORIENTATION IDWriteTextFormat1::GetVerticalGlyphOrientation()</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat1::GetVerticalGlyphOrientation</unmanaged-short>
        internal unsafe DXNET.DirectWrite.VerticalGlyphOrientation GetVerticalGlyphOrientation()
        {
            DXNET.DirectWrite.VerticalGlyphOrientation __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteVerticalGlyphOrientation(this._nativePointer, (*(void ***)this._nativePointer)[29]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "isLastLineWrappingEnabled">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat1::SetLastLineWrapping([In] BOOL isLastLineWrappingEnabled)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat1::SetLastLineWrapping</unmanaged-short>
        internal unsafe void SetLastLineWrapping(DXNET.Mathematics.Interop.RawBool isLastLineWrappingEnabled)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, isLastLineWrappingEnabled, (*(void ***)this._nativePointer)[30]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteTextFormat1::GetLastLineWrapping()</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat1::GetLastLineWrapping</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool GetLastLineWrapping()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[31]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "opticalAlignment">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat1::SetOpticalAlignment([In] DWRITE_OPTICAL_ALIGNMENT opticalAlignment)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat1::SetOpticalAlignment</unmanaged-short>
        internal unsafe void SetOpticalAlignment(DXNET.DirectWrite.OptimizationIcalAlignment opticalAlignment)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)opticalAlignment), (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_OPTICAL_ALIGNMENT IDWriteTextFormat1::GetOpticalAlignment()</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat1::GetOpticalAlignment</unmanaged-short>
        internal unsafe DXNET.DirectWrite.OptimizationIcalAlignment GetOpticalAlignment()
        {
            DXNET.DirectWrite.OptimizationIcalAlignment __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteOptimizationIcalAlignment(this._nativePointer, (*(void ***)this._nativePointer)[33]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFallback">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat1::SetFontFallback([In] IDWriteFontFallback* fontFallback)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat1::SetFontFallback</unmanaged-short>
        internal unsafe void SetFontFallback(DXNET.DirectWrite.FontFallback fontFallback)
        {
            System.IntPtr fontFallback_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFallback_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFallback>(fontFallback);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFallback_, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFallback">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat1::GetFontFallback([Out] IDWriteFontFallback** fontFallback)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat1::GetFontFallback</unmanaged-short>
        internal unsafe void GetFontFallback(out DXNET.DirectWrite.FontFallback fontFallback)
        {
            System.IntPtr fontFallback_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontFallback_, (*(void ***)this._nativePointer)[35]);
            if (fontFallback_ != System.IntPtr.Zero)
                fontFallback = new DXNET.DirectWrite.FontFallback(fontFallback_);
            else
                fontFallback = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("F67E0EDD-9E3D-4ECC-8C32-4183253DFE70")]
    public partial class TextFormat2 : DXNET.DirectWrite.TextFormat1
    {
        public TextFormat2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TextFormat2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TextFormat2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetLineSpacing / SetLineSpacing</unmanaged>
        /// <unmanaged-short>GetLineSpacing</unmanaged-short>
        public DXNET.DirectWrite.LineSpacing LineSpacing
        {
            get
            {
                GetLineSpacing(out var __output__);
                return __output__;
            }

            set => SetLineSpacing(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lineSpacingOptions">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat2::SetLineSpacing([In] const DWRITE_LINE_SPACING* lineSpacingOptions)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat2::SetLineSpacing</unmanaged-short>
        internal unsafe void SetLineSpacing(ref DXNET.DirectWrite.LineSpacing lineSpacingOptions)
        {
            DXNET.Result __result__;
            fixed (void *lineSpacingOptions_ = &lineSpacingOptions)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, lineSpacingOptions_, (*(void ***)this._nativePointer)[36]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lineSpacingOptions">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextFormat2::GetLineSpacing([Out] DWRITE_LINE_SPACING* lineSpacingOptions)</unmanaged>
        /// <unmanaged-short>IDWriteTextFormat2::GetLineSpacing</unmanaged-short>
        internal unsafe void GetLineSpacing(out DXNET.DirectWrite.LineSpacing lineSpacingOptions)
        {
            lineSpacingOptions = default (DXNET.DirectWrite.LineSpacing);
            DXNET.Result __result__;
            fixed (void *lineSpacingOptions_ = &lineSpacingOptions)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, lineSpacingOptions_, (*(void ***)this._nativePointer)[37]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("53737037-6d14-410b-9bfe-0b182bb70961")]
    public partial class TextLayout : DXNET.DirectWrite.TextFormat
    {
        public TextLayout(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TextLayout(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TextLayout(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMaxWidth / SetMaxWidth</unmanaged>
        /// <unmanaged-short>GetMaxWidth</unmanaged-short>
        public System.Single MaxWidth
        {
            get => GetMaxWidth();
            set => SetMaxWidth(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMaxHeight / SetMaxHeight</unmanaged>
        /// <unmanaged-short>GetMaxHeight</unmanaged-short>
        public System.Single MaxHeight
        {
            get => GetMaxHeight();
            set => SetMaxHeight(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMetrics</unmanaged>
        /// <unmanaged-short>GetMetrics</unmanaged-short>
        public DXNET.DirectWrite.TextMetrics Metrics
        {
            get
            {
                GetMetrics(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetOverhangMetrics</unmanaged>
        /// <unmanaged-short>GetOverhangMetrics</unmanaged-short>
        public DXNET.DirectWrite.OverhangMetrics OverhangMetrics
        {
            get
            {
                GetOverhangMetrics(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "maxWidth">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::SetMaxWidth([In] float maxWidth)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::SetMaxWidth</unmanaged-short>
        internal unsafe void SetMaxWidth(System.Single maxWidth)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, maxWidth, (*(void ***)this._nativePointer)[28]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "maxHeight">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::SetMaxHeight([In] float maxHeight)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::SetMaxHeight</unmanaged-short>
        internal unsafe void SetMaxHeight(System.Single maxHeight)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, maxHeight, (*(void ***)this._nativePointer)[29]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontCollection">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::SetFontCollection([In] IDWriteFontCollection* fontCollection,[In] DWRITE_TEXT_RANGE textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::SetFontCollection</unmanaged-short>
        public unsafe void SetFontCollection(DXNET.DirectWrite.FontCollection fontCollection, DXNET.DirectWrite.TextRange textRange)
        {
            System.IntPtr fontCollection_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontCollection_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontCollection>(fontCollection);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)fontCollection_, textRange, (*(void ***)this._nativePointer)[30]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFamilyName">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::SetFontFamilyName([In] const wchar_t* fontFamilyName,[In] DWRITE_TEXT_RANGE textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::SetFontFamilyName</unmanaged-short>
        public unsafe void SetFontFamilyName(System.String fontFamilyName, DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.Result __result__;
            fixed (char *fontFamilyName_ = fontFamilyName)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)fontFamilyName_, textRange, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontWeight">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::SetFontWeight([In] DWRITE_FONT_WEIGHT fontWeight,[In] DWRITE_TEXT_RANGE textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::SetFontWeight</unmanaged-short>
        public unsafe void SetFontWeight(DXNET.DirectWrite.FontWeight fontWeight, DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, unchecked ((System.Int32)fontWeight), textRange, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontStyle">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::SetFontStyle([In] DWRITE_FONT_STYLE fontStyle,[In] DWRITE_TEXT_RANGE textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::SetFontStyle</unmanaged-short>
        public unsafe void SetFontStyle(DXNET.DirectWrite.FontStyle fontStyle, DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, unchecked ((System.Int32)fontStyle), textRange, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontStretch">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::SetFontStretch([In] DWRITE_FONT_STRETCH fontStretch,[In] DWRITE_TEXT_RANGE textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::SetFontStretch</unmanaged-short>
        public unsafe void SetFontStretch(DXNET.DirectWrite.FontStretch fontStretch, DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, unchecked ((System.Int32)fontStretch), textRange, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontSize">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::SetFontSize([In] float fontSize,[In] DWRITE_TEXT_RANGE textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::SetFontSize</unmanaged-short>
        public unsafe void SetFontSize(System.Single fontSize, DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, fontSize, textRange, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hasUnderline">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::SetUnderline([In] BOOL hasUnderline,[In] DWRITE_TEXT_RANGE textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::SetUnderline</unmanaged-short>
        public unsafe void SetUnderline(DXNET.Mathematics.Interop.RawBool hasUnderline, DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, hasUnderline, textRange, (*(void ***)this._nativePointer)[36]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "hasStrikethrough">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::SetStrikethrough([In] BOOL hasStrikethrough,[In] DWRITE_TEXT_RANGE textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::SetStrikethrough</unmanaged-short>
        public unsafe void SetStrikethrough(DXNET.Mathematics.Interop.RawBool hasStrikethrough, DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, hasStrikethrough, textRange, (*(void ***)this._nativePointer)[37]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "drawingEffect">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::SetDrawingEffect([In] IUnknown* drawingEffect,[In] DWRITE_TEXT_RANGE textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::SetDrawingEffect</unmanaged-short>
        public unsafe void SetDrawingEffect(System.IntPtr drawingEffect, DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)drawingEffect, textRange, (*(void ***)this._nativePointer)[38]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "inlineObject">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::SetInlineObject([In] IDWriteInlineObject* inlineObject,[In] DWRITE_TEXT_RANGE textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::SetInlineObject</unmanaged-short>
        public unsafe void SetInlineObject(DXNET.DirectWrite.InlineObject inlineObject, DXNET.DirectWrite.TextRange textRange)
        {
            System.IntPtr inlineObject_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            inlineObject_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.InlineObject>(inlineObject);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)inlineObject_, textRange, (*(void ***)this._nativePointer)[39]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "typography">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::SetTypography([In] IDWriteTypography* typography,[In] DWRITE_TEXT_RANGE textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::SetTypography</unmanaged-short>
        public unsafe void SetTypography(DXNET.DirectWrite.Typography typography, DXNET.DirectWrite.TextRange textRange)
        {
            System.IntPtr typography_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            typography_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.Typography>(typography);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)typography_, textRange, (*(void ***)this._nativePointer)[40]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "localeName">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::SetLocaleName([In] const wchar_t* localeName,[In] DWRITE_TEXT_RANGE textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::SetLocaleName</unmanaged-short>
        public unsafe void SetLocaleName(System.String localeName, DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.Result __result__;
            fixed (char *localeName_ = localeName)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, (void *)localeName_, textRange, (*(void ***)this._nativePointer)[41]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float IDWriteTextLayout::GetMaxWidth()</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetMaxWidth</unmanaged-short>
        internal unsafe System.Single GetMaxWidth()
        {
            System.Single __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallfloat(this._nativePointer, (*(void ***)this._nativePointer)[42]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>float IDWriteTextLayout::GetMaxHeight()</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetMaxHeight</unmanaged-short>
        internal unsafe System.Single GetMaxHeight()
        {
            System.Single __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallfloat(this._nativePointer, (*(void ***)this._nativePointer)[43]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetFontCollection([In] unsigned int currentPosition,[Out] IDWriteFontCollection** fontCollection,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetFontCollection</unmanaged-short>
        public unsafe DXNET.DirectWrite.FontCollection GetFontCollection(System.Int32 currentPosition, out DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.DirectWrite.FontCollection fontCollection;
            System.IntPtr fontCollection_ = System.IntPtr.Zero;
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, &fontCollection_, textRange_, (*(void ***)this._nativePointer)[44]);
            if (fontCollection_ != System.IntPtr.Zero)
                fontCollection = new DXNET.DirectWrite.FontCollection(fontCollection_);
            else
                fontCollection = null;
            __result__.CheckError();
            return fontCollection;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "nameLength">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetFontFamilyNameLength([In] unsigned int currentPosition,[Out] unsigned int* nameLength,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetFontFamilyNameLength</unmanaged-short>
        internal unsafe void GetFontFamilyNameLength(System.Int32 currentPosition, out System.Int32 nameLength, out DXNET.DirectWrite.TextRange textRange)
        {
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                fixed (void *nameLength_ = &nameLength)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, nameLength_, textRange_, (*(void ***)this._nativePointer)[45]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "fontFamilyName">No documentation.</param>
        /// <param name = "nameSize">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetFontFamilyName([In] unsigned int currentPosition,[Out, Buffer] wchar_t* fontFamilyName,[In] unsigned int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetFontFamilyName</unmanaged-short>
        internal unsafe void GetFontFamilyName(System.Int32 currentPosition, System.IntPtr fontFamilyName, System.Int32 nameSize, out DXNET.DirectWrite.TextRange textRange)
        {
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, (void *)fontFamilyName, nameSize, textRange_, (*(void ***)this._nativePointer)[46]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetFontWeight([In] unsigned int currentPosition,[Out] DWRITE_FONT_WEIGHT* fontWeight,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetFontWeight</unmanaged-short>
        public unsafe DXNET.DirectWrite.FontWeight GetFontWeight(System.Int32 currentPosition, out DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.DirectWrite.FontWeight fontWeight;
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, &fontWeight, textRange_, (*(void ***)this._nativePointer)[47]);
            __result__.CheckError();
            return fontWeight;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetFontStyle([In] unsigned int currentPosition,[Out] DWRITE_FONT_STYLE* fontStyle,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetFontStyle</unmanaged-short>
        public unsafe DXNET.DirectWrite.FontStyle GetFontStyle(System.Int32 currentPosition, out DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.DirectWrite.FontStyle fontStyle;
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, &fontStyle, textRange_, (*(void ***)this._nativePointer)[48]);
            __result__.CheckError();
            return fontStyle;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetFontStretch([In] unsigned int currentPosition,[Out] DWRITE_FONT_STRETCH* fontStretch,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetFontStretch</unmanaged-short>
        public unsafe DXNET.DirectWrite.FontStretch GetFontStretch(System.Int32 currentPosition, out DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.DirectWrite.FontStretch fontStretch;
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, &fontStretch, textRange_, (*(void ***)this._nativePointer)[49]);
            __result__.CheckError();
            return fontStretch;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetFontSize([In] unsigned int currentPosition,[Out] float* fontSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetFontSize</unmanaged-short>
        public unsafe System.Single GetFontSize(System.Int32 currentPosition, out DXNET.DirectWrite.TextRange textRange)
        {
            System.Single fontSize;
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, &fontSize, textRange_, (*(void ***)this._nativePointer)[50]);
            __result__.CheckError();
            return fontSize;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetUnderline([In] unsigned int currentPosition,[Out] BOOL* hasUnderline,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetUnderline</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool HasUnderline(System.Int32 currentPosition, out DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.Mathematics.Interop.RawBool hasUnderline;
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, &hasUnderline, textRange_, (*(void ***)this._nativePointer)[51]);
            __result__.CheckError();
            return hasUnderline;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetStrikethrough([In] unsigned int currentPosition,[Out] BOOL* hasStrikethrough,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetStrikethrough</unmanaged-short>
        public unsafe DXNET.Mathematics.Interop.RawBool HasStrikethrough(System.Int32 currentPosition, out DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.Mathematics.Interop.RawBool hasStrikethrough;
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, &hasStrikethrough, textRange_, (*(void ***)this._nativePointer)[52]);
            __result__.CheckError();
            return hasStrikethrough;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetDrawingEffect([In] unsigned int currentPosition,[Out] IUnknown** drawingEffect,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetDrawingEffect</unmanaged-short>
        internal unsafe System.IntPtr GetDrawingEffect_(System.Int32 currentPosition, out DXNET.DirectWrite.TextRange textRange)
        {
            System.IntPtr drawingEffect;
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, &drawingEffect, textRange_, (*(void ***)this._nativePointer)[53]);
            __result__.CheckError();
            return drawingEffect;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetInlineObject([In] unsigned int currentPosition,[Out] IDWriteInlineObject** inlineObject,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetInlineObject</unmanaged-short>
        public unsafe DXNET.DirectWrite.InlineObject GetInlineObject(System.Int32 currentPosition, out DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.DirectWrite.InlineObject inlineObject;
            System.IntPtr inlineObject_ = System.IntPtr.Zero;
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, &inlineObject_, textRange_, (*(void ***)this._nativePointer)[54]);
            if (inlineObject_ != System.IntPtr.Zero)
                inlineObject = new DXNET.DirectWrite.InlineObjectNative(inlineObject_);
            else
                inlineObject = null;
            __result__.CheckError();
            return inlineObject;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetTypography([In] unsigned int currentPosition,[Out] IDWriteTypography** typography,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetTypography</unmanaged-short>
        public unsafe DXNET.DirectWrite.Typography GetTypography(System.Int32 currentPosition, out DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.DirectWrite.Typography typography;
            System.IntPtr typography_ = System.IntPtr.Zero;
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, &typography_, textRange_, (*(void ***)this._nativePointer)[55]);
            if (typography_ != System.IntPtr.Zero)
                typography = new DXNET.DirectWrite.Typography(typography_);
            else
                typography = null;
            __result__.CheckError();
            return typography;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "nameLength">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetLocaleNameLength([In] unsigned int currentPosition,[Out] unsigned int* nameLength,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetLocaleNameLength</unmanaged-short>
        internal unsafe void GetLocaleNameLength(System.Int32 currentPosition, out System.Int32 nameLength, out DXNET.DirectWrite.TextRange textRange)
        {
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                fixed (void *nameLength_ = &nameLength)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, nameLength_, textRange_, (*(void ***)this._nativePointer)[56]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "localeName">No documentation.</param>
        /// <param name = "nameSize">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetLocaleName([In] unsigned int currentPosition,[Out, Buffer] wchar_t* localeName,[In] unsigned int nameSize,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetLocaleName</unmanaged-short>
        internal unsafe void GetLocaleName(System.Int32 currentPosition, System.IntPtr localeName, System.Int32 nameSize, out DXNET.DirectWrite.TextRange textRange)
        {
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, (void *)localeName, nameSize, textRange_, (*(void ***)this._nativePointer)[57]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "clientDrawingContext">No documentation.</param>
        /// <param name = "renderer">No documentation.</param>
        /// <param name = "originX">No documentation.</param>
        /// <param name = "originY">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::Draw([In, Optional] void* clientDrawingContext,[In] IDWriteTextRenderer* renderer,[In] float originX,[In] float originY)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::Draw</unmanaged-short>
        public unsafe void Draw(System.IntPtr clientDrawingContext, DXNET.DirectWrite.TextRenderer renderer, System.Single originX, System.Single originY)
        {
            System.IntPtr renderer_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            renderer_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.TextRenderer>(renderer);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)clientDrawingContext, (void *)renderer_, originX, originY, (*(void ***)this._nativePointer)[58]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lineMetrics">No documentation.</param>
        /// <param name = "maxLineCount">No documentation.</param>
        /// <param name = "actualLineCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetLineMetrics([Out, Buffer, Optional] DWRITE_LINE_METRICS* lineMetrics,[In] unsigned int maxLineCount,[Out] unsigned int* actualLineCount)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetLineMetrics</unmanaged-short>
        internal unsafe DXNET.Result GetLineMetrics(DXNET.DirectWrite.LineMetrics[] lineMetrics, System.Int32 maxLineCount, out System.Int32 actualLineCount)
        {
            DXNET.Result __result__;
            fixed (void *actualLineCount_ = &actualLineCount)
                fixed (void *lineMetrics_ = lineMetrics)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, lineMetrics_, maxLineCount, actualLineCount_, (*(void ***)this._nativePointer)[59]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textMetrics">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetMetrics([Out] DWRITE_TEXT_METRICS* textMetrics)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetMetrics</unmanaged-short>
        internal unsafe void GetMetrics(out DXNET.DirectWrite.TextMetrics textMetrics)
        {
            textMetrics = default (DXNET.DirectWrite.TextMetrics);
            DXNET.Result __result__;
            fixed (void *textMetrics_ = &textMetrics)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, textMetrics_, (*(void ***)this._nativePointer)[60]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "overhangs">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetOverhangMetrics([Out] DWRITE_OVERHANG_METRICS* overhangs)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetOverhangMetrics</unmanaged-short>
        internal unsafe void GetOverhangMetrics(out DXNET.DirectWrite.OverhangMetrics overhangs)
        {
            overhangs = default (DXNET.DirectWrite.OverhangMetrics);
            DXNET.Result __result__;
            fixed (void *overhangs_ = &overhangs)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, overhangs_, (*(void ***)this._nativePointer)[61]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "clusterMetrics">No documentation.</param>
        /// <param name = "maxClusterCount">No documentation.</param>
        /// <param name = "actualClusterCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::GetClusterMetrics([Out, Buffer, Optional] DWRITE_CLUSTER_METRICS* clusterMetrics,[In] unsigned int maxClusterCount,[Out] unsigned int* actualClusterCount)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::GetClusterMetrics</unmanaged-short>
        internal unsafe DXNET.Result GetClusterMetrics(DXNET.DirectWrite.ClusterMetrics[] clusterMetrics, System.Int32 maxClusterCount, out System.Int32 actualClusterCount)
        {
            DXNET.Result __result__;
            fixed (void *actualClusterCount_ = &actualClusterCount)
                fixed (void *clusterMetrics_ = clusterMetrics)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, clusterMetrics_, maxClusterCount, actualClusterCount_, (*(void ***)this._nativePointer)[62]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::DetermineMinWidth([Out] float* minWidth)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::DetermineMinWidth</unmanaged-short>
        public unsafe System.Single DetermineMinWidth()
        {
            System.Single minWidth;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &minWidth, (*(void ***)this._nativePointer)[63]);
            __result__.CheckError();
            return minWidth;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "pointX">No documentation.</param>
        /// <param name = "pointY">No documentation.</param>
        /// <param name = "isTrailingHit">No documentation.</param>
        /// <param name = "isInside">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::HitTestPoint([In] float pointX,[In] float pointY,[Out] BOOL* isTrailingHit,[Out] BOOL* isInside,[Out] DWRITE_HIT_TEST_METRICS* hitTestMetrics)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::HitTestPoint</unmanaged-short>
        public unsafe DXNET.DirectWrite.HitTestMetrics HitTestPoint(System.Single pointX, System.Single pointY, out DXNET.Mathematics.Interop.RawBool isTrailingHit, out DXNET.Mathematics.Interop.RawBool isInside)
        {
            isTrailingHit = default (DXNET.Mathematics.Interop.RawBool);
            isInside = default (DXNET.Mathematics.Interop.RawBool);
            DXNET.DirectWrite.HitTestMetrics hitTestMetrics;
            DXNET.Result __result__;
            fixed (void *isInside_ = &isInside)
                fixed (void *isTrailingHit_ = &isTrailingHit)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, pointX, pointY, isTrailingHit_, isInside_, &hitTestMetrics, (*(void ***)this._nativePointer)[64]);
            __result__.CheckError();
            return hitTestMetrics;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textPosition">No documentation.</param>
        /// <param name = "isTrailingHit">No documentation.</param>
        /// <param name = "ointXRef">No documentation.</param>
        /// <param name = "ointYRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::HitTestTextPosition([In] unsigned int textPosition,[In] BOOL isTrailingHit,[Out] float* pointX,[Out] float* pointY,[Out] DWRITE_HIT_TEST_METRICS* hitTestMetrics)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::HitTestTextPosition</unmanaged-short>
        public unsafe DXNET.DirectWrite.HitTestMetrics HitTestTextPosition(System.Int32 textPosition, DXNET.Mathematics.Interop.RawBool isTrailingHit, out System.Single ointXRef, out System.Single ointYRef)
        {
            DXNET.DirectWrite.HitTestMetrics hitTestMetrics;
            DXNET.Result __result__;
            fixed (void *ointYRef_ = &ointYRef)
                fixed (void *ointXRef_ = &ointXRef)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, textPosition, isTrailingHit, ointXRef_, ointYRef_, &hitTestMetrics, (*(void ***)this._nativePointer)[65]);
            __result__.CheckError();
            return hitTestMetrics;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textPosition">No documentation.</param>
        /// <param name = "textLength">No documentation.</param>
        /// <param name = "originX">No documentation.</param>
        /// <param name = "originY">No documentation.</param>
        /// <param name = "hitTestMetrics">No documentation.</param>
        /// <param name = "maxHitTestMetricsCount">No documentation.</param>
        /// <param name = "actualHitTestMetricsCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout::HitTestTextRange([In] unsigned int textPosition,[In] unsigned int textLength,[In] float originX,[In] float originY,[Out, Buffer, Optional] DWRITE_HIT_TEST_METRICS* hitTestMetrics,[In] unsigned int maxHitTestMetricsCount,[Out] unsigned int* actualHitTestMetricsCount)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout::HitTestTextRange</unmanaged-short>
        internal unsafe DXNET.Result HitTestTextRange(System.Int32 textPosition, System.Int32 textLength, System.Single originX, System.Single originY, DXNET.DirectWrite.HitTestMetrics[] hitTestMetrics, System.Int32 maxHitTestMetricsCount, out System.Int32 actualHitTestMetricsCount)
        {
            DXNET.Result __result__;
            fixed (void *actualHitTestMetricsCount_ = &actualHitTestMetricsCount)
                fixed (void *hitTestMetrics_ = hitTestMetrics)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, textPosition, textLength, originX, originY, hitTestMetrics_, maxHitTestMetricsCount, actualHitTestMetricsCount_, (*(void ***)this._nativePointer)[66]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("9064D822-80A7-465C-A986-DF65F78B8FEB")]
    public partial class TextLayout1 : DXNET.DirectWrite.TextLayout
    {
        public TextLayout1(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TextLayout1(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TextLayout1(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "isPairKerningEnabled">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout1::SetPairKerning([In] BOOL isPairKerningEnabled,[In] DWRITE_TEXT_RANGE textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout1::SetPairKerning</unmanaged-short>
        public unsafe void SetPairKerning(DXNET.Mathematics.Interop.RawBool isPairKerningEnabled, DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, isPairKerningEnabled, textRange, (*(void ***)this._nativePointer)[67]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "isPairKerningEnabled">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout1::GetPairKerning([In] unsigned int currentPosition,[Out] BOOL* isPairKerningEnabled,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout1::GetPairKerning</unmanaged-short>
        public unsafe void GetPairKerning(System.Int32 currentPosition, out DXNET.Mathematics.Interop.RawBool isPairKerningEnabled, out DXNET.DirectWrite.TextRange textRange)
        {
            isPairKerningEnabled = default (DXNET.Mathematics.Interop.RawBool);
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                fixed (void *isPairKerningEnabled_ = &isPairKerningEnabled)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, isPairKerningEnabled_, textRange_, (*(void ***)this._nativePointer)[68]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "leadingSpacing">No documentation.</param>
        /// <param name = "trailingSpacing">No documentation.</param>
        /// <param name = "minimumAdvanceWidth">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout1::SetCharacterSpacing([In] float leadingSpacing,[In] float trailingSpacing,[In] float minimumAdvanceWidth,[In] DWRITE_TEXT_RANGE textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout1::SetCharacterSpacing</unmanaged-short>
        public unsafe void SetCharacterSpacing(System.Single leadingSpacing, System.Single trailingSpacing, System.Single minimumAdvanceWidth, DXNET.DirectWrite.TextRange textRange)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, leadingSpacing, trailingSpacing, minimumAdvanceWidth, textRange, (*(void ***)this._nativePointer)[69]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "currentPosition">No documentation.</param>
        /// <param name = "leadingSpacing">No documentation.</param>
        /// <param name = "trailingSpacing">No documentation.</param>
        /// <param name = "minimumAdvanceWidth">No documentation.</param>
        /// <param name = "textRange">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout1::GetCharacterSpacing([In] unsigned int currentPosition,[Out] float* leadingSpacing,[Out] float* trailingSpacing,[Out] float* minimumAdvanceWidth,[Out, Optional] DWRITE_TEXT_RANGE* textRange)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout1::GetCharacterSpacing</unmanaged-short>
        public unsafe void GetCharacterSpacing(System.Int32 currentPosition, out System.Single leadingSpacing, out System.Single trailingSpacing, out System.Single minimumAdvanceWidth, out DXNET.DirectWrite.TextRange textRange)
        {
            textRange = default (DXNET.DirectWrite.TextRange);
            DXNET.Result __result__;
            fixed (void *textRange_ = &textRange)
                fixed (void *minimumAdvanceWidth_ = &minimumAdvanceWidth)
                    fixed (void *trailingSpacing_ = &trailingSpacing)
                        fixed (void *leadingSpacing_ = &leadingSpacing)
                            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, currentPosition, leadingSpacing_, trailingSpacing_, minimumAdvanceWidth_, textRange_, (*(void ***)this._nativePointer)[70]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("1093C18F-8D5E-43F0-B064-0917311B525E")]
    public partial class TextLayout2 : DXNET.DirectWrite.TextLayout1
    {
        public TextLayout2(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TextLayout2(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TextLayout2(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetMetrics</unmanaged>
        /// <unmanaged-short>GetMetrics</unmanaged-short>
        public DXNET.DirectWrite.TextMetrics1 Metrics
        {
            get
            {
                GetMetrics(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetVerticalGlyphOrientation / SetVerticalGlyphOrientation</unmanaged>
        /// <unmanaged-short>GetVerticalGlyphOrientation</unmanaged-short>
        public DXNET.DirectWrite.VerticalGlyphOrientation VerticalGlyphOrientation
        {
            get => GetVerticalGlyphOrientation();
            set => SetVerticalGlyphOrientation(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetLastLineWrapping / SetLastLineWrapping</unmanaged>
        /// <unmanaged-short>GetLastLineWrapping</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool LastLineWrapping
        {
            get => GetLastLineWrapping();
            set => SetLastLineWrapping(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetOpticalAlignment / SetOpticalAlignment</unmanaged>
        /// <unmanaged-short>GetOpticalAlignment</unmanaged-short>
        public DXNET.DirectWrite.OptimizationIcalAlignment OpticalAlignment
        {
            get => GetOpticalAlignment();
            set => SetOpticalAlignment(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontFallback / SetFontFallback</unmanaged>
        /// <unmanaged-short>GetFontFallback</unmanaged-short>
        public DXNET.DirectWrite.FontFallback FontFallback
        {
            get
            {
                GetFontFallback(out var __output__);
                return __output__;
            }

            set => SetFontFallback(value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "textMetrics">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout2::GetMetrics([Out] DWRITE_TEXT_METRICS1* textMetrics)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout2::GetMetrics</unmanaged-short>
        internal unsafe void GetMetrics(out DXNET.DirectWrite.TextMetrics1 textMetrics)
        {
            textMetrics = default (DXNET.DirectWrite.TextMetrics1);
            DXNET.Result __result__;
            fixed (void *textMetrics_ = &textMetrics)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, textMetrics_, (*(void ***)this._nativePointer)[71]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "glyphOrientation">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout2::SetVerticalGlyphOrientation([In] DWRITE_VERTICAL_GLYPH_ORIENTATION glyphOrientation)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout2::SetVerticalGlyphOrientation</unmanaged-short>
        internal unsafe void SetVerticalGlyphOrientation(DXNET.DirectWrite.VerticalGlyphOrientation glyphOrientation)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)glyphOrientation), (*(void ***)this._nativePointer)[72]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_VERTICAL_GLYPH_ORIENTATION IDWriteTextLayout2::GetVerticalGlyphOrientation()</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout2::GetVerticalGlyphOrientation</unmanaged-short>
        internal unsafe DXNET.DirectWrite.VerticalGlyphOrientation GetVerticalGlyphOrientation()
        {
            DXNET.DirectWrite.VerticalGlyphOrientation __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteVerticalGlyphOrientation(this._nativePointer, (*(void ***)this._nativePointer)[73]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "isLastLineWrappingEnabled">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout2::SetLastLineWrapping([In] BOOL isLastLineWrappingEnabled)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout2::SetLastLineWrapping</unmanaged-short>
        internal unsafe void SetLastLineWrapping(DXNET.Mathematics.Interop.RawBool isLastLineWrappingEnabled)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, isLastLineWrappingEnabled, (*(void ***)this._nativePointer)[74]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDWriteTextLayout2::GetLastLineWrapping()</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout2::GetLastLineWrapping</unmanaged-short>
        internal unsafe DXNET.Mathematics.Interop.RawBool GetLastLineWrapping()
        {
            DXNET.Mathematics.Interop.RawBool __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[75]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "opticalAlignment">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout2::SetOpticalAlignment([In] DWRITE_OPTICAL_ALIGNMENT opticalAlignment)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout2::SetOpticalAlignment</unmanaged-short>
        internal unsafe void SetOpticalAlignment(DXNET.DirectWrite.OptimizationIcalAlignment opticalAlignment)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, unchecked ((System.Int32)opticalAlignment), (*(void ***)this._nativePointer)[76]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>DWRITE_OPTICAL_ALIGNMENT IDWriteTextLayout2::GetOpticalAlignment()</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout2::GetOpticalAlignment</unmanaged-short>
        internal unsafe DXNET.DirectWrite.OptimizationIcalAlignment GetOpticalAlignment()
        {
            DXNET.DirectWrite.OptimizationIcalAlignment __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallSharpDXDirectWriteOptimizationIcalAlignment(this._nativePointer, (*(void ***)this._nativePointer)[77]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFallback">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout2::SetFontFallback([In] IDWriteFontFallback* fontFallback)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout2::SetFontFallback</unmanaged-short>
        internal unsafe void SetFontFallback(DXNET.DirectWrite.FontFallback fontFallback)
        {
            System.IntPtr fontFallback_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            fontFallback_ = DXNET.CppObject.ToCallbackPtr<DXNET.DirectWrite.FontFallback>(fontFallback);
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (void *)fontFallback_, (*(void ***)this._nativePointer)[78]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFallback">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout2::GetFontFallback([Out] IDWriteFontFallback** fontFallback)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout2::GetFontFallback</unmanaged-short>
        internal unsafe void GetFontFallback(out DXNET.DirectWrite.FontFallback fontFallback)
        {
            System.IntPtr fontFallback_ = System.IntPtr.Zero;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, &fontFallback_, (*(void ***)this._nativePointer)[79]);
            if (fontFallback_ != System.IntPtr.Zero)
                fontFallback = new DXNET.DirectWrite.FontFallback(fontFallback_);
            else
                fontFallback = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("07DDCD52-020E-4DE8-AC33-6C953D83F92D")]
    public partial class TextLayout3 : DXNET.DirectWrite.TextLayout2
    {
        public TextLayout3(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator TextLayout3(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new TextLayout3(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetLineSpacing / SetLineSpacing</unmanaged>
        /// <unmanaged-short>GetLineSpacing</unmanaged-short>
        public DXNET.DirectWrite.LineSpacing LineSpacing
        {
            get
            {
                GetLineSpacing(out var __output__);
                return __output__;
            }

            set => SetLineSpacing(ref value);
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout3::InvalidateLayout()</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout3::InvalidateLayout</unmanaged-short>
        public unsafe void InvalidateLayout()
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[80]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lineSpacingOptions">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout3::SetLineSpacing([In] const DWRITE_LINE_SPACING* lineSpacingOptions)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout3::SetLineSpacing</unmanaged-short>
        internal unsafe void SetLineSpacing(ref DXNET.DirectWrite.LineSpacing lineSpacingOptions)
        {
            DXNET.Result __result__;
            fixed (void *lineSpacingOptions_ = &lineSpacingOptions)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, lineSpacingOptions_, (*(void ***)this._nativePointer)[81]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lineSpacingOptions">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout3::GetLineSpacing([Out] DWRITE_LINE_SPACING* lineSpacingOptions)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout3::GetLineSpacing</unmanaged-short>
        internal unsafe void GetLineSpacing(out DXNET.DirectWrite.LineSpacing lineSpacingOptions)
        {
            lineSpacingOptions = default (DXNET.DirectWrite.LineSpacing);
            DXNET.Result __result__;
            fixed (void *lineSpacingOptions_ = &lineSpacingOptions)
                __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, lineSpacingOptions_, (*(void ***)this._nativePointer)[82]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "lineMetrics">No documentation.</param>
        /// <param name = "maxLineCount">No documentation.</param>
        /// <param name = "actualLineCount">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTextLayout3::GetLineMetrics([Out, Buffer, Optional] DWRITE_LINE_METRICS1* lineMetrics,[In] unsigned int maxLineCount,[Out] unsigned int* actualLineCount)</unmanaged>
        /// <unmanaged-short>IDWriteTextLayout3::GetLineMetrics</unmanaged-short>
        public unsafe void GetLineMetrics(DXNET.DirectWrite.LineMetrics1[] lineMetrics, System.Int32 maxLineCount, out System.Int32 actualLineCount)
        {
            DXNET.Result __result__;
            fixed (void *actualLineCount_ = &actualLineCount)
                fixed (void *lineMetrics_ = lineMetrics)
                    __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, lineMetrics_, maxLineCount, actualLineCount_, (*(void ***)this._nativePointer)[83]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("ef8a8135-5cc6-45fe-8825-c5a0724eb819")]
    public partial interface TextRenderer : DXNET.DirectWrite.PixelSnapping
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("D3E0E934-22A0-427E-AAE4-7D9574B59DB1")]
    public partial interface TextRenderer1 : DXNET.DirectWrite.TextRenderer
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("55f1112b-1dc2-4b3c-9541-f46894ed85b6")]
    public partial class Typography : DXNET.ComObject
    {
        public Typography(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Typography(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Typography(nativePtr);
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>GetFontFeatureCount</unmanaged>
        /// <unmanaged-short>GetFontFeatureCount</unmanaged-short>
        public System.Int32 FontFeatureCount
        {
            get => GetFontFeatureCount();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFeature">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTypography::AddFontFeature([In] DWRITE_FONT_FEATURE fontFeature)</unmanaged>
        /// <unmanaged-short>IDWriteTypography::AddFontFeature</unmanaged-short>
        public unsafe void AddFontFeature(DXNET.DirectWrite.FontFeature fontFeature)
        {
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint0(this._nativePointer, fontFeature, (*(void ***)this._nativePointer)[3]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <returns>No documentation.</returns>
        /// <unmanaged>unsigned int IDWriteTypography::GetFontFeatureCount()</unmanaged>
        /// <unmanaged-short>IDWriteTypography::GetFontFeatureCount</unmanaged-short>
        internal unsafe System.Int32 GetFontFeatureCount()
        {
            System.Int32 __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "fontFeatureIndex">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDWriteTypography::GetFontFeature([In] unsigned int fontFeatureIndex,[Out] DWRITE_FONT_FEATURE* fontFeature)</unmanaged>
        /// <unmanaged-short>IDWriteTypography::GetFontFeature</unmanaged-short>
        public unsafe DXNET.DirectWrite.FontFeature GetFontFeature(System.Int32 fontFeatureIndex)
        {
            DXNET.DirectWrite.FontFeature fontFeature;
            DXNET.Result __result__;
            __result__ = DXNET.Direct2D1.LocalInterop.CalliStdCallint(this._nativePointer, fontFeatureIndex, &fontFeature, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
            return fontFeature;
        }
    }
}
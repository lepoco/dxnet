// <auto-generated/>

namespace DXNET.DirectWrite
{
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_CARET_METRICS</unmanaged>
    /// <unmanaged-short>DWRITE_CARET_METRICS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct CaretMetrics
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>slopeRise</unmanaged>
        /// <unmanaged-short>slopeRise</unmanaged-short>
        public System.Int16 SlopeRise;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>slopeRun</unmanaged>
        /// <unmanaged-short>slopeRun</unmanaged-short>
        public System.Int16 SlopeRun;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>offset</unmanaged>
        /// <unmanaged-short>offset</unmanaged-short>
        public System.Int16 Offset;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_CLUSTER_METRICS</unmanaged>
    /// <unmanaged-short>DWRITE_CLUSTER_METRICS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct ClusterMetrics
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>width</unmanaged>
        /// <unmanaged-short>width</unmanaged-short>
        [System.Runtime.InteropServices.FieldOffset(0)]
        public System.Single Width;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>length</unmanaged>
        /// <unmanaged-short>length</unmanaged-short>
        [System.Runtime.InteropServices.FieldOffset(4)]
        public System.Int16 Length;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>canWrapLineAfter</unmanaged>
        /// <unmanaged-short>canWrapLineAfter</unmanaged-short>
        public bool CanWrapLineAfter
        {
            get => 0 != ((_CanWrapLineAfter >> 0) & 1);
            set => this._CanWrapLineAfter = (System.Int16)((this._CanWrapLineAfter & ~(1 << 0)) | (((value ? 1 : 0) & 1) << 0));
        }

        [System.Runtime.InteropServices.FieldOffset(6)]
        internal System.Int16 _CanWrapLineAfter;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isWhitespace</unmanaged>
        /// <unmanaged-short>isWhitespace</unmanaged-short>
        public bool IsWhitespace
        {
            get => 0 != ((_IsWhitespace >> 1) & 1);
            set => this._IsWhitespace = (System.Int16)((this._IsWhitespace & ~(1 << 1)) | (((value ? 1 : 0) & 1) << 1));
        }

        [System.Runtime.InteropServices.FieldOffset(6)]
        internal System.Int16 _IsWhitespace;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isNewline</unmanaged>
        /// <unmanaged-short>isNewline</unmanaged-short>
        public bool IsNewline
        {
            get => 0 != ((_IsNewline >> 2) & 1);
            set => this._IsNewline = (System.Int16)((this._IsNewline & ~(1 << 2)) | (((value ? 1 : 0) & 1) << 2));
        }

        [System.Runtime.InteropServices.FieldOffset(6)]
        internal System.Int16 _IsNewline;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isSoftHyphen</unmanaged>
        /// <unmanaged-short>isSoftHyphen</unmanaged-short>
        public bool IsSoftHyphen
        {
            get => 0 != ((_IsSoftHyphen >> 3) & 1);
            set => this._IsSoftHyphen = (System.Int16)((this._IsSoftHyphen & ~(1 << 3)) | (((value ? 1 : 0) & 1) << 3));
        }

        [System.Runtime.InteropServices.FieldOffset(6)]
        internal System.Int16 _IsSoftHyphen;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isRightToLeft</unmanaged>
        /// <unmanaged-short>isRightToLeft</unmanaged-short>
        public bool IsRightToLeft
        {
            get => 0 != ((_IsRightToLeft >> 4) & 1);
            set => this._IsRightToLeft = (System.Int16)((this._IsRightToLeft & ~(1 << 4)) | (((value ? 1 : 0) & 1) << 4));
        }

        [System.Runtime.InteropServices.FieldOffset(6)]
        internal System.Int16 _IsRightToLeft;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>padding</unmanaged>
        /// <unmanaged-short>padding</unmanaged-short>
        internal System.Int16 Padding
        {
            get => (System.Int16)((_Padding >> 5) & 2047);
            set => this._Padding = (System.Int16)((this._Padding & ~(2047 << 5)) | ((value & 2047) << 5));
        }

        [System.Runtime.InteropServices.FieldOffset(6)]
        internal System.Int16 _Padding;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_COLOR_GLYPH_RUN</unmanaged>
    /// <unmanaged-short>DWRITE_COLOR_GLYPH_RUN</unmanaged-short>
    public partial struct ColorGlyphRun
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>glyphRun</unmanaged>
        /// <unmanaged-short>glyphRun</unmanaged-short>
        public DXNET.DirectWrite.GlyphRun GlyphRun;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>glyphRunDescription</unmanaged>
        /// <unmanaged-short>glyphRunDescription</unmanaged-short>
        public System.IntPtr GlyphRunDescription;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>baselineOriginX</unmanaged>
        /// <unmanaged-short>baselineOriginX</unmanaged-short>
        public System.Single BaselineOriginX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>baselineOriginY</unmanaged>
        /// <unmanaged-short>baselineOriginY</unmanaged-short>
        public System.Single BaselineOriginY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>runColor</unmanaged>
        /// <unmanaged-short>runColor</unmanaged-short>
        public DXNET.Mathematics.Interop.RawColor4 RunColor;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>paletteIndex</unmanaged>
        /// <unmanaged-short>paletteIndex</unmanaged-short>
        public System.Int16 PaletteIndex;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public DXNET.DirectWrite.GlyphRun.__Native GlyphRun;
            public System.IntPtr GlyphRunDescription;
            public System.Single BaselineOriginX;
            public System.Single BaselineOriginY;
            public DXNET.Mathematics.Interop.RawColor4 RunColor;
            public System.Int16 PaletteIndex;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            GlyphRun.__MarshalFree(ref @ref.GlyphRun);
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            {
                GlyphRun = new DXNET.DirectWrite.GlyphRun();
                GlyphRun.__MarshalFrom(ref @ref.GlyphRun);
            }

            GlyphRunDescription = @ref.GlyphRunDescription;
            BaselineOriginX = @ref.BaselineOriginX;
            BaselineOriginY = @ref.BaselineOriginY;
            RunColor = @ref.RunColor;
            PaletteIndex = @ref.PaletteIndex;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            GlyphRun.__MarshalTo(ref @ref.GlyphRun);
            @ref.GlyphRunDescription = GlyphRunDescription;
            @ref.BaselineOriginX = BaselineOriginX;
            @ref.BaselineOriginY = BaselineOriginY;
            @ref.RunColor = RunColor;
            @ref.PaletteIndex = PaletteIndex;
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_COLOR_GLYPH_RUN1</unmanaged>
    /// <unmanaged-short>DWRITE_COLOR_GLYPH_RUN1</unmanaged-short>
    public partial struct ColorGlyphRun1
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>glyphRun</unmanaged>
        /// <unmanaged-short>glyphRun</unmanaged-short>
        public DXNET.DirectWrite.GlyphRun GlyphRun;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>glyphRunDescription</unmanaged>
        /// <unmanaged-short>glyphRunDescription</unmanaged-short>
        public System.IntPtr GlyphRunDescription;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>baselineOriginX</unmanaged>
        /// <unmanaged-short>baselineOriginX</unmanaged-short>
        public System.Single BaselineOriginX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>baselineOriginY</unmanaged>
        /// <unmanaged-short>baselineOriginY</unmanaged-short>
        public System.Single BaselineOriginY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>runColor</unmanaged>
        /// <unmanaged-short>runColor</unmanaged-short>
        public DXNET.Mathematics.Interop.RawColor4 RunColor;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>paletteIndex</unmanaged>
        /// <unmanaged-short>paletteIndex</unmanaged-short>
        public System.Int16 PaletteIndex;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>glyphImageFormat</unmanaged>
        /// <unmanaged-short>glyphImageFormat</unmanaged-short>
        public DXNET.Direct2D1.GlyphImageFormatS GlyphImageFormat;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>measuringMode</unmanaged>
        /// <unmanaged-short>measuringMode</unmanaged-short>
        public DXNET.Direct2D1.MeasuringMode MeasuringMode;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public DXNET.DirectWrite.GlyphRun.__Native GlyphRun;
            public System.IntPtr GlyphRunDescription;
            public System.Single BaselineOriginX;
            public System.Single BaselineOriginY;
            public DXNET.Mathematics.Interop.RawColor4 RunColor;
            public System.Int16 PaletteIndex;
            public DXNET.Direct2D1.GlyphImageFormatS GlyphImageFormat;
            public DXNET.Direct2D1.MeasuringMode MeasuringMode;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            GlyphRun.__MarshalFree(ref @ref.GlyphRun);
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            {
                GlyphRun = new DXNET.DirectWrite.GlyphRun();
                GlyphRun.__MarshalFrom(ref @ref.GlyphRun);
            }

            GlyphRunDescription = @ref.GlyphRunDescription;
            BaselineOriginX = @ref.BaselineOriginX;
            BaselineOriginY = @ref.BaselineOriginY;
            RunColor = @ref.RunColor;
            PaletteIndex = @ref.PaletteIndex;
            GlyphImageFormat = @ref.GlyphImageFormat;
            MeasuringMode = @ref.MeasuringMode;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            GlyphRun.__MarshalTo(ref @ref.GlyphRun);
            @ref.GlyphRunDescription = GlyphRunDescription;
            @ref.BaselineOriginX = BaselineOriginX;
            @ref.BaselineOriginY = BaselineOriginY;
            @ref.RunColor = RunColor;
            @ref.PaletteIndex = PaletteIndex;
            @ref.GlyphImageFormat = GlyphImageFormat;
            @ref.MeasuringMode = MeasuringMode;
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_FILE_FRAGMENT</unmanaged>
    /// <unmanaged-short>DWRITE_FILE_FRAGMENT</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct FileFragment
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>fileOffset</unmanaged>
        /// <unmanaged-short>fileOffset</unmanaged-short>
        public System.Int64 FileOffset;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>fragmentSize</unmanaged>
        /// <unmanaged-short>fragmentSize</unmanaged-short>
        public System.Int64 FragmentSize;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_FONT_FEATURE</unmanaged>
    /// <unmanaged-short>DWRITE_FONT_FEATURE</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct FontFeature
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nameTag</unmanaged>
        /// <unmanaged-short>nameTag</unmanaged-short>
        public DXNET.DirectWrite.FontFeatureTag NameTag;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>parameter</unmanaged>
        /// <unmanaged-short>parameter</unmanaged-short>
        public System.Int32 Parameter;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_FONT_METRICS</unmanaged>
    /// <unmanaged-short>DWRITE_FONT_METRICS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct FontMetrics
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>designUnitsPerEm</unmanaged>
        /// <unmanaged-short>designUnitsPerEm</unmanaged-short>
        public System.Int16 DesignUnitsPerEm;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>ascent</unmanaged>
        /// <unmanaged-short>ascent</unmanaged-short>
        public System.Int16 Ascent;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>descent</unmanaged>
        /// <unmanaged-short>descent</unmanaged-short>
        public System.Int16 Descent;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lineGap</unmanaged>
        /// <unmanaged-short>lineGap</unmanaged-short>
        public System.Int16 LineGap;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>capHeight</unmanaged>
        /// <unmanaged-short>capHeight</unmanaged-short>
        public System.Int16 CapHeight;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>xHeight</unmanaged>
        /// <unmanaged-short>xHeight</unmanaged-short>
        public System.Int16 XHeight;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>underlinePosition</unmanaged>
        /// <unmanaged-short>underlinePosition</unmanaged-short>
        public System.Int16 UnderlinePosition;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>underlineThickness</unmanaged>
        /// <unmanaged-short>underlineThickness</unmanaged-short>
        public System.Int16 UnderlineThickness;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>strikethroughPosition</unmanaged>
        /// <unmanaged-short>strikethroughPosition</unmanaged-short>
        public System.Int16 StrikethroughPosition;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>strikethroughThickness</unmanaged>
        /// <unmanaged-short>strikethroughThickness</unmanaged-short>
        public System.Int16 StrikethroughThickness;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_FONT_METRICS1</unmanaged>
    /// <unmanaged-short>DWRITE_FONT_METRICS1</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct FontMetrics1
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>designUnitsPerEm</unmanaged>
        /// <unmanaged-short>designUnitsPerEm</unmanaged-short>
        public System.Int16 DesignUnitsPerEm;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>ascent</unmanaged>
        /// <unmanaged-short>ascent</unmanaged-short>
        public System.Int16 Ascent;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>descent</unmanaged>
        /// <unmanaged-short>descent</unmanaged-short>
        public System.Int16 Descent;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lineGap</unmanaged>
        /// <unmanaged-short>lineGap</unmanaged-short>
        public System.Int16 LineGap;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>capHeight</unmanaged>
        /// <unmanaged-short>capHeight</unmanaged-short>
        public System.Int16 CapHeight;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>xHeight</unmanaged>
        /// <unmanaged-short>xHeight</unmanaged-short>
        public System.Int16 XHeight;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>underlinePosition</unmanaged>
        /// <unmanaged-short>underlinePosition</unmanaged-short>
        public System.Int16 UnderlinePosition;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>underlineThickness</unmanaged>
        /// <unmanaged-short>underlineThickness</unmanaged-short>
        public System.Int16 UnderlineThickness;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>strikethroughPosition</unmanaged>
        /// <unmanaged-short>strikethroughPosition</unmanaged-short>
        public System.Int16 StrikethroughPosition;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>strikethroughThickness</unmanaged>
        /// <unmanaged-short>strikethroughThickness</unmanaged-short>
        public System.Int16 StrikethroughThickness;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>glyphBoxLeft</unmanaged>
        /// <unmanaged-short>glyphBoxLeft</unmanaged-short>
        public System.Int16 GlyphBoxLeft;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>glyphBoxTop</unmanaged>
        /// <unmanaged-short>glyphBoxTop</unmanaged-short>
        public System.Int16 GlyphBoxTop;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>glyphBoxRight</unmanaged>
        /// <unmanaged-short>glyphBoxRight</unmanaged-short>
        public System.Int16 GlyphBoxRight;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>glyphBoxBottom</unmanaged>
        /// <unmanaged-short>glyphBoxBottom</unmanaged-short>
        public System.Int16 GlyphBoxBottom;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>subscriptPositionX</unmanaged>
        /// <unmanaged-short>subscriptPositionX</unmanaged-short>
        public System.Int16 SubscriptPositionX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>subscriptPositionY</unmanaged>
        /// <unmanaged-short>subscriptPositionY</unmanaged-short>
        public System.Int16 SubscriptPositionY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>subscriptSizeX</unmanaged>
        /// <unmanaged-short>subscriptSizeX</unmanaged-short>
        public System.Int16 SubscriptSizeX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>subscriptSizeY</unmanaged>
        /// <unmanaged-short>subscriptSizeY</unmanaged-short>
        public System.Int16 SubscriptSizeY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>superscriptPositionX</unmanaged>
        /// <unmanaged-short>superscriptPositionX</unmanaged-short>
        public System.Int16 SuperscriptPositionX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>superscriptPositionY</unmanaged>
        /// <unmanaged-short>superscriptPositionY</unmanaged-short>
        public System.Int16 SuperscriptPositionY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>superscriptSizeX</unmanaged>
        /// <unmanaged-short>superscriptSizeX</unmanaged-short>
        public System.Int16 SuperscriptSizeX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>superscriptSizeY</unmanaged>
        /// <unmanaged-short>superscriptSizeY</unmanaged-short>
        public System.Int16 SuperscriptSizeY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>hasTypographicMetrics</unmanaged>
        /// <unmanaged-short>hasTypographicMetrics</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool HasTypographicMetrics;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_FONT_PROPERTY</unmanaged>
    /// <unmanaged-short>DWRITE_FONT_PROPERTY</unmanaged-short>
    public partial struct FontProperty
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>propertyId</unmanaged>
        /// <unmanaged-short>propertyId</unmanaged-short>
        public DXNET.DirectWrite.FontPropertyId PropertyId;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>propertyValue</unmanaged>
        /// <unmanaged-short>propertyValue</unmanaged-short>
        public System.String PropertyValue;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>localeName</unmanaged>
        /// <unmanaged-short>localeName</unmanaged-short>
        public System.String LocaleName;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public DXNET.DirectWrite.FontPropertyId PropertyId;
            public System.IntPtr PropertyValue;
            public System.IntPtr LocaleName;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            System.Runtime.InteropServices.Marshal.FreeHGlobal(@ref.PropertyValue);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(@ref.LocaleName);
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            PropertyId = @ref.PropertyId;
            PropertyValue = System.Runtime.InteropServices.Marshal.PtrToStringUni(@ref.PropertyValue);
            LocaleName = System.Runtime.InteropServices.Marshal.PtrToStringUni(@ref.LocaleName);
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.PropertyId = PropertyId;
            @ref.PropertyValue = System.Runtime.InteropServices.Marshal.StringToHGlobalUni(PropertyValue);
            @ref.LocaleName = System.Runtime.InteropServices.Marshal.StringToHGlobalUni(LocaleName);
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_GLYPH_IMAGE_DATA</unmanaged>
    /// <unmanaged-short>DWRITE_GLYPH_IMAGE_DATA</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct GlyphImageData
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>imageData</unmanaged>
        /// <unmanaged-short>imageData</unmanaged-short>
        public System.IntPtr ImageData;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>imageDataSize</unmanaged>
        /// <unmanaged-short>imageDataSize</unmanaged-short>
        public System.Int32 ImageDataSize;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>uniqueDataId</unmanaged>
        /// <unmanaged-short>uniqueDataId</unmanaged-short>
        public System.Int32 UniqueDataId;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pixelsPerEm</unmanaged>
        /// <unmanaged-short>pixelsPerEm</unmanaged-short>
        public System.Int32 PixelsPerEm;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pixelSize</unmanaged>
        /// <unmanaged-short>pixelSize</unmanaged-short>
        public DXNET.Size2 PixelSize;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>horizontalLeftOrigin</unmanaged>
        /// <unmanaged-short>horizontalLeftOrigin</unmanaged-short>
        public DXNET.Mathematics.Interop.RawPoint HorizontalLeftOrigin;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>horizontalRightOrigin</unmanaged>
        /// <unmanaged-short>horizontalRightOrigin</unmanaged-short>
        public DXNET.Mathematics.Interop.RawPoint HorizontalRightOrigin;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>verticalTopOrigin</unmanaged>
        /// <unmanaged-short>verticalTopOrigin</unmanaged-short>
        public DXNET.Mathematics.Interop.RawPoint VerticalTopOrigin;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>verticalBottomOrigin</unmanaged>
        /// <unmanaged-short>verticalBottomOrigin</unmanaged-short>
        public DXNET.Mathematics.Interop.RawPoint VerticalBottomOrigin;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_GLYPH_METRICS</unmanaged>
    /// <unmanaged-short>DWRITE_GLYPH_METRICS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct GlyphMetrics
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>leftSideBearing</unmanaged>
        /// <unmanaged-short>leftSideBearing</unmanaged-short>
        public System.Int32 LeftSideBearing;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>advanceWidth</unmanaged>
        /// <unmanaged-short>advanceWidth</unmanaged-short>
        public System.Int32 AdvanceWidth;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>rightSideBearing</unmanaged>
        /// <unmanaged-short>rightSideBearing</unmanaged-short>
        public System.Int32 RightSideBearing;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>topSideBearing</unmanaged>
        /// <unmanaged-short>topSideBearing</unmanaged-short>
        public System.Int32 TopSideBearing;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>advanceHeight</unmanaged>
        /// <unmanaged-short>advanceHeight</unmanaged-short>
        public System.Int32 AdvanceHeight;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>bottomSideBearing</unmanaged>
        /// <unmanaged-short>bottomSideBearing</unmanaged-short>
        public System.Int32 BottomSideBearing;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>verticalOriginY</unmanaged>
        /// <unmanaged-short>verticalOriginY</unmanaged-short>
        public System.Int32 VerticalOriginY;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_GLYPH_OFFSET</unmanaged>
    /// <unmanaged-short>DWRITE_GLYPH_OFFSET</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct GlyphOffset
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>advanceOffset</unmanaged>
        /// <unmanaged-short>advanceOffset</unmanaged-short>
        public System.Single AdvanceOffset;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>ascenderOffset</unmanaged>
        /// <unmanaged-short>ascenderOffset</unmanaged-short>
        public System.Single AscenderOffset;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_GLYPH_RUN</unmanaged>
    /// <unmanaged-short>DWRITE_GLYPH_RUN</unmanaged-short>
    public partial class GlyphRun
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>fontFace</unmanaged>
        /// <unmanaged-short>fontFace</unmanaged-short>
        internal DXNET.DirectWrite.FontFace FontFacePointer;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>fontEmSize</unmanaged>
        /// <unmanaged-short>fontEmSize</unmanaged-short>
        public System.Single FontSize;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>glyphCount</unmanaged>
        /// <unmanaged-short>glyphCount</unmanaged-short>
        internal System.Int32 GlyphCount;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>glyphIndices</unmanaged>
        /// <unmanaged-short>glyphIndices</unmanaged-short>
        internal System.IntPtr GlyphIndicesPointer;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>glyphAdvances</unmanaged>
        /// <unmanaged-short>glyphAdvances</unmanaged-short>
        internal System.IntPtr GlyphAdvancesPointer;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>glyphOffsets</unmanaged>
        /// <unmanaged-short>glyphOffsets</unmanaged-short>
        internal System.IntPtr GlyphOffsetsPointer;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isSideways</unmanaged>
        /// <unmanaged-short>isSideways</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsSideways;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>bidiLevel</unmanaged>
        /// <unmanaged-short>bidiLevel</unmanaged-short>
        public System.Int32 BidiLevel;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_GLYPH_RUN_DESCRIPTION</unmanaged>
    /// <unmanaged-short>DWRITE_GLYPH_RUN_DESCRIPTION</unmanaged-short>
    public partial class GlyphRunDescription
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>localeName</unmanaged>
        /// <unmanaged-short>localeName</unmanaged-short>
        public System.String LocaleName;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>string</unmanaged>
        /// <unmanaged-short>string</unmanaged-short>
        public System.String Text;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>stringLength</unmanaged>
        /// <unmanaged-short>stringLength</unmanaged-short>
        internal System.Int32 TextLength;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>clusterMap</unmanaged>
        /// <unmanaged-short>clusterMap</unmanaged-short>
        public System.IntPtr ClusterMap;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>textPosition</unmanaged>
        /// <unmanaged-short>textPosition</unmanaged-short>
        public System.Int32 TextPosition;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_HIT_TEST_METRICS</unmanaged>
    /// <unmanaged-short>DWRITE_HIT_TEST_METRICS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct HitTestMetrics
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>textPosition</unmanaged>
        /// <unmanaged-short>textPosition</unmanaged-short>
        public System.Int32 TextPosition;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>length</unmanaged>
        /// <unmanaged-short>length</unmanaged-short>
        public System.Int32 Length;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>left</unmanaged>
        /// <unmanaged-short>left</unmanaged-short>
        public System.Single Left;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>top</unmanaged>
        /// <unmanaged-short>top</unmanaged-short>
        public System.Single Top;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>width</unmanaged>
        /// <unmanaged-short>width</unmanaged-short>
        public System.Single Width;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>height</unmanaged>
        /// <unmanaged-short>height</unmanaged-short>
        public System.Single Height;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>bidiLevel</unmanaged>
        /// <unmanaged-short>bidiLevel</unmanaged-short>
        public System.Int32 BidiLevel;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isText</unmanaged>
        /// <unmanaged-short>isText</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsText;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isTrimmed</unmanaged>
        /// <unmanaged-short>isTrimmed</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsTrimmed;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_INLINE_OBJECT_METRICS</unmanaged>
    /// <unmanaged-short>DWRITE_INLINE_OBJECT_METRICS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct InlineObjectMetrics
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>width</unmanaged>
        /// <unmanaged-short>width</unmanaged-short>
        public System.Single Width;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>height</unmanaged>
        /// <unmanaged-short>height</unmanaged-short>
        public System.Single Height;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>baseline</unmanaged>
        /// <unmanaged-short>baseline</unmanaged-short>
        public System.Single Baseline;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>supportsSideways</unmanaged>
        /// <unmanaged-short>supportsSideways</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool SupportsSideways;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_JUSTIFICATION_OPPORTUNITY</unmanaged>
    /// <unmanaged-short>DWRITE_JUSTIFICATION_OPPORTUNITY</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct JustificationOpportunity
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>expansionMinimum</unmanaged>
        /// <unmanaged-short>expansionMinimum</unmanaged-short>
        [System.Runtime.InteropServices.FieldOffset(0)]
        public System.Single ExpansionMinimum;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>expansionMaximum</unmanaged>
        /// <unmanaged-short>expansionMaximum</unmanaged-short>
        [System.Runtime.InteropServices.FieldOffset(4)]
        public System.Single ExpansionMaximum;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>compressionMaximum</unmanaged>
        /// <unmanaged-short>compressionMaximum</unmanaged-short>
        [System.Runtime.InteropServices.FieldOffset(8)]
        public System.Single CompressionMaximum;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>expansionPriority</unmanaged>
        /// <unmanaged-short>expansionPriority</unmanaged-short>
        public System.Int32 ExpansionPriority
        {
            get => (System.Int32)((_ExpansionPriority >> 0) & 255);
            set => this._ExpansionPriority = (System.Int32)((this._ExpansionPriority & ~(255 << 0)) | ((value & 255) << 0));
        }

        [System.Runtime.InteropServices.FieldOffset(12)]
        internal System.Int32 _ExpansionPriority;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>compressionPriority</unmanaged>
        /// <unmanaged-short>compressionPriority</unmanaged-short>
        public System.Int32 CompressionPriority
        {
            get => (System.Int32)((_CompressionPriority >> 8) & 255);
            set => this._CompressionPriority = (System.Int32)((this._CompressionPriority & ~(255 << 8)) | ((value & 255) << 8));
        }

        [System.Runtime.InteropServices.FieldOffset(12)]
        internal System.Int32 _CompressionPriority;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>allowResidualExpansion</unmanaged>
        /// <unmanaged-short>allowResidualExpansion</unmanaged-short>
        public bool AllowResidualExpansion
        {
            get => 0 != ((_AllowResidualExpansion >> 16) & 1);
            set => this._AllowResidualExpansion = (System.Int32)((this._AllowResidualExpansion & ~(1 << 16)) | (((value ? 1 : 0) & 1) << 16));
        }

        [System.Runtime.InteropServices.FieldOffset(12)]
        internal System.Int32 _AllowResidualExpansion;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>allowResidualCompression</unmanaged>
        /// <unmanaged-short>allowResidualCompression</unmanaged-short>
        public bool AllowResidualCompression
        {
            get => 0 != ((_AllowResidualCompression >> 17) & 1);
            set => this._AllowResidualCompression = (System.Int32)((this._AllowResidualCompression & ~(1 << 17)) | (((value ? 1 : 0) & 1) << 17));
        }

        [System.Runtime.InteropServices.FieldOffset(12)]
        internal System.Int32 _AllowResidualCompression;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>applyToLeadingEdge</unmanaged>
        /// <unmanaged-short>applyToLeadingEdge</unmanaged-short>
        public bool ApplyToLeadingEdge
        {
            get => 0 != ((_ApplyToLeadingEdge >> 18) & 1);
            set => this._ApplyToLeadingEdge = (System.Int32)((this._ApplyToLeadingEdge & ~(1 << 18)) | (((value ? 1 : 0) & 1) << 18));
        }

        [System.Runtime.InteropServices.FieldOffset(12)]
        internal System.Int32 _ApplyToLeadingEdge;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>applyToTrailingEdge</unmanaged>
        /// <unmanaged-short>applyToTrailingEdge</unmanaged-short>
        public bool ApplyToTrailingEdge
        {
            get => 0 != ((_ApplyToTrailingEdge >> 19) & 1);
            set => this._ApplyToTrailingEdge = (System.Int32)((this._ApplyToTrailingEdge & ~(1 << 19)) | (((value ? 1 : 0) & 1) << 19));
        }

        [System.Runtime.InteropServices.FieldOffset(12)]
        internal System.Int32 _ApplyToTrailingEdge;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>reserved</unmanaged>
        /// <unmanaged-short>reserved</unmanaged-short>
        public System.Int32 Reserved
        {
            get => (System.Int32)((_Reserved >> 20) & 4095);
            set => this._Reserved = (System.Int32)((this._Reserved & ~(4095 << 20)) | ((value & 4095) << 20));
        }

        [System.Runtime.InteropServices.FieldOffset(12)]
        internal System.Int32 _Reserved;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_LINE_BREAKPOINT</unmanaged>
    /// <unmanaged-short>DWRITE_LINE_BREAKPOINT</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct LineBreakpoint
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>breakConditionBefore</unmanaged>
        /// <unmanaged-short>breakConditionBefore</unmanaged-short>
        internal System.Byte BreakConditionBefore_
        {
            get => (System.Byte)((_BreakConditionBefore_ >> 0) & 3);
            set => this._BreakConditionBefore_ = (System.Byte)((this._BreakConditionBefore_ & ~(3 << 0)) | ((value & 3) << 0));
        }

        [System.Runtime.InteropServices.FieldOffset(0)]
        internal System.Byte _BreakConditionBefore_;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>breakConditionAfter</unmanaged>
        /// <unmanaged-short>breakConditionAfter</unmanaged-short>
        internal System.Byte BreakConditionAfter_
        {
            get => (System.Byte)((_BreakConditionAfter_ >> 2) & 3);
            set => this._BreakConditionAfter_ = (System.Byte)((this._BreakConditionAfter_ & ~(3 << 2)) | ((value & 3) << 2));
        }

        [System.Runtime.InteropServices.FieldOffset(0)]
        internal System.Byte _BreakConditionAfter_;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isWhitespace</unmanaged>
        /// <unmanaged-short>isWhitespace</unmanaged-short>
        public bool IsWhitespace
        {
            get => 0 != ((_IsWhitespace >> 4) & 1);
            set => this._IsWhitespace = (System.Byte)((this._IsWhitespace & ~(1 << 4)) | (((value ? 1 : 0) & 1) << 4));
        }

        [System.Runtime.InteropServices.FieldOffset(0)]
        internal System.Byte _IsWhitespace;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isSoftHyphen</unmanaged>
        /// <unmanaged-short>isSoftHyphen</unmanaged-short>
        public bool IsSoftHyphen
        {
            get => 0 != ((_IsSoftHyphen >> 5) & 1);
            set => this._IsSoftHyphen = (System.Byte)((this._IsSoftHyphen & ~(1 << 5)) | (((value ? 1 : 0) & 1) << 5));
        }

        [System.Runtime.InteropServices.FieldOffset(0)]
        internal System.Byte _IsSoftHyphen;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>padding</unmanaged>
        /// <unmanaged-short>padding</unmanaged-short>
        internal System.Byte Padding
        {
            get => (System.Byte)((_Padding >> 6) & 3);
            set => this._Padding = (System.Byte)((this._Padding & ~(3 << 6)) | ((value & 3) << 6));
        }

        [System.Runtime.InteropServices.FieldOffset(0)]
        internal System.Byte _Padding;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_LINE_METRICS</unmanaged>
    /// <unmanaged-short>DWRITE_LINE_METRICS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct LineMetrics
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>length</unmanaged>
        /// <unmanaged-short>length</unmanaged-short>
        public System.Int32 Length;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>trailingWhitespaceLength</unmanaged>
        /// <unmanaged-short>trailingWhitespaceLength</unmanaged-short>
        public System.Int32 TrailingWhitespaceLength;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>newlineLength</unmanaged>
        /// <unmanaged-short>newlineLength</unmanaged-short>
        public System.Int32 NewlineLength;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>height</unmanaged>
        /// <unmanaged-short>height</unmanaged-short>
        public System.Single Height;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>baseline</unmanaged>
        /// <unmanaged-short>baseline</unmanaged-short>
        public System.Single Baseline;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isTrimmed</unmanaged>
        /// <unmanaged-short>isTrimmed</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsTrimmed;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_LINE_METRICS1</unmanaged>
    /// <unmanaged-short>DWRITE_LINE_METRICS1</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct LineMetrics1
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>length</unmanaged>
        /// <unmanaged-short>length</unmanaged-short>
        public System.Int32 Length;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>trailingWhitespaceLength</unmanaged>
        /// <unmanaged-short>trailingWhitespaceLength</unmanaged-short>
        public System.Int32 TrailingWhitespaceLength;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>newlineLength</unmanaged>
        /// <unmanaged-short>newlineLength</unmanaged-short>
        public System.Int32 NewlineLength;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>height</unmanaged>
        /// <unmanaged-short>height</unmanaged-short>
        public System.Single Height;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>baseline</unmanaged>
        /// <unmanaged-short>baseline</unmanaged-short>
        public System.Single Baseline;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isTrimmed</unmanaged>
        /// <unmanaged-short>isTrimmed</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool IsTrimmed;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>leadingBefore</unmanaged>
        /// <unmanaged-short>leadingBefore</unmanaged-short>
        public System.Single LeadingBefore;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>leadingAfter</unmanaged>
        /// <unmanaged-short>leadingAfter</unmanaged-short>
        public System.Single LeadingAfter;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_LINE_SPACING</unmanaged>
    /// <unmanaged-short>DWRITE_LINE_SPACING</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct LineSpacing
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>method</unmanaged>
        /// <unmanaged-short>method</unmanaged-short>
        public DXNET.DirectWrite.LineSpacingMethod Method;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>height</unmanaged>
        /// <unmanaged-short>height</unmanaged-short>
        public System.Single Height;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>baseline</unmanaged>
        /// <unmanaged-short>baseline</unmanaged-short>
        public System.Single Baseline;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>leadingBefore</unmanaged>
        /// <unmanaged-short>leadingBefore</unmanaged-short>
        public System.Single LeadingBefore;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>fontLineGapUsage</unmanaged>
        /// <unmanaged-short>fontLineGapUsage</unmanaged-short>
        public DXNET.DirectWrite.FontLineGapUsage FontLineGapUsage;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_OVERHANG_METRICS</unmanaged>
    /// <unmanaged-short>DWRITE_OVERHANG_METRICS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct OverhangMetrics
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>left</unmanaged>
        /// <unmanaged-short>left</unmanaged-short>
        public System.Single Left;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>top</unmanaged>
        /// <unmanaged-short>top</unmanaged-short>
        public System.Single Top;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>right</unmanaged>
        /// <unmanaged-short>right</unmanaged-short>
        public System.Single Right;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>bottom</unmanaged>
        /// <unmanaged-short>bottom</unmanaged-short>
        public System.Single Bottom;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_PANOSE</unmanaged>
    /// <unmanaged-short>DWRITE_PANOSE</unmanaged-short>
    public partial struct Panose
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>values</unmanaged>
        /// <unmanaged-short>values</unmanaged-short>
        public System.Byte[] Values
        {
            get => _Values ?? (_Values = new System.Byte[10]);
            private set => _Values = value;
        }

        internal System.Byte[] _Values;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>familyKind</unmanaged>
        /// <unmanaged-short>familyKind</unmanaged-short>
        public System.Byte FamilyKind;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>text</unmanaged>
        /// <unmanaged-short>text</unmanaged-short>
        public DXNET.DirectWrite.PanoseText Text;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>script</unmanaged>
        /// <unmanaged-short>script</unmanaged-short>
        public DXNET.DirectWrite.PanoseScript Script;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>decorative</unmanaged>
        /// <unmanaged-short>decorative</unmanaged-short>
        public DXNET.DirectWrite.PanoseDecorative Decorative;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>symbol</unmanaged>
        /// <unmanaged-short>symbol</unmanaged-short>
        public DXNET.DirectWrite.PanoseSymbol Symbol;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            [System.Runtime.InteropServices.FieldOffset(0)]
            public System.Byte Values;
            [System.Runtime.InteropServices.FieldOffset(1)]
            public System.Byte __Values1;
            [System.Runtime.InteropServices.FieldOffset(2)]
            public System.Byte __Values2;
            [System.Runtime.InteropServices.FieldOffset(3)]
            public System.Byte __Values3;
            [System.Runtime.InteropServices.FieldOffset(4)]
            public System.Byte __Values4;
            [System.Runtime.InteropServices.FieldOffset(5)]
            public System.Byte __Values5;
            [System.Runtime.InteropServices.FieldOffset(6)]
            public System.Byte __Values6;
            [System.Runtime.InteropServices.FieldOffset(7)]
            public System.Byte __Values7;
            [System.Runtime.InteropServices.FieldOffset(8)]
            public System.Byte __Values8;
            [System.Runtime.InteropServices.FieldOffset(9)]
            public System.Byte __Values9;
            [System.Runtime.InteropServices.FieldOffset(0)]
            public System.Byte FamilyKind;
            [System.Runtime.InteropServices.FieldOffset(0)]
            public DXNET.DirectWrite.PanoseText Text;
            [System.Runtime.InteropServices.FieldOffset(0)]
            public DXNET.DirectWrite.PanoseScript Script;
            [System.Runtime.InteropServices.FieldOffset(0)]
            public DXNET.DirectWrite.PanoseDecorative Decorative;
            [System.Runtime.InteropServices.FieldOffset(0)]
            public DXNET.DirectWrite.PanoseSymbol Symbol;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            fixed (void *__to = &Values[0], __from = &@ref.Values)
                DXNET.Utilities.CopyMemory((System.IntPtr)__to, (System.IntPtr)__from, 10 * sizeof (System.Byte));
            FamilyKind = @ref.FamilyKind;
            Text = @ref.Text;
            Script = @ref.Script;
            Decorative = @ref.Decorative;
            Symbol = @ref.Symbol;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            fixed (void *__from = &Values[0], __to = &@ref.Values)
                DXNET.Utilities.CopyMemory((System.IntPtr)__to, (System.IntPtr)__from, 10 * sizeof (System.Byte));
            @ref.FamilyKind = FamilyKind;
            @ref.Text = Text;
            @ref.Script = Script;
            @ref.Decorative = Decorative;
            @ref.Symbol = Symbol;
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_PANOSE_INNER_2</unmanaged>
    /// <unmanaged-short>DWRITE_PANOSE_INNER_2</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct PanoseDecorative
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>familyKind</unmanaged>
        /// <unmanaged-short>familyKind</unmanaged-short>
        public System.Byte FamilyKind;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>decorativeClass</unmanaged>
        /// <unmanaged-short>decorativeClass</unmanaged-short>
        public System.Byte DecorativeClass;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>weight</unmanaged>
        /// <unmanaged-short>weight</unmanaged-short>
        public System.Byte Weight;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>aspect</unmanaged>
        /// <unmanaged-short>aspect</unmanaged-short>
        public System.Byte Aspect;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>contrast</unmanaged>
        /// <unmanaged-short>contrast</unmanaged-short>
        public System.Byte Contrast;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>serifVariant</unmanaged>
        /// <unmanaged-short>serifVariant</unmanaged-short>
        public System.Byte SerifVariant;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>fill</unmanaged>
        /// <unmanaged-short>fill</unmanaged-short>
        public System.Byte Fill;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lining</unmanaged>
        /// <unmanaged-short>lining</unmanaged-short>
        public System.Byte Lining;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>decorativeTopology</unmanaged>
        /// <unmanaged-short>decorativeTopology</unmanaged-short>
        public System.Byte DecorativeTopology;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>characterRange</unmanaged>
        /// <unmanaged-short>characterRange</unmanaged-short>
        public System.Byte CharacterRange;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_PANOSE_INNER_1</unmanaged>
    /// <unmanaged-short>DWRITE_PANOSE_INNER_1</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct PanoseScript
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>familyKind</unmanaged>
        /// <unmanaged-short>familyKind</unmanaged-short>
        public System.Byte FamilyKind;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>toolKind</unmanaged>
        /// <unmanaged-short>toolKind</unmanaged-short>
        public System.Byte ToolKind;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>weight</unmanaged>
        /// <unmanaged-short>weight</unmanaged-short>
        public System.Byte Weight;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>spacing</unmanaged>
        /// <unmanaged-short>spacing</unmanaged-short>
        public System.Byte Spacing;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>aspectRatio</unmanaged>
        /// <unmanaged-short>aspectRatio</unmanaged-short>
        public System.Byte AspectRatio;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>contrast</unmanaged>
        /// <unmanaged-short>contrast</unmanaged-short>
        public System.Byte Contrast;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>scriptTopology</unmanaged>
        /// <unmanaged-short>scriptTopology</unmanaged-short>
        public System.Byte ScriptTopology;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>scriptForm</unmanaged>
        /// <unmanaged-short>scriptForm</unmanaged-short>
        public System.Byte ScriptForm;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>finials</unmanaged>
        /// <unmanaged-short>finials</unmanaged-short>
        public System.Byte Finials;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>xAscent</unmanaged>
        /// <unmanaged-short>xAscent</unmanaged-short>
        public System.Byte XAscent;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_PANOSE_INNER_3</unmanaged>
    /// <unmanaged-short>DWRITE_PANOSE_INNER_3</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct PanoseSymbol
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>familyKind</unmanaged>
        /// <unmanaged-short>familyKind</unmanaged-short>
        public System.Byte FamilyKind;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>symbolKind</unmanaged>
        /// <unmanaged-short>symbolKind</unmanaged-short>
        public System.Byte SymbolKind;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>weight</unmanaged>
        /// <unmanaged-short>weight</unmanaged-short>
        public System.Byte Weight;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>spacing</unmanaged>
        /// <unmanaged-short>spacing</unmanaged-short>
        public System.Byte Spacing;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>aspectRatioAndContrast</unmanaged>
        /// <unmanaged-short>aspectRatioAndContrast</unmanaged-short>
        public System.Byte AspectRatioAndContrast;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>aspectRatio94</unmanaged>
        /// <unmanaged-short>aspectRatio94</unmanaged-short>
        public System.Byte AspectRatio94;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>aspectRatio119</unmanaged>
        /// <unmanaged-short>aspectRatio119</unmanaged-short>
        public System.Byte AspectRatio119;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>aspectRatio157</unmanaged>
        /// <unmanaged-short>aspectRatio157</unmanaged-short>
        public System.Byte AspectRatio157;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>aspectRatio163</unmanaged>
        /// <unmanaged-short>aspectRatio163</unmanaged-short>
        public System.Byte AspectRatio163;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>aspectRatio211</unmanaged>
        /// <unmanaged-short>aspectRatio211</unmanaged-short>
        public System.Byte AspectRatio211;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_PANOSE_INNER_0</unmanaged>
    /// <unmanaged-short>DWRITE_PANOSE_INNER_0</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct PanoseText
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>familyKind</unmanaged>
        /// <unmanaged-short>familyKind</unmanaged-short>
        public System.Byte FamilyKind;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>serifStyle</unmanaged>
        /// <unmanaged-short>serifStyle</unmanaged-short>
        public System.Byte SerifStyle;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>weight</unmanaged>
        /// <unmanaged-short>weight</unmanaged-short>
        public System.Byte Weight;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>proportion</unmanaged>
        /// <unmanaged-short>proportion</unmanaged-short>
        public System.Byte Proportion;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>contrast</unmanaged>
        /// <unmanaged-short>contrast</unmanaged-short>
        public System.Byte Contrast;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>strokeVariation</unmanaged>
        /// <unmanaged-short>strokeVariation</unmanaged-short>
        public System.Byte StrokeVariation;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>armStyle</unmanaged>
        /// <unmanaged-short>armStyle</unmanaged-short>
        public System.Byte ArmStyle;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>letterform</unmanaged>
        /// <unmanaged-short>letterform</unmanaged-short>
        public System.Byte Letterform;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>midline</unmanaged>
        /// <unmanaged-short>midline</unmanaged-short>
        public System.Byte Midline;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>xHeight</unmanaged>
        /// <unmanaged-short>xHeight</unmanaged-short>
        public System.Byte XHeight;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_SCRIPT_ANALYSIS</unmanaged>
    /// <unmanaged-short>DWRITE_SCRIPT_ANALYSIS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct ScriptAnalysis
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>script</unmanaged>
        /// <unmanaged-short>script</unmanaged-short>
        public System.Int16 Script;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>shapes</unmanaged>
        /// <unmanaged-short>shapes</unmanaged-short>
        public DXNET.DirectWrite.ScriptShapes Shapes;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_SCRIPT_PROPERTIES</unmanaged>
    /// <unmanaged-short>DWRITE_SCRIPT_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct ScriptProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isoScriptCode</unmanaged>
        /// <unmanaged-short>isoScriptCode</unmanaged-short>
        [System.Runtime.InteropServices.FieldOffset(0)]
        public System.Int32 IsoScriptCode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isoScriptNumber</unmanaged>
        /// <unmanaged-short>isoScriptNumber</unmanaged-short>
        [System.Runtime.InteropServices.FieldOffset(4)]
        public System.Int32 IsoScriptNumber;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>clusterLookahead</unmanaged>
        /// <unmanaged-short>clusterLookahead</unmanaged-short>
        [System.Runtime.InteropServices.FieldOffset(8)]
        public System.Int32 ClusterLookahead;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>justificationCharacter</unmanaged>
        /// <unmanaged-short>justificationCharacter</unmanaged-short>
        [System.Runtime.InteropServices.FieldOffset(12)]
        public System.Int32 JustificationCharacter;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>restrictCaretToClusters</unmanaged>
        /// <unmanaged-short>restrictCaretToClusters</unmanaged-short>
        public bool RestrictCaretToClusters
        {
            get => 0 != ((_RestrictCaretToClusters >> 0) & 1);
            set => this._RestrictCaretToClusters = (System.Int32)((this._RestrictCaretToClusters & ~(1 << 0)) | (((value ? 1 : 0) & 1) << 0));
        }

        [System.Runtime.InteropServices.FieldOffset(16)]
        internal System.Int32 _RestrictCaretToClusters;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>usesWordDividers</unmanaged>
        /// <unmanaged-short>usesWordDividers</unmanaged-short>
        public bool UsesWordDividers
        {
            get => 0 != ((_UsesWordDividers >> 1) & 1);
            set => this._UsesWordDividers = (System.Int32)((this._UsesWordDividers & ~(1 << 1)) | (((value ? 1 : 0) & 1) << 1));
        }

        [System.Runtime.InteropServices.FieldOffset(16)]
        internal System.Int32 _UsesWordDividers;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isDiscreteWriting</unmanaged>
        /// <unmanaged-short>isDiscreteWriting</unmanaged-short>
        public bool IsDiscreteWriting
        {
            get => 0 != ((_IsDiscreteWriting >> 2) & 1);
            set => this._IsDiscreteWriting = (System.Int32)((this._IsDiscreteWriting & ~(1 << 2)) | (((value ? 1 : 0) & 1) << 2));
        }

        [System.Runtime.InteropServices.FieldOffset(16)]
        internal System.Int32 _IsDiscreteWriting;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isBlockWriting</unmanaged>
        /// <unmanaged-short>isBlockWriting</unmanaged-short>
        public bool IsBlockWriting
        {
            get => 0 != ((_IsBlockWriting >> 3) & 1);
            set => this._IsBlockWriting = (System.Int32)((this._IsBlockWriting & ~(1 << 3)) | (((value ? 1 : 0) & 1) << 3));
        }

        [System.Runtime.InteropServices.FieldOffset(16)]
        internal System.Int32 _IsBlockWriting;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isDistributedWithinCluster</unmanaged>
        /// <unmanaged-short>isDistributedWithinCluster</unmanaged-short>
        public bool IsDistributedWithinCluster
        {
            get => 0 != ((_IsDistributedWithinCluster >> 4) & 1);
            set => this._IsDistributedWithinCluster = (System.Int32)((this._IsDistributedWithinCluster & ~(1 << 4)) | (((value ? 1 : 0) & 1) << 4));
        }

        [System.Runtime.InteropServices.FieldOffset(16)]
        internal System.Int32 _IsDistributedWithinCluster;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isConnectedWriting</unmanaged>
        /// <unmanaged-short>isConnectedWriting</unmanaged-short>
        public bool IsConnectedWriting
        {
            get => 0 != ((_IsConnectedWriting >> 5) & 1);
            set => this._IsConnectedWriting = (System.Int32)((this._IsConnectedWriting & ~(1 << 5)) | (((value ? 1 : 0) & 1) << 5));
        }

        [System.Runtime.InteropServices.FieldOffset(16)]
        internal System.Int32 _IsConnectedWriting;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isCursiveWriting</unmanaged>
        /// <unmanaged-short>isCursiveWriting</unmanaged-short>
        public bool IsCursiveWriting
        {
            get => 0 != ((_IsCursiveWriting >> 6) & 1);
            set => this._IsCursiveWriting = (System.Int32)((this._IsCursiveWriting & ~(1 << 6)) | (((value ? 1 : 0) & 1) << 6));
        }

        [System.Runtime.InteropServices.FieldOffset(16)]
        internal System.Int32 _IsCursiveWriting;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>reserved</unmanaged>
        /// <unmanaged-short>reserved</unmanaged-short>
        public System.Int32 Reserved
        {
            get => (System.Int32)((_Reserved >> 7) & 33554431);
            set => this._Reserved = (System.Int32)((this._Reserved & ~(33554431 << 7)) | ((value & 33554431) << 7));
        }

        [System.Runtime.InteropServices.FieldOffset(16)]
        internal System.Int32 _Reserved;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_SHAPING_GLYPH_PROPERTIES</unmanaged>
    /// <unmanaged-short>DWRITE_SHAPING_GLYPH_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct ShapingGlyphProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>justification</unmanaged>
        /// <unmanaged-short>justification</unmanaged-short>
        internal System.Int16 Justification_
        {
            get => (System.Int16)((_Justification_ >> 0) & 15);
            set => this._Justification_ = (System.Int16)((this._Justification_ & ~(15 << 0)) | ((value & 15) << 0));
        }

        [System.Runtime.InteropServices.FieldOffset(0)]
        internal System.Int16 _Justification_;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isClusterStart</unmanaged>
        /// <unmanaged-short>isClusterStart</unmanaged-short>
        public bool IsClusterStart
        {
            get => 0 != ((_IsClusterStart >> 4) & 1);
            set => this._IsClusterStart = (System.Int16)((this._IsClusterStart & ~(1 << 4)) | (((value ? 1 : 0) & 1) << 4));
        }

        [System.Runtime.InteropServices.FieldOffset(0)]
        internal System.Int16 _IsClusterStart;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isDiacritic</unmanaged>
        /// <unmanaged-short>isDiacritic</unmanaged-short>
        public bool IsDiacritic
        {
            get => 0 != ((_IsDiacritic >> 5) & 1);
            set => this._IsDiacritic = (System.Int16)((this._IsDiacritic & ~(1 << 5)) | (((value ? 1 : 0) & 1) << 5));
        }

        [System.Runtime.InteropServices.FieldOffset(0)]
        internal System.Int16 _IsDiacritic;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isZeroWidthSpace</unmanaged>
        /// <unmanaged-short>isZeroWidthSpace</unmanaged-short>
        public bool IsZeroWidthSpace
        {
            get => 0 != ((_IsZeroWidthSpace >> 6) & 1);
            set => this._IsZeroWidthSpace = (System.Int16)((this._IsZeroWidthSpace & ~(1 << 6)) | (((value ? 1 : 0) & 1) << 6));
        }

        [System.Runtime.InteropServices.FieldOffset(0)]
        internal System.Int16 _IsZeroWidthSpace;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>reserved</unmanaged>
        /// <unmanaged-short>reserved</unmanaged-short>
        internal System.Int16 Reserved
        {
            get => (System.Int16)((_Reserved >> 7) & 511);
            set => this._Reserved = (System.Int16)((this._Reserved & ~(511 << 7)) | ((value & 511) << 7));
        }

        [System.Runtime.InteropServices.FieldOffset(0)]
        internal System.Int16 _Reserved;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_SHAPING_TEXT_PROPERTIES</unmanaged>
    /// <unmanaged-short>DWRITE_SHAPING_TEXT_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct ShapingTextProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>isShapedAlone</unmanaged>
        /// <unmanaged-short>isShapedAlone</unmanaged-short>
        public bool IsShapedAlone
        {
            get => 0 != ((_IsShapedAlone >> 0) & 1);
            set => this._IsShapedAlone = (System.Int16)((this._IsShapedAlone & ~(1 << 0)) | (((value ? 1 : 0) & 1) << 0));
        }

        [System.Runtime.InteropServices.FieldOffset(0)]
        internal System.Int16 _IsShapedAlone;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>reserved1</unmanaged>
        /// <unmanaged-short>reserved1</unmanaged-short>
        public bool Reserved1
        {
            get => 0 != ((_Reserved1 >> 1) & 1);
            set => this._Reserved1 = (System.Int16)((this._Reserved1 & ~(1 << 1)) | (((value ? 1 : 0) & 1) << 1));
        }

        [System.Runtime.InteropServices.FieldOffset(0)]
        internal System.Int16 _Reserved1;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>canBreakShapingAfter</unmanaged>
        /// <unmanaged-short>canBreakShapingAfter</unmanaged-short>
        public bool CanBreakShapingAfter
        {
            get => 0 != ((_CanBreakShapingAfter >> 2) & 1);
            set => this._CanBreakShapingAfter = (System.Int16)((this._CanBreakShapingAfter & ~(1 << 2)) | (((value ? 1 : 0) & 1) << 2));
        }

        [System.Runtime.InteropServices.FieldOffset(0)]
        internal System.Int16 _CanBreakShapingAfter;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>reserved</unmanaged>
        /// <unmanaged-short>reserved</unmanaged-short>
        internal System.Int16 Reserved
        {
            get => (System.Int16)((_Reserved >> 3) & 8191);
            set => this._Reserved = (System.Int16)((this._Reserved & ~(8191 << 3)) | ((value & 8191) << 3));
        }

        [System.Runtime.InteropServices.FieldOffset(0)]
        internal System.Int16 _Reserved;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_STRIKETHROUGH</unmanaged>
    /// <unmanaged-short>DWRITE_STRIKETHROUGH</unmanaged-short>
    public partial struct Strikethrough
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>width</unmanaged>
        /// <unmanaged-short>width</unmanaged-short>
        public System.Single Width;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>thickness</unmanaged>
        /// <unmanaged-short>thickness</unmanaged-short>
        public System.Single Thickness;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>offset</unmanaged>
        /// <unmanaged-short>offset</unmanaged-short>
        public System.Single Offset;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>readingDirection</unmanaged>
        /// <unmanaged-short>readingDirection</unmanaged-short>
        public DXNET.DirectWrite.ReadingDirection ReadingDirection;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>flowDirection</unmanaged>
        /// <unmanaged-short>flowDirection</unmanaged-short>
        public DXNET.DirectWrite.FlowDirection FlowDirection;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>localeName</unmanaged>
        /// <unmanaged-short>localeName</unmanaged-short>
        public System.String LocaleName;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>measuringMode</unmanaged>
        /// <unmanaged-short>measuringMode</unmanaged-short>
        public DXNET.Direct2D1.MeasuringMode MeasuringMode;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.Single Width;
            public System.Single Thickness;
            public System.Single Offset;
            public DXNET.DirectWrite.ReadingDirection ReadingDirection;
            public DXNET.DirectWrite.FlowDirection FlowDirection;
            public System.IntPtr LocaleName;
            public DXNET.Direct2D1.MeasuringMode MeasuringMode;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            System.Runtime.InteropServices.Marshal.FreeHGlobal(@ref.LocaleName);
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            Width = @ref.Width;
            Thickness = @ref.Thickness;
            Offset = @ref.Offset;
            ReadingDirection = @ref.ReadingDirection;
            FlowDirection = @ref.FlowDirection;
            LocaleName = System.Runtime.InteropServices.Marshal.PtrToStringUni(@ref.LocaleName);
            MeasuringMode = @ref.MeasuringMode;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Width = Width;
            @ref.Thickness = Thickness;
            @ref.Offset = Offset;
            @ref.ReadingDirection = ReadingDirection;
            @ref.FlowDirection = FlowDirection;
            @ref.LocaleName = System.Runtime.InteropServices.Marshal.StringToHGlobalUni(LocaleName);
            @ref.MeasuringMode = MeasuringMode;
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_TEXT_METRICS</unmanaged>
    /// <unmanaged-short>DWRITE_TEXT_METRICS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct TextMetrics
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>left</unmanaged>
        /// <unmanaged-short>left</unmanaged-short>
        public System.Single Left;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>top</unmanaged>
        /// <unmanaged-short>top</unmanaged-short>
        public System.Single Top;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>width</unmanaged>
        /// <unmanaged-short>width</unmanaged-short>
        public System.Single Width;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>widthIncludingTrailingWhitespace</unmanaged>
        /// <unmanaged-short>widthIncludingTrailingWhitespace</unmanaged-short>
        public System.Single WidthIncludingTrailingWhitespace;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>height</unmanaged>
        /// <unmanaged-short>height</unmanaged-short>
        public System.Single Height;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>layoutWidth</unmanaged>
        /// <unmanaged-short>layoutWidth</unmanaged-short>
        public System.Single LayoutWidth;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>layoutHeight</unmanaged>
        /// <unmanaged-short>layoutHeight</unmanaged-short>
        public System.Single LayoutHeight;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>maxBidiReorderingDepth</unmanaged>
        /// <unmanaged-short>maxBidiReorderingDepth</unmanaged-short>
        public System.Int32 MaxBidiReorderingDepth;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lineCount</unmanaged>
        /// <unmanaged-short>lineCount</unmanaged-short>
        public System.Int32 LineCount;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_TEXT_METRICS1</unmanaged>
    /// <unmanaged-short>DWRITE_TEXT_METRICS1</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct TextMetrics1
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>left</unmanaged>
        /// <unmanaged-short>left</unmanaged-short>
        public System.Single Left;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>top</unmanaged>
        /// <unmanaged-short>top</unmanaged-short>
        public System.Single Top;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>width</unmanaged>
        /// <unmanaged-short>width</unmanaged-short>
        public System.Single Width;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>widthIncludingTrailingWhitespace</unmanaged>
        /// <unmanaged-short>widthIncludingTrailingWhitespace</unmanaged-short>
        public System.Single WidthIncludingTrailingWhitespace;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>height</unmanaged>
        /// <unmanaged-short>height</unmanaged-short>
        public System.Single Height;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>layoutWidth</unmanaged>
        /// <unmanaged-short>layoutWidth</unmanaged-short>
        public System.Single LayoutWidth;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>layoutHeight</unmanaged>
        /// <unmanaged-short>layoutHeight</unmanaged-short>
        public System.Single LayoutHeight;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>maxBidiReorderingDepth</unmanaged>
        /// <unmanaged-short>maxBidiReorderingDepth</unmanaged-short>
        public System.Int32 MaxBidiReorderingDepth;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lineCount</unmanaged>
        /// <unmanaged-short>lineCount</unmanaged-short>
        public System.Int32 LineCount;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>heightIncludingTrailingWhitespace</unmanaged>
        /// <unmanaged-short>heightIncludingTrailingWhitespace</unmanaged-short>
        public System.Single HeightIncludingTrailingWhitespace;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_TEXT_RANGE</unmanaged>
    /// <unmanaged-short>DWRITE_TEXT_RANGE</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct TextRange
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>startPosition</unmanaged>
        /// <unmanaged-short>startPosition</unmanaged-short>
        public System.Int32 StartPosition;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>length</unmanaged>
        /// <unmanaged-short>length</unmanaged-short>
        public System.Int32 Length;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_TRIMMING</unmanaged>
    /// <unmanaged-short>DWRITE_TRIMMING</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Trimming
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>granularity</unmanaged>
        /// <unmanaged-short>granularity</unmanaged-short>
        public DXNET.DirectWrite.TrimmingGranularity Granularity;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>delimiter</unmanaged>
        /// <unmanaged-short>delimiter</unmanaged-short>
        public System.Int32 Delimiter;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>delimiterCount</unmanaged>
        /// <unmanaged-short>delimiterCount</unmanaged-short>
        public System.Int32 DelimiterCount;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_TYPOGRAPHIC_FEATURES</unmanaged>
    /// <unmanaged-short>DWRITE_TYPOGRAPHIC_FEATURES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    internal partial struct TypographicFeatures
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>features</unmanaged>
        /// <unmanaged-short>features</unmanaged-short>
        public System.IntPtr Features;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>featureCount</unmanaged>
        /// <unmanaged-short>featureCount</unmanaged-short>
        public System.Int32 FeatureCount;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_UNDERLINE</unmanaged>
    /// <unmanaged-short>DWRITE_UNDERLINE</unmanaged-short>
    public partial struct Underline
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>width</unmanaged>
        /// <unmanaged-short>width</unmanaged-short>
        public System.Single Width;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>thickness</unmanaged>
        /// <unmanaged-short>thickness</unmanaged-short>
        public System.Single Thickness;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>offset</unmanaged>
        /// <unmanaged-short>offset</unmanaged-short>
        public System.Single Offset;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>runHeight</unmanaged>
        /// <unmanaged-short>runHeight</unmanaged-short>
        public System.Single RunHeight;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>readingDirection</unmanaged>
        /// <unmanaged-short>readingDirection</unmanaged-short>
        public DXNET.DirectWrite.ReadingDirection ReadingDirection;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>flowDirection</unmanaged>
        /// <unmanaged-short>flowDirection</unmanaged-short>
        public DXNET.DirectWrite.FlowDirection FlowDirection;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>localeName</unmanaged>
        /// <unmanaged-short>localeName</unmanaged-short>
        public System.String LocaleName;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>measuringMode</unmanaged>
        /// <unmanaged-short>measuringMode</unmanaged-short>
        public DXNET.Direct2D1.MeasuringMode MeasuringMode;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.Single Width;
            public System.Single Thickness;
            public System.Single Offset;
            public System.Single RunHeight;
            public DXNET.DirectWrite.ReadingDirection ReadingDirection;
            public DXNET.DirectWrite.FlowDirection FlowDirection;
            public System.IntPtr LocaleName;
            public DXNET.Direct2D1.MeasuringMode MeasuringMode;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            System.Runtime.InteropServices.Marshal.FreeHGlobal(@ref.LocaleName);
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            Width = @ref.Width;
            Thickness = @ref.Thickness;
            Offset = @ref.Offset;
            RunHeight = @ref.RunHeight;
            ReadingDirection = @ref.ReadingDirection;
            FlowDirection = @ref.FlowDirection;
            LocaleName = System.Runtime.InteropServices.Marshal.PtrToStringUni(@ref.LocaleName);
            MeasuringMode = @ref.MeasuringMode;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Width = Width;
            @ref.Thickness = Thickness;
            @ref.Offset = Offset;
            @ref.RunHeight = RunHeight;
            @ref.ReadingDirection = ReadingDirection;
            @ref.FlowDirection = FlowDirection;
            @ref.LocaleName = System.Runtime.InteropServices.Marshal.StringToHGlobalUni(LocaleName);
            @ref.MeasuringMode = MeasuringMode;
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_UNICODE_RANGE</unmanaged>
    /// <unmanaged-short>DWRITE_UNICODE_RANGE</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct UnicodeRange
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>first</unmanaged>
        /// <unmanaged-short>first</unmanaged-short>
        public System.Int32 First;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>last</unmanaged>
        /// <unmanaged-short>last</unmanaged-short>
        public System.Int32 Last;
    }
}
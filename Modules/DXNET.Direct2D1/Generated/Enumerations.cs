// <auto-generated/>

namespace DXNET.Direct2D1
{
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE</unmanaged-short>
    public enum AffineTransform2DInterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP</unmanaged>
    /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_PROP</unmanaged-short>
    public enum AffineTransform2DProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE</unmanaged-short>
        InterpolationMode = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX</unmanaged-short>
        TransformMatrix = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS</unmanaged>
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS</unmanaged-short>
        Sharpness = unchecked ((System.Int32)(3))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_ALPHA_MODE</unmanaged>
    /// <unmanaged-short>D2D1_ALPHA_MODE</unmanaged-short>
    public enum AlphaMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ALPHA_MODE_UNKNOWN</unmanaged>
        /// <unmanaged-short>D2D1_ALPHA_MODE_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ALPHA_MODE_PREMULTIPLIED</unmanaged>
        /// <unmanaged-short>D2D1_ALPHA_MODE_PREMULTIPLIED</unmanaged-short>
        Premultiplied = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ALPHA_MODE_STRAIGHT</unmanaged>
        /// <unmanaged-short>D2D1_ALPHA_MODE_STRAIGHT</unmanaged-short>
        Straight = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ALPHA_MODE_IGNORE</unmanaged>
        /// <unmanaged-short>D2D1_ALPHA_MODE_IGNORE</unmanaged-short>
        Ignore = unchecked ((System.Int32)(3))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_ANTIALIAS_MODE</unmanaged>
    /// <unmanaged-short>D2D1_ANTIALIAS_MODE</unmanaged-short>
    public enum AntialiasMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ANTIALIAS_MODE_PER_PRIMITIVE</unmanaged>
        /// <unmanaged-short>D2D1_ANTIALIAS_MODE_PER_PRIMITIVE</unmanaged-short>
        PerPrimitive = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ANTIALIAS_MODE_ALIASED</unmanaged>
        /// <unmanaged-short>D2D1_ANTIALIAS_MODE_ALIASED</unmanaged-short>
        Aliased = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_ARC_SIZE</unmanaged>
    /// <unmanaged-short>D2D1_ARC_SIZE</unmanaged-short>
    public enum ArcSize : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ARC_SIZE_SMALL</unmanaged>
        /// <unmanaged-short>D2D1_ARC_SIZE_SMALL</unmanaged-short>
        Small = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ARC_SIZE_LARGE</unmanaged>
        /// <unmanaged-short>D2D1_ARC_SIZE_LARGE</unmanaged-short>
        Large = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_ARITHMETICCOMPOSITE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_ARITHMETICCOMPOSITE_PROP</unmanaged-short>
    public enum ArithmeticCompositeProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS</unmanaged>
        /// <unmanaged-short>D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS</unmanaged-short>
        Coefficients = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_ATLAS_PROP</unmanaged>
    /// <unmanaged-short>D2D1_ATLAS_PROP</unmanaged-short>
    public enum AtlasProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ATLAS_PROP_INPUT_RECT</unmanaged>
        /// <unmanaged-short>D2D1_ATLAS_PROP_INPUT_RECT</unmanaged-short>
        InputRectangle = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ATLAS_PROP_INPUT_PADDING_RECT</unmanaged>
        /// <unmanaged-short>D2D1_ATLAS_PROP_INPUT_PADDING_RECT</unmanaged-short>
        InputPaddingRectangle = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_BITMAP_INTERPOLATION_MODE</unmanaged-short>
    public enum BitmapInterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_BITMAP_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BITMAP_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_BITMAP_OPTIONS</unmanaged-short>
    public enum BitmapOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAP_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAP_OPTIONS_TARGET</unmanaged>
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS_TARGET</unmanaged-short>
        Target = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAP_OPTIONS_CANNOT_DRAW</unmanaged>
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS_CANNOT_DRAW</unmanaged-short>
        CannotDraw = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAP_OPTIONS_CPU_READ</unmanaged>
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS_CPU_READ</unmanaged-short>
        CpuRead = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE</unmanaged>
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE</unmanaged-short>
        GdiCompatible = unchecked ((System.Int32)(8))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BITMAPSOURCE_ALPHA_MODE</unmanaged>
    /// <unmanaged-short>D2D1_BITMAPSOURCE_ALPHA_MODE</unmanaged-short>
    public enum BitmapSourceAlphaMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED</unmanaged-short>
        Premultiplied = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT</unmanaged-short>
        Straight = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE</unmanaged-short>
    public enum BitmapSourceInterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT</unmanaged-short>
        Fant = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR</unmanaged-short>
        MipmapLinear = unchecked ((System.Int32)(7))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION</unmanaged>
    /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION</unmanaged-short>
    public enum BitmapSourceOrientation : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL</unmanaged-short>
        FlipHorizontal = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180</unmanaged-short>
        RotateClockwise180 = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL</unmanaged-short>
        RotateClockwise180FlipHorizontal = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL</unmanaged-short>
        RotateClockwise270FlipHorizontal = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90</unmanaged-short>
        RotateClockwise90 = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL</unmanaged-short>
        RotateClockwise90FlipHorizontal = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270</unmanaged-short>
        RotateClockwise270 = unchecked ((System.Int32)(8))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BITMAPSOURCE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP</unmanaged-short>
    public enum BitmapSourceProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE</unmanaged-short>
        WicBitmapSource = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_SCALE</unmanaged-short>
        Scale = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE</unmanaged-short>
        InterpolationMode = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION</unmanaged-short>
        EnableDpiCorrection = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_ALPHA_MODE</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_ALPHA_MODE</unmanaged-short>
        AlphaMode = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_ORIENTATION</unmanaged>
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_ORIENTATION</unmanaged-short>
        Orientation = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BLEND</unmanaged>
    /// <unmanaged-short>D2D1_BLEND</unmanaged-short>
    public enum Blend : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_ZERO</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_ZERO</unmanaged-short>
        Zero = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_ONE</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_ONE</unmanaged-short>
        One = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_SRC_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_SRC_COLOR</unmanaged-short>
        SourceColor = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_INV_SRC_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_INV_SRC_COLOR</unmanaged-short>
        InverseSourceColor = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_SRC_ALPHA</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_SRC_ALPHA</unmanaged-short>
        SourceAlpha = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_INV_SRC_ALPHA</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_INV_SRC_ALPHA</unmanaged-short>
        InverseSourceAlpha = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_DEST_ALPHA</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_DEST_ALPHA</unmanaged-short>
        DestinationAlpha = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_INV_DEST_ALPHA</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_INV_DEST_ALPHA</unmanaged-short>
        InverseDestinationAlpha = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_DEST_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_DEST_COLOR</unmanaged-short>
        DestinationColor = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_INV_DEST_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_INV_DEST_COLOR</unmanaged-short>
        InverseDestinationColor = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_SRC_ALPHA_SAT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_SRC_ALPHA_SAT</unmanaged-short>
        SourceAlphaSaturate = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_BLEND_FACTOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_BLEND_FACTOR</unmanaged-short>
        BlendFactor = unchecked ((System.Int32)(14)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_INV_BLEND_FACTOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_INV_BLEND_FACTOR</unmanaged-short>
        InverseBlendFactor = unchecked ((System.Int32)(15))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BLEND_MODE</unmanaged>
    /// <unmanaged-short>D2D1_BLEND_MODE</unmanaged-short>
    public enum BlendMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_MULTIPLY</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_MULTIPLY</unmanaged-short>
        Multiply = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_SCREEN</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_SCREEN</unmanaged-short>
        Screen = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_DARKEN</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_DARKEN</unmanaged-short>
        Darken = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_LIGHTEN</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_LIGHTEN</unmanaged-short>
        Lighten = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_DISSOLVE</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_DISSOLVE</unmanaged-short>
        Dissolve = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_COLOR_BURN</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_COLOR_BURN</unmanaged-short>
        ColorBurn = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_LINEAR_BURN</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_LINEAR_BURN</unmanaged-short>
        LinearBurn = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_DARKER_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_DARKER_COLOR</unmanaged-short>
        DarkerColor = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_LIGHTER_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_LIGHTER_COLOR</unmanaged-short>
        LighterColor = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_COLOR_DODGE</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_COLOR_DODGE</unmanaged-short>
        ColorDodge = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_LINEAR_DODGE</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_LINEAR_DODGE</unmanaged-short>
        LinearDodge = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_OVERLAY</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_OVERLAY</unmanaged-short>
        Overlay = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_SOFT_LIGHT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_SOFT_LIGHT</unmanaged-short>
        SoftLight = unchecked ((System.Int32)(12)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_HARD_LIGHT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_HARD_LIGHT</unmanaged-short>
        HardLight = unchecked ((System.Int32)(13)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_VIVID_LIGHT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_VIVID_LIGHT</unmanaged-short>
        VividLight = unchecked ((System.Int32)(14)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_LINEAR_LIGHT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_LINEAR_LIGHT</unmanaged-short>
        LinearLight = unchecked ((System.Int32)(15)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_PIN_LIGHT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_PIN_LIGHT</unmanaged-short>
        PinLight = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_HARD_MIX</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_HARD_MIX</unmanaged-short>
        HardMix = unchecked ((System.Int32)(17)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_DIFFERENCE</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_DIFFERENCE</unmanaged-short>
        Difference = unchecked ((System.Int32)(18)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_EXCLUSION</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_EXCLUSION</unmanaged-short>
        Exclusion = unchecked ((System.Int32)(19)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_HUE</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_HUE</unmanaged-short>
        Hue = unchecked ((System.Int32)(20)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_SATURATION</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_SATURATION</unmanaged-short>
        Saturation = unchecked ((System.Int32)(21)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(22)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_LUMINOSITY</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_LUMINOSITY</unmanaged-short>
        Luminosity = unchecked ((System.Int32)(23)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_SUBTRACT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_SUBTRACT</unmanaged-short>
        Subtract = unchecked ((System.Int32)(24)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_MODE_DIVISION</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_MODE_DIVISION</unmanaged-short>
        Division = unchecked ((System.Int32)(25))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BLEND_OPERATION</unmanaged>
    /// <unmanaged-short>D2D1_BLEND_OPERATION</unmanaged-short>
    public enum BlendOperation : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_OPERATION_ADD</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_OPERATION_ADD</unmanaged-short>
        Add = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_OPERATION_SUBTRACT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_OPERATION_SUBTRACT</unmanaged-short>
        Subtract = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_OPERATION_REV_SUBTRACT</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_OPERATION_REV_SUBTRACT</unmanaged-short>
        ReverseSubtract = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_OPERATION_MIN</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_OPERATION_MIN</unmanaged-short>
        Minimum = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_OPERATION_MAX</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_OPERATION_MAX</unmanaged-short>
        Maximum = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BLEND_PROP</unmanaged>
    /// <unmanaged-short>D2D1_BLEND_PROP</unmanaged-short>
    public enum BlendProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BLEND_PROP_MODE</unmanaged>
        /// <unmanaged-short>D2D1_BLEND_PROP_MODE</unmanaged-short>
        Mode = unchecked ((System.Int32)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BORDER_EDGE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_BORDER_EDGE_MODE</unmanaged-short>
    public enum BorderEdgeMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BORDER_EDGE_MODE_CLAMP</unmanaged>
        /// <unmanaged-short>D2D1_BORDER_EDGE_MODE_CLAMP</unmanaged-short>
        Clamp = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BORDER_EDGE_MODE_WRAP</unmanaged>
        /// <unmanaged-short>D2D1_BORDER_EDGE_MODE_WRAP</unmanaged-short>
        Wrap = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BORDER_EDGE_MODE_MIRROR</unmanaged>
        /// <unmanaged-short>D2D1_BORDER_EDGE_MODE_MIRROR</unmanaged-short>
        Mirror = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BORDER_MODE</unmanaged>
    /// <unmanaged-short>D2D1_BORDER_MODE</unmanaged-short>
    public enum BorderMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BORDER_MODE_SOFT</unmanaged>
        /// <unmanaged-short>D2D1_BORDER_MODE_SOFT</unmanaged-short>
        Soft = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BORDER_MODE_HARD</unmanaged>
        /// <unmanaged-short>D2D1_BORDER_MODE_HARD</unmanaged-short>
        Hard = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BORDER_PROP</unmanaged>
    /// <unmanaged-short>D2D1_BORDER_PROP</unmanaged-short>
    public enum BorderProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BORDER_PROP_EDGE_MODE_X</unmanaged>
        /// <unmanaged-short>D2D1_BORDER_PROP_EDGE_MODE_X</unmanaged-short>
        EdgeModeX = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BORDER_PROP_EDGE_MODE_Y</unmanaged>
        /// <unmanaged-short>D2D1_BORDER_PROP_EDGE_MODE_Y</unmanaged-short>
        EdgeModeY = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BRIGHTNESS_PROP</unmanaged>
    /// <unmanaged-short>D2D1_BRIGHTNESS_PROP</unmanaged-short>
    public enum BrightnessProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BRIGHTNESS_PROP_WHITE_POINT</unmanaged>
        /// <unmanaged-short>D2D1_BRIGHTNESS_PROP_WHITE_POINT</unmanaged-short>
        WhitePoint = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BRIGHTNESS_PROP_BLACK_POINT</unmanaged>
        /// <unmanaged-short>D2D1_BRIGHTNESS_PROP_BLACK_POINT</unmanaged-short>
        BlackPoint = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BUFFER_PRECISION</unmanaged>
    /// <unmanaged-short>D2D1_BUFFER_PRECISION</unmanaged-short>
    public enum BufferPrecision : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BUFFER_PRECISION_UNKNOWN</unmanaged>
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BUFFER_PRECISION_8BPC_UNORM</unmanaged>
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_8BPC_UNORM</unmanaged-short>
        PerChannel8UNorm = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB</unmanaged>
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB</unmanaged-short>
        PerChannel8UNormSRgb = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BUFFER_PRECISION_16BPC_UNORM</unmanaged>
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_16BPC_UNORM</unmanaged-short>
        PerChannel16UNorm = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BUFFER_PRECISION_16BPC_FLOAT</unmanaged>
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_16BPC_FLOAT</unmanaged-short>
        PerChannel16Float = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_BUFFER_PRECISION_32BPC_FLOAT</unmanaged>
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_32BPC_FLOAT</unmanaged-short>
        PerChannel32Float = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_CAP_STYLE</unmanaged>
    /// <unmanaged-short>D2D1_CAP_STYLE</unmanaged-short>
    public enum CapStyle : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CAP_STYLE_FLAT</unmanaged>
        /// <unmanaged-short>D2D1_CAP_STYLE_FLAT</unmanaged-short>
        Flat = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CAP_STYLE_SQUARE</unmanaged>
        /// <unmanaged-short>D2D1_CAP_STYLE_SQUARE</unmanaged-short>
        Square = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CAP_STYLE_ROUND</unmanaged>
        /// <unmanaged-short>D2D1_CAP_STYLE_ROUND</unmanaged-short>
        Round = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CAP_STYLE_TRIANGLE</unmanaged>
        /// <unmanaged-short>D2D1_CAP_STYLE_TRIANGLE</unmanaged-short>
        Triangle = unchecked ((System.Int32)(3))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_CHANGE_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_CHANGE_TYPE</unmanaged-short>
    public enum ChangeType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CHANGE_TYPE_NONE</unmanaged>
        /// <unmanaged-short>D2D1_CHANGE_TYPE_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CHANGE_TYPE_PROPERTIES</unmanaged>
        /// <unmanaged-short>D2D1_CHANGE_TYPE_PROPERTIES</unmanaged-short>
        Properties = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CHANGE_TYPE_CONTEXT</unmanaged>
        /// <unmanaged-short>D2D1_CHANGE_TYPE_CONTEXT</unmanaged-short>
        Context = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CHANGE_TYPE_GRAPH</unmanaged>
        /// <unmanaged-short>D2D1_CHANGE_TYPE_GRAPH</unmanaged-short>
        Graph = unchecked ((System.Int32)(3))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_CHANNEL_DEPTH</unmanaged>
    /// <unmanaged-short>D2D1_CHANNEL_DEPTH</unmanaged-short>
    public enum ChannelDepth : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CHANNEL_DEPTH_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_CHANNEL_DEPTH_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CHANNEL_DEPTH_1</unmanaged>
        /// <unmanaged-short>D2D1_CHANNEL_DEPTH_1</unmanaged-short>
        One = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CHANNEL_DEPTH_4</unmanaged>
        /// <unmanaged-short>D2D1_CHANNEL_DEPTH_4</unmanaged-short>
        Four = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_CHANNEL_SELECTOR</unmanaged>
    /// <unmanaged-short>D2D1_CHANNEL_SELECTOR</unmanaged-short>
    public enum ChannelSelector : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CHANNEL_SELECTOR_R</unmanaged>
        /// <unmanaged-short>D2D1_CHANNEL_SELECTOR_R</unmanaged-short>
        R = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CHANNEL_SELECTOR_G</unmanaged>
        /// <unmanaged-short>D2D1_CHANNEL_SELECTOR_G</unmanaged-short>
        G = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CHANNEL_SELECTOR_B</unmanaged>
        /// <unmanaged-short>D2D1_CHANNEL_SELECTOR_B</unmanaged-short>
        B = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CHANNEL_SELECTOR_A</unmanaged>
        /// <unmanaged-short>D2D1_CHANNEL_SELECTOR_A</unmanaged-short>
        A = unchecked ((System.Int32)(3))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_CHROMAKEY_PROP</unmanaged>
    /// <unmanaged-short>D2D1_CHROMAKEY_PROP</unmanaged-short>
    public enum ChromakeyProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CHROMAKEY_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_CHROMAKEY_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CHROMAKEY_PROP_TOLERANCE</unmanaged>
        /// <unmanaged-short>D2D1_CHROMAKEY_PROP_TOLERANCE</unmanaged-short>
        Tolerance = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CHROMAKEY_PROP_INVERT_ALPHA</unmanaged>
        /// <unmanaged-short>D2D1_CHROMAKEY_PROP_INVERT_ALPHA</unmanaged-short>
        InvertAlpha = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CHROMAKEY_PROP_FEATHER</unmanaged>
        /// <unmanaged-short>D2D1_CHROMAKEY_PROP_FEATHER</unmanaged-short>
        Feather = unchecked ((System.Int32)(3))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION</unmanaged>
    /// <unmanaged-short>D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION</unmanaged-short>
    public enum ColorBitmapGlyphSnapOption : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DISABLE</unmanaged-short>
        Disable = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_COLOR_CONTEXT_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_COLOR_CONTEXT_TYPE</unmanaged-short>
    public enum ColorContextType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLOR_CONTEXT_TYPE_ICC</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_CONTEXT_TYPE_ICC</unmanaged-short>
        Icc = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLOR_CONTEXT_TYPE_SIMPLE</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_CONTEXT_TYPE_SIMPLE</unmanaged-short>
        Simple = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLOR_CONTEXT_TYPE_DXGI</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_CONTEXT_TYPE_DXGI</unmanaged-short>
        Dxgi = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_COLOR_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_COLOR_INTERPOLATION_MODE</unmanaged-short>
    public enum ColorInterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT</unmanaged-short>
        Straight = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED</unmanaged-short>
        Premultiplied = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_COLORMANAGEMENT_ALPHA_MODE</unmanaged>
    /// <unmanaged-short>D2D1_COLORMANAGEMENT_ALPHA_MODE</unmanaged-short>
    public enum ColorManagementAlphaMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED</unmanaged-short>
        Premultiplied = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT</unmanaged-short>
        Straight = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_COLORMANAGEMENT_PROP</unmanaged>
    /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP</unmanaged-short>
    public enum ColorManagementProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT</unmanaged-short>
        SourceColorContext = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT</unmanaged-short>
        SourceRenderingIntent = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT</unmanaged-short>
        DestinationColorContext = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT</unmanaged-short>
        DestinationRenderingIntent = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE</unmanaged-short>
        AlphaMode = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_QUALITY</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_QUALITY</unmanaged-short>
        Quality = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY</unmanaged>
    /// <unmanaged-short>D2D1_COLORMANAGEMENT_QUALITY</unmanaged-short>
    public enum ColorManagementQuality : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY_PROOF</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_QUALITY_PROOF</unmanaged-short>
        Proof = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY_NORMAL</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_QUALITY_NORMAL</unmanaged-short>
        Normal = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY_BEST</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_QUALITY_BEST</unmanaged-short>
        Best = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT</unmanaged>
    /// <unmanaged-short>D2D1_COLORMANAGEMENT_RENDERING_INTENT</unmanaged-short>
    public enum ColorManagementRenderingIntent : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL</unmanaged-short>
        Perceptual = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC</unmanaged-short>
        RelativeColorimetric = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION</unmanaged-short>
        Saturation = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC</unmanaged>
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC</unmanaged-short>
        AbsoluteColorimetric = unchecked ((System.Int32)(3))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_COLORMATRIX_ALPHA_MODE</unmanaged>
    /// <unmanaged-short>D2D1_COLORMATRIX_ALPHA_MODE</unmanaged-short>
    public enum ColorMatrixAlphaMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMATRIX_ALPHA_MODE_PREMULTIPLIED</unmanaged>
        /// <unmanaged-short>D2D1_COLORMATRIX_ALPHA_MODE_PREMULTIPLIED</unmanaged-short>
        Premultiplied = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMATRIX_ALPHA_MODE_STRAIGHT</unmanaged>
        /// <unmanaged-short>D2D1_COLORMATRIX_ALPHA_MODE_STRAIGHT</unmanaged-short>
        Straight = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_COLORMATRIX_PROP</unmanaged>
    /// <unmanaged-short>D2D1_COLORMATRIX_PROP</unmanaged-short>
    public enum ColorMatrixProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMATRIX_PROP_COLOR_MATRIX</unmanaged>
        /// <unmanaged-short>D2D1_COLORMATRIX_PROP_COLOR_MATRIX</unmanaged-short>
        ColorMatrix = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMATRIX_PROP_ALPHA_MODE</unmanaged>
        /// <unmanaged-short>D2D1_COLORMATRIX_PROP_ALPHA_MODE</unmanaged-short>
        AlphaMode = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_COLOR_SPACE</unmanaged>
    /// <unmanaged-short>D2D1_COLOR_SPACE</unmanaged-short>
    public enum ColorSpace : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLOR_SPACE_CUSTOM</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_SPACE_CUSTOM</unmanaged-short>
        Custom = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLOR_SPACE_SRGB</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_SPACE_SRGB</unmanaged-short>
        SRgb = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COLOR_SPACE_SCRGB</unmanaged>
        /// <unmanaged-short>D2D1_COLOR_SPACE_SCRGB</unmanaged-short>
        ScRgb = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_COMBINE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_COMBINE_MODE</unmanaged-short>
    public enum CombineMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMBINE_MODE_UNION</unmanaged>
        /// <unmanaged-short>D2D1_COMBINE_MODE_UNION</unmanaged-short>
        Union = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMBINE_MODE_INTERSECT</unmanaged>
        /// <unmanaged-short>D2D1_COMBINE_MODE_INTERSECT</unmanaged-short>
        Intersect = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMBINE_MODE_XOR</unmanaged>
        /// <unmanaged-short>D2D1_COMBINE_MODE_XOR</unmanaged-short>
        Xor = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMBINE_MODE_EXCLUDE</unmanaged>
        /// <unmanaged-short>D2D1_COMBINE_MODE_EXCLUDE</unmanaged-short>
        Exclude = unchecked ((System.Int32)(3))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS</unmanaged-short>
    public enum CompatibleRenderTargetOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE</unmanaged>
        /// <unmanaged-short>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE</unmanaged-short>
        GdiCompatible = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_COMPOSITE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_COMPOSITE_MODE</unmanaged-short>
    public enum CompositeMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_OVER</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_SOURCE_OVER</unmanaged-short>
        SourceOver = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_OVER</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_DESTINATION_OVER</unmanaged-short>
        DestinationOver = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_IN</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_SOURCE_IN</unmanaged-short>
        SourceIn = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_IN</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_DESTINATION_IN</unmanaged-short>
        DestinationIn = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_OUT</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_SOURCE_OUT</unmanaged-short>
        SourceOut = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_OUT</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_DESTINATION_OUT</unmanaged-short>
        DestinationOut = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_ATOP</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_SOURCE_ATOP</unmanaged-short>
        SourceAtop = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_ATOP</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_DESTINATION_ATOP</unmanaged-short>
        DestinationAtop = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPOSITE_MODE_XOR</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_XOR</unmanaged-short>
        Xor = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPOSITE_MODE_PLUS</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_PLUS</unmanaged-short>
        Plus = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_COPY</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_SOURCE_COPY</unmanaged-short>
        SourceCopy = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPOSITE_MODE_BOUNDED_SOURCE_COPY</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_BOUNDED_SOURCE_COPY</unmanaged-short>
        BoundedSourceCopy = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPOSITE_MODE_MASK_INVERT</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_MASK_INVERT</unmanaged-short>
        MaskInvert = unchecked ((System.Int32)(12))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_COMPOSITE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_COMPOSITE_PROP</unmanaged-short>
    public enum CompositeProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_COMPOSITE_PROP_MODE</unmanaged>
        /// <unmanaged-short>D2D1_COMPOSITE_PROP_MODE</unmanaged-short>
        Mode = unchecked ((System.Int32)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_CONTRAST_PROP</unmanaged>
    /// <unmanaged-short>D2D1_CONTRAST_PROP</unmanaged-short>
    public enum ContrastProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONTRAST_PROP_CONTRAST</unmanaged>
        /// <unmanaged-short>D2D1_CONTRAST_PROP_CONTRAST</unmanaged-short>
        Contrast = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONTRAST_PROP_CLAMP_INPUT</unmanaged>
        /// <unmanaged-short>D2D1_CONTRAST_PROP_CLAMP_INPUT</unmanaged-short>
        ClampInput = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP</unmanaged>
    /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP</unmanaged-short>
    public enum ConvoleMatrixProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>
        KernelUnitLength = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X</unmanaged-short>
        KernelSizeX = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y</unmanaged-short>
        KernelSizeY = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX</unmanaged-short>
        KernelMatrix = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_DIVISOR</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_DIVISOR</unmanaged-short>
        Divisor = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_BIAS</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_BIAS</unmanaged-short>
        Bias = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET</unmanaged-short>
        KernelOffset = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA</unmanaged-short>
        PreserveAlpha = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(10))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE</unmanaged-short>
    public enum ConvoleMatrixScaleMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_CROP_PROP</unmanaged>
    /// <unmanaged-short>D2D1_CROP_PROP</unmanaged-short>
    public enum CropProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CROP_PROP_RECT</unmanaged>
        /// <unmanaged-short>D2D1_CROP_PROP_RECT</unmanaged-short>
        Rectangle = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CROP_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_CROP_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_CROSSFADE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_CROSSFADE_PROP</unmanaged-short>
    public enum CrossfadeProp : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_CROSSFADE_PROP_WEIGHT</unmanaged>
        /// <unmanaged-short>D2D1_CROSSFADE_PROP_WEIGHT</unmanaged-short>
        Weight = unchecked ((System.Int32)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DASH_STYLE</unmanaged>
    /// <unmanaged-short>D2D1_DASH_STYLE</unmanaged-short>
    public enum DashStyle : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DASH_STYLE_SOLID</unmanaged>
        /// <unmanaged-short>D2D1_DASH_STYLE_SOLID</unmanaged-short>
        Solid = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DASH_STYLE_DASH</unmanaged>
        /// <unmanaged-short>D2D1_DASH_STYLE_DASH</unmanaged-short>
        Dash = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DASH_STYLE_DOT</unmanaged>
        /// <unmanaged-short>D2D1_DASH_STYLE_DOT</unmanaged-short>
        Dot = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DASH_STYLE_DASH_DOT</unmanaged>
        /// <unmanaged-short>D2D1_DASH_STYLE_DASH_DOT</unmanaged-short>
        DashDot = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DASH_STYLE_DASH_DOT_DOT</unmanaged>
        /// <unmanaged-short>D2D1_DASH_STYLE_DASH_DOT_DOT</unmanaged-short>
        DashDotDot = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DASH_STYLE_CUSTOM</unmanaged>
        /// <unmanaged-short>D2D1_DASH_STYLE_CUSTOM</unmanaged-short>
        Custom = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DEBUG_LEVEL</unmanaged>
    /// <unmanaged-short>D2D1_DEBUG_LEVEL</unmanaged-short>
    public enum DebugLevel : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DEBUG_LEVEL_NONE</unmanaged>
        /// <unmanaged-short>D2D1_DEBUG_LEVEL_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DEBUG_LEVEL_ERROR</unmanaged>
        /// <unmanaged-short>D2D1_DEBUG_LEVEL_ERROR</unmanaged-short>
        Error = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DEBUG_LEVEL_WARNING</unmanaged>
        /// <unmanaged-short>D2D1_DEBUG_LEVEL_WARNING</unmanaged-short>
        Warning = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DEBUG_LEVEL_INFORMATION</unmanaged>
        /// <unmanaged-short>D2D1_DEBUG_LEVEL_INFORMATION</unmanaged-short>
        Information = unchecked ((System.Int32)(3))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DC_INITIALIZE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_DC_INITIALIZE_MODE</unmanaged-short>
    public enum DeviceContextInitializeMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DC_INITIALIZE_MODE_COPY</unmanaged>
        /// <unmanaged-short>D2D1_DC_INITIALIZE_MODE_COPY</unmanaged-short>
        Copy = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DC_INITIALIZE_MODE_CLEAR</unmanaged>
        /// <unmanaged-short>D2D1_DC_INITIALIZE_MODE_CLEAR</unmanaged-short>
        Clear = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DEVICE_CONTEXT_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_DEVICE_CONTEXT_OPTIONS</unmanaged-short>
    public enum DeviceContextOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DEVICE_CONTEXT_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_DEVICE_CONTEXT_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS</unmanaged>
        /// <unmanaged-short>D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS</unmanaged-short>
        EnableMultithreadedOptimizations = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION</unmanaged>
    /// <unmanaged-short>D2D1_DIRECTIONALBLUR_OPTIMIZATION</unmanaged-short>
    public enum DirectionalBlurOptimization : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED</unmanaged>
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED</unmanaged-short>
        Speed = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED</unmanaged>
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED</unmanaged-short>
        Balanced = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY</unmanaged>
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY</unmanaged-short>
        Quality = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DIRECTIONALBLUR_PROP</unmanaged>
    /// <unmanaged-short>D2D1_DIRECTIONALBLUR_PROP</unmanaged-short>
    public enum DirectionalBlurProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION</unmanaged>
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION</unmanaged-short>
        StandardDeviation = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_ANGLE</unmanaged>
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_PROP_ANGLE</unmanaged-short>
        Angle = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION</unmanaged>
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION</unmanaged-short>
        Optimization = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(3))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DISCRETETRANSFER_PROP</unmanaged>
    /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP</unmanaged-short>
    public enum DiscreteTransferProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_RED_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_RED_TABLE</unmanaged-short>
        RedTable = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_RED_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_RED_DISABLE</unmanaged-short>
        RedDisable = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE</unmanaged-short>
        GreenTable = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE</unmanaged-short>
        GreenDisable = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE</unmanaged-short>
        BlueTable = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE</unmanaged-short>
        BlueDisable = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE</unmanaged-short>
        AlphaTable = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE</unmanaged-short>
        AlphaDisable = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(8))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DISPLACEMENTMAP_PROP</unmanaged>
    /// <unmanaged-short>D2D1_DISPLACEMENTMAP_PROP</unmanaged-short>
    public enum DisplacementMapProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISPLACEMENTMAP_PROP_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_DISPLACEMENTMAP_PROP_SCALE</unmanaged-short>
        Scale = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT</unmanaged>
        /// <unmanaged-short>D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT</unmanaged-short>
        XChannelSelect = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT</unmanaged>
        /// <unmanaged-short>D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT</unmanaged-short>
        YChannelSelect = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP</unmanaged-short>
    public enum DistantDiffuseProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_AZIMUTH</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_AZIMUTH</unmanaged-short>
        Azimuth = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_ELEVATION</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_ELEVATION</unmanaged-short>
        Elevation = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged-short>
        DiffuseConstant = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE</unmanaged-short>
        SurfaceScale = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>
        KernelUnitLength = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(6))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE</unmanaged-short>
    public enum DistantDiffuseScaleMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DISTANTSPECULAR_PROP</unmanaged>
    /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP</unmanaged-short>
    public enum DistantSpecularProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_AZIMUTH</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_AZIMUTH</unmanaged-short>
        Azimuth = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_ELEVATION</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_ELEVATION</unmanaged-short>
        Elevation = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged-short>
        SpecularExponent = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged-short>
        SpecularConstant = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE</unmanaged-short>
        SurfaceScale = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>
        KernelUnitLength = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(7))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE</unmanaged-short>
    public enum DistantSpecularScaleMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE</unmanaged-short>
    public enum DpiCompensationInterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DPICOMPENSATION_PROP</unmanaged>
    /// <unmanaged-short>D2D1_DPICOMPENSATION_PROP</unmanaged-short>
    public enum DpiCompensationProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE</unmanaged-short>
        InterpolationMode = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DPICOMPENSATION_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DPICOMPENSATION_PROP_INPUT_DPI</unmanaged>
        /// <unmanaged-short>D2D1_DPICOMPENSATION_PROP_INPUT_DPI</unmanaged-short>
        InputDpi = unchecked ((System.Int32)(2))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS</unmanaged-short>
    public enum DrawTextOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_NO_SNAP</unmanaged>
        /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS_NO_SNAP</unmanaged-short>
        NoSnap = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_CLIP</unmanaged>
        /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS_CLIP</unmanaged-short>
        Clip = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT</unmanaged>
        /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT</unmanaged-short>
        EnableColorFont = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_DISABLE_COLOR_BITMAP_SNAPPING</unmanaged>
        /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS_DISABLE_COLOR_BITMAP_SNAPPING</unmanaged-short>
        DisableColorBitmapSnapping = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_EDGEDETECTION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_EDGEDETECTION_MODE</unmanaged-short>
    public enum EdgeDetectionMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_EDGEDETECTION_MODE_SOBEL</unmanaged>
        /// <unmanaged-short>D2D1_EDGEDETECTION_MODE_SOBEL</unmanaged-short>
        StreamOutputBel = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_EDGEDETECTION_MODE_PREWITT</unmanaged>
        /// <unmanaged-short>D2D1_EDGEDETECTION_MODE_PREWITT</unmanaged-short>
        Prewitt = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_EDGEDETECTION_PROP</unmanaged>
    /// <unmanaged-short>D2D1_EDGEDETECTION_PROP</unmanaged-short>
    public enum EdgeDetectionProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_EDGEDETECTION_PROP_STRENGTH</unmanaged>
        /// <unmanaged-short>D2D1_EDGEDETECTION_PROP_STRENGTH</unmanaged-short>
        Strength = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_EDGEDETECTION_PROP_BLUR_RADIUS</unmanaged>
        /// <unmanaged-short>D2D1_EDGEDETECTION_PROP_BLUR_RADIUS</unmanaged-short>
        BlurRadius = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_EDGEDETECTION_PROP_MODE</unmanaged>
        /// <unmanaged-short>D2D1_EDGEDETECTION_PROP_MODE</unmanaged-short>
        Mode = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES</unmanaged>
        /// <unmanaged-short>D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES</unmanaged-short>
        OverlayEdges = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_EDGEDETECTION_PROP_ALPHA_MODE</unmanaged>
        /// <unmanaged-short>D2D1_EDGEDETECTION_PROP_ALPHA_MODE</unmanaged-short>
        AlphaMode = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_EMBOSS_PROP</unmanaged>
    /// <unmanaged-short>D2D1_EMBOSS_PROP</unmanaged-short>
    public enum EmbossProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_EMBOSS_PROP_HEIGHT</unmanaged>
        /// <unmanaged-short>D2D1_EMBOSS_PROP_HEIGHT</unmanaged-short>
        Height = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_EMBOSS_PROP_DIRECTION</unmanaged>
        /// <unmanaged-short>D2D1_EMBOSS_PROP_DIRECTION</unmanaged-short>
        Direction = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_EXPOSURE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_EXPOSURE_PROP</unmanaged-short>
    public enum ExposureProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_EXPOSURE_PROP_EXPOSURE_VALUE</unmanaged>
        /// <unmanaged-short>D2D1_EXPOSURE_PROP_EXPOSURE_VALUE</unmanaged-short>
        ExposureValue = unchecked ((System.Int32)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_EXTEND_MODE</unmanaged>
    /// <unmanaged-short>D2D1_EXTEND_MODE</unmanaged-short>
    public enum ExtendMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_EXTEND_MODE_CLAMP</unmanaged>
        /// <unmanaged-short>D2D1_EXTEND_MODE_CLAMP</unmanaged-short>
        Clamp = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_EXTEND_MODE_WRAP</unmanaged>
        /// <unmanaged-short>D2D1_EXTEND_MODE_WRAP</unmanaged-short>
        Wrap = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_EXTEND_MODE_MIRROR</unmanaged>
        /// <unmanaged-short>D2D1_EXTEND_MODE_MIRROR</unmanaged-short>
        Mirror = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_FACTORY_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_FACTORY_TYPE</unmanaged-short>
    public enum FactoryType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FACTORY_TYPE_SINGLE_THREADED</unmanaged>
        /// <unmanaged-short>D2D1_FACTORY_TYPE_SINGLE_THREADED</unmanaged-short>
        SingleThreaded = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FACTORY_TYPE_MULTI_THREADED</unmanaged>
        /// <unmanaged-short>D2D1_FACTORY_TYPE_MULTI_THREADED</unmanaged-short>
        MultiThreaded = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_FEATURE</unmanaged>
    /// <unmanaged-short>D2D1_FEATURE</unmanaged-short>
    public enum Feature : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FEATURE_DOUBLES</unmanaged>
        /// <unmanaged-short>D2D1_FEATURE_DOUBLES</unmanaged-short>
        Doubles = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS</unmanaged>
        /// <unmanaged-short>D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS</unmanaged-short>
        D3D10XHardwareOptions = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_FEATURE_LEVEL</unmanaged>
    /// <unmanaged-short>D2D1_FEATURE_LEVEL</unmanaged-short>
    public enum FeatureLevel : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FEATURE_LEVEL_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_FEATURE_LEVEL_DEFAULT</unmanaged-short>
        Level_DEFAULT = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FEATURE_LEVEL_9</unmanaged>
        /// <unmanaged-short>D2D1_FEATURE_LEVEL_9</unmanaged-short>
        Level_9 = unchecked ((System.Int32)(37120)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FEATURE_LEVEL_10</unmanaged>
        /// <unmanaged-short>D2D1_FEATURE_LEVEL_10</unmanaged-short>
        Level_10 = unchecked ((System.Int32)(40960))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_FIGURE_BEGIN</unmanaged>
    /// <unmanaged-short>D2D1_FIGURE_BEGIN</unmanaged-short>
    public enum FigureBegin : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FIGURE_BEGIN_FILLED</unmanaged>
        /// <unmanaged-short>D2D1_FIGURE_BEGIN_FILLED</unmanaged-short>
        Filled = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FIGURE_BEGIN_HOLLOW</unmanaged>
        /// <unmanaged-short>D2D1_FIGURE_BEGIN_HOLLOW</unmanaged-short>
        Hollow = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_FIGURE_END</unmanaged>
    /// <unmanaged-short>D2D1_FIGURE_END</unmanaged-short>
    public enum FigureEnd : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FIGURE_END_OPEN</unmanaged>
        /// <unmanaged-short>D2D1_FIGURE_END_OPEN</unmanaged-short>
        Open = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FIGURE_END_CLOSED</unmanaged>
        /// <unmanaged-short>D2D1_FIGURE_END_CLOSED</unmanaged-short>
        Closed = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_FILL_MODE</unmanaged>
    /// <unmanaged-short>D2D1_FILL_MODE</unmanaged-short>
    public enum FillMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FILL_MODE_ALTERNATE</unmanaged>
        /// <unmanaged-short>D2D1_FILL_MODE_ALTERNATE</unmanaged-short>
        Alternate = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FILL_MODE_WINDING</unmanaged>
        /// <unmanaged-short>D2D1_FILL_MODE_WINDING</unmanaged-short>
        Winding = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_FILTER</unmanaged>
    /// <unmanaged-short>D2D1_FILTER</unmanaged-short>
    public enum Filter : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FILTER_MIN_MAG_MIP_POINT</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_MAG_MIP_POINT</unmanaged-short>
        MinimumMagMipPoint = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR</unmanaged-short>
        MinimumMagPointMipLinear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged-short>
        MinimumPointMagLinearMipPoint = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR</unmanaged-short>
        MinimumPointMagMipLinear = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT</unmanaged-short>
        MinimumLinearMagMipPoint = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged-short>
        MinimumLinearMagPointMipLinear = unchecked ((System.Int32)(17)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT</unmanaged-short>
        MinimumMagLinearMipPoint = unchecked ((System.Int32)(20)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FILTER_MIN_MAG_MIP_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_MIN_MAG_MIP_LINEAR</unmanaged-short>
        MinimumMagMipLinear = unchecked ((System.Int32)(21)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FILTER_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_FILTER_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(85))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_FLOOD_PROP</unmanaged>
    /// <unmanaged-short>D2D1_FLOOD_PROP</unmanaged-short>
    public enum FloodProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_FLOOD_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_FLOOD_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_GAMMA</unmanaged>
    /// <unmanaged-short>D2D1_GAMMA</unmanaged-short>
    public enum Gamma : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMA_2_2</unmanaged>
        /// <unmanaged-short>D2D1_GAMMA_2_2</unmanaged-short>
        StandardRgb = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMA_1_0</unmanaged>
        /// <unmanaged-short>D2D1_GAMMA_1_0</unmanaged-short>
        Linear = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_GAMMA1</unmanaged>
    /// <unmanaged-short>D2D1_GAMMA1</unmanaged-short>
    public enum Gamma1 : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMA1_G22</unmanaged>
        /// <unmanaged-short>D2D1_GAMMA1_G22</unmanaged-short>
        G22 = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMA1_G10</unmanaged>
        /// <unmanaged-short>D2D1_GAMMA1_G10</unmanaged-short>
        G10 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMA1_G2084</unmanaged>
        /// <unmanaged-short>D2D1_GAMMA1_G2084</unmanaged-short>
        G2084 = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_GAMMATRANSFER_PROP</unmanaged>
    /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP</unmanaged-short>
    public enum GammaTransferProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE</unmanaged-short>
        RedAmplitude = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_EXPONENT</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_RED_EXPONENT</unmanaged-short>
        RedExponent = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_RED_OFFSET</unmanaged-short>
        RedOffset = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_RED_DISABLE</unmanaged-short>
        RedDisable = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE</unmanaged-short>
        GreenAmplitude = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT</unmanaged-short>
        GreenExponent = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET</unmanaged-short>
        GreenOffset = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE</unmanaged-short>
        GreenDisable = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE</unmanaged-short>
        BlueAmplitude = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT</unmanaged-short>
        BlueExponent = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET</unmanaged-short>
        BlueOffset = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE</unmanaged-short>
        BlueDisable = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE</unmanaged-short>
        AlphaAmplitude = unchecked ((System.Int32)(12)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT</unmanaged-short>
        AlphaExponent = unchecked ((System.Int32)(13)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET</unmanaged-short>
        AlphaOffset = unchecked ((System.Int32)(14)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE</unmanaged-short>
        AlphaDisable = unchecked ((System.Int32)(15)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(16))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION</unmanaged>
    /// <unmanaged-short>D2D1_GAUSSIANBLUR_OPTIMIZATION</unmanaged-short>
    public enum GaussianBlurOptimization : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED</unmanaged>
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED</unmanaged-short>
        Speed = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED</unmanaged>
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED</unmanaged-short>
        Balanced = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY</unmanaged>
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY</unmanaged-short>
        Quality = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_GAUSSIANBLUR_PROP</unmanaged>
    /// <unmanaged-short>D2D1_GAUSSIANBLUR_PROP</unmanaged-short>
    public enum GaussianBlurProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION</unmanaged>
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION</unmanaged-short>
        StandardDeviation = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION</unmanaged>
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION</unmanaged-short>
        Optimization = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GAUSSIANBLUR_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_GEOMETRY_RELATION</unmanaged>
    /// <unmanaged-short>D2D1_GEOMETRY_RELATION</unmanaged-short>
    public enum GeometryRelation : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GEOMETRY_RELATION_UNKNOWN</unmanaged>
        /// <unmanaged-short>D2D1_GEOMETRY_RELATION_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GEOMETRY_RELATION_DISJOINT</unmanaged>
        /// <unmanaged-short>D2D1_GEOMETRY_RELATION_DISJOINT</unmanaged-short>
        Disjoint = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GEOMETRY_RELATION_IS_CONTAINED</unmanaged>
        /// <unmanaged-short>D2D1_GEOMETRY_RELATION_IS_CONTAINED</unmanaged-short>
        IsContained = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GEOMETRY_RELATION_CONTAINS</unmanaged>
        /// <unmanaged-short>D2D1_GEOMETRY_RELATION_CONTAINS</unmanaged-short>
        Contains = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GEOMETRY_RELATION_OVERLAP</unmanaged>
        /// <unmanaged-short>D2D1_GEOMETRY_RELATION_OVERLAP</unmanaged-short>
        Overlap = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION</unmanaged>
    /// <unmanaged-short>D2D1_GEOMETRY_SIMPLIFICATION_OPTION</unmanaged-short>
    public enum GeometrySimplificationOption : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES</unmanaged>
        /// <unmanaged-short>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES</unmanaged-short>
        CubicsAndLines = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES</unmanaged>
        /// <unmanaged-short>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES</unmanaged-short>
        Lines = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS</unmanaged>
    /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS</unmanaged-short>
    public enum GlyphImageFormatS : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_NONE</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_TRUETYPE</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_TRUETYPE</unmanaged-short>
        Truetype = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_CFF</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_CFF</unmanaged-short>
        Cff = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_COLR</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_COLR</unmanaged-short>
        Colr = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_SVG</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_SVG</unmanaged-short>
        Svg = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_PNG</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_PNG</unmanaged-short>
        Png = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_JPEG</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_JPEG</unmanaged-short>
        Jpeg = unchecked ((System.Int32)(32)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_TIFF</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_TIFF</unmanaged-short>
        Tiff = unchecked ((System.Int32)(64)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DWRITE_GLYPH_IMAGE_FORMATS_PREMULTIPLIED_B8G8R8A8</unmanaged>
        /// <unmanaged-short>DWRITE_GLYPH_IMAGE_FORMATS_PREMULTIPLIED_B8G8R8A8</unmanaged-short>
        PremultipliedB8G8R8A8 = unchecked ((System.Int32)(128))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA</unmanaged>
    /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA</unmanaged-short>
    public enum HighlightSandShadowsInputGamma : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB</unmanaged>
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB</unmanaged-short>
        SRgb = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP</unmanaged>
    /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP</unmanaged-short>
    public enum HighlightSandShadowsProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS</unmanaged>
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS</unmanaged-short>
        Highlights = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS</unmanaged>
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS</unmanaged-short>
        Shadows = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY</unmanaged>
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY</unmanaged-short>
        Clarity = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA</unmanaged>
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA</unmanaged-short>
        InputGamma = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS</unmanaged>
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS</unmanaged-short>
        MaskBlurRadius = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_HISTOGRAM_PROP</unmanaged>
    /// <unmanaged-short>D2D1_HISTOGRAM_PROP</unmanaged-short>
    public enum HistogramProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_HISTOGRAM_PROP_NUM_BINS</unmanaged>
        /// <unmanaged-short>D2D1_HISTOGRAM_PROP_NUM_BINS</unmanaged-short>
        NumBins = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_HISTOGRAM_PROP_CHANNEL_SELECT</unmanaged>
        /// <unmanaged-short>D2D1_HISTOGRAM_PROP_CHANNEL_SELECT</unmanaged-short>
        ChannelSelect = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT</unmanaged-short>
        HistogramOutput = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_HUEROTATION_PROP</unmanaged>
    /// <unmanaged-short>D2D1_HUEROTATION_PROP</unmanaged-short>
    public enum HueRotationProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_HUEROTATION_PROP_ANGLE</unmanaged>
        /// <unmanaged-short>D2D1_HUEROTATION_PROP_ANGLE</unmanaged-short>
        Angle = unchecked ((System.Int32)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_HUETORGB_INPUT_COLOR_SPACE</unmanaged>
    /// <unmanaged-short>D2D1_HUETORGB_INPUT_COLOR_SPACE</unmanaged-short>
    public enum HueToRgbInputColorSpace : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE</unmanaged>
        /// <unmanaged-short>D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE</unmanaged-short>
        HueSaturationValue = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS</unmanaged>
        /// <unmanaged-short>D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS</unmanaged-short>
        HueSaturationLightness = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_HUETORGB_PROP</unmanaged>
    /// <unmanaged-short>D2D1_HUETORGB_PROP</unmanaged-short>
    public enum HueToRgbProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE</unmanaged>
        /// <unmanaged-short>D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE</unmanaged-short>
        InputColorSpace = unchecked ((System.Int32)(0))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS</unmanaged-short>
    public enum ImageSourceFromDxgiOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION</unmanaged>
        /// <unmanaged-short>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION</unmanaged-short>
        LowQualityPrimaryConversion = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_IMAGE_SOURCE_LOADING_OPTIONS</unmanaged-short>
    public enum ImageSourceLoadingOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE</unmanaged>
        /// <unmanaged-short>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE</unmanaged-short>
        ReleaseSource = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND</unmanaged>
        /// <unmanaged-short>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND</unmanaged-short>
        CacheOnDemand = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_INK_NIB_SHAPE</unmanaged>
    /// <unmanaged-short>D2D1_INK_NIB_SHAPE</unmanaged-short>
    public enum InkNibShape : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INK_NIB_SHAPE_ROUND</unmanaged>
        /// <unmanaged-short>D2D1_INK_NIB_SHAPE_ROUND</unmanaged-short>
        Round = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INK_NIB_SHAPE_SQUARE</unmanaged>
        /// <unmanaged-short>D2D1_INK_NIB_SHAPE_SQUARE</unmanaged-short>
        Square = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_INTERPOLATION_MODE</unmanaged-short>
    public enum InterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_ENUM_0</unmanaged>
    /// <unmanaged-short>D2D1_ENUM_0</unmanaged-short>
    public enum InterpolationModeDefinition : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_FANT</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_FANT</unmanaged-short>
        Fant = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR</unmanaged-short>
        MipmapLinear = unchecked ((System.Int32)(7))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_LAYER_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_LAYER_OPTIONS</unmanaged-short>
    public enum LayerOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LAYER_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_LAYER_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE</unmanaged>
        /// <unmanaged-short>D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE</unmanaged-short>
        InitializeForCleartype = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_LAYER_OPTIONS1</unmanaged>
    /// <unmanaged-short>D2D1_LAYER_OPTIONS1</unmanaged-short>
    public enum LayerOptions1 : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LAYER_OPTIONS1_NONE</unmanaged>
        /// <unmanaged-short>D2D1_LAYER_OPTIONS1_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND</unmanaged>
        /// <unmanaged-short>D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND</unmanaged-short>
        InitializeFromBackground = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LAYER_OPTIONS1_IGNORE_ALPHA</unmanaged>
        /// <unmanaged-short>D2D1_LAYER_OPTIONS1_IGNORE_ALPHA</unmanaged-short>
        IgnoreAlpha = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_LINEARTRANSFER_PROP</unmanaged>
    /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP</unmanaged-short>
    public enum LinearTransferProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT</unmanaged-short>
        RedYIntercept = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_RED_SLOPE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_RED_SLOPE</unmanaged-short>
        RedSlope = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_RED_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_RED_DISABLE</unmanaged-short>
        RedDisable = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT</unmanaged-short>
        GreenYIntercept = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE</unmanaged-short>
        GreenSlope = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE</unmanaged-short>
        GreenDisable = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT</unmanaged-short>
        BlueYIntercept = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE</unmanaged-short>
        BlueSlope = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE</unmanaged-short>
        BlueDisable = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT</unmanaged-short>
        AlphaYIntercept = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE</unmanaged-short>
        AlphaSlope = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE</unmanaged-short>
        AlphaDisable = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(12))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_LINE_JOIN</unmanaged>
    /// <unmanaged-short>D2D1_LINE_JOIN</unmanaged-short>
    public enum LineJoin : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINE_JOIN_MITER</unmanaged>
        /// <unmanaged-short>D2D1_LINE_JOIN_MITER</unmanaged-short>
        Miter = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINE_JOIN_BEVEL</unmanaged>
        /// <unmanaged-short>D2D1_LINE_JOIN_BEVEL</unmanaged-short>
        Bevel = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINE_JOIN_ROUND</unmanaged>
        /// <unmanaged-short>D2D1_LINE_JOIN_ROUND</unmanaged-short>
        Round = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LINE_JOIN_MITER_OR_BEVEL</unmanaged>
        /// <unmanaged-short>D2D1_LINE_JOIN_MITER_OR_BEVEL</unmanaged-short>
        MiterOrBevel = unchecked ((System.Int32)(3))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_LOOKUPTABLE3D_PROP</unmanaged>
    /// <unmanaged-short>D2D1_LOOKUPTABLE3D_PROP</unmanaged-short>
    public enum LookupTable3DProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LOOKUPTABLE3D_PROP_LUT</unmanaged>
        /// <unmanaged-short>D2D1_LOOKUPTABLE3D_PROP_LUT</unmanaged-short>
        Lut = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE</unmanaged>
        /// <unmanaged-short>D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE</unmanaged-short>
        AlphaMode = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_MAP_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_MAP_OPTIONS</unmanaged-short>
    public enum MapOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_MAP_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_MAP_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_MAP_OPTIONS_READ</unmanaged>
        /// <unmanaged-short>D2D1_MAP_OPTIONS_READ</unmanaged-short>
        Read = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_MAP_OPTIONS_WRITE</unmanaged>
        /// <unmanaged-short>D2D1_MAP_OPTIONS_WRITE</unmanaged-short>
        Write = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_MAP_OPTIONS_DISCARD</unmanaged>
        /// <unmanaged-short>D2D1_MAP_OPTIONS_DISCARD</unmanaged-short>
        Discard = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>DWRITE_MEASURING_MODE</unmanaged>
    /// <unmanaged-short>DWRITE_MEASURING_MODE</unmanaged-short>
    public enum MeasuringMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DWRITE_MEASURING_MODE_NATURAL</unmanaged>
        /// <unmanaged-short>DWRITE_MEASURING_MODE_NATURAL</unmanaged-short>
        Natural = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DWRITE_MEASURING_MODE_GDI_CLASSIC</unmanaged>
        /// <unmanaged-short>DWRITE_MEASURING_MODE_GDI_CLASSIC</unmanaged-short>
        GdiClassic = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>DWRITE_MEASURING_MODE_GDI_NATURAL</unmanaged>
        /// <unmanaged-short>DWRITE_MEASURING_MODE_GDI_NATURAL</unmanaged-short>
        GdiNatural = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_MORPHOLOGY_MODE</unmanaged>
    /// <unmanaged-short>D2D1_MORPHOLOGY_MODE</unmanaged-short>
    public enum MorphologyMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_MORPHOLOGY_MODE_ERODE</unmanaged>
        /// <unmanaged-short>D2D1_MORPHOLOGY_MODE_ERODE</unmanaged-short>
        Erode = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_MORPHOLOGY_MODE_DILATE</unmanaged>
        /// <unmanaged-short>D2D1_MORPHOLOGY_MODE_DILATE</unmanaged-short>
        Dilate = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_MORPHOLOGY_PROP</unmanaged>
    /// <unmanaged-short>D2D1_MORPHOLOGY_PROP</unmanaged-short>
    public enum MorphologyProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_MORPHOLOGY_PROP_MODE</unmanaged>
        /// <unmanaged-short>D2D1_MORPHOLOGY_PROP_MODE</unmanaged-short>
        Mode = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_MORPHOLOGY_PROP_WIDTH</unmanaged>
        /// <unmanaged-short>D2D1_MORPHOLOGY_PROP_WIDTH</unmanaged-short>
        Width = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_MORPHOLOGY_PROP_HEIGHT</unmanaged>
        /// <unmanaged-short>D2D1_MORPHOLOGY_PROP_HEIGHT</unmanaged-short>
        Height = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_OPACITY_MASK_CONTENT</unmanaged>
    /// <unmanaged-short>D2D1_OPACITY_MASK_CONTENT</unmanaged-short>
    public enum OpacityMaskContent : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_OPACITY_MASK_CONTENT_GRAPHICS</unmanaged>
        /// <unmanaged-short>D2D1_OPACITY_MASK_CONTENT_GRAPHICS</unmanaged-short>
        Graphics = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL</unmanaged>
        /// <unmanaged-short>D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL</unmanaged-short>
        TextNatural = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE</unmanaged>
        /// <unmanaged-short>D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE</unmanaged-short>
        TextGdiCompatible = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_OPACITYMETADATA_PROP</unmanaged>
    /// <unmanaged-short>D2D1_OPACITYMETADATA_PROP</unmanaged-short>
    public enum OpacityMetadataProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT</unmanaged>
        /// <unmanaged-short>D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT</unmanaged-short>
        InputOpaqueRectangle = unchecked ((System.Int32)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_OPACITY_PROP</unmanaged>
    /// <unmanaged-short>D2D1_OPACITY_PROP</unmanaged-short>
    public enum OpacityProp : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_OPACITY_PROP_OPACITY</unmanaged>
        /// <unmanaged-short>D2D1_OPACITY_PROP_OPACITY</unmanaged-short>
        Opacity = unchecked ((System.Int32)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_ORIENTATION</unmanaged>
    /// <unmanaged-short>D2D1_ORIENTATION</unmanaged-short>
    public enum Orientation : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ORIENTATION_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ORIENTATION_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_FLIP_HORIZONTAL</unmanaged-short>
        FlipHorizontal = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE180</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE180</unmanaged-short>
        RotateClockwise180 = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL</unmanaged-short>
        RotateClockwise180FlipHorizontal = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL</unmanaged-short>
        RotateClockwise90FlipHorizontal = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE270</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE270</unmanaged-short>
        RotateClockwise270 = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL</unmanaged-short>
        RotateClockwise270FlipHorizontal = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE90</unmanaged>
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE90</unmanaged-short>
        RotateClockwise90 = unchecked ((System.Int32)(8))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_PATCH_EDGE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_PATCH_EDGE_MODE</unmanaged-short>
    public enum PatchEdgeMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PATCH_EDGE_MODE_ALIASED</unmanaged>
        /// <unmanaged-short>D2D1_PATCH_EDGE_MODE_ALIASED</unmanaged-short>
        Aliased = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PATCH_EDGE_MODE_ANTIALIASED</unmanaged>
        /// <unmanaged-short>D2D1_PATCH_EDGE_MODE_ANTIALIASED</unmanaged-short>
        Antialiased = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED</unmanaged>
        /// <unmanaged-short>D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED</unmanaged-short>
        AliasedInflated = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_PATH_SEGMENT</unmanaged>
    /// <unmanaged-short>D2D1_PATH_SEGMENT</unmanaged-short>
    public enum PathSegment : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PATH_SEGMENT_NONE</unmanaged>
        /// <unmanaged-short>D2D1_PATH_SEGMENT_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PATH_SEGMENT_FORCE_UNSTROKED</unmanaged>
        /// <unmanaged-short>D2D1_PATH_SEGMENT_FORCE_UNSTROKED</unmanaged-short>
        ForceUnstroked = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN</unmanaged>
        /// <unmanaged-short>D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN</unmanaged-short>
        ForceRoundLineJoin = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE</unmanaged-short>
    public enum PerspectiveTransform3DInteroplationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP</unmanaged>
    /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP</unmanaged-short>
    public enum PerspectiveTransform3DProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE</unmanaged-short>
        InterpolationMode = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH</unmanaged-short>
        Depth = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN</unmanaged-short>
        PerspectiveOrigin = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET</unmanaged-short>
        LocalOffset = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET</unmanaged-short>
        GlobalOffset = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN</unmanaged-short>
        RotationOrigin = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION</unmanaged>
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION</unmanaged-short>
        Rotation = unchecked ((System.Int32)(7))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_PIXEL_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_PIXEL_OPTIONS</unmanaged-short>
    public enum PixelOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PIXEL_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_PIXEL_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING</unmanaged>
        /// <unmanaged-short>D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING</unmanaged-short>
        TrivialSampling = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_POINTDIFFUSE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP</unmanaged-short>
    public enum PointDiffuseProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION</unmanaged-short>
        LightPosition = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged-short>
        DiffuseConstant = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE</unmanaged-short>
        SurfaceScale = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>
        KernelUnitLength = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE</unmanaged-short>
    public enum PointDiffuseScaleMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_POINTSPECULAR_PROP</unmanaged>
    /// <unmanaged-short>D2D1_POINTSPECULAR_PROP</unmanaged-short>
    public enum PointSpecularProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_LIGHT_POSITION</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_LIGHT_POSITION</unmanaged-short>
        LightPosition = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged-short>
        SpecularExponent = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged-short>
        SpecularConstant = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_SURFACE_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_SURFACE_SCALE</unmanaged-short>
        SurfaceScale = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>
        KernelUnitLength = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(6))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE</unmanaged-short>
    public enum PointSpecularScaleMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_POSTERIZE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_POSTERIZE_PROP</unmanaged-short>
    public enum PosterizeProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POSTERIZE_PROP_RED_VALUE_COUNT</unmanaged>
        /// <unmanaged-short>D2D1_POSTERIZE_PROP_RED_VALUE_COUNT</unmanaged-short>
        RedValueCount = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT</unmanaged>
        /// <unmanaged-short>D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT</unmanaged-short>
        GreenValueCount = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT</unmanaged>
        /// <unmanaged-short>D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT</unmanaged-short>
        BlueValueCount = unchecked ((System.Int32)(2))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_PRESENT_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_PRESENT_OPTIONS</unmanaged-short>
    public enum PresentOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PRESENT_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_PRESENT_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS</unmanaged>
        /// <unmanaged-short>D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS</unmanaged-short>
        RetainContents = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PRESENT_OPTIONS_IMMEDIATELY</unmanaged>
        /// <unmanaged-short>D2D1_PRESENT_OPTIONS_IMMEDIATELY</unmanaged-short>
        Immediately = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_PRIMITIVE_BLEND</unmanaged>
    /// <unmanaged-short>D2D1_PRIMITIVE_BLEND</unmanaged-short>
    public enum PrimitiveBlend : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PRIMITIVE_BLEND_SOURCE_OVER</unmanaged>
        /// <unmanaged-short>D2D1_PRIMITIVE_BLEND_SOURCE_OVER</unmanaged-short>
        SourceOver = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PRIMITIVE_BLEND_COPY</unmanaged>
        /// <unmanaged-short>D2D1_PRIMITIVE_BLEND_COPY</unmanaged-short>
        Copy = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PRIMITIVE_BLEND_MIN</unmanaged>
        /// <unmanaged-short>D2D1_PRIMITIVE_BLEND_MIN</unmanaged-short>
        Minimum = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PRIMITIVE_BLEND_ADD</unmanaged>
        /// <unmanaged-short>D2D1_PRIMITIVE_BLEND_ADD</unmanaged-short>
        Add = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PRIMITIVE_BLEND_MAX</unmanaged>
        /// <unmanaged-short>D2D1_PRIMITIVE_BLEND_MAX</unmanaged-short>
        Maximum = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE</unmanaged>
    /// <unmanaged-short>D2D1_PRINT_FONT_SUBSET_MODE</unmanaged-short>
    public enum PrintFontSubsetMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE</unmanaged>
        /// <unmanaged-short>D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE</unmanaged-short>
        Eachpage = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE_NONE</unmanaged>
        /// <unmanaged-short>D2D1_PRINT_FONT_SUBSET_MODE_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_PROPERTY</unmanaged>
    /// <unmanaged-short>D2D1_PROPERTY</unmanaged-short>
    public enum Property : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_CLSID</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_CLSID</unmanaged-short>
        Clsid = unchecked ((System.Int32)(-2147483648)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_DISPLAYNAME</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_DISPLAYNAME</unmanaged-short>
        DisplayName = unchecked ((System.Int32)(-2147483647)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_AUTHOR</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_AUTHOR</unmanaged-short>
        Author = unchecked ((System.Int32)(-2147483646)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_CATEGORY</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_CATEGORY</unmanaged-short>
        Category = unchecked ((System.Int32)(-2147483645)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_DESCRIPTION</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_DESCRIPTION</unmanaged-short>
        Description = unchecked ((System.Int32)(-2147483644)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_INPUTS</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_INPUTS</unmanaged-short>
        Inputs = unchecked ((System.Int32)(-2147483643)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_CACHED</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_CACHED</unmanaged-short>
        Cached = unchecked ((System.Int32)(-2147483642)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_PRECISION</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_PRECISION</unmanaged-short>
        Precision = unchecked ((System.Int32)(-2147483641)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_MIN_INPUTS</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_MIN_INPUTS</unmanaged-short>
        MinimumInputs = unchecked ((System.Int32)(-2147483640)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_MAX_INPUTS</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_MAX_INPUTS</unmanaged-short>
        MaximumInputs = unchecked ((System.Int32)(-2147483639))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_PROPERTY_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_PROPERTY_TYPE</unmanaged-short>
    public enum PropertyType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_UNKNOWN</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_STRING</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_STRING</unmanaged-short>
        String = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_BOOL</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_BOOL</unmanaged-short>
        Bool = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_UINT32</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_UINT32</unmanaged-short>
        UInt32 = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_INT32</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_INT32</unmanaged-short>
        Int32 = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_FLOAT</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_FLOAT</unmanaged-short>
        Float = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_VECTOR2</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_VECTOR2</unmanaged-short>
        Vector2 = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_VECTOR3</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_VECTOR3</unmanaged-short>
        Vector3 = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_VECTOR4</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_VECTOR4</unmanaged-short>
        Vector4 = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_BLOB</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_BLOB</unmanaged-short>
        Blob = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_IUNKNOWN</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_IUNKNOWN</unmanaged-short>
        IUnknown = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_ENUM</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_ENUM</unmanaged-short>
        Enum = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_ARRAY</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_ARRAY</unmanaged-short>
        Array = unchecked ((System.Int32)(12)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_CLSID</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_CLSID</unmanaged-short>
        Clsid = unchecked ((System.Int32)(13)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_3X2</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_MATRIX_3X2</unmanaged-short>
        Matrix3x2 = unchecked ((System.Int32)(14)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_4X3</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_MATRIX_4X3</unmanaged-short>
        Matrix4x3 = unchecked ((System.Int32)(15)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_4X4</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_MATRIX_4X4</unmanaged-short>
        Matrix4x4 = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_5X4</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_MATRIX_5X4</unmanaged-short>
        Matrix5x4 = unchecked ((System.Int32)(17)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_PROPERTY_TYPE_COLOR_CONTEXT</unmanaged>
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_COLOR_CONTEXT</unmanaged-short>
        ColorContext = unchecked ((System.Int32)(18))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_RENDERING_PRIORITY</unmanaged>
    /// <unmanaged-short>D2D1_RENDERING_PRIORITY</unmanaged-short>
    public enum RenderingPriority : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_RENDERING_PRIORITY_NORMAL</unmanaged>
        /// <unmanaged-short>D2D1_RENDERING_PRIORITY_NORMAL</unmanaged-short>
        Normal = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_RENDERING_PRIORITY_LOW</unmanaged>
        /// <unmanaged-short>D2D1_RENDERING_PRIORITY_LOW</unmanaged-short>
        Low = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_RENDER_TARGET_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_RENDER_TARGET_TYPE</unmanaged-short>
    public enum RenderTargetType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_RENDER_TARGET_TYPE_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_RENDER_TARGET_TYPE_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_RENDER_TARGET_TYPE_SOFTWARE</unmanaged>
        /// <unmanaged-short>D2D1_RENDER_TARGET_TYPE_SOFTWARE</unmanaged-short>
        Software = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_RENDER_TARGET_TYPE_HARDWARE</unmanaged>
        /// <unmanaged-short>D2D1_RENDER_TARGET_TYPE_HARDWARE</unmanaged-short>
        Hardware = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_RENDER_TARGET_USAGE</unmanaged>
    /// <unmanaged-short>D2D1_RENDER_TARGET_USAGE</unmanaged-short>
    public enum RenderTargetUsage : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_RENDER_TARGET_USAGE_NONE</unmanaged>
        /// <unmanaged-short>D2D1_RENDER_TARGET_USAGE_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING</unmanaged>
        /// <unmanaged-short>D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING</unmanaged-short>
        ForceBitmapRemoting = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE</unmanaged>
        /// <unmanaged-short>D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE</unmanaged-short>
        GdiCompatible = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE</unmanaged>
    /// <unmanaged-short>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE</unmanaged-short>
    public enum RgbToHueOutputColorSpace : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE</unmanaged>
        /// <unmanaged-short>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE</unmanaged-short>
        HueSaturationValue = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS</unmanaged>
        /// <unmanaged-short>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS</unmanaged-short>
        HueSaturationLightness = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_RGBTOHUE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_RGBTOHUE_PROP</unmanaged-short>
    public enum RgbToHueProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE</unmanaged>
        /// <unmanaged-short>D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE</unmanaged-short>
        OutputColorSpace = unchecked ((System.Int32)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SATURATION_PROP</unmanaged>
    /// <unmanaged-short>D2D1_SATURATION_PROP</unmanaged-short>
    public enum SaturationProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SATURATION_PROP_SATURATION</unmanaged>
        /// <unmanaged-short>D2D1_SATURATION_PROP_SATURATION</unmanaged-short>
        Saturation = unchecked ((System.Int32)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE</unmanaged-short>
    public enum ScaleInterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SCALE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_SCALE_PROP</unmanaged-short>
    public enum ScaleProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SCALE_PROP_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_PROP_SCALE</unmanaged-short>
        Scale = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SCALE_PROP_CENTER_POINT</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_PROP_CENTER_POINT</unmanaged-short>
        CenterPoint = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SCALE_PROP_INTERPOLATION_MODE</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_PROP_INTERPOLATION_MODE</unmanaged-short>
        InterpolationMode = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SCALE_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SCALE_PROP_SHARPNESS</unmanaged>
        /// <unmanaged-short>D2D1_SCALE_PROP_SHARPNESS</unmanaged-short>
        Sharpness = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SEPIA_PROP</unmanaged>
    /// <unmanaged-short>D2D1_SEPIA_PROP</unmanaged-short>
    public enum SepiaProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SEPIA_PROP_INTENSITY</unmanaged>
        /// <unmanaged-short>D2D1_SEPIA_PROP_INTENSITY</unmanaged-short>
        Intensity = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SEPIA_PROP_ALPHA_MODE</unmanaged>
        /// <unmanaged-short>D2D1_SEPIA_PROP_ALPHA_MODE</unmanaged-short>
        AlphaMode = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SHADOW_OPTIMIZATION</unmanaged>
    /// <unmanaged-short>D2D1_SHADOW_OPTIMIZATION</unmanaged-short>
    public enum ShadowOptimization : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SHADOW_OPTIMIZATION_SPEED</unmanaged>
        /// <unmanaged-short>D2D1_SHADOW_OPTIMIZATION_SPEED</unmanaged-short>
        Speed = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SHADOW_OPTIMIZATION_BALANCED</unmanaged>
        /// <unmanaged-short>D2D1_SHADOW_OPTIMIZATION_BALANCED</unmanaged-short>
        Balanced = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SHADOW_OPTIMIZATION_QUALITY</unmanaged>
        /// <unmanaged-short>D2D1_SHADOW_OPTIMIZATION_QUALITY</unmanaged-short>
        Quality = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SHADOW_PROP</unmanaged>
    /// <unmanaged-short>D2D1_SHADOW_PROP</unmanaged-short>
    public enum ShadowProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION</unmanaged>
        /// <unmanaged-short>D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION</unmanaged-short>
        BlurStandardDeviation = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SHADOW_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SHADOW_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SHADOW_PROP_OPTIMIZATION</unmanaged>
        /// <unmanaged-short>D2D1_SHADOW_PROP_OPTIMIZATION</unmanaged-short>
        Optimization = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SHARPEN_PROP</unmanaged>
    /// <unmanaged-short>D2D1_SHARPEN_PROP</unmanaged-short>
    public enum SharpenProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SHARPEN_PROP_SHARPNESS</unmanaged>
        /// <unmanaged-short>D2D1_SHARPEN_PROP_SHARPNESS</unmanaged-short>
        Sharpness = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SHARPEN_PROP_THRESHOLD</unmanaged>
        /// <unmanaged-short>D2D1_SHARPEN_PROP_THRESHOLD</unmanaged-short>
        Threshold = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SPOTDIFFUSE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP</unmanaged-short>
    public enum SpotDiffuseProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION</unmanaged-short>
        LightPosition = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_POINTS_AT</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_POINTS_AT</unmanaged-short>
        PointsAt = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_FOCUS</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_FOCUS</unmanaged-short>
        Focus = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE</unmanaged-short>
        LimitingConeAngle = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged-short>
        DiffuseConstant = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE</unmanaged-short>
        SurfaceScale = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>
        KernelUnitLength = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(8))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE</unmanaged-short>
    public enum SpotDiffuseScaleMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SPOTSPECULAR_PROP</unmanaged>
    /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP</unmanaged-short>
    public enum SpotSpecularProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION</unmanaged-short>
        LightPosition = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_POINTS_AT</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_POINTS_AT</unmanaged-short>
        PointsAt = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_FOCUS</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_FOCUS</unmanaged-short>
        Focus = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE</unmanaged-short>
        LimitingConeAngle = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged-short>
        SpecularExponent = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged-short>
        SpecularConstant = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE</unmanaged-short>
        SurfaceScale = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>
        KernelUnitLength = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(9))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE</unmanaged-short>
    public enum SpotSpecularScaleMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SPRITE_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_SPRITE_OPTIONS</unmanaged-short>
    public enum SpriteOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPRITE_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_SPRITE_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SPRITE_OPTIONS_CLAMP_TO_SOURCE_RECTANGLE</unmanaged>
        /// <unmanaged-short>D2D1_SPRITE_OPTIONS_CLAMP_TO_SOURCE_RECTANGLE</unmanaged-short>
        ClampToSourceRectangle = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_STRAIGHTEN_PROP</unmanaged>
    /// <unmanaged-short>D2D1_STRAIGHTEN_PROP</unmanaged-short>
    public enum StraightenProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_STRAIGHTEN_PROP_ANGLE</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_PROP_ANGLE</unmanaged-short>
        Angle = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE</unmanaged-short>
        MaintainSize = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_STRAIGHTEN_PROP_SCALE_MODE</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_PROP_SCALE_MODE</unmanaged-short>
        ScaleMode = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE</unmanaged>
    /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE</unmanaged-short>
    public enum StraightenScaleMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_STROKE_TRANSFORM_TYPE</unmanaged-short>
    public enum StrokeTransformType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE_NORMAL</unmanaged>
        /// <unmanaged-short>D2D1_STROKE_TRANSFORM_TYPE_NORMAL</unmanaged-short>
        Normal = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE_FIXED</unmanaged>
        /// <unmanaged-short>D2D1_STROKE_TRANSFORM_TYPE_FIXED</unmanaged-short>
        Fixed = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE</unmanaged>
        /// <unmanaged-short>D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE</unmanaged-short>
        Hairline = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SUBPROPERTY</unmanaged>
    /// <unmanaged-short>D2D1_SUBPROPERTY</unmanaged-short>
    public enum SubProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SUBPROPERTY_DISPLAYNAME</unmanaged>
        /// <unmanaged-short>D2D1_SUBPROPERTY_DISPLAYNAME</unmanaged-short>
        DisplayName = unchecked ((System.Int32)(-2147483648)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SUBPROPERTY_ISREADONLY</unmanaged>
        /// <unmanaged-short>D2D1_SUBPROPERTY_ISREADONLY</unmanaged-short>
        Isreadonly = unchecked ((System.Int32)(-2147483647)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SUBPROPERTY_MIN</unmanaged>
        /// <unmanaged-short>D2D1_SUBPROPERTY_MIN</unmanaged-short>
        Minimum = unchecked ((System.Int32)(-2147483646)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SUBPROPERTY_MAX</unmanaged>
        /// <unmanaged-short>D2D1_SUBPROPERTY_MAX</unmanaged-short>
        Maximum = unchecked ((System.Int32)(-2147483645)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SUBPROPERTY_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_SUBPROPERTY_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(-2147483644)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SUBPROPERTY_FIELDS</unmanaged>
        /// <unmanaged-short>D2D1_SUBPROPERTY_FIELDS</unmanaged-short>
        Fields = unchecked ((System.Int32)(-2147483643)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SUBPROPERTY_INDEX</unmanaged>
        /// <unmanaged-short>D2D1_SUBPROPERTY_INDEX</unmanaged-short>
        Index = unchecked ((System.Int32)(-2147483642))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_ASPECT_ALIGN</unmanaged>
    /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN</unmanaged-short>
    public enum SvgAspectAlign : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_NONE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MIN</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MIN</unmanaged-short>
        XMinimumYMinimum = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MIN</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MIN</unmanaged-short>
        XMidYMinimum = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MIN</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MIN</unmanaged-short>
        XMaximumYMinimum = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MID</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MID</unmanaged-short>
        XMinimumYMid = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MID</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MID</unmanaged-short>
        XMidYMid = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MID</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MID</unmanaged-short>
        XMaximumYMid = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MAX</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MAX</unmanaged-short>
        XMinimumYMaximum = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MAX</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MAX</unmanaged-short>
        XMidYMaximum = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MAX</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MAX</unmanaged-short>
        XMaximumYMaximum = unchecked ((System.Int32)(9))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_ASPECT_SCALING</unmanaged>
    /// <unmanaged-short>D2D1_SVG_ASPECT_SCALING</unmanaged-short>
    public enum SvgAspectScaling : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ASPECT_SCALING_MEET</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_SCALING_MEET</unmanaged-short>
        Meet = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ASPECT_SCALING_SLICE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ASPECT_SCALING_SLICE</unmanaged-short>
        Slice = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE</unmanaged-short>
    public enum SvgAttributePodType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_FLOAT</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_FLOAT</unmanaged-short>
        Float = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_FILL_MODE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_FILL_MODE</unmanaged-short>
        FillMode = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_DISPLAY</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_DISPLAY</unmanaged-short>
        Display = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_OVERFLOW</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_OVERFLOW</unmanaged-short>
        Overflow = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_CAP</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_CAP</unmanaged-short>
        LineCap = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_JOIN</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_JOIN</unmanaged-short>
        LineJoin = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_VISIBILITY</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_VISIBILITY</unmanaged-short>
        Visibility = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_MATRIX</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_MATRIX</unmanaged-short>
        Matrix = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_UNIT_TYPE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_UNIT_TYPE</unmanaged-short>
        UnitType = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_EXTEND_MODE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_EXTEND_MODE</unmanaged-short>
        ExtendMode = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_PRESERVE_ASPECT_RATIO</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_PRESERVE_ASPECT_RATIO</unmanaged-short>
        PreserveAspectRatio = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_VIEWBOX</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_VIEWBOX</unmanaged-short>
        ViewBox = unchecked ((System.Int32)(12)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_POD_TYPE_LENGTH</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_POD_TYPE_LENGTH</unmanaged-short>
        Length = unchecked ((System.Int32)(13))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_ATTRIBUTE_STRING_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_STRING_TYPE</unmanaged-short>
    public enum SvgAttributeStringType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_STRING_TYPE_SVG</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_STRING_TYPE_SVG</unmanaged-short>
        Svg = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_ATTRIBUTE_STRING_TYPE_ID</unmanaged>
        /// <unmanaged-short>D2D1_SVG_ATTRIBUTE_STRING_TYPE_ID</unmanaged-short>
        Id = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_DISPLAY</unmanaged>
    /// <unmanaged-short>D2D1_SVG_DISPLAY</unmanaged-short>
    public enum SvgDisplay : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_DISPLAY_INLINE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_DISPLAY_INLINE</unmanaged-short>
        Inline = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_DISPLAY_NONE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_DISPLAY_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_LENGTH_UNITS</unmanaged>
    /// <unmanaged-short>D2D1_SVG_LENGTH_UNITS</unmanaged-short>
    public enum SvgLengthUnits : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_LENGTH_UNITS_NUMBER</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LENGTH_UNITS_NUMBER</unmanaged-short>
        Number = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_LENGTH_UNITS_PERCENTAGE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LENGTH_UNITS_PERCENTAGE</unmanaged-short>
        Percentage = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_LINE_CAP</unmanaged>
    /// <unmanaged-short>D2D1_SVG_LINE_CAP</unmanaged-short>
    public enum SvgLineCap : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_LINE_CAP_BUTT</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LINE_CAP_BUTT</unmanaged-short>
        Butt = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_LINE_CAP_SQUARE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LINE_CAP_SQUARE</unmanaged-short>
        Square = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_LINE_CAP_ROUND</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LINE_CAP_ROUND</unmanaged-short>
        Round = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_LINE_JOIN</unmanaged>
    /// <unmanaged-short>D2D1_SVG_LINE_JOIN</unmanaged-short>
    public enum SvgLineJoin : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_LINE_JOIN_BEVEL</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LINE_JOIN_BEVEL</unmanaged-short>
        Bevel = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_LINE_JOIN_MITER</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LINE_JOIN_MITER</unmanaged-short>
        Miter = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_LINE_JOIN_ROUND</unmanaged>
        /// <unmanaged-short>D2D1_SVG_LINE_JOIN_ROUND</unmanaged-short>
        Round = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_OVERFLOW</unmanaged>
    /// <unmanaged-short>D2D1_SVG_OVERFLOW</unmanaged-short>
    public enum SvgOverflow : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_OVERFLOW_VISIBLE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_OVERFLOW_VISIBLE</unmanaged-short>
        Visible = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_OVERFLOW_HIDDEN</unmanaged>
        /// <unmanaged-short>D2D1_SVG_OVERFLOW_HIDDEN</unmanaged-short>
        Hidden = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_PAINT_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_SVG_PAINT_TYPE</unmanaged-short>
    public enum SvgPaintType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PAINT_TYPE_NONE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PAINT_TYPE_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PAINT_TYPE_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PAINT_TYPE_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PAINT_TYPE_CURRENT_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PAINT_TYPE_CURRENT_COLOR</unmanaged-short>
        CurrentColor = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PAINT_TYPE_URI</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PAINT_TYPE_URI</unmanaged-short>
        Uri = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PAINT_TYPE_URI_NONE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PAINT_TYPE_URI_NONE</unmanaged-short>
        UriNone = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PAINT_TYPE_URI_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PAINT_TYPE_URI_COLOR</unmanaged-short>
        UriColor = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PAINT_TYPE_URI_CURRENT_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PAINT_TYPE_URI_CURRENT_COLOR</unmanaged-short>
        UriCurrentColor = unchecked ((System.Int32)(6))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_PATH_COMMAND</unmanaged>
    /// <unmanaged-short>D2D1_SVG_PATH_COMMAND</unmanaged-short>
    public enum SvgPathCommand : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_CLOSE_PATH</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_CLOSE_PATH</unmanaged-short>
        ClosePath = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_MOVE_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_MOVE_ABSOLUTE</unmanaged-short>
        MoveAbsolute = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_MOVE_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_MOVE_RELATIVE</unmanaged-short>
        MoveRelative = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_LINE_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_LINE_ABSOLUTE</unmanaged-short>
        LineAbsolute = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_LINE_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_LINE_RELATIVE</unmanaged-short>
        LineRelative = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_CUBIC_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_CUBIC_ABSOLUTE</unmanaged-short>
        CubicAbsolute = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_CUBIC_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_CUBIC_RELATIVE</unmanaged-short>
        CubicRelative = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_QUADRADIC_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_QUADRADIC_ABSOLUTE</unmanaged-short>
        QuadradicAbsolute = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_QUADRADIC_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_QUADRADIC_RELATIVE</unmanaged-short>
        QuadradicRelative = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_ARC_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_ARC_ABSOLUTE</unmanaged-short>
        ArcAbsolute = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_ARC_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_ARC_RELATIVE</unmanaged-short>
        ArcRelative = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_HORIZONTAL_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_HORIZONTAL_ABSOLUTE</unmanaged-short>
        HorizontalAbsolute = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_HORIZONTAL_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_HORIZONTAL_RELATIVE</unmanaged-short>
        HorizontalRelative = unchecked ((System.Int32)(12)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_VERTICAL_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_VERTICAL_ABSOLUTE</unmanaged-short>
        VerticalAbsolute = unchecked ((System.Int32)(13)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_VERTICAL_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_VERTICAL_RELATIVE</unmanaged-short>
        VerticalRelative = unchecked ((System.Int32)(14)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_ABSOLUTE</unmanaged-short>
        CubicSmoothAbsolute = unchecked ((System.Int32)(15)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_RELATIVE</unmanaged-short>
        CubicSmoothRelative = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_ABSOLUTE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_ABSOLUTE</unmanaged-short>
        QuadradicSmoothAbsolute = unchecked ((System.Int32)(17)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_RELATIVE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_RELATIVE</unmanaged-short>
        QuadradicSmoothRelative = unchecked ((System.Int32)(18))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_UNIT_TYPE</unmanaged>
    /// <unmanaged-short>D2D1_SVG_UNIT_TYPE</unmanaged-short>
    public enum SvgUnitType : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_UNIT_TYPE_USER_SPACE_ON_USE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_UNIT_TYPE_USER_SPACE_ON_USE</unmanaged-short>
        UserSpaceOnUse = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_UNIT_TYPE_OBJECT_BOUNDING_BOX</unmanaged>
        /// <unmanaged-short>D2D1_SVG_UNIT_TYPE_OBJECT_BOUNDING_BOX</unmanaged-short>
        ObjectBoundingBox = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_VISIBILITY</unmanaged>
    /// <unmanaged-short>D2D1_SVG_VISIBILITY</unmanaged-short>
    public enum SvgVisibility : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_VISIBILITY_VISIBLE</unmanaged>
        /// <unmanaged-short>D2D1_SVG_VISIBILITY_VISIBLE</unmanaged-short>
        Visible = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SVG_VISIBILITY_HIDDEN</unmanaged>
        /// <unmanaged-short>D2D1_SVG_VISIBILITY_HIDDEN</unmanaged-short>
        Hidden = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SWEEP_DIRECTION</unmanaged>
    /// <unmanaged-short>D2D1_SWEEP_DIRECTION</unmanaged-short>
    public enum SweepDirection : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE</unmanaged>
        /// <unmanaged-short>D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE</unmanaged-short>
        CounterClockwise = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_SWEEP_DIRECTION_CLOCKWISE</unmanaged>
        /// <unmanaged-short>D2D1_SWEEP_DIRECTION_CLOCKWISE</unmanaged-short>
        Clockwise = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_TABLETRANSFER_PROP</unmanaged>
    /// <unmanaged-short>D2D1_TABLETRANSFER_PROP</unmanaged-short>
    public enum TableTransferProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_RED_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_RED_TABLE</unmanaged-short>
        RedTable = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_RED_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_RED_DISABLE</unmanaged-short>
        RedDisable = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_GREEN_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_GREEN_TABLE</unmanaged-short>
        GreenTable = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_GREEN_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_GREEN_DISABLE</unmanaged-short>
        GreenDisable = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_BLUE_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_BLUE_TABLE</unmanaged-short>
        BlueTable = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_BLUE_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_BLUE_DISABLE</unmanaged-short>
        BlueDisable = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_ALPHA_TABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_ALPHA_TABLE</unmanaged-short>
        AlphaTable = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE</unmanaged-short>
        AlphaDisable = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(8))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_TEMPERATUREANDTINT_PROP</unmanaged>
    /// <unmanaged-short>D2D1_TEMPERATUREANDTINT_PROP</unmanaged-short>
    public enum TemperatureAndTintProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE</unmanaged>
        /// <unmanaged-short>D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE</unmanaged-short>
        Temperature = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TEMPERATUREANDTINT_PROP_TINT</unmanaged>
        /// <unmanaged-short>D2D1_TEMPERATUREANDTINT_PROP_TINT</unmanaged-short>
        Tint = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE</unmanaged>
    /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE</unmanaged-short>
    public enum TextAntialiasMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_DEFAULT</unmanaged>
        /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE_DEFAULT</unmanaged-short>
        Default = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE</unmanaged>
        /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE</unmanaged-short>
        Cleartype = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE</unmanaged>
        /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE</unmanaged-short>
        Grayscale = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_ALIASED</unmanaged>
        /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE_ALIASED</unmanaged-short>
        Aliased = unchecked ((System.Int32)(3))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_THREADING_MODE</unmanaged>
    /// <unmanaged-short>D2D1_THREADING_MODE</unmanaged-short>
    public enum ThreadingMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_THREADING_MODE_SINGLE_THREADED</unmanaged>
        /// <unmanaged-short>D2D1_THREADING_MODE_SINGLE_THREADED</unmanaged-short>
        SingleThreaded = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_THREADING_MODE_MULTI_THREADED</unmanaged>
        /// <unmanaged-short>D2D1_THREADING_MODE_MULTI_THREADED</unmanaged-short>
        MultiThreaded = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_TILE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_TILE_PROP</unmanaged-short>
    public enum TileProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TILE_PROP_RECT</unmanaged>
        /// <unmanaged-short>D2D1_TILE_PROP_RECT</unmanaged-short>
        Rectangle = unchecked ((System.Int32)(0))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_TINT_PROP</unmanaged>
    /// <unmanaged-short>D2D1_TINT_PROP</unmanaged-short>
    public enum TintProp : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TINT_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_TINT_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TINT_PROP_CLAMP_OUTPUT</unmanaged>
        /// <unmanaged-short>D2D1_TINT_PROP_CLAMP_OUTPUT</unmanaged-short>
        ClampOutput = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE</unmanaged-short>
    public enum Transform3DInterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_3DTRANSFORM_PROP</unmanaged>
    /// <unmanaged-short>D2D1_3DTRANSFORM_PROP</unmanaged-short>
    public enum Transform3DProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE</unmanaged-short>
        InterpolationMode = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DTRANSFORM_PROP_BORDER_MODE</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_PROP_BORDER_MODE</unmanaged-short>
        BorderMode = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX</unmanaged>
        /// <unmanaged-short>D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX</unmanaged-short>
        TransformMatrix = unchecked ((System.Int32)(2))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS</unmanaged-short>
    public enum TransformedImageSourceOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE</unmanaged>
        /// <unmanaged-short>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE</unmanaged-short>
        DisableDpiScale = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_TURBULENCE_NOISE</unmanaged>
    /// <unmanaged-short>D2D1_TURBULENCE_NOISE</unmanaged-short>
    public enum TurbulenceNoise : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TURBULENCE_NOISE_FRACTAL_SUM</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_NOISE_FRACTAL_SUM</unmanaged-short>
        FractalSum = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TURBULENCE_NOISE_TURBULENCE</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_NOISE_TURBULENCE</unmanaged-short>
        Turbulence = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_TURBULENCE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_TURBULENCE_PROP</unmanaged-short>
    public enum TurbulenceProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TURBULENCE_PROP_OFFSET</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_OFFSET</unmanaged-short>
        Offset = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TURBULENCE_PROP_SIZE</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_SIZE</unmanaged-short>
        Size = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TURBULENCE_PROP_BASE_FREQUENCY</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_BASE_FREQUENCY</unmanaged-short>
        BaseFrequency = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TURBULENCE_PROP_NUM_OCTAVES</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_NUM_OCTAVES</unmanaged-short>
        NumOctaves = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TURBULENCE_PROP_SEED</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_SEED</unmanaged-short>
        Seed = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TURBULENCE_PROP_NOISE</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_NOISE</unmanaged-short>
        Noise = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_TURBULENCE_PROP_STITCHABLE</unmanaged>
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_STITCHABLE</unmanaged-short>
        Stitchable = unchecked ((System.Int32)(6))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_UNIT_MODE</unmanaged>
    /// <unmanaged-short>D2D1_UNIT_MODE</unmanaged-short>
    public enum UnitMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_UNIT_MODE_DIPS</unmanaged>
        /// <unmanaged-short>D2D1_UNIT_MODE_DIPS</unmanaged-short>
        Dips = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_UNIT_MODE_PIXELS</unmanaged>
        /// <unmanaged-short>D2D1_UNIT_MODE_PIXELS</unmanaged-short>
        Pixels = unchecked ((System.Int32)(1))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_VERTEX_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_VERTEX_OPTIONS</unmanaged-short>
    public enum VertexOptions : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_VERTEX_OPTIONS_NONE</unmanaged>
        /// <unmanaged-short>D2D1_VERTEX_OPTIONS_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR</unmanaged>
        /// <unmanaged-short>D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR</unmanaged-short>
        DoNotClear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER</unmanaged>
        /// <unmanaged-short>D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER</unmanaged-short>
        UseDepthBuffer = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP</unmanaged>
        /// <unmanaged-short>D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP</unmanaged-short>
        AssumeNoOverlap = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_VERTEX_USAGE</unmanaged>
    /// <unmanaged-short>D2D1_VERTEX_USAGE</unmanaged-short>
    public enum VertexUsage : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_VERTEX_USAGE_STATIC</unmanaged>
        /// <unmanaged-short>D2D1_VERTEX_USAGE_STATIC</unmanaged-short>
        Static = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_VERTEX_USAGE_DYNAMIC</unmanaged>
        /// <unmanaged-short>D2D1_VERTEX_USAGE_DYNAMIC</unmanaged-short>
        Dynamic = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_VIGNETTE_PROP</unmanaged>
    /// <unmanaged-short>D2D1_VIGNETTE_PROP</unmanaged-short>
    public enum VignetteProperty : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_VIGNETTE_PROP_COLOR</unmanaged>
        /// <unmanaged-short>D2D1_VIGNETTE_PROP_COLOR</unmanaged-short>
        Color = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_VIGNETTE_PROP_TRANSITION_SIZE</unmanaged>
        /// <unmanaged-short>D2D1_VIGNETTE_PROP_TRANSITION_SIZE</unmanaged-short>
        TransitionSize = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_VIGNETTE_PROP_STRENGTH</unmanaged>
        /// <unmanaged-short>D2D1_VIGNETTE_PROP_STRENGTH</unmanaged-short>
        Strength = unchecked ((System.Int32)(2))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_WINDOW_STATE</unmanaged>
    /// <unmanaged-short>D2D1_WINDOW_STATE</unmanaged-short>
    public enum WindowState : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_WINDOW_STATE_NONE</unmanaged>
        /// <unmanaged-short>D2D1_WINDOW_STATE_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_WINDOW_STATE_OCCLUDED</unmanaged>
        /// <unmanaged-short>D2D1_WINDOW_STATE_OCCLUDED</unmanaged-short>
        Occluded = unchecked ((System.Int32)(1))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING</unmanaged>
    /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING</unmanaged-short>
    public enum YcbcrChromaSubSampling : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO</unmanaged-short>
        Auto = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_420</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING_420</unmanaged-short>
        Both = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_422</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING_422</unmanaged-short>
        Horizontal = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_444</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING_444</unmanaged-short>
        None = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_440</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING_440</unmanaged-short>
        Vertical = unchecked ((System.Int32)(4))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE</unmanaged-short>
    public enum YcbcrInterpolationMode : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>
        NearestNeighbor = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_CUBIC</unmanaged-short>
        Cubic = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>
        MultiSampleLinear = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>
        Anisotropic = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>
        HighQualityCubic = unchecked ((System.Int32)(5))}

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_YCBCR_PROP</unmanaged>
    /// <unmanaged-short>D2D1_YCBCR_PROP</unmanaged-short>
    public enum YCbCrProperties : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING</unmanaged-short>
        ChromaSubSampling = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_YCBCR_PROP_TRANSFORM_MATRIX</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_PROP_TRANSFORM_MATRIX</unmanaged-short>
        TransformMatrix = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D2D1_YCBCR_PROP_INTERPOLATION_MODE</unmanaged>
        /// <unmanaged-short>D2D1_YCBCR_PROP_INTERPOLATION_MODE</unmanaged-short>
        InterpolationMode = unchecked ((System.Int32)(2))}
}
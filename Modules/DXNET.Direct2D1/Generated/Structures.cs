// <auto-generated/>

namespace DXNET.Direct2D1
{
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_ARC_SEGMENT</unmanaged>
    /// <unmanaged-short>D2D1_ARC_SEGMENT</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct ArcSegment
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point</unmanaged>
        /// <unmanaged-short>point</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>size</unmanaged>
        /// <unmanaged-short>size</unmanaged-short>
        public DXNET.Size2F Size;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>rotationAngle</unmanaged>
        /// <unmanaged-short>rotationAngle</unmanaged-short>
        public System.Single RotationAngle;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>sweepDirection</unmanaged>
        /// <unmanaged-short>sweepDirection</unmanaged-short>
        public DXNET.Direct2D1.SweepDirection SweepDirection;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>arcSize</unmanaged>
        /// <unmanaged-short>arcSize</unmanaged-short>
        public DXNET.Direct2D1.ArcSize ArcSize;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BEZIER_SEGMENT</unmanaged>
    /// <unmanaged-short>D2D1_BEZIER_SEGMENT</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct BezierSegment
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point1</unmanaged>
        /// <unmanaged-short>point1</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point1;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point2</unmanaged>
        /// <unmanaged-short>point2</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point2;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point3</unmanaged>
        /// <unmanaged-short>point3</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point3;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BITMAP_BRUSH_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_BITMAP_BRUSH_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct BitmapBrushProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>extendModeX</unmanaged>
        /// <unmanaged-short>extendModeX</unmanaged-short>
        public DXNET.Direct2D1.ExtendMode ExtendModeX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>extendModeY</unmanaged>
        /// <unmanaged-short>extendModeY</unmanaged-short>
        public DXNET.Direct2D1.ExtendMode ExtendModeY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>interpolationMode</unmanaged>
        /// <unmanaged-short>interpolationMode</unmanaged-short>
        public DXNET.Direct2D1.BitmapInterpolationMode InterpolationMode;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BITMAP_BRUSH_PROPERTIES1</unmanaged>
    /// <unmanaged-short>D2D1_BITMAP_BRUSH_PROPERTIES1</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct BitmapBrushProperties1
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>extendModeX</unmanaged>
        /// <unmanaged-short>extendModeX</unmanaged-short>
        public DXNET.Direct2D1.ExtendMode ExtendModeX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>extendModeY</unmanaged>
        /// <unmanaged-short>extendModeY</unmanaged-short>
        public DXNET.Direct2D1.ExtendMode ExtendModeY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>interpolationMode</unmanaged>
        /// <unmanaged-short>interpolationMode</unmanaged-short>
        public DXNET.Direct2D1.InterpolationMode InterpolationMode;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BITMAP_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_BITMAP_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct BitmapProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pixelFormat</unmanaged>
        /// <unmanaged-short>pixelFormat</unmanaged-short>
        public DXNET.Direct2D1.PixelFormat PixelFormat;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>dpiX</unmanaged>
        /// <unmanaged-short>dpiX</unmanaged-short>
        public System.Single DpiX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>dpiY</unmanaged>
        /// <unmanaged-short>dpiY</unmanaged-short>
        public System.Single DpiY;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BITMAP_PROPERTIES1</unmanaged>
    /// <unmanaged-short>D2D1_BITMAP_PROPERTIES1</unmanaged-short>
    public partial class BitmapProperties1
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pixelFormat</unmanaged>
        /// <unmanaged-short>pixelFormat</unmanaged-short>
        public DXNET.Direct2D1.PixelFormat PixelFormat;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>dpiX</unmanaged>
        /// <unmanaged-short>dpiX</unmanaged-short>
        public System.Single DpiX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>dpiY</unmanaged>
        /// <unmanaged-short>dpiY</unmanaged-short>
        public System.Single DpiY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>bitmapOptions</unmanaged>
        /// <unmanaged-short>bitmapOptions</unmanaged-short>
        public DXNET.Direct2D1.BitmapOptions BitmapOptions;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>colorContext</unmanaged>
        /// <unmanaged-short>colorContext</unmanaged-short>
        public DXNET.Direct2D1.ColorContext ColorContext;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public DXNET.Direct2D1.PixelFormat PixelFormat;
            public System.Single DpiX;
            public System.Single DpiY;
            public DXNET.Direct2D1.BitmapOptions BitmapOptions;
            public System.IntPtr ColorContext;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            PixelFormat = @ref.PixelFormat;
            DpiX = @ref.DpiX;
            DpiY = @ref.DpiY;
            BitmapOptions = @ref.BitmapOptions;
            if (@ref.ColorContext != System.IntPtr.Zero)
                ColorContext = new DXNET.Direct2D1.ColorContext(@ref.ColorContext);
            else
                ColorContext = null;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.PixelFormat = PixelFormat;
            @ref.DpiX = DpiX;
            @ref.DpiY = DpiY;
            @ref.BitmapOptions = BitmapOptions;
            @ref.ColorContext = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.ColorContext>(ColorContext);
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BLEND_DESCRIPTION</unmanaged>
    /// <unmanaged-short>D2D1_BLEND_DESCRIPTION</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct BlendDescription
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>sourceBlend</unmanaged>
        /// <unmanaged-short>sourceBlend</unmanaged-short>
        public DXNET.Direct2D1.Blend SourceBlend;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>destinationBlend</unmanaged>
        /// <unmanaged-short>destinationBlend</unmanaged-short>
        public DXNET.Direct2D1.Blend DestinationBlend;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>blendOperation</unmanaged>
        /// <unmanaged-short>blendOperation</unmanaged-short>
        public DXNET.Direct2D1.BlendOperation BlendOperation;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>sourceBlendAlpha</unmanaged>
        /// <unmanaged-short>sourceBlendAlpha</unmanaged-short>
        public DXNET.Direct2D1.Blend SourceBlendAlpha;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>destinationBlendAlpha</unmanaged>
        /// <unmanaged-short>destinationBlendAlpha</unmanaged-short>
        public DXNET.Direct2D1.Blend DestinationBlendAlpha;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>blendOperationAlpha</unmanaged>
        /// <unmanaged-short>blendOperationAlpha</unmanaged-short>
        public DXNET.Direct2D1.BlendOperation BlendOperationAlpha;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>blendFactor</unmanaged>
        /// <unmanaged-short>blendFactor</unmanaged-short>
        public DXNET.Mathematics.Interop.RawColor4 BlendFactor;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_BRUSH_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_BRUSH_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct BrushProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>opacity</unmanaged>
        /// <unmanaged-short>opacity</unmanaged-short>
        public System.Single Opacity;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>transform</unmanaged>
        /// <unmanaged-short>transform</unmanaged-short>
        public DXNET.Mathematics.Interop.RawMatrix3x2 Transform;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_CREATION_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_CREATION_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct CreationProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>threadingMode</unmanaged>
        /// <unmanaged-short>threadingMode</unmanaged-short>
        public DXNET.Direct2D1.ThreadingMode ThreadingMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>debugLevel</unmanaged>
        /// <unmanaged-short>debugLevel</unmanaged-short>
        public DXNET.Direct2D1.DebugLevel DebugLevel;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>options</unmanaged>
        /// <unmanaged-short>options</unmanaged-short>
        public DXNET.Direct2D1.DeviceContextOptions Options;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES</unmanaged-short>
    public partial class CustomVertexBufferProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>shaderBufferWithInputSignature</unmanaged>
        /// <unmanaged-short>shaderBufferWithInputSignature</unmanaged-short>
        internal System.IntPtr ShaderBufferWithInputSignature;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>shaderBufferSize</unmanaged>
        /// <unmanaged-short>shaderBufferSize</unmanaged-short>
        internal System.Int32 ShaderBufferSize;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>inputElements</unmanaged>
        /// <unmanaged-short>inputElements</unmanaged-short>
        internal System.IntPtr InputElementsPointer;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>elementCount</unmanaged>
        /// <unmanaged-short>elementCount</unmanaged-short>
        internal System.Int32 ElementCount;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>stride</unmanaged>
        /// <unmanaged-short>stride</unmanaged-short>
        public System.Int32 Stride;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.IntPtr ShaderBufferWithInputSignature;
            public System.Int32 ShaderBufferSize;
            public System.IntPtr InputElementsPointer;
            public System.Int32 ElementCount;
            public System.Int32 Stride;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            ShaderBufferWithInputSignature = @ref.ShaderBufferWithInputSignature;
            ShaderBufferSize = @ref.ShaderBufferSize;
            InputElementsPointer = @ref.InputElementsPointer;
            ElementCount = @ref.ElementCount;
            Stride = @ref.Stride;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.ShaderBufferWithInputSignature = ShaderBufferWithInputSignature;
            @ref.ShaderBufferSize = ShaderBufferSize;
            @ref.InputElementsPointer = InputElementsPointer;
            @ref.ElementCount = ElementCount;
            @ref.Stride = Stride;
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DRAWING_STATE_DESCRIPTION</unmanaged>
    /// <unmanaged-short>D2D1_DRAWING_STATE_DESCRIPTION</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct DrawingStateDescription
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>antialiasMode</unmanaged>
        /// <unmanaged-short>antialiasMode</unmanaged-short>
        public DXNET.Direct2D1.AntialiasMode AntialiasMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>textAntialiasMode</unmanaged>
        /// <unmanaged-short>textAntialiasMode</unmanaged-short>
        public DXNET.Direct2D1.TextAntialiasMode TextAntialiasMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>tag1</unmanaged>
        /// <unmanaged-short>tag1</unmanaged-short>
        public System.Int64 Tag1;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>tag2</unmanaged>
        /// <unmanaged-short>tag2</unmanaged-short>
        public System.Int64 Tag2;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>transform</unmanaged>
        /// <unmanaged-short>transform</unmanaged-short>
        public DXNET.Mathematics.Interop.RawMatrix3x2 Transform;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_DRAWING_STATE_DESCRIPTION1</unmanaged>
    /// <unmanaged-short>D2D1_DRAWING_STATE_DESCRIPTION1</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct DrawingStateDescription1
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>antialiasMode</unmanaged>
        /// <unmanaged-short>antialiasMode</unmanaged-short>
        public DXNET.Direct2D1.AntialiasMode AntialiasMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>textAntialiasMode</unmanaged>
        /// <unmanaged-short>textAntialiasMode</unmanaged-short>
        public DXNET.Direct2D1.TextAntialiasMode TextAntialiasMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>tag1</unmanaged>
        /// <unmanaged-short>tag1</unmanaged-short>
        public System.Int64 Tag1;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>tag2</unmanaged>
        /// <unmanaged-short>tag2</unmanaged-short>
        public System.Int64 Tag2;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>transform</unmanaged>
        /// <unmanaged-short>transform</unmanaged-short>
        public DXNET.Mathematics.Interop.RawMatrix3x2 Transform;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>primitiveBlend</unmanaged>
        /// <unmanaged-short>primitiveBlend</unmanaged-short>
        public DXNET.Direct2D1.PrimitiveBlend PrimitiveBlend;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>unitMode</unmanaged>
        /// <unmanaged-short>unitMode</unmanaged-short>
        public DXNET.Direct2D1.UnitMode UnitMode;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_EFFECT_INPUT_DESCRIPTION</unmanaged>
    /// <unmanaged-short>D2D1_EFFECT_INPUT_DESCRIPTION</unmanaged-short>
    public partial class EffectInputDescription
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>effect</unmanaged>
        /// <unmanaged-short>effect</unmanaged-short>
        public DXNET.Direct2D1.Effect Effect;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>inputIndex</unmanaged>
        /// <unmanaged-short>inputIndex</unmanaged-short>
        public System.Int32 InputIndex;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>inputRectangle</unmanaged>
        /// <unmanaged-short>inputRectangle</unmanaged-short>
        public DXNET.Mathematics.Interop.RawRectangleF InputRectangle;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.IntPtr Effect;
            public System.Int32 InputIndex;
            public DXNET.Mathematics.Interop.RawRectangleF InputRectangle;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            if (@ref.Effect != System.IntPtr.Zero)
                Effect = new DXNET.Direct2D1.Effect(@ref.Effect);
            else
                Effect = null;
            InputIndex = @ref.InputIndex;
            InputRectangle = @ref.InputRectangle;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Effect = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Effect>(Effect);
            @ref.InputIndex = InputIndex;
            @ref.InputRectangle = InputRectangle;
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_ELLIPSE</unmanaged>
    /// <unmanaged-short>D2D1_ELLIPSE</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Ellipse
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point</unmanaged>
        /// <unmanaged-short>point</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>radiusX</unmanaged>
        /// <unmanaged-short>radiusX</unmanaged-short>
        public System.Single RadiusX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>radiusY</unmanaged>
        /// <unmanaged-short>radiusY</unmanaged-short>
        public System.Single RadiusY;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_FACTORY_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_FACTORY_OPTIONS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct FactoryOptions
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>debugLevel</unmanaged>
        /// <unmanaged-short>debugLevel</unmanaged-short>
        public DXNET.Direct2D1.DebugLevel DebugLevel;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS</unmanaged>
    /// <unmanaged-short>D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    internal partial struct FeatureDataD3D10XHardwareOptions
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x</unmanaged>
        /// <unmanaged-short>computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool ComputeShadersPlusRawAndStructuredBuffersViaShader4X;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_FEATURE_DATA_DOUBLES</unmanaged>
    /// <unmanaged-short>D2D1_FEATURE_DATA_DOUBLES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    internal partial struct FeatureDataDoubles
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>doublePrecisionFloatShaderOps</unmanaged>
        /// <unmanaged-short>doublePrecisionFloatShaderOps</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool DoublePrecisionFloatShaderOps;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_GRADIENT_MESH_PATCH</unmanaged>
    /// <unmanaged-short>D2D1_GRADIENT_MESH_PATCH</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct GradientMeshPatch
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point00</unmanaged>
        /// <unmanaged-short>point00</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point00;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point01</unmanaged>
        /// <unmanaged-short>point01</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point01;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point02</unmanaged>
        /// <unmanaged-short>point02</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point02;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point03</unmanaged>
        /// <unmanaged-short>point03</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point03;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point10</unmanaged>
        /// <unmanaged-short>point10</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point10;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point11</unmanaged>
        /// <unmanaged-short>point11</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point11;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point12</unmanaged>
        /// <unmanaged-short>point12</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point12;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point13</unmanaged>
        /// <unmanaged-short>point13</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point13;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point20</unmanaged>
        /// <unmanaged-short>point20</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point20;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point21</unmanaged>
        /// <unmanaged-short>point21</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point21;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point22</unmanaged>
        /// <unmanaged-short>point22</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point22;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point23</unmanaged>
        /// <unmanaged-short>point23</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point23;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point30</unmanaged>
        /// <unmanaged-short>point30</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point30;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point31</unmanaged>
        /// <unmanaged-short>point31</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point31;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point32</unmanaged>
        /// <unmanaged-short>point32</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point32;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point33</unmanaged>
        /// <unmanaged-short>point33</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point33;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>color00</unmanaged>
        /// <unmanaged-short>color00</unmanaged-short>
        public DXNET.Mathematics.Interop.RawColor4 Color00;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>color03</unmanaged>
        /// <unmanaged-short>color03</unmanaged-short>
        public DXNET.Mathematics.Interop.RawColor4 Color03;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>color30</unmanaged>
        /// <unmanaged-short>color30</unmanaged-short>
        public DXNET.Mathematics.Interop.RawColor4 Color30;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>color33</unmanaged>
        /// <unmanaged-short>color33</unmanaged-short>
        public DXNET.Mathematics.Interop.RawColor4 Color33;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>topEdgeMode</unmanaged>
        /// <unmanaged-short>topEdgeMode</unmanaged-short>
        public DXNET.Direct2D1.PatchEdgeMode TopEdgeMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>leftEdgeMode</unmanaged>
        /// <unmanaged-short>leftEdgeMode</unmanaged-short>
        public DXNET.Direct2D1.PatchEdgeMode LeftEdgeMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>bottomEdgeMode</unmanaged>
        /// <unmanaged-short>bottomEdgeMode</unmanaged-short>
        public DXNET.Direct2D1.PatchEdgeMode BottomEdgeMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>rightEdgeMode</unmanaged>
        /// <unmanaged-short>rightEdgeMode</unmanaged-short>
        public DXNET.Direct2D1.PatchEdgeMode RightEdgeMode;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_GRADIENT_STOP</unmanaged>
    /// <unmanaged-short>D2D1_GRADIENT_STOP</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct GradientStop
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>position</unmanaged>
        /// <unmanaged-short>position</unmanaged-short>
        public System.Single Position;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>color</unmanaged>
        /// <unmanaged-short>color</unmanaged-short>
        public DXNET.Mathematics.Interop.RawColor4 Color;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_HWND_RENDER_TARGET_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_HWND_RENDER_TARGET_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct HwndRenderTargetProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>hwnd</unmanaged>
        /// <unmanaged-short>hwnd</unmanaged-short>
        public System.IntPtr Hwnd;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pixelSize</unmanaged>
        /// <unmanaged-short>pixelSize</unmanaged-short>
        public DXNET.Size2 PixelSize;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>presentOptions</unmanaged>
        /// <unmanaged-short>presentOptions</unmanaged-short>
        public DXNET.Direct2D1.PresentOptions PresentOptions;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_IMAGE_BRUSH_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_IMAGE_BRUSH_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct ImageBrushProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>sourceRectangle</unmanaged>
        /// <unmanaged-short>sourceRectangle</unmanaged-short>
        public DXNET.Mathematics.Interop.RawRectangleF SourceRectangle;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>extendModeX</unmanaged>
        /// <unmanaged-short>extendModeX</unmanaged-short>
        public DXNET.Direct2D1.ExtendMode ExtendModeX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>extendModeY</unmanaged>
        /// <unmanaged-short>extendModeY</unmanaged-short>
        public DXNET.Direct2D1.ExtendMode ExtendModeY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>interpolationMode</unmanaged>
        /// <unmanaged-short>interpolationMode</unmanaged-short>
        public DXNET.Direct2D1.InterpolationMode InterpolationMode;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_INK_BEZIER_SEGMENT</unmanaged>
    /// <unmanaged-short>D2D1_INK_BEZIER_SEGMENT</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct InkBezierSegment
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point1</unmanaged>
        /// <unmanaged-short>point1</unmanaged-short>
        public DXNET.Direct2D1.InkPoint Point1;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point2</unmanaged>
        /// <unmanaged-short>point2</unmanaged-short>
        public DXNET.Direct2D1.InkPoint Point2;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point3</unmanaged>
        /// <unmanaged-short>point3</unmanaged-short>
        public DXNET.Direct2D1.InkPoint Point3;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_INK_POINT</unmanaged>
    /// <unmanaged-short>D2D1_INK_POINT</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct InkPoint
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>x</unmanaged>
        /// <unmanaged-short>x</unmanaged-short>
        public System.Single X;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>y</unmanaged>
        /// <unmanaged-short>y</unmanaged-short>
        public System.Single Y;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>radius</unmanaged>
        /// <unmanaged-short>radius</unmanaged-short>
        public System.Single Radius;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_INK_STYLE_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_INK_STYLE_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct InkStyleProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nibShape</unmanaged>
        /// <unmanaged-short>nibShape</unmanaged-short>
        public DXNET.Direct2D1.InkNibShape NibShape;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>nibTransform</unmanaged>
        /// <unmanaged-short>nibTransform</unmanaged-short>
        public DXNET.Mathematics.Interop.RawMatrix3x2 NibTransform;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_INPUT_DESCRIPTION</unmanaged>
    /// <unmanaged-short>D2D1_INPUT_DESCRIPTION</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct InputDescription
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>filter</unmanaged>
        /// <unmanaged-short>filter</unmanaged-short>
        public DXNET.Direct2D1.Filter Filter;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>levelOfDetailCount</unmanaged>
        /// <unmanaged-short>levelOfDetailCount</unmanaged-short>
        public System.Int32 LevelOfDetailCount;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_INPUT_ELEMENT_DESC</unmanaged>
    /// <unmanaged-short>D2D1_INPUT_ELEMENT_DESC</unmanaged-short>
    public partial struct InputElement
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>semanticName</unmanaged>
        /// <unmanaged-short>semanticName</unmanaged-short>
        public System.String SemanticName;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>semanticIndex</unmanaged>
        /// <unmanaged-short>semanticIndex</unmanaged-short>
        public System.Int32 SemanticIndex;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>format</unmanaged>
        /// <unmanaged-short>format</unmanaged-short>
        public DXNET.DXGI.Format Format;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>inputSlot</unmanaged>
        /// <unmanaged-short>inputSlot</unmanaged-short>
        public System.Int32 Slot;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>alignedByteOffset</unmanaged>
        /// <unmanaged-short>alignedByteOffset</unmanaged-short>
        public System.Int32 AlignedByteOffset;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.IntPtr SemanticName;
            public System.Int32 SemanticIndex;
            public DXNET.DXGI.Format Format;
            public System.Int32 Slot;
            public System.Int32 AlignedByteOffset;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            System.Runtime.InteropServices.Marshal.FreeHGlobal(@ref.SemanticName);
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            SemanticName = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(@ref.SemanticName);
            SemanticIndex = @ref.SemanticIndex;
            Format = @ref.Format;
            Slot = @ref.Slot;
            AlignedByteOffset = @ref.AlignedByteOffset;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.SemanticName = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(SemanticName);
            @ref.SemanticIndex = SemanticIndex;
            @ref.Format = Format;
            @ref.Slot = Slot;
            @ref.AlignedByteOffset = AlignedByteOffset;
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_LAYER_PARAMETERS</unmanaged>
    /// <unmanaged-short>D2D1_LAYER_PARAMETERS</unmanaged-short>
    public partial struct LayerParameters
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>contentBounds</unmanaged>
        /// <unmanaged-short>contentBounds</unmanaged-short>
        public DXNET.Mathematics.Interop.RawRectangleF ContentBounds;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>geometricMask</unmanaged>
        /// <unmanaged-short>geometricMask</unmanaged-short>
        public DXNET.Direct2D1.Geometry GeometricMask;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>maskAntialiasMode</unmanaged>
        /// <unmanaged-short>maskAntialiasMode</unmanaged-short>
        public DXNET.Direct2D1.AntialiasMode MaskAntialiasMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>maskTransform</unmanaged>
        /// <unmanaged-short>maskTransform</unmanaged-short>
        public DXNET.Mathematics.Interop.RawMatrix3x2 MaskTransform;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>opacity</unmanaged>
        /// <unmanaged-short>opacity</unmanaged-short>
        public System.Single Opacity;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>opacityBrush</unmanaged>
        /// <unmanaged-short>opacityBrush</unmanaged-short>
        public DXNET.Direct2D1.Brush OpacityBrush;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>layerOptions</unmanaged>
        /// <unmanaged-short>layerOptions</unmanaged-short>
        public DXNET.Direct2D1.LayerOptions LayerOptions;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public DXNET.Mathematics.Interop.RawRectangleF ContentBounds;
            public System.IntPtr GeometricMask;
            public DXNET.Direct2D1.AntialiasMode MaskAntialiasMode;
            public DXNET.Mathematics.Interop.RawMatrix3x2 MaskTransform;
            public System.Single Opacity;
            public System.IntPtr OpacityBrush;
            public DXNET.Direct2D1.LayerOptions LayerOptions;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            ContentBounds = @ref.ContentBounds;
            if (@ref.GeometricMask != System.IntPtr.Zero)
                GeometricMask = new DXNET.Direct2D1.Geometry(@ref.GeometricMask);
            else
                GeometricMask = null;
            MaskAntialiasMode = @ref.MaskAntialiasMode;
            MaskTransform = @ref.MaskTransform;
            Opacity = @ref.Opacity;
            if (@ref.OpacityBrush != System.IntPtr.Zero)
                OpacityBrush = new DXNET.Direct2D1.Brush(@ref.OpacityBrush);
            else
                OpacityBrush = null;
            LayerOptions = @ref.LayerOptions;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.ContentBounds = ContentBounds;
            @ref.GeometricMask = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Geometry>(GeometricMask);
            @ref.MaskAntialiasMode = MaskAntialiasMode;
            @ref.MaskTransform = MaskTransform;
            @ref.Opacity = Opacity;
            @ref.OpacityBrush = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(OpacityBrush);
            @ref.LayerOptions = LayerOptions;
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_LAYER_PARAMETERS1</unmanaged>
    /// <unmanaged-short>D2D1_LAYER_PARAMETERS1</unmanaged-short>
    public partial struct LayerParameters1
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>contentBounds</unmanaged>
        /// <unmanaged-short>contentBounds</unmanaged-short>
        public DXNET.Mathematics.Interop.RawRectangleF ContentBounds;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>geometricMask</unmanaged>
        /// <unmanaged-short>geometricMask</unmanaged-short>
        public DXNET.Direct2D1.Geometry GeometricMask;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>maskAntialiasMode</unmanaged>
        /// <unmanaged-short>maskAntialiasMode</unmanaged-short>
        public DXNET.Direct2D1.AntialiasMode MaskAntialiasMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>maskTransform</unmanaged>
        /// <unmanaged-short>maskTransform</unmanaged-short>
        public DXNET.Mathematics.Interop.RawMatrix3x2 MaskTransform;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>opacity</unmanaged>
        /// <unmanaged-short>opacity</unmanaged-short>
        public System.Single Opacity;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>opacityBrush</unmanaged>
        /// <unmanaged-short>opacityBrush</unmanaged-short>
        public DXNET.Direct2D1.Brush OpacityBrush;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>layerOptions</unmanaged>
        /// <unmanaged-short>layerOptions</unmanaged-short>
        public DXNET.Direct2D1.LayerOptions1 LayerOptions;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public DXNET.Mathematics.Interop.RawRectangleF ContentBounds;
            public System.IntPtr GeometricMask;
            public DXNET.Direct2D1.AntialiasMode MaskAntialiasMode;
            public DXNET.Mathematics.Interop.RawMatrix3x2 MaskTransform;
            public System.Single Opacity;
            public System.IntPtr OpacityBrush;
            public DXNET.Direct2D1.LayerOptions1 LayerOptions;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            ContentBounds = @ref.ContentBounds;
            if (@ref.GeometricMask != System.IntPtr.Zero)
                GeometricMask = new DXNET.Direct2D1.Geometry(@ref.GeometricMask);
            else
                GeometricMask = null;
            MaskAntialiasMode = @ref.MaskAntialiasMode;
            MaskTransform = @ref.MaskTransform;
            Opacity = @ref.Opacity;
            if (@ref.OpacityBrush != System.IntPtr.Zero)
                OpacityBrush = new DXNET.Direct2D1.Brush(@ref.OpacityBrush);
            else
                OpacityBrush = null;
            LayerOptions = @ref.LayerOptions;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.ContentBounds = ContentBounds;
            @ref.GeometricMask = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Geometry>(GeometricMask);
            @ref.MaskAntialiasMode = MaskAntialiasMode;
            @ref.MaskTransform = MaskTransform;
            @ref.Opacity = Opacity;
            @ref.OpacityBrush = DXNET.CppObject.ToCallbackPtr<DXNET.Direct2D1.Brush>(OpacityBrush);
            @ref.LayerOptions = LayerOptions;
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct LinearGradientBrushProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>startPoint</unmanaged>
        /// <unmanaged-short>startPoint</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 StartPoint;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>endPoint</unmanaged>
        /// <unmanaged-short>endPoint</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 EndPoint;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_MAPPED_RECT</unmanaged>
    /// <unmanaged-short>D2D1_MAPPED_RECT</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    internal partial struct MappedRectangle
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pitch</unmanaged>
        /// <unmanaged-short>pitch</unmanaged-short>
        public System.Int32 Pitch;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>bits</unmanaged>
        /// <unmanaged-short>bits</unmanaged-short>
        public System.IntPtr Bits;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_PIXEL_FORMAT</unmanaged>
    /// <unmanaged-short>D2D1_PIXEL_FORMAT</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct PixelFormat
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>format</unmanaged>
        /// <unmanaged-short>format</unmanaged-short>
        public DXNET.DXGI.Format Format;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>alphaMode</unmanaged>
        /// <unmanaged-short>alphaMode</unmanaged-short>
        public DXNET.Direct2D1.AlphaMode AlphaMode;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_POINT_DESCRIPTION</unmanaged>
    /// <unmanaged-short>D2D1_POINT_DESCRIPTION</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct PointDescription
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point</unmanaged>
        /// <unmanaged-short>point</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>unitTangentVector</unmanaged>
        /// <unmanaged-short>unitTangentVector</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 UnitTangentVector;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>endSegment</unmanaged>
        /// <unmanaged-short>endSegment</unmanaged-short>
        public System.Int32 EndSegment;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>endFigure</unmanaged>
        /// <unmanaged-short>endFigure</unmanaged-short>
        public System.Int32 EndFigure;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lengthToEndSegment</unmanaged>
        /// <unmanaged-short>lengthToEndSegment</unmanaged-short>
        public System.Single LengthToEndSegment;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_PRINT_CONTROL_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_PRINT_CONTROL_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct PrintControlProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>fontSubset</unmanaged>
        /// <unmanaged-short>fontSubset</unmanaged-short>
        public DXNET.Direct2D1.PrintFontSubsetMode FontSubset;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>rasterDPI</unmanaged>
        /// <unmanaged-short>rasterDPI</unmanaged-short>
        public System.Single RasterDPI;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>colorSpace</unmanaged>
        /// <unmanaged-short>colorSpace</unmanaged-short>
        public DXNET.Direct2D1.ColorSpace ColorSpace;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_PROPERTY_BINDING</unmanaged>
    /// <unmanaged-short>D2D1_PROPERTY_BINDING</unmanaged-short>
    internal partial class PropertyBinding
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>propertyName</unmanaged>
        /// <unmanaged-short>propertyName</unmanaged-short>
        public System.String PropertyName;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>setFunction</unmanaged>
        /// <unmanaged-short>setFunction</unmanaged-short>
        internal System.IntPtr SetFunction;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>getFunction</unmanaged>
        /// <unmanaged-short>getFunction</unmanaged-short>
        internal System.IntPtr GetFunction;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.IntPtr PropertyName;
            public System.IntPtr SetFunction;
            public System.IntPtr GetFunction;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            System.Runtime.InteropServices.Marshal.FreeHGlobal(@ref.PropertyName);
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            PropertyName = System.Runtime.InteropServices.Marshal.PtrToStringUni(@ref.PropertyName);
            SetFunction = @ref.SetFunction;
            GetFunction = @ref.GetFunction;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.PropertyName = System.Runtime.InteropServices.Marshal.StringToHGlobalUni(PropertyName);
            @ref.SetFunction = SetFunction;
            @ref.GetFunction = GetFunction;
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_QUADRATIC_BEZIER_SEGMENT</unmanaged>
    /// <unmanaged-short>D2D1_QUADRATIC_BEZIER_SEGMENT</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct QuadraticBezierSegment
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point1</unmanaged>
        /// <unmanaged-short>point1</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point1;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point2</unmanaged>
        /// <unmanaged-short>point2</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point2;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct RadialGradientBrushProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>center</unmanaged>
        /// <unmanaged-short>center</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Center;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>gradientOriginOffset</unmanaged>
        /// <unmanaged-short>gradientOriginOffset</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 GradientOriginOffset;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>radiusX</unmanaged>
        /// <unmanaged-short>radiusX</unmanaged-short>
        public System.Single RadiusX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>radiusY</unmanaged>
        /// <unmanaged-short>radiusY</unmanaged-short>
        public System.Single RadiusY;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_RENDERING_CONTROLS</unmanaged>
    /// <unmanaged-short>D2D1_RENDERING_CONTROLS</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct RenderingControls
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>bufferPrecision</unmanaged>
        /// <unmanaged-short>bufferPrecision</unmanaged-short>
        public DXNET.Direct2D1.BufferPrecision BufferPrecision;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>tileSize</unmanaged>
        /// <unmanaged-short>tileSize</unmanaged-short>
        public DXNET.Size2 TileSize;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_RENDER_TARGET_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_RENDER_TARGET_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct RenderTargetProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>type</unmanaged>
        /// <unmanaged-short>type</unmanaged-short>
        public DXNET.Direct2D1.RenderTargetType Type;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>pixelFormat</unmanaged>
        /// <unmanaged-short>pixelFormat</unmanaged-short>
        public DXNET.Direct2D1.PixelFormat PixelFormat;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>dpiX</unmanaged>
        /// <unmanaged-short>dpiX</unmanaged-short>
        public System.Single DpiX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>dpiY</unmanaged>
        /// <unmanaged-short>dpiY</unmanaged-short>
        public System.Single DpiY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>usage</unmanaged>
        /// <unmanaged-short>usage</unmanaged-short>
        public DXNET.Direct2D1.RenderTargetUsage Usage;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>minLevel</unmanaged>
        /// <unmanaged-short>minLevel</unmanaged-short>
        public DXNET.Direct2D1.FeatureLevel MinLevel;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_RESOURCE_TEXTURE_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_RESOURCE_TEXTURE_PROPERTIES</unmanaged-short>
    public partial class ResourceTextureProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>extents</unmanaged>
        /// <unmanaged-short>extents</unmanaged-short>
        internal System.IntPtr ExtentsPointer;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>dimensions</unmanaged>
        /// <unmanaged-short>dimensions</unmanaged-short>
        public System.Int32 Dimensions;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>bufferPrecision</unmanaged>
        /// <unmanaged-short>bufferPrecision</unmanaged-short>
        public DXNET.Direct2D1.BufferPrecision BufferPrecision;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>channelDepth</unmanaged>
        /// <unmanaged-short>channelDepth</unmanaged-short>
        public DXNET.Direct2D1.ChannelDepth ChannelDepth;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>filter</unmanaged>
        /// <unmanaged-short>filter</unmanaged-short>
        public DXNET.Direct2D1.Filter Filter;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>extendModes</unmanaged>
        /// <unmanaged-short>extendModes</unmanaged-short>
        internal System.IntPtr ExtendModesPointer;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.IntPtr ExtentsPointer;
            public System.Int32 Dimensions;
            public DXNET.Direct2D1.BufferPrecision BufferPrecision;
            public DXNET.Direct2D1.ChannelDepth ChannelDepth;
            public DXNET.Direct2D1.Filter Filter;
            public System.IntPtr ExtendModesPointer;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            ExtentsPointer = @ref.ExtentsPointer;
            Dimensions = @ref.Dimensions;
            BufferPrecision = @ref.BufferPrecision;
            ChannelDepth = @ref.ChannelDepth;
            Filter = @ref.Filter;
            ExtendModesPointer = @ref.ExtendModesPointer;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.ExtentsPointer = ExtentsPointer;
            @ref.Dimensions = Dimensions;
            @ref.BufferPrecision = BufferPrecision;
            @ref.ChannelDepth = ChannelDepth;
            @ref.Filter = Filter;
            @ref.ExtendModesPointer = ExtendModesPointer;
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_ROUNDED_RECT</unmanaged>
    /// <unmanaged-short>D2D1_ROUNDED_RECT</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct RoundedRectangle
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>rect</unmanaged>
        /// <unmanaged-short>rect</unmanaged-short>
        public DXNET.Mathematics.Interop.RawRectangleF Rect;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>radiusX</unmanaged>
        /// <unmanaged-short>radiusX</unmanaged-short>
        public System.Single RadiusX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>radiusY</unmanaged>
        /// <unmanaged-short>radiusY</unmanaged-short>
        public System.Single RadiusY;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SIMPLE_COLOR_PROFILE</unmanaged>
    /// <unmanaged-short>D2D1_SIMPLE_COLOR_PROFILE</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct SimpleColorProfile
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>redPrimary</unmanaged>
        /// <unmanaged-short>redPrimary</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 RedPrimary;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>greenPrimary</unmanaged>
        /// <unmanaged-short>greenPrimary</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 GreenPrimary;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>bluePrimary</unmanaged>
        /// <unmanaged-short>bluePrimary</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 BluePrimary;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>whitePointXZ</unmanaged>
        /// <unmanaged-short>whitePointXZ</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 WhitePointXZ;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>gamma</unmanaged>
        /// <unmanaged-short>gamma</unmanaged-short>
        public DXNET.Direct2D1.Gamma1 Gamma;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_STROKE_STYLE_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_STROKE_STYLE_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct StrokeStyleProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>startCap</unmanaged>
        /// <unmanaged-short>startCap</unmanaged-short>
        public DXNET.Direct2D1.CapStyle StartCap;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>endCap</unmanaged>
        /// <unmanaged-short>endCap</unmanaged-short>
        public DXNET.Direct2D1.CapStyle EndCap;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>dashCap</unmanaged>
        /// <unmanaged-short>dashCap</unmanaged-short>
        public DXNET.Direct2D1.CapStyle DashCap;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lineJoin</unmanaged>
        /// <unmanaged-short>lineJoin</unmanaged-short>
        public DXNET.Direct2D1.LineJoin LineJoin;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>miterLimit</unmanaged>
        /// <unmanaged-short>miterLimit</unmanaged-short>
        public System.Single MiterLimit;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>dashStyle</unmanaged>
        /// <unmanaged-short>dashStyle</unmanaged-short>
        public DXNET.Direct2D1.DashStyle DashStyle;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>dashOffset</unmanaged>
        /// <unmanaged-short>dashOffset</unmanaged-short>
        public System.Single DashOffset;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_STROKE_STYLE_PROPERTIES1</unmanaged>
    /// <unmanaged-short>D2D1_STROKE_STYLE_PROPERTIES1</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct StrokeStyleProperties1
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>startCap</unmanaged>
        /// <unmanaged-short>startCap</unmanaged-short>
        public DXNET.Direct2D1.CapStyle StartCap;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>endCap</unmanaged>
        /// <unmanaged-short>endCap</unmanaged-short>
        public DXNET.Direct2D1.CapStyle EndCap;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>dashCap</unmanaged>
        /// <unmanaged-short>dashCap</unmanaged-short>
        public DXNET.Direct2D1.CapStyle DashCap;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>lineJoin</unmanaged>
        /// <unmanaged-short>lineJoin</unmanaged-short>
        public DXNET.Direct2D1.LineJoin LineJoin;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>miterLimit</unmanaged>
        /// <unmanaged-short>miterLimit</unmanaged-short>
        public System.Single MiterLimit;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>dashStyle</unmanaged>
        /// <unmanaged-short>dashStyle</unmanaged-short>
        public DXNET.Direct2D1.DashStyle DashStyle;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>dashOffset</unmanaged>
        /// <unmanaged-short>dashOffset</unmanaged-short>
        public System.Single DashOffset;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>transformType</unmanaged>
        /// <unmanaged-short>transformType</unmanaged-short>
        public DXNET.Direct2D1.StrokeTransformType TransformType;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_LENGTH</unmanaged>
    /// <unmanaged-short>D2D1_SVG_LENGTH</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct SvgLength
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>value</unmanaged>
        /// <unmanaged-short>value</unmanaged-short>
        public System.Single Value;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>units</unmanaged>
        /// <unmanaged-short>units</unmanaged-short>
        public DXNET.Direct2D1.SvgLengthUnits Units;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_PRESERVE_ASPECT_RATIO</unmanaged>
    /// <unmanaged-short>D2D1_SVG_PRESERVE_ASPECT_RATIO</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct SvgPreserveAspectRatio
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>defer</unmanaged>
        /// <unmanaged-short>defer</unmanaged-short>
        public DXNET.Mathematics.Interop.RawBool Defer;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>align</unmanaged>
        /// <unmanaged-short>align</unmanaged-short>
        public DXNET.Direct2D1.SvgAspectAlign Align;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>meetOrSlice</unmanaged>
        /// <unmanaged-short>meetOrSlice</unmanaged-short>
        public DXNET.Direct2D1.SvgAspectScaling MeetOrSlice;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_SVG_VIEWBOX</unmanaged>
    /// <unmanaged-short>D2D1_SVG_VIEWBOX</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct SvgViewBox
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>x</unmanaged>
        /// <unmanaged-short>x</unmanaged-short>
        public System.Single X;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>y</unmanaged>
        /// <unmanaged-short>y</unmanaged-short>
        public System.Single Y;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>width</unmanaged>
        /// <unmanaged-short>width</unmanaged-short>
        public System.Single Width;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>height</unmanaged>
        /// <unmanaged-short>height</unmanaged-short>
        public System.Single Height;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct TransformedImageSourceProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>orientation</unmanaged>
        /// <unmanaged-short>orientation</unmanaged-short>
        public DXNET.Direct2D1.Orientation Orientation;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>scaleX</unmanaged>
        /// <unmanaged-short>scaleX</unmanaged-short>
        public System.Single ScaleX;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>scaleY</unmanaged>
        /// <unmanaged-short>scaleY</unmanaged-short>
        public System.Single ScaleY;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>interpolationMode</unmanaged>
        /// <unmanaged-short>interpolationMode</unmanaged-short>
        public DXNET.Direct2D1.InterpolationMode InterpolationMode;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>options</unmanaged>
        /// <unmanaged-short>options</unmanaged-short>
        public DXNET.Direct2D1.TransformedImageSourceOptions Options;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_TRIANGLE</unmanaged>
    /// <unmanaged-short>D2D1_TRIANGLE</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct Triangle
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point1</unmanaged>
        /// <unmanaged-short>point1</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point1;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point2</unmanaged>
        /// <unmanaged-short>point2</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point2;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>point3</unmanaged>
        /// <unmanaged-short>point3</unmanaged-short>
        public DXNET.Mathematics.Interop.RawVector2 Point3;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_VERTEX_BUFFER_PROPERTIES</unmanaged>
    /// <unmanaged-short>D2D1_VERTEX_BUFFER_PROPERTIES</unmanaged-short>
    public partial class VertexBufferProperties
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>inputCount</unmanaged>
        /// <unmanaged-short>inputCount</unmanaged-short>
        public System.Int32 InputCount;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>usage</unmanaged>
        /// <unmanaged-short>usage</unmanaged-short>
        public DXNET.Direct2D1.VertexUsage Usage;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>data</unmanaged>
        /// <unmanaged-short>data</unmanaged-short>
        internal System.IntPtr DataPointer;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>byteWidth</unmanaged>
        /// <unmanaged-short>byteWidth</unmanaged-short>
        internal System.Int32 SizeInBytes;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.Int32 InputCount;
            public DXNET.Direct2D1.VertexUsage Usage;
            public System.IntPtr DataPointer;
            public System.Int32 SizeInBytes;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            InputCount = @ref.InputCount;
            Usage = @ref.Usage;
            DataPointer = @ref.DataPointer;
            SizeInBytes = @ref.SizeInBytes;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.InputCount = InputCount;
            @ref.Usage = Usage;
            @ref.DataPointer = DataPointer;
            @ref.SizeInBytes = SizeInBytes;
        }
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D2D1_VERTEX_RANGE</unmanaged>
    /// <unmanaged-short>D2D1_VERTEX_RANGE</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    public partial struct VertexRange
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>startVertex</unmanaged>
        /// <unmanaged-short>startVertex</unmanaged-short>
        public System.Int32 StartVertex;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>vertexCount</unmanaged>
        /// <unmanaged-short>vertexCount</unmanaged-short>
        public System.Int32 VertexCount;
    }
}